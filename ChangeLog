2018-02-15  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Makefile fix so that the old adlapi2simapi code is not
	distributed in an external release tarball.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.17.2 (v3_17_2) on Linux (lc2294-tx30) on 2/13/2018 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.17.2 (v3_17_2) on Linux (lc2320-tx30) on 2/13/2018 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.17.2 (v3_17_2) on Linux (lc2294-tx30) on 2/13/2018 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.17.2 (v3_17_2) on Linux (lc2320-tx30) on 2/13/2018 ==

2018-02-12  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	** A new option for adl2asm has been added: <b>--keep-ws</b>.
	This allows the user to explicitly preserve whitespace in syntax
	strings.  In most cases, whitespace is squashed, in order to mimic
	what the GNU assembler's front-end does when preprocessing
	assembly input lines.  In some cases, however, whitespace has to
	be preserved in order to act as a separator in complex syntax
	strings.

	* For the above, I extended mod110.adl and added asm122.s to test.

	* Added a set_machine function in objdump.c to explicitly set the
	default machine type.

	* We had a problem with GenAsm::SortBySpecificity, where the
	comparison wasn't strict weak, so it was possible for the sort to
	segfault when the insertion sort portion walked off the end of the
	vector.  I fixed this, then added mod110.adl to test.  That's
	basically just a copy of the original SPT model that caused the
	problem; it's really difficult to narrow it down to a single
	issue.  For now, I'm just building the assembler for mod110.adl to
	make sure that we don't encounter the segfault.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.17.1 (v3_17_1) on Linux (lc2320-tx30) on 1/30/2018 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.17.1 (v3_17_1) on Linux (lc2294-tx30) on 1/30/2018 ==

2018-01-30  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	** Windows build-environment scripts are now distributed in the
	release tarball.

	** A new command-line option for <b>adl2iss</b> has been added,
	<b>--cpp-cmd=cmd</b>.  This enables the user to inject a C
	preprocessor directive, such as an include directive, into the
	generated ISS C++ file.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a>

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.17.0 (v3_17_0) on Linux (lc2294-tx30) on 1/24/2018 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.17.0 (v3_17_0) on Linux (lc2320-tx30) on 1/24/2018 ==

2018-01-24  Brian Kahne  <bkahne@adl-ubuntu>

	* Added scripts/ubuntu-test to test ADL on Ubuntu.

	* Fixed a build issue- we weren't including 'iss' in the build
	directory, so the parsing library wasn't finding uvppparser.hh if
	it was built in a different directory from the source directory,
	after doing a make distclean.

	* Fixed another build issue on Ubuntu: When building the assembler
	extension library tc-mod101, it wouldn't find bfd.h because it was
	generated in the build directory, not in the source directory, if
	we built in a different directory.  This worked on CDE only
	because gcc includes binutils, and thus the build was finding the
	system bfd.h, rather than ADL's version.

2018-01-24  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	** ADL has been updated to support Microsoft Visual Studio 2013.
	The project files included with the ADL distribution have been
	updated to this newer version of the compiler and the README has
	up-to-date instructions on how to build everything.


       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.26 (v3_16_26) on Linux (lc2320-tx30) on 1/23/2018 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.26 (v3_16_26) on Linux (lc2294-tx30) on 1/23/2018 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.26 (v3_16_26) on Linux (lc2320-tx30) on 1/23/2018 ==

2018-01-23  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* Note:  When running "make distcheck", if an error is reported in
	the bfd directory, it's due to a missing libtool-soversion file.
	This is generated by the bfdver.h make step.  Unfortunately, it
	can get sucked in by "make dist", so that it exists in the source,
	but the Makefile has a bug, where it expects it to be in the build
	directory location.  This should eventually be fixed, but the GNU
	makefiles are awful.  The easiest fix is to just delete
	bfd/bfdver.h before running "make distcheck" so that it will be
	regenerated.

	* For aliases with modifier functions, we weren't catching the
	situation where the user had a complex expression containing a
	symbol.  Normally, that would result in an error, but in this
	case, it slipped through and just produced a zero.

	I now catch those situations in process_operands so that we
	immediately flag an error. I also treat expressions, in the
	modifier case, in manner more analogous to the non-modifier case.
	I added asm121.s with as-mod101 to test.

2018-01-22  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* It looks like gcc 5.4.0 is built such that it requires a newer
	version of binutils than what is present on RHEL6, but it's not
	built in such a way that its path to ld is hardcoded. So, if you
	don't have the path to gcc in your PATH, you can get errors from
	ld and as, because the system versions will be invoked.

	I fixed this by adding gcc's path to the PATH when invoking gcc in
	adl2iss and adl2asm.  I modified test-build to run adl2asm with a
	barebones PATH in order to test this.

2018-01-19  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* I added BOOST_CPPFLAGS to the global CXXFLAGS, since we now use
	Boost all over the place.  This fixes an issue when Boost isn't in
	a standard location and the user specifies --with-boost to
	configure.

2018-01-11  Brian Kahne  <bkahne@lc2632-tx30.am.freescale.net>

	* iss/GdbServer.C (adl): We seemed to have a problem with our
	handling of vCont in the gdb server.  If gdb sends a vCont;s:1
	command, e.g. step a particular thread, then it considers that
	thread to now be the new current thread for querying things like
	registers, ignoring prior Hg commands.  We still referred to the
	prior Hg command, so gdb would get very confused, especially when
	used in emacs, where emacs queries all thread states behind the
	scenes.

	I modified handleVContCommand so that if we just do a step via
	vCont then we make that the new current thread.  Added
	gdbtest18.gdb to test this behavior.

2018-01-08  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* tests/iss/corotest.C (F): Minor changes so that corotest works
	with Boost 1.54 and Boost 1.58.  Apparently, Boost 1.58 uses
	features not in gcc 4.85, so we can't use Boost 1.58 while also
	supporting this older compiler.  We've basically moved away from
	4.8.5, but I don't want to completely end support just yet.

2018-01-05  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* scripts/make-oss-release: Updated this script to Python.  You
	can now run this on an arbitrary queue machine; it will use ssh to
	invoke itself on adl-atx in order to transmit to the external
	server.  This is now necessary, since adl-atx is RHEL5 and not all
	libraries are installed for RHEL5, now that we're moving to GCC
	5.4.0.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.25 (v3_16_25) on Linux (lc2749-tx30) on 1/5/2018 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.25 (v3_16_25) on Linux (lc2749-tx30) on 1/5/2018 ==

2018-01-05  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* iss/ModelSupport.C (adl): BlockMemory wasn't clearing its memory
	in the constructor, so it was possible for garbage to be present
	which could affect various programs.  For example, this could
	sometimes produce bad results for scripts/dtest3 if there was
	garbage that caused the disassembler to continue past the expected
	end of the program.

	* Various fixes for uninitialized variables that GCC 5.4.0 now
	warns about.

2017-12-13  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* config/obj-elf.c (elf_frob_symbol): Modified handling of
	constants in the .size statement.  Apparently, how we handled it
	was not correct, since we were still doing a symbol lookup.  We
	should have ignored that symbol lookup and just used the constant.
	I can't really reproduce this error, but it apparently affects the
	compiler team's VSPA assembler code.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.23 (v3_16_23) on Linux (lc2322-tx30) on 11/10/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.23 (v3_16_23) on Linux (lc2750-tx30) on 11/10/2017 ==

2017-11-10  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* scripts/adl-config.in (bprefix): Fixed a bug with bprefix.
	We're not exporting that anymore from configure.  Instead, now it
	defaults to a path based upon prefix.

	== file:///proj/.ppc_43/vc_noec/git/adl release 3.16.22 (v3_16_22) on Linux (lc2322-tx30) on 11/10/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.22 (v3_16_22) on Linux (lc2750-tx30) on 11/10/2017 ==

2017-11-10  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed a bug with empty expressions.  The bad_expression code was
	not correctly terminating the strings it was looking at, so we
	could reject an empty expression due to the fact that it contained
	a register name.  This only triggers if it finds a '+' in the
	expression, so that's why our existing regressions didn't catch
	it.  Modified mod104.adl/asm119.s to test this fix.

2017-11-06  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** Tracking of register ranges within loops, inside of instruction
	action code, has been improved so that we can better determine
	when a range of acesses is fixed, but where the bounds are
	constants and/or instruction fields.

	* Added fe/reg49.adl to test the above.  I now evaluate for
	constant expressions and try and do better tracking of variable
	usage in order to improve the results, though it's all still a bit
	of a hack.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.21 (v3_16_21) on Linux (lc2322-tx30) on 10/27/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.21 (v3_16_21) on Linux (lc2750-tx30) on 10/27/2017 ==

2017-10-27  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* helpers/sintbv.h (adl): The showpos printing of sintbv still
	wasn't correct b/c the default C++ printing of unsigned ints does
	not obey the showpos character.  Fixed this and tightened up
	mod101/in334.dat to test that this really works.

	** The handling of signed_dec instruction fields in the assembler
	has been loosened so that expressions and hexadecimal numbers may
	be used, in addition to simple decimal values.

2017-10-25  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed a bug with signed_dec instruction fields.  First, the
	disassembly in the trace was not correct because sintbv types
	weren't handling the showpos manipulator properly.  Second, we
	weren't clearing the showpos flag, so it could leak out and affect
	printing of final results in the trace.  That's now fixed.  I
	added additional checking on mod101/in334.dat to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.20 (v3_16_20) on Linux (lc2322-tx30) on 10/24/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.20 (v3_16_20) on Linux (lc2750-tx30) on 10/24/2017 ==

2017-10-24  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** New methods have been added to the InstrArg class, which is
	used for instruction arguments in <b>alias_action</b> functions.
	It is now possible to query for the presence of, and retrieve, a
	relocation, as well as set the addend associated with a
	relocation.

	* Added mod109.adl / asm120.s to test the above features.

2017-10-23  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Applied patch from Marcel Achim fixing assembler enum handling
	crash and std C++ compile issue.

	* asm/GenAsm.C (adl): Fixed issue with default values and
	aliases. The main issue was that we weren't properly setting up
	the adl_operand object to point to the proper adl_field item, in
	order to get the default value.  The problem would occur for
	little-endian designs and pseudo-fields due to mapping from an
	adl_operand to an instruction field.  I fixed the issue by
	inserting elements for pseudo fields (these just don't have
	pointers to setter/getter functions) and by adding in an item in
	the field_indices array to map from the generic name to the first
	instance (if we have width suffixes).  Added aliases to mod101.adl
	and mod104.adl, with asm119.s, to test.

	* Fixed problem with missing operands and proper initialization.
	Fixed this so that we'd report the missing-operand error, but then
	continue and not end up with uninitialized data which could screw
	up later passes.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.19 (v3_16_19) on Linux (lc2322-tx30) on 10/19/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.19 (v3_16_19) on Linux (lc2750-tx30) on 10/19/2017 ==

2017-10-19  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* If a signed-decimal field is not the last field in a syntax
	string, then the optional-value feature is not working.  In
	addition, it looks like default values other than 0 are not
	working either.

	The problem was that I was using the optional-match operator ('?')
	and the regular expression parser simply passes other those, so I
	ended up with fewer matches if a value was optional.  This
	appeared to work if the field was at the end, though since we
	simply cleared the expressions, it really only worked if the
	default value happened to be 0.

	Now, I use an empty alternation, e.g. the '|' operator in a group,
	so that I get an empty string and can then see if that correlates
	to a field with a default value.  I also look for the trailing
	case, to see if I need to set default values because I had fewer
	arguments than necessary.

	Added asm118.s with mod101.adl to test.

2017-10-18  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed a bug regarding signed_dec.  The C++ code generated for a
	model was bad and led to a compilation error.  Fixed this by
	adding a signed_dec field to mod101 and testing with in334.dat.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.18 (v3_16_18) on Linux (lc2322-tx30) on 10/16/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.18 (v3_16_18) on Linux (lc2750-tx30) on 10/16/2017 ==

2017-10-13  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Minor fixes for configuring with TCL 8.4 and fixed bprefix issue
	with adl2asm when no prefix was specified via configure.

	** Regular expression matching in the assembler for signed-decimal
	instruction fields has been tightened up, in order to require a
	leading + or - and to only accept decimal characters.  This helps
	to avoid ambiguities when such a field is adjacent to another
	field, such as an enumeration.

	In addition, if a default value is specified for the field via the
	<b>value</b> key, then the field becomes optional and may be
	ommitted.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.17 (v3_16_17) on Linux (lc2322-tx30) on 10/10/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.17 (v3_16_17) on Linux (lc2750-tx30) on 10/10/2017 ==

2017-10-09  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** A new instruction-field display type has been added:
	<b>signed_dec</b>.  This displays a field as a decimal value, but
	always adds a leading + or - to the value.  This is useful for
	syntax strings where the number is being used to adjust a
	register, e.g. <i>foo [sp+60]</i>.  In this example, the syntax
	string would be written as <i>%i [sp%f]</i>.  A value such as +60
	or -60 would be parsed as a number and always displayed as either
	"+60" or "-60".

2017-10-04  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed a bug with the pre_fetch hook. For the interpreter, the
	pre_fetch hook executed after the CIA was updated, whereas it
	occurred before that in the decode-cache model.  This meant that
	you could get subtle differences in behavior, e.g. if you had a
	decrementer exception triggered in that hook.  I fixed this and
	added mod23/in333.dat to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.16 (v3_16_16) on Linux (lc2322-tx30) on 9/27/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.16 (v3_16_16) on Linux (lc2750-tx30) on 9/27/2017 ==

2017-09-27  Brian Kahne  <bkahne@lc2294-tx30.am.freescale.net>

	* Fixed a bug with label adjustments, using adjustCurLabel, if
	there is more than one label on a line.  We just had a pointer to
	a label item; replaced this with a vector.  Added asm117.s with
	mod101 to test.

2017-09-22  Brian Kahne  <bkahne@lc2360-tx30.am.freescale.net>

	* Fixed an issue with setting fields by name in the
	post-packet-asm handler, if we're dealing with a little-endian
	core (thus, there are width specifiers) and if they aren't pseudo
	fields.  This only works if a field is used with a single width,
	since otherwise it's ambiguous- I add in the bare field name and
	associate it with the same ID.  Modified mod105.adl (with
	asm116.s) to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.15 (v3_16_15) on Linux (lc2243-tx30) on 9/21/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.15 (v3_16_15) on Linux (lc2243-tx30) on 9/21/2017 ==

2017-09-20  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* I added a new option to the regression driver, --keepdiff, which
	generates a diff output suitable for patch, for diff tests.  You
	can then use the script applypatches.py to iterate over those diff
	files and update the original regression expected results.  This
	is helpful, for example, if you make a change in output which will
	then break lots of regressions.

	** A new key for instructions has been added: <b>asm_rank =
	&lt;int&gt;</b>.  This allows a user to specify the relative
	ordering of instructions of the same name in the assembler.  By
	default, the assembler generator uses various heuristics to try
	and order instructions, such as preferring more enumerated fields
	vs other types of fields.  However, sometimes these heuristics are
	incorrect.  The <b>asm_rank</b> key allows the user to override
	this behavior.  A lower value means a higher priority; the default
	is 100.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information, under the
	<i>asm_rank</i> description.

	* Fixed a bug in tests/scripts.  We were clobbering
	mod18-base-so.cc and mod1-base-so.cc due to how adl2iss handled
	some naming, e.g. with creating mod1-base.o with a .so ouput.  So,
	I changed the naming to generate mod1-base-o.o and mod1-base-o.o.

	* I tried to improve shorthand handling (when it's possible to
	disassemble), by checking that fields match, even if they're
	interfaces.  Before, I was looking for exact matches.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.14 (v3_16_14) on Linux (lc2243-tx30) on 9/18/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.14 (v3_16_14) on Linux (lc2243-tx30) on 9/18/2017 ==

2017-09-15  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	** New hooks have been added to the assembler to allow extension
	libraries to add new psuedo-operations, extend argument parsing,
	add command-line parameters, and display extra help information.
	Refer to <b>adl-asm-impl.h</b> for more information on the various
	<i>acb_</i> callback functions.

	* Added tc-mod101.C to test the above with asm114.s.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.13 (v3_16_13) on Linux (lc2243-tx30) on 9/12/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.13 (v3_16_13) on Linux (lc2243-tx30) on 9/12/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.13 (v3_16_13) on Linux (lc2243-tx30) on 9/12/2017 ==

2017-09-12  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* A note on running distcheck: It looks like you have to delete
	adl/external/binutils-adl/bfd/bfdver.h in order for this to run,
	otherwise it gets confused about the location of the
	libname-soversion file.  It doesn't look like "make clean" deletes
	this, so you have to delete it manually.

2017-09-08  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* We had a bug with allocating InstrInfo::operand_values arrays.
	We were handling the case where an alias had fewer operand values,
	but not the case where we had more values.  This resulted in a
	segfault because we were indexing an array out of bounds.  I fixed
	this by adding a new parameter, InstrInfo::num_opv, to track the
	actual array size, since it can differ from the number of
	arguments.  Modified mod101.adl and added asm113.s to test.

	* iss/GenMems.C (adl): I was storing memory IDs as a bool when
	generating external memory handler support functions, meaning that
	more than two memories would result in incorrect, dupliate case
	statements, resulting in compile errors.  Fixed this and modified
	mod107 to add an additional memory, in order to test.

2017-09-07  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	** ADL now supports compressed streaming of traces using LZ4.
	Support for bzip2 trace compression has been removed.  LZ4 is a
	compression library which emphasizes speed over quality, so the
	overhead of compressing traces is much lower.  Its overall
	compression is quite good for trace files.  In order to use this
	feature, you will need to install lz4 (libraries and executable)
	on your system and have the <b>lz4</b> executable in your path.

	To create a compressed trace, specify an output file with a file
	extension of <i>.dlz4</i>.

	* The lz4 library is installed in the TR or from an Ubuntu
	package.  I'm using a C++ iostream wrapper from Github for C++
	compatibility.  I redid how the DatParser handles memory to
	improve efficiency and get it to work properly with tracediff.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.12 (v3_16_12) on Linux (lc2075-tx30) on 8/31/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.12 (v3_16_12) on Linux (lc2243-tx30) on 8/31/2017 ==

2017-08-31  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* I added a new API function, ModelInterface::decr_instr_count(),
	to allow the user to decrement the instruction count, in case an
	instruction needs to be repeated for some reason.

	** Added a new option to the assembler, <b>--ignore-low-bits</b>,
	to control the checking of low operand bits.  Normally, if a shift
	is specifiede for an instruction field, then we expect that a
	value for that instruction field should have zeros in those bits,
	since otherwise that value cannot be represented in that field.
	This ignores that checking.

	* The above was added so that legacy VSPA tests could be run
	without generating errors; it's kind of a hack.  I added this in
	and added asm112/mod99 to test.

2017-08-29  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* We had a bug in code generation for external local memories.
	Data memories were not using the correct logging value and the
	resulting code was missing a comma, resulting in a compile error.
	I fixed this and added mod107.adl, which just takes mod101.adl and
	modified load/store instructions to use a private memory.
	Modified ExternHarvard.C so that it will install the block memory
	into either IMEM or DMEM, depending upon what is available.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.11 (v3_16_11) on Linux (lc2075-tx30) on 8/24/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.11 (v3_16_11) on Linux (lc2243-tx30) on 8/24/2017 ==

2017-08-24  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	** Instruction operand values may now be queried within the
	post-packet assembler handler by calling the <i>InstrInfo</i>
	methods <i>getOpValue</i> and <i>getArg</i>.  The former returns
	just a numerical value, while the latter returns an
	<i>InstrArg</i> object which allows the user to query symbol and
	relocation information.

2017-08-22  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* Fixed an issue where the user couldn't call error() in an
	assembler help function, because error() implicitly used
	current_position.  Fixed this so that we get the current
	group/position information via the existing global functions.
	Modified mod99.adl to test.

2017-08-22  Brian Kahne  <bkahne@lc2749-tx30.am.freescale.net>

	* Fixed an issue with instruction table creation when conflicts
	are allowed via an instruction table attribute.  It was possible
	that we'd create a conflict mask which covered more bits than was
	in an instruction's opcode, leading to an infinite loop, since we
	could never achieve a zero mask.  Fixed this issue and added an
	assertion in build_tree to guard against the runaway case.  Added
	fe/inst149.adl to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.10 (v3_16_10) on Linux (lc2243-tx30) on 8/9/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.10 (v3_16_10) on Linux (lc2242-tx30) on 8/9/2017 ==

2017-08-09  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed the database generator so that implicit syntax and dsyntax
	strings are improved.  We now write out the real name, rather than
	the implementation name, and we filter out any reserved bit
	sequences.  Added doc40.adl to test.

2017-08-08  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* The ADL assembler now properly supports aliases in which
	multiple operands may contain symbols, and where those symbols are
	then used within a modifier function.  For example, an alias
	calculates the difference between two symbols.

	I had to make a number of changes to get this to work.  First, the
	operand values have to now be shared between fixups associated
	with the same instruction, so that a modifier function will see
	all values.  This required me to implement a simple
	reference-counted shared pointer object.  It would have been nice
	to just use std::shared_ptr, but unfortunately the fixup data type
	has to be exposed to C code, so a complex type couldn't be used.

	Second, since the modifier function is executed multiple times
	(first for the first symbol, then again when the second fixup is
	processed), we have to clear the field each time.  This didn't
	work for micro-instructions, since we were just or'ing in values.
	I had to modify the assembler to generate getter functions for
	micro-op fields, so that I could extract a value, then clear the
	relevant field, then insert the fixup, then clear the micro-op
	field and re-insert the updated micro op.

	I updated mod105.adl to test with asm110.s.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.9 (v3_16_9) on Linux (lc2243-tx30) on 8/8/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.9 (v3_16_9) on Linux (lc2242-tx30) on 8/8/2017 ==

2017-08-07  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* adl-asm-impl.C (flush_instr_queue): We had a bug with assemblers
	used with models that had a queue size greater than 1.  If a
	directive was encountered which changed the current address,
	e.g. a .org or .section directive, then we wouldn't properly flush
	the instruction queue, leading to instructions in wrong locations.
	Gas provides a hook for handling this, md_flush_pending_output.  I
	just needed to define it and have it perform the same actions as
	md_cleanup.  Added asm109.s with mod101.adl to test.

2017-08-07  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* asm/GenAsm.C (adl): Fixed a bug in calculating the size of a
	micro-op, when setting up relocation information.  I was rounding
	down (usual integer division), which meant that a 36-bit micro-op
	was specified as size 4, which meant that the instruction's data
	was clobbered.  I now round up, so that a 36-bit micro-op has a
	size of 5, so everything works.  Added asm108.s with mod105.adl to
	test.

2017-07-26  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* I'm now aligning to 16-bytes the arbitrary-sized intbv base
	class, in order to avoid a segfault with gcc 5.x and
	-ftree-loop-vectorize.  With this change tdriver2 and smdriver2
	work with gcc 5.x.  However, on RHEL5 32-bit, this doesn't work,
	so I only do this alignment for 64-bit.  I don't plan on
	supporting RHEL5 for much longer, and not with gcc 5.x, so this is
	just temporary.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.8 (v3_16_8) on Linux (lc2243-tx30) on 7/25/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.8 (v3_16_8) on Linux (lc2242-tx30) on 7/25/2017 ==

2017-07-25  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Makefile.am (clean-caches): Minor cleanup.

2017-07-24  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fix for the assembler- we were generating incorrect code for an
	empty instruction table.  Modified mod8.adl to make sure that we
	can handle an empty instruction table.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.7 (v3_16_7) on Linux (lc2243-tx30) on 7/20/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.7 (v3_16_7) on Linux (lc2242-tx30) on 7/20/2017 ==

2017-07-20  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* configure.ac: We now only run the binutils configure with
	--enable-maintainer-mode if it's specified as a top-level
	argument, so that we don't end up with autoconf headaches if
	configuring on another platform, e.g. Ubuntu.

	* I added back in the extra le_intbv overloads that I removed for
	gcc 5.4, since it works fine with gcc 4.x and I couldn't get rid
	of all of the warnings anyway.

	* Fixed a bug with creation of clearer functions for larger
	little-endian instructions, e.g. 64-bit.  The shifting logic was
	wrong in FieldSupport.C:genInstrFieldClearersAll- we would shift
	by 32 bits, rather than 0, creating incorrect clearer masks.  This
	showed up when assembling 64-bit instructions. Fixed this and
	modified mod105.adl to test.

	The root of this issue is how awful our little-endian code is for
	generating this stuff, due to how we swap words.  We should just
	fix this crap.

2017-07-18  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** A new key for instructions has been added:
	<b>allow_conflict</b>.  This is needed in case a design has a
	complex encoding in which the common opcode values for a set of
	instructions are the same and the only difference is in bits which
	overlap with non-opcode bits, but where no single instruction has
	opcode bits which form a superset over all of the other
	instructions' opcode bits.  Refer to Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information, under the
	<i>allow_conflict</i> description.

	* The above feature had to be added in order to support VSPA.  In
	that case, no single instruction formed a superset of encoding
	bits.  Now, when we encounter that situation and there is an
	instruction marked with allow_conflict = true, we attempt to split
	up the mask into two portions.  In the first portion, we encode
	the matching instructions normally.  Then, we encode the rest in
	the default_table.  This way, if the specific bits don't match for
	the first instruction, we then check the other bits.  If even
	those don't match, we fall back to whatever instruction had the
	least opcode bits.  Added iss/mod106.adl and fe/inst148.adl to
	test this new feature.

2017-07-17  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* fe/InstrTable.C (adl): Refactoring of instruction-tree building
	code in order to clean things up a bit.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.6 (v3_16_6) on Linux (lc2242-tx30) on 7/14/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.6 (v3_16_6) on Linux (lc2289-tx30) on 7/14/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.6 (v3_16_6) on Linux (lc2243-tx30) on 7/14/2017 ==

2017-07-14  Brian Kahne  <bkahne@BrianUbuntu>

	* I'm seeing a segfault with tdriver2 and smdriver2 with gcc 5.4
	-O3.  It appears in the intbv & operator, so I don't know what's
	going on.  For now, I commented out, but this should be
	investigated.

2017-07-13  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** The format of the <b>dsyntax</b> entry in the XML database has
	changed.  First, <i>make-db</i> now always generates a
	<b>dsyntax</b> entry, even if one was not provided by the user; it
	just re-uses the <b>syntax</b> string.  Second, the instruction
	fields in the disassembly syntax are not denoted by <i>${&lt;field&gt;}</i> in
	order to simplify parsing of the string.

2017-07-11  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Further cleanup of little-endian handling for opcodes in the
	assembler.  We were word-swapping opcodes which spanned a word in
	the Instr::getOpcode function, which then didn't allow us to
	properly left-justify the result.  I added in a flag to control
	word-swapping so that it could be done after the left
	justification step.  Note that this code is all quite hideous and
	should be rewritten to simplify it.  Added mod105.adl to test
	micro-instructions of size 36, where the opcode spans a word
	boundary.

2017-07-10  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Cleanup of some little-endian adjustment code which was
	duplicated in Data.C and InstrTable.C.

2017-07-07  Brian Kahne  <bkahne@BrianUbuntu>

	* With gcc 5, I'm getting weird warnings from le_sintbv tests.  I
	removed a couple of overloads to try and reduce this, but there
	are still a number of warnings in the le_sintbv version of
	NumberTest.

	** The adl-db Perl database script has been deprecated and is no
	longer released.

	* misc/DocHelpers.C (adl): It looks like a string stream's string
	return (from str()) is treated as a temporary, so grabbing cstr()
	from it can result in bad data.

2017-07-05  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* fe/Data.C (adl): I took out the assertion requiring a valid
	field in Relocation::findFieldImpl- I was finding some cases where
	it didn't pass for VSPA.  I probably need to revisit this later,
	but the disassembler compiles just fine now, so the assertion
	migth have been uncessary.

	* Fixed bug with two-level handling of relocations.  We weren't
	updating the relocation with the macro-instruction's
	implementation field, so that our code was incorrect if we had
	pseudo fields in the macro instruction.  Fixed this and added
	mod104.adl to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.5 (v3_16_5) on Linux (lc2289-tx30) on 6/30/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.5 (v3_16_5) on Linux (lc2289-tx30) on 6/30/2017 ==

2017-06-29  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** The assembler post-packet function can now manipulate
	relocations using the <b>InstrInfo</b> methods <i>getReloc</i> and
	<i>replaceReloc</i>.  This allows the handler to modify
	relocations, as necessary, when moving instructions between
	packets.

	* Added asm104.s to test the above features.  These just work on
	the argument string in an InstrInfo object, so implementation is
	pretty straight-forward.

	** Generated linkers can now handle relocations associated with
	micro-operations.  We now support a two-level process of
	extracting a micro-op from a macro-op, applying the relocation's
	address to the appropriate field of the micro-op, then
	re-inserting the micro-op into the macro-op.

	The syntax for specifying an instruction field has been expanded
	to support specifying a micro-op field and a macro-op field.  Note
	that this mapping must be unique; a relocation cannot map to
	multiple micro-op instances.

	* Added asm103.s with mod101 to test this new feature.

2017-06-28  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Initial work to implement two-level handling (macro and
	micro-op) for relocations.  It doesn't quite work yet b/c of
	differences in alignment between the getters and setters, so that
	has to be fixed next.  I now require that a relocation be unique
	to a given micro-op/macro-op pair, since the linker can't
	otherwise figure out where to place data.  Updated the front-end
	regression to test this.

2017-06-26  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** I have re-architected support for external "local" memories so
	that they now use the MemHandler interface.
	<b>IssNode::setMemHandler</b> now takes an additional index
	argument for specifying which memory handler to set.  This
	defaults to 0 for backwards compatibility.

	* I added mod103.adl with ext-hrvd.so to test the above
	functionality.

2017-06-16  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed code generation issue with ISSs that had a separate
	instruction memory and usesd the decode cache- we had errors with
	the DMI cache. The DMI cache is currently only generated for the
	main "global" memory, but that should be OK- just create a
	separate instruction memory.  We're caching instructions during
	translation, so we don't need DMI.  Added a decode-cache test for
	mod102.

	* Added mod102.adl, to test packetized encodings with a Harvard
	architecture.

	* Extended makedat to support mdopts for specifying the assembler
	and for specifying the instruction memory.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.4 (v3_16_4) on Linux (lc2289-tx30) on 6/15/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.4 (v3_16_4) on Linux (lc2289-tx30) on 6/15/2017 ==

2017-06-15  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** A new assembler configuration parameter, <b>queue_offset</b>
	has been added.  This allows the <b>post_packet_asm</b> handler to
	operate on a packet other than the most current packet.  Other
	packets, e.g. the most current, can then be accessed via the
	<b>getPriorPacket</b> function, allowing packets to be combined
	under the control of the user.  Refer to
	<i>adl/tests/iss/mod101.adl</i> for an example.

	* Modified mod101.adl to test the above functionality.

2017-06-13  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** A new assembler hook has been added,
	<b>acb_process_packets</b>, which allows the user to manipulate
	multiple instruction packets.  This hook can be implemented in a
	library which is then linked with the assembler via the <b>adl2asm
	--as-libs</b> command-line option.  Refer to <i>adl-asm-impl.h</i>
	for the function's arguments.

2017-06-07  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Intermediate modification: I'm now figuring out if a
	relocation's field maps to an instruction that's a micro-op, and
	if so, I then figure out what instruction fields can encode that
	type of micro-op.  This feature will be used to support handling
	relocations in micro-ops.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.3 (v3_16_3) on Linux (lc2289-tx30) on 5/30/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.3 (v3_16_3) on Linux (lc2289-tx30) on 5/30/2017 ==

2017-05-26  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixes for little-endian relocation handling in generated
	linkers. I don't have a regression for this yet, because I really
	need to fix this for micro-ops, which doesn't yet work.

	* Further cleanup of generated assembler code: Operand arrays are
	not written if they're empty.

	* If we have a relocation which maps to an instruction field and
	that field is pseudo, then there can only be a single
	implementation field, since otherwise the linker wouldn't know how
	to insert a value.  The front-end now checks for this and updates
	the relocation with the implementation field.  The assembler
	generator just checks this via an assertion.  Added fe/inst145.adl
	to test.

2017-05-25  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed a bug with handling assembler fields in assembler
	shorthands.  We weren't handling assembler fields properly when
	creating the operands- we were iterating over the alias's fields
	with a simple counter, so that if we had to skip over non-assembly
	fields, we would end up indexing into the instruction's field
	array out of range.  Fixed this by having a counter which only
	increments for valid fields.  Modified mod45.adl to move jmp's
	Label field earlier in the instruction so that it would uncover
	this bug.

	* Worked to reduce the number of warnings emitted when compiling
	the C++ assembler and disassembler files.  There's still more work
	to do, but this handles a lot of it.

2017-05-24  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** The combineInstr() function in the assembler post-packet
	handler can now work with micro instructions which are greater
	than 32-bits in width.

	* Updated mod101.adl and mod99.adl to test the feature above.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.2 (v3_16_2) on Linux (lc2289-tx30) on 5/22/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.2 (v3_16_2) on Linux (lc2289-tx30) on 5/22/2017 ==

2017-05-22  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed a bug with fixup creation with models that have a
	queue_size > 1.  The problem was that we were generating the fixup
	addresses by using the difference between the frag_now base
	address and the address of the instruction's buffer
	location. However, instruction buffers are allocated to the
	current instruction group while instructions are written (and
	fixups created) for the last group and when listing is enabled, a
	new frag is created after each line.  Thus, when queue size is >
	1, frag_now is no longer relevant vs. an instruction's buffer.  I
	expanded the InstrInfo object to also store a pointer to the
	instruction's frag, so that a proper difference can be calculated.
	Added asm100.s with as-mod47 to test.

2017-05-19  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed a bug with delayed writes.  We were not generating a
	delayed-write helper function for a register if it occurred in a
	helper and we thought it was never referenced.  In fact, we'd
	still need that function to be generated, since the helper
	includes it in its code, so the compiler will produce an error if
	the function doesn't exist.  Modified mod50.adl to test.

	* Fixed a bug with replaceInstr and instruction shorthands.  When
	we replaced an instruction, we copied over the opcode but didn't
	check to see if this was an alias.  So, we used the base opcode
	which didn't have the shorthand's mappings.  This could lead to an
	assertion failure, since the opcode could reference pseudo
	fields.  Modified mod101.adl (asm99.s) to test this.

	* Fixed a bug with micro-instruction decode-cache models.  We
	weren't using the proper field name if an instruction used pseudo
	fields.  mod101.adl now checks for this.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.1 (v3_16_1) on Linux (lc2289-tx30) on 5/17/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.1 (v3_16_1) on Linux (lc2289-tx30) on 5/17/2017 ==

2017-05-16  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* We weren't correctly handling assembler shorthands with modifier
	functions, when they're treated as micro-instructions and
	combined into a macro instruction.  Fixed this by getting the
	proper operand_macro element when building the instruction and
	adjusting the offset of the operand_values array when running the
	modifiers.  Added asm98.s with mod101.adl to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.0 (v3_16_0) on Linux (lc2289-tx30) on 5/16/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.16.0 (v3_16_0) on Linux (lc2289-tx30) on 5/16/2017 ==

2017-05-15  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Various fixes to try and clean up operand argument handling
	within the assembler.

2017-05-11  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed bug with disassembling micro-instructions within a macro
	instruction for little-endian architectures.

2017-05-09  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Fixed an issue with handling variable-length instructions in
	little-endian with fixups- the instruction was right-justified,
	but our inserter instructions expected everything to be
	left-justified, so fixups weren't working correctly.  I fixed this
	by modifying the 'where' value when processing fixups.  Added
	asm97.s to test.

2017-05-05  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** The interface for complex macros has been changed in order to
	support handling symbols.  The createInstr function now takes
	InstrArg objects for operand values and complex macros, via
	<b>asm_action</b>, receives a vector of InstrArg objects.

2017-05-01  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* Updated documentation to not refer to the old Freescale SWO
	framework.  It now references the same collateral using local
	paths on the server.

	* We were not correctly catching bad-instruction-table names.
	These would go into the core's instruction table list as a -1,
	which then caused make-asm to crash when it tried to look up the
	instruction attribute and create a C++ string from the value
	(which was a nullptr, since the attribute didn't exist).  Added
	fe/inst144.adl to test.

2017-04-28  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** A new key for instructions has been added, <b>assemble</b>,
	which will prevent the assembler generator from directly using the
	instruction.  Instead, the instruction must be selected via user
	code, such as by a shorthand or complex macro.

	* The above feature is used to override a name, e.g. addi, so that
	a comprex macro can do instruction selection.  Modified mod100.adl
	to test this.

	* Fixed bugs with little-endian assembler creation for
	variable-length instructions.  We weren't left-justifying the
	opcodes, which resulted in incorrect instructions.  Fixed this and
	added mod100.adl to test.

	Overall, I find that the handling of opcodes is too finicky-
	there's too much magic shifting going on.  I think we're working
	at the wrong abstraction level because little-endian and
	big-endian systems have too many tests through-out the code.  This
	should be revisited at some point.

	** A new key for instruction fields has been added, <b>offset</b>,
	which allows the user to specify an offset to be implicitly added
	to an instruction field.  This can be used, for example, to model
	when a value of 0 in an instruction field actually implies a value
	of 1, etc.

2017-04-24  Brian Kahne  <bkahne@lc2631-tx30.am.freescale.net>

	* Decode-table creation for little-endian instructions has been
	heavily modified. Previously, we would left-justify the various
	masks, but this doesn't work for little-endian variable-width
	instructions, since little-endian implies that the leading bits
	should be in the right-most spot (least-significant).  Thus,
	variable-width instructions were improperly shifted and couldn't
	be decoded.

	I fixed this by having big-endian instructions be left-justified
	and little-endian instructions be right-justified.  The problem
	ended up being with weird architectural hold-overs, e.g. StarCore,
	where they used little-endian big numbering but big-endian byte
	ordering.  This messes everything up and had to be handled via a
	new predicate, Instr::is_mixed_endian(), which returns true if the
	endianness of the bit pairs in the instruction encoding is
	different than the instructin's endianess (which comes from the
	core's specification).

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.6 (v3_15_6) on Linux (lc2289-tx30) on 4/13/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.6 (v3_15_6) on Linux (lc2289-tx30) on 4/13/2017 ==

2017-04-13  Brian Kahne  <bkahne@lc2631-tx30.am.freescale.net>

	* Fixed a segfault with handling function templates, where an
	argument's type as a template parameter.  We were incorrectly
	handling that.  Since we don't know the real type, we just
	substitute in 0.  This is kind of a hack, but it works for now.
	It would be nice to figure out the actual type and propagate it.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.5 (v3_15_5) on Linux (lc2289-tx30) on 4/4/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.5 (v3_15_5) on Linux (lc2289-tx30) on 4/4/2017 ==

2017-04-03  Brian Kahne  <bkahne@lc2631-tx30.am.freescale.net>

	* scripts/adl-config (all_flags): Modified AS cflags to include
	the bfd directory.

	* Bug with instruction fields: If we had instruction fields which
	were defined over a larger bit range, e.g. 64-bits, than the
	largest instruction, then we could get a segfault when generating
	instruction field getters, because we assumed that the term array
	was large enough, e.g. we'd index into element 1 of that array.
	First, I added in range checking to just return 0 if that array
	isn't large enough.  Second, I now track what instruction fields
	are used and only generate getters/setters/clearers for relevant
	intruction fields.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.4 (v3_15_4) on Linux (lc2289-tx30) on 3/28/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.4 (v3_15_4) on Linux (lc2289-tx30) on 3/28/2017 ==

2017-03-28  Brian Kahne  <bkahne@lc2631-tx30.am.freescale.net>

	* iss/RemoteGdbServer.C (adl): It turns out that GDB's memory
	accesses are endian-neutral and should be treated as a sequence of
	bytes.  Thus, it's not possible to do multi-byte reads of memory.
	I thus changed the memory get/set routines to work byte-by-byte.

	* iss/GenInstrs.C (adl): Fixed bug when generating Graphite
	register IDs.

2017-03-27  Brian Kahne  <bkahne@lc2321-tx30.am.freescale.net>

	* listing.c: Increased the buffer space allocated for continuation
	lines for assembly listings, so that large expansions,
	e.g. RISCV's li for 64-bit constants, canbe properly listed.

	* I now issue an error if a complex macro receives a symbol.  We
	don't support that, and previously we would just put in a zero
	with no warning, causing potential problems for users.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.3 (v3_15_3) on Linux (lc2289-tx30) on 3/27/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.3 (v3_15_3) on Linux (lc2289-tx30) on 3/27/2017 ==

2017-03-24  Brian Kahne  <bkahne@lc2321-tx30.am.freescale.net>

	** A new key has been added for instructions: <b>alias_action</b>.
	This allows the user to define a complex alias which uses action
	code to create instructions. Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* To implement the above, I simply added a new key, then handle it
	like the assembler functions, except in this case, the returned
	InstrBundle object becomes the new current-group bundle.

	* Documentation and database generation were expanded to display
	this new item as well.

2017-03-23  Brian Kahne  <bkahne@lc2321-tx30.am.freescale.net>

	* I re-architected how the assembler allocates instruction
	buffers, to give more control to a target-specific library, if
	necessary.  The hook acb_prealloc_instr_bufs() controls whether
	instruction buffer space should be allocated up-front for a group.
	This is the default, and works with parallel architectures.  This
	is skipped if acb_prealloc_instr_bufs() returns false.  The hook
	acb_alloc_instr_buf() is called for any instruction not requiring
	extra fixup support and should allocate frag space.  The hook
	acb_handle_reloc_extra() now needs to allocate space and write the
	instruction.

	** Instruction buffer allocation has been re-architected in the
	assembler in order to give more control to target-specific
	extension libraries.

2017-03-22  Brian Kahne  <bkahne@lc2321-tx30.am.freescale.net>

	* I re-architected how the assembler allocates instruction
	buffers, to give more control to a target-specific library, if
	necessary.  The hook acb_prealloc_instr_bufs() controls whether
	instruction buffer space should be allocated up-front for a group.
	This is the default, and works with parallel architectures.  This
	is skipped if acb_prealloc_instr_bufs() returns false.  The hook
	acb_alloc_instr_buf() is called for any instruction not requiring
	extra fixup support and should allocate frag space.  The hook
	acb_handle_reloc_extra() now needs to allocate space and write the
	instruction.

	** Instruction buffer allocation has been re-architected in the
	assembler in order to give more control to target-specific
	extension libraries.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.1 (v3_15_1) on Linux (lc2289-tx30) on 3/13/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.1 (v3_15_1) on Linux (lc2289-tx30) on 3/13/2017 ==

2017-03-10  Brian Kahne  <bkahne@lc2321-tx30.am.freescale.net>

	* asm/GenAsm.C (adl): I now strip any directory information from
	the header file included by the disassembler.  Those files are all
	created in the same directory, so this way, the compiler can find
	the header without any extra include files being added on.

	** The <b>adl2asm</b> and <b>adl2doc</b> wrapper scripts now
	accept <b>--depfile=file</b> dependency-file creation options,
	just as <b>adl2iss</b> does.

	** Additional enhancements for supporting little-endian
	architectures: The <b>IssNode::getMem</b> and
	<b>IssNode::setMem</b> routines now swap bytes for little-endian
	architectures, so that the integer value that's set will be in the
	correct byte order if then read by the core.

	** The <b>makedat</b> script now takes a new option,
	<b>endian</b>, to allow the user to specify data ordering, to take
	the new endianness behavior into account.

	** The ELF reader has also been modified so that it reads data
	correctly and the various writers will now also show memory data
	in the appropriate byte ordering.  The ELF reader's behavior can
	be overridden by using the <b>--elf-be</b> option.

	* To implement the above, I added a new ByteSwap template
	parameter to mem_read_sized and mem_write_sized.  This is now set
	during model generation according to the data-endianness
	parameter.

2017-03-08  Brian Kahne  <bkahne@lc2321-tx30.am.freescale.net>

	** The assembler generator, <b>adl2asm</b>, now accepts a new
	option, <b>--elf-machine-code=int</b> which allows the user to set
	the ELF machine code for input/output ELF files.

	** The way in which relocations are associated with instruction
	fields has changed.  Previously, an instruction field specified a
	relocation, but this isn't really correct, as multiple relocations
	could use the same relocation field.  Now, an instruction field is
	specified in a relocation using the <b>instrfield</b> key.
	Relocations also no longer need to match a target field's
	pc-relative flag.

2017-03-07  Brian Kahne  <bkahne@lc2321-tx30.am.freescale.net>

	* asm/GenAsm.C (adl): The debug attribute now takes a numeric
	parameter that is used for ordering of register files and
	registers when creating a default debug register mapping.
	Modified mod1.adl to use this syntax.

	* I cleaned up elf64-ppc.c so that it doesn't segfault when we use
	a generated linker.  Still, ugh, this PPC code is super crufty and
	needs to be cleaned up and replaced with a bare-bones ADL backend.

	** A new <b>ModelInterface</b> method was added, <b>isBigEndian()</b>, which
	returns true if the natural data endianness of a core is
	big-endian.

	** A new configuration scripting function was added,
	<b>setregendianness</b>, to specify the endianness to use when
	communicating register values to a debugger.

	* We now use the core's endianness to determine how the gdb server
	should communicate register data to gdb.  This can be overridden
	by using setregendianness in a config script- the value is stored
	in the debug register map.  All of the simplified_armv8 gdb
	regressions transmit register values using big-endian ordering,
	but I don't know if that's right.  So, for now, I've left them as
	is and I simply override the endianness in the config script.

	* I bumped up the RNumber requirement due to a bug found in
	RNumber's bigEndianArrayOfBytes function, used for displaying hex
	strings in the gdb server.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.0 (v3_15_0) on Linux (lc2289-tx30) on 3/6/2017 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.15.0 (v3_15_0) on Linux (lc2289-tx30) on 3/6/2017 ==

2017-03-06  Brian Kahne  <bkahne@lc2321-tx30.am.freescale.net>

	* I've hopefully sorted out binutils compilation.  I got rid of
	the local header install and instead just have a 'bprefix' value
	which acts like 'prefix'.  This is propagated to adl2asm.  The
	various adl2* scripts now also accept --setbpfx (like --setpfx) to
	speciy where binutils lives; only adl2asm actually uses it.

	* iss/GdbServer.C (adl): Fixed a bug with the gdb server:  In
	response to an unknown 'v' command, we should reply with an empty
	packet, just as we do with every other type of command.  Fixed
	this and modified gdbtest14 to test.

2017-03-03  Brian Kahne  <bkahne@lc2750-tx30.am.freescale.net>

	** Generated assemblers now allow relocations to be processed by
	an external library.  Use the <b>--reloc-extra</b> option for
	adl2iss to specify which relocations need this extra processing.
	This must then be handled via an external library that is linked
	in to the assembler.

	* I expanded the various acb_ hooks to be able to implement
	extended relocation handling.  This is being used by RISCV for
	branch conversion, but I don't yet have any good tests in ADL.
	Once RISCV gets stable, I'll bring it all over into ADL for
	comprehensive regression testing.

	* In order to get the above to work, frag handling is tricky.  So,
	frags now only grow (for non-parallel-architectures) but we don't
	allocate, i.e. we don't call frag_more in the initial buffer
	allocation.  Then, we call frag_more when we handle the fixup,
	since at that time we know we're handling an instruction normally.
	However, parallel architectures mess this all up, so we we just
	allocate immediately for parallel architectures.  This is all a
	pretty big hack- this should be reexamined later on.

2017-02-24  Brian Kahne  <bkahne@lc2750-tx30.am.freescale.net>

	* Fixed a bug with relocations- we could associate different
	relocations (each with the same name) with different fields, but
	we could pick the wrong field b/c we didn't match against the
	field, just the name.  For example, "lo" might be associated with
	a load's immediate field and a store's immediate field.  Now, the
	relocation-by-name lookup function checks to make sure that, if a
	relocation is associated with a field, that the field matches.

2017-02-23  Brian Kahne  <bkahne@lc2750-tx30.am.freescale.net>

	* read.c (emit_expr_fix): The relocation types for pseudo-ops were
	hardcoded to default BFD types.  Unfortunately, that doesn't match
	RISCV's types, so I changed this so that we generate a function,
	adl_size_lookup, and query it instead.  We generate this by
	looking for simple relocations whose field width fits the width
	we're looking for.  If we don't find a relevant relocation then we
	fall back to the default types.  Modified iss/asm81.s, since now
	RELOC_BIG is used as the 32-bit relocation, rather than defaulting
	to a PPC relocation.

	* reloc.c (_bfd_relocate_contents): When we used field setters in
	the linker, we weren't clearing the field before hand, meaning
	that an addend value could corrupt the final value, since we or'd
	in the new value.  Fixed this by also returning a clearer function
	and calling it first.  I had to re-do how clearer functions are
	constructed- they now take an array of words, rather than
	references to individual elements.  Added iss/asm93.s to test.

	* Added iss/asm92.s to test multi-instruction alises.

2017-02-22  Brian Kahne  <bkahne@lc2750-tx30.am.freescale.net>

	* I removed a bunch of relocation stuff from the ELF PPC back-end
	to avoid conflicts with newly defined relocations.  All of
	binutils really needs to be cleaned up and scrubbed to remove PPC
	remnants!

	* Fixed bug with relocation syntax processing- we now handle dots
	so that local labels with relocations are properly modified.

	* Fixed issue with multi-instruction aliases.  The width of the
	alias is the max of any instruction in the alias, rather than the
	sum.  Using the sum caused all kinds of problems when switching to
	little-endian, due to bit shifting issues. I added an example
	multi-instruction alias to as-mod1, but we don't have a good
	example for little-endian yet.

	* Fixed bug with loading ELF64 files: We had an improperly defined
	header, so that a file with multiple segments wasn't loaded
	correctly- the segment map was incorrect, leading to wrong address
	translation (potentially).  I'm not sure how to add a regression
	to test this, unfortunately, because I don't know how to create an
	ELF file that can exhibit the problem.

2017-02-17  Brian Kahne  <bkahne@lc2750-tx30.am.freescale.net>

	* Fixed an assembler issue which could sometimes cause an error on
	Windows: In save_instr, we were copying too much data, potentially
	leading to a memory fault if we copied beyond the current stack.
	Fixed this, but I don't have a good way to test it, unfortunately.

	** The disassembler now displays opcodes as chunks of bytes, in
	order to enable proper byte-swapping for little-endian
	architectures.

	** ADL-generated assemblers now supports relocation syntax of the
	form <b>%reloc(sym)</b>.

	* The above is handled by converting the alternative syntax to the
	usual syntax of sym@reloc in the function convert_func_relocs(),
	which is called by adl_assemble().  This way, the regular
	expressions don't get confused by the function syntax and their
	parentheses.  Note that the parsing is kind of simplistic- we
	assume that sym is just a simple identifier.

2017-02-16  Brian Kahne  <bkahne@lc2750-tx30.am.freescale.net>

	* Fix for little-endian memory writes.  The mem_write functions
	had a separate template argument for the value to be written, even
	though we knew what sized value we were going to write, based upon
	the memory call.  So, for example, even though we were writing
	32-bits, we'd accept a 64-bit integer, then byte-swap that, then
	write the result.  This resulted in the upper bytes of the 64-bit
	value being written, rather than a byte-swapped version of the
	lower 32-bit, 16-bit, or 8-bit slice.

	Fixed this by changing the mem_write routines to remove the extra
	template parameter.  The input size is now set by the number of
	bytes to be written.

	** A new global function, signedMod, is now available for
	performing a signed modulo operation.

	* Modified the intbv files so that this is equivalent to
	signedDivide.  Added on tests to NumberTest.C.in.

	** The current instruction count and temporal decoupling counter
	can now be accessed from within the model by calling
	getInstrCount() and getTDCounter().  If a model is build without
	the temporal decoupling API, then getTDCounter() returns the
	current instructioncount.

	* Fixed a bug with handling single-character instruction names
	with syntax strings.  We would incorrectly fail to bump up the end
	pointer, so that it seemed like we had no instruction name, which
	caused an assertion later.  Fixed this and modified mod1.adl, b
	instruction, to have a syntax string, to make sure we avoid the
	problem.

	* iss/GenInstrs.C (adl): When creating decode cache models, we
	weren't adding in a set_arg function which took a signed value.
	This caused problems for little-endian models due to the type
	hierarchy of le_sintbv.  Added in an extra set_arg method.

2017-01-30  Brian Kahne  <bkahne@lc2750-tx30.am.freescale.net>

	* Fixed issue with handling of fixups with operands whose values
	are set via expressions (modifier functions).  We weren't
	analyzing the fields used by those functions to see if they
	contained symbols, so we would ignore creating a fixup, resulting
	in an undefined symbol with no error message.  I now create an
	array of the operands used for each modifier function and scan
	that to see if fixups are required.  Added asm90.s to test that we
	generate an error on an unknown symbol.

	* Changed to issuing errors on unknown relocations (previously was
	just a warning).

	* Added type conversions for signed values (to_uint32) to skip
	compile issues for disassemblers.

2017-01-13  Brian Kahne  <bkahne@lc2750-tx30.am.freescale.net>

	* I've turned off the JIT, because for some reason, it no longer
	works on RHEL6.  I'm not sure when that change occurred- the
	nightly regressions were passing because they run on RHEL5.  So,
	for now, the JIT is no longer officially supported, until I can
	port it to a modern version of LLVM.

2016-12-02  Brian Kahne  <bkahne@lc2053-tx30.am.freescale.net>

	* I removed the Var macro and now just use the auto keyword
	directly.  Since gcc and MSVC support this, I thought it would be
	clearer to just directly use the C++11 feature.

	** The ADL front-end now supports the use of enums as values
	within define block for keys taking numerical values.  For
	example, you can now use an enum value to set the width of a
	register or register file.  As before, enums can be declared at
	the outer-most scope or within an architecture or core define.

	* I went through and modified handle_list_or_item to update it to
	use C++11's bind feature.  This means that we no longer need
	multiple types- you simply bind whatever parameters are needed to
	the callable object you're passing in to handle_list_or_item.

	* The various get-type functions for Ptree objects have been
	updated to take an Environment pointer, in order to resolve enum
	values.  This is optional- if a null is passed in, then no
	resolutin takes place.

	* I updated AdlWalker to record enum values within the Lookup
	hash.  Before, I was just recording the name, which seemed kind of
	pointless.

2016-12-01  Brian Kahne  <bkahne@lc2053-tx30.am.freescale.net>

	** The ADL front-end now supports basic expression parsing, so it
	is now possible, for example, to specify a register width using an
	expression such as (8 * 4).  This means that you can use the
	preprocessor to construct expressions which will then be evaluated
	by the front-end.  Likewise, string concatenation is supported for
	strings, so that the preprocessor's stringification feature can be
	used to construct names from integers and identifiers.

	* I updated the various routines, such as get_uint, to instantiate
	an ExprWalker if an item is not a leaf.  This expression walker is
	templated on various types, such as unsigned, uint64_t, etc., in
	order to perform expression evaluation.  I also went through the
	code and removed as many calls to Reify as possible, moving them
	over to using the proper get_uint, etc. calls.

2016-11-30  Brian Kahne  <bkahne@lc2053-tx30.am.freescale.net>

	* Refactoring for expression evaluation.  I eliminated the
	get_variable_value portion of AttemptExprEval, since that was
	redundant vs. TranslateVariable.

2016-11-01  Brian Kahne  <bkahne@lc2053-tx30.am.freescale.net>

	* Added a better error message for when an instruction field is
	mapped to an embedded instruction table, and the widest
	instruction is too large for the field.  I also ignore this check
	if the table is empty- this way, users can define their fields
	first and successfully parse the file, without needing
	instructions to be defined.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.14.0 (v3_14_0) on Linux (lc2286-tx30) on 10/28/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.14.0 (v3_14_0) on Linux (lc2286-tx30) on 10/28/2016 ==

2016-10-28  Brian Kahne  <bkahne@lc2053-tx30.am.freescale.net>

	* Build fix for MSVC: The Blockhash has to use the tr1
	unordered_map on gcc to be compatible with LLVM used for the JIT,
	but for MSVC, we can use the standard unordered_map.  This is a
	pain, but it works...

	** The new minor-release series 3.14.0 offers many enhancements
	for architectures which include micro-operations, also known as
	packetized encodings.  In these architectures, an instruction
	contains fields which contain nested instructions (micro
	operations).  ADL now supports both parallel and sequential
	execution for this style of architecture and supports branching
	from and branching into micro-operations within an instruction
	packet.  Decode cache and interpreted models are both supported.

	* Added an example to test branch-and-link and branch-to-link for
	micro-op instructions.  I also fixed an issue with branching out
	of the middle of an instruction packet- non-parallel-execution
	architectures now check the return value of micro_instr_run after
	each instruction and exit early if a branch occurs.

	* I removed support for micro-instruction masks.  Now only offsets
	are supported.  This simplified the code and made supporting
	branch-and-link, with storing the return status to the next
	instruction, much simpler.

	* Added tests/iss/in324.dat with mod99 to test this new behavior.

2016-10-27  Brian Kahne  <bkahne@lc2053-tx30>

	* We now look at the argument to setMicroOpMask and
	setMicroOpOffset to determine what the key argument is for
	adjusting the mask.  If it's just an instruction field, then we
	can support direct threading of a decode-cache model with branches
	into instruction packets.  Updated mod99 and in323.dat to test.

	* The decode cache now works with micro-op models.  I now hash an
	additional mask into basic-block lookup, in order to allow for
	branching into instruction packets.  I also expanded the front-end
	to track whether an instruction is a micro-op, etc.

	Currently, support is a bit limited- an instruction field has to
	be tagged with a special attribute to specify that it's used to
	set the micro op mask.  That'll change next...

2016-10-26  Brian Kahne  <bkahne@lc2053-tx30>

	* More refactoring for decode-cache model generation for
	micro-ops.  Fixed issue with generation of dc translation function
	for extra fetches.

	* Refactoring to get models with micro-ops to compile with
	decode-cache support.  Further refactoring to clean up micro-op
	support, such as adding a table-type parameter to exec() so that
	we don't have to save and restore the current table type in
	micro_instr_run().

2016-10-25  Brian Kahne  <bkahne@lc2053-tx30>

	** Implicit action functions are now supported for micro-op
	instructions.  If an instruction contains micro operations, then
	it may exclude an action function.  An implicit one will be
	created which will execute each of the micro opereations.

	** Branching into an instruction packet is now supported, as long
	as the instruction contains an implicit action function.  In that
	case, the user may call <b>setMicroOpMask</b> or
	<b>setMicroOpOffset</b> in order to specify which micro operations
	are executed in the next instruction.

	* Note: The above works for interpreted ISSs right now.  Getting
	this to work for the decode cache might require some changes, but
	at least mod99 now demonstrates how a branch can work.

2016-10-24  Brian Kahne  <bkahne@lc2053-tx30>

	* Nested instructions (micro ops) are now disassembled by the
	disassembler functions in an ISS.  The disassembler allows the
	recursive call to be modified by supplying an alternative
	DisassemblerCallIF object.  For ISS generation, this feature is
	enabled if the --disassembler option is enabled, since we need a
	disassembler function in order to make the recursive call.  If
	that's not enabled, then we just decode nested instruction ops as
	hex fields.  To get this to work, the disassemble() function now
	calls an internal, static function, which is also called by any
	instruction disassembler functions.

2016-10-21  Brian Kahne  <bkahne@lc2322-tx30>

	* Initial work on expanding support for nested instruction
	encodings (micro instructions).  I've enhanced the disassembler so
	that it will recursively call the disassembly function in order to
	disassemble an instruction field that's mapped to an instruction
	table.  Added iss/mod99.adl to test.

	** The <b>instrtables</b> keyword in <b>asm_config</b> is no
	longer supported.  Instead, there are now two keywords:
	<b>asm_instrtables</b> and <b>disasm_instrtables</b>.  These allow
	assembly and disassembly with multiple instruction tables to be
	controlled individually.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.13 (v3_13_13) on Linux (lc2242-tx30) on 10/14/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.13 (v3_13_13) on Linux (lc2286-tx30) on 10/14/2016 ==

2016-10-07  Brian Kahne  <bkahne@lc2294-tx30>

	** ADL now features a lockless implementation for the sparse
	memory model.  This is used if a model is compiled with
	multi-threaded support (--mt-support).

	** <b>adl2iss</b> supports a new option,
	<b>--mt-rw-locked-mem</b>, to control whether memory reads and
	writes should lock a per-core mutex or not.  The default is to
	grab the lock, but this may be disabled if the model will not see
	external accesses to memory via setMem/getMem during simulation.

2016-10-06  Brian Kahne  <bkahne@lc2294-tx30>

	** The sparse memory model now has a new set of read/write
	routines to retrieve a pointer to the memory page used.  This can
	be used by a DMI cache to avoid a call to last_page().

	* iss/Memory.h (adl): I added a new set of routines to
	SparseMemory which allows one to do a read or write and get back a
	pointer to the page object, for updating a DMI cache.  Previously,
	you had to call last_page(), which meant a second lookup and the
	exercising of a lock in a multi-threaded simulation.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.12 (v3_13_12) on Linux (lc2286-tx30) on 9/27/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.12 (v3_13_12) on Linux (lc2242-tx30) on 9/27/2016 ==

2016-09-27  Brian Kahne  <bkahne@lc2294-tx30.am.freescale.net>

	* Minor fix so that, when building on Windows, we don't need to
	include the new AdlSimLock header.  That header uses some C++11
	features that MSVC does not support.

2016-09-23  Brian Kahne  <bkahne@BrianUbuntu>

	** Performance improvements for watchpoints: If watchpoints are
	not used, we avoid checking the main hash, in order to improve
	performance.  This is handled via a global which is set to true if
	a watchpoint is ever added to any model in the simulation.

2016-09-20  Brian Kahne  <bkahne@lc2294-tx30.am.freescale.net>

	** Updates to improve single-threaded performance when a model is
	generated with thread-safe support.  Previously, we were still
	grabbing locks, even if multiple threads were not in use.  Now, a
	global variable guards whether we do this, allowing a
	single-threaded simulation to avoid the lock overhead.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.11 (v3_13_11) on Linux (lc2289-tx30) on 8/31/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.11 (v3_13_11) on Linux (lc2289-tx30) on 8/31/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.11 (v3_13_11) on Linux (lc2286-tx30) on 8/31/2016 ==

2016-08-30  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* We had a bug clearing breakpoints from decode-cache enabled
	models which used the bounded-range form of MMU test, e.g. those
	with a memory protection unit.  When the breakpoint-clear method
	was called, we would try to invalidate the basic block in the
	decode cache which contained the address of the breakpoint.  If we
	couldn't translate the address, however, then instrReadTranslateNs
	would return false, so we wouldn't invalidate the basic block.
	Then, when we hit the breakpoint trampoline in the basic block and
	returned to the simulator, we'd hit an assertion because the
	breakpoint didn't exist.

	Fixed this by having instrReadTranslateNs return true, and set ra
	= ea if the MMU contains a bounded test, since this implies
	one-to-one translation.  Added cli/c55.cli to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.10 (v3_13_10) on Linux (lc2242-tx30) on 8/8/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.10 (v3_13_10) on Linux (lc2286-tx30) on 8/8/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.10 (v3_13_10) on Linux (lc2242-tx30) on 8/8/2016 ==

2016-08-08  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	** The standalone framework reset routines have been modified so
	that GDB will invoke RunControlIface::reset() when the debugger
	sends a restart command.  This allows a client application to
	extend reset behavior by implementing this method.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.9 (v3_13_9) on Linux (lc2075-tx30) on 7/14/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.9 (v3_13_9) on Linux (lc2075-tx30) on 7/14/2016 ==

2016-07-14  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* iss/MemoryLog.h (adl): Renamed variables to avoid a conflict
	when compiling with EDA simulator environments.

2016-07-13  Brian Kahne  <bkahne@lc2322-tx30.am.freescale.net>

	* uadl/MemoryRequest.h (uadl): Fixed a mistake, where I was
	initializing a member variable with itself in the constructor.
	This shows up as a warning with gcc 4.8.5.

	* iss/DatWriter.C (adl): Fixed an uninitialized variable error in
	the DatWriter that could cause segfaults.  This showed up with the
	32-bit build in gcc 4.8.5.

2016-06-27  Brian Kahne  <bkahne@lc2541-tx30.am.freescale.net>

	* Trying to link bzip2 statically was becoming a problem, due to
	RHEL6 not having a static libary in /usr/lib64, so I just link it
	using the default (shared if that's all that's there). I think
	this is OK- not sure why we need to link everything statically.

	* I added in a new macro, DPP_VERSION_CHECK_EXACT, so that version
	numbers of required tools can be checked for an exact match,
	rather than just a minimum value.

	* Modified llvm.m4 to require LLVM 3.1, since newer versions are
	not compatible due to changes in internal structure.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.8 (v3_13_8) on Linux (lc2293-tx30) on 4/8/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.8 (v3_13_8) on Linux (lc2050-tx30) on 4/8/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.8 (v3_13_8) on Linux (lc2293-tx30) on 4/8/2016 ==

2016-04-08  Brian Kahne  <bkahne@lc2289-tx30>

	* iss/RemoteGdbServer.C (adl): If we used the decode cache in an
	MP/MT simulation with the debugger, we would lose the initial td
	threshold which allowed us to cycle between cores.  Instead, we
	were always setting it to the max value, so that we didn't
	inadvertently quit early.  That was OK for a single-core test, but
	not for MP, where we want to cycle between cores.  We now capture
	the original td threshold in the relevant core's GdbTarget object
	and then use that when saving the td threshold.  Modified
	designs/gdbtest23.gdb to use generic32mt with the decode cache, in
	order to test this.

2016-04-07  Brian Kahne  <bkahne@lc2289-tx30>

	* iss/GdbServer.C (adl): More bug fixes.  We need to interpret
	thread numbers as being in hex, so qfThreadInfo, Hg, and qC
	commands need to read or respond in hex numbers.

	* If we have any step commands in all-stop mode, we need to not
	continue, as this will mess up what gdb expects.  Added
	designs/gdbtest22.gdb and designs/gdbtets23.gdb to test.

2016-04-06  Brian Kahne  <bkahne@lc2289-tx30>

	* Fixed gdb server issues.  In response to a vKill packet, we
	should consider ourself finished with execution and respond with
	X00 to a '?' query (halt-reason).  Otherwise, GDB gets confused,
	since it deletes its threads when done, but then thinks that there
	is a thread, leading to an assertion failure in the debugger.
	Also, upon starting over, we should reset to thread 1, otherwise
	gdb gets confused about what thread it's currently running.  Added
	designs/gdbtest21.gdb to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.7 (v3_13_7) on Linux (lc2050-tx30) on 3/9/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.7 (v3_13_7) on Linux (lc2293-tx30) on 3/9/2016 ==

2016-03-08  Brian Kahne  <bkahne@lc2289-tx30>

 	* Fixed a bug in the decode cache: If we generated icache-touch
	logic with the td-api enabled, then we had to be able to return
	from that code, but we'd return after clearing the next-element
	member variable.  If this routine was the last element executed in
	the decode-cache kernel, then we'd enter an infinite loop.  Fixed
	this by only clearing the next value if we're exiting due to the
	td counter check.  Added in321.dat with mod79 to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.6 (v3_13_6) on Linux (lc2050-tx30) on 3/1/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.6 (v3_13_6) on Linux (lc2050-tx30) on 3/1/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.6 (v3_13_6) on Linux (lc2293-tx30) on 3/1/2016 ==

2016-02-29  Brian Kahne  <bkahne@lc2050-tx30>

	* It appears that the loop vectorizer optimization
	(-ftree-vectorize) in 32-bit gcc 4.7.4 can cause segfaults.  So,
	configure.ac now detects this situation and disables this specific
	optimization.

2016-02-29  Brian Kahne  <bkahne@lc2289-tx30>

	* The wrapper scripts have been updated to detect when a compiler
	version if for RHEL5, but we're actually running on RHEL6.  In
	that case, it updates the compiler path if the appropriate new
	version (based upon glibc version) exists.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.5 (v3_13_5) on Linux (lc2293-tx30) on 2/26/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.5 (v3_13_5) on Linux (lc2050-tx30) on 2/26/2016 ==

2016-02-26  Brian Kahne  <bkahne@lc2289-tx30>

	** I've updated the Graphite core model to make more functions
	virtual, in order to increase the flexibility of the interface.

2016-02-12  Brian Kahne  <bkahne@lc2289-tx30>

	* I modified watchpoint behavior slightly- we now check for a
	watchpoint hit by word-aligning the address, since when we set a
	watchpoint, we word-align that address.  Previously, we were
	missing non-aligned watchpoint occurrences.  Added in320.dat to
	check.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.4 (v3_13_4) on Linux (lc2293-tx30) on 2/5/2016 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.4 (v3_13_4) on Linux (lc2289-tx30) on 2/5/2016 ==

2016-02-05  Brian Kahne  <bkahne@lc2289-tx30>

	** The <b>adl-config</b> script has been modified so that the
	Boost libraries are no longer included in the library flags for
	the basic model configuration.

2016-01-29  Brian Kahne  <bkahne@lc2289-tx30>

	* Modified adl-config so that it no longer lists Boost libraries
	for the "basic" configuration.  This way, we don't require the
	Unicode support libraries which tend to differ between RHEL5 and
	RHEL6.

2016-01-13  Brian Kahne  <bkahne@BrianUbuntu>

	* Minor fixes for building on Ubuntu.  There were linking errors
	when building with --enable-shared on Ubuntu 14.4.
	tests/scripts/dtest3 couldn't find RNumber symbols; I had to add
	in the static library to get it to link, for some reason- seems
	like an ld bug.  ppc-graphite-cache wasn't linking with the
	Graphite library; I had to add that to the performance model
	plugin, for some reason.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.3 (v3_13_3) on Linux (lc2293-tx30) on 12/16/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.3 (v3_13_3) on Linux (lc2243-tx30) on 12/16/2015 ==

2015-12-15  Brian Kahne  <bkahne@lc2289-tx30>

	* I think I've finally fixed the issue with 64-bit addresses and
	the DMI cache.  The problem was that, in the read and write logic,
	the DWMask value wasn't being expanded into a uint64_t, thus
	masking the address by it resulted in a 32b value, thus yielding
	an incorrect value, which resulted in a segfault later on when it
	was combined with the value stored in the DMI cache.  Fixed this
	and added in319.dat with mod10.adl to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.2 (v3_13_2) on Linux (lc2293-tx30) on 12/4/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.2 (v3_13_2) on Linux (lc2243-tx30) on 12/4/2015 ==

2015-12-04  Brian Kahne  <bkahne@lc2289-tx30>

	* Modified gdbtest0 to test the use of a default register mapping.
	Modified dtest3 to test displaying register names.

	* We now generate a default register map and list out register
	names in the disassembler, for any register or register file
	tagged with the "debug" attribute.

2015-12-03  Brian Kahne  <bkahne@lc2289-tx30>

	** A new feature has been added to the assembler/disassembler,
	<b>adl2asm</b>: The <b>--dbg</b> feature will cause extra
	information to be generated in the disassembler, for use by a
	debugger port.  This includes a disassembler function which
	disassembles to a structure, simplifying the task of writing, for
	example, function prologue examination code.

	When this feature is used, an additional header file is generated,
	called <b>instr-info-&lt;model&gt;.h</b>.  This contains an
	enumerated type listing all instructions, plus additional helper
	classes.

	We also generate a list of registers based upon registers or
	register files tagged with the attribute <b>debug</b>.  This list
	can then be used by a GDB port for register names.  We will also
	use those registers in a model to provide a default register map,
	meaning that a configuration file does not need to be provided.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.1 (v3_13_1) on Linux (lc2293-tx30) on 11/20/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.1 (v3_13_1) on Linux (lc2243-tx30) on 11/20/2015 ==

2015-11-20  Brian Kahne  <bkahne@lc2289-tx30>

	** A new command-line parameter has been added for models:
	<b>--gdb-ext-mode</b>.  This specifies whether the GDB server
	should default to using extended-mode and should create a port
	file accordingly.  The default is true and may be negated.

	* Cleaned up shutdown behavior for the gdb server. Now, if we're
	not in extended-mode, we shutdown and exit when we're done running
	the program.  In extended mode, we shut down if we receive an
	"exit" monitor command (qRcmd packet).

	Many of the regressions had to be updated for this change, since
	now, if you don't turn on extended mode (send '!'), and continue,
	the simulator will exit.

2015-11-19  Brian Kahne  <bkahne@lc2289-tx30>

	** The external resource interface has changed slightly: The reset
	routine now takes two boolean parameters, init and por, which
	indicate whether the reset is occurring due to initialization or a
	power-on-reset condition.

	* iss/RemoteGdbServer.C (adl): Fixed a subtle error with the gdb
	interface: When we stop on a breakpoint in a multi-threaded
	simulation, we need to switch to that thread, e.g. switch
	contexts, because GDB will expect that thread to be active when
	control returns.  Otherwise, gdb gets very confused about where it
	is.  Added designs/gdbtest20.gdb to test.

2015-11-17  Brian Kahne  <bkahne@lc2289-tx30>

	* iss/RemoteGdbServer.C (adl): Minor fix for stepping- before
	stepping we activate all cores in case an external scheduler wants
	to run other cores.

2015-11-16  Brian Kahne  <bkahne@lc2289-tx30>

	* Various improvements for interacting with debuggers.  I fixed
	the disassembler so that it works properly with how GDB invokes
	it- we check to make sure that a supplied buffer is valid before
	checking it.

	* Fixed memory debug accesses- if we don't have any translating
	MMU lookups, then we don't try and do a translation for a debug
	access, since this implies we just have an MMU for protection
	reasons, which isn't relevant for debug accesses.  Still need a
	regression for this change!

2015-11-09  Brian Kahne  <bkahne@lc2289-tx30>

	** The list of CacheAccess values has been modified to now include
	a type, CatchIFetchTrans, which indicates that an instruction
	fetch is being performed for use by a translating model, e.g. the
	decode cache.  In other words, this should be interpreted as a
	zero-timed access.

2015-11-05  Brian Kahne  <bkahne@lc2289-tx30>

	** The logic for touching the instruction cache when using the
	decode-cache models has	been updated.  We now detect if a
	misaligned instruction crosses a cache line and touch the new
	cache line.

	We will also insert icache touch logic even if no icache is
	present, if <b>icache_touch = true</b> is in the configuration
	file or if <b>--icache-touch</b> is set on the command-line.  In
	this situation, we call the standard fetch routine, so that if an
	external cache model is being used, a touch will occur.  In this
	situation, the cache line size is specified via
	<b>cache_line_size</b> in a core config group in the .ttc file.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.0 (v3_13_0) on Linux (lc2293-tx30) on 10/27/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.13.0 (v3_13_0) on Linux (lc2286-tx30) on 10/27/2015 ==

2015-10-26  Brian Kahne  <bkahne@lc2286-tx30>

	* iss/ConfigParser.C (adl): The config parser was not correctly
	handling defmod blocks.  First, we weren't storing the modify
	parameter, and second, when we created a new core or system node,
	we overwrote any existing ones.  Fixed this by only creating new
	nodes if one didn't already exist.  Modified mod13.ttc to test.

	* adl-asm-impl.C (find_enum_option): Added a check to make sure
	that enums is not null.

	* Fixed a bug with the decode cache: If we set our TD threshold to
	0, then invoked the simulator, we didn't check the td counter
	against the threshold first, so we'd start simulating.  In
	contrast, the interpreter checks the counter initially, so it does
	not execute anything if the threshold is 0, which is the behavior
	we want.  Fixed this by adding a check in simple_run_dc and
	simple_run_jit.  Added in316.dat/in316.cli with mod1 to test.

	* Minor change for exception handling- we now only clear
	exceptions that were set before the call to genExceptions().  This
	means that if additional exceptions are generated during exception
	handling, they won't be cleared, so that we'll handle them again.
	Added in315.dat/in315.cli with mod11 to test.

2015-10-23  Brian Kahne  <bkahne@lc2286-tx30>

	** The behavior of the ELF reader has been changed.  Previously,
	we would use the ELF file's logical addresses for loading memory,
	unless the <b>--elf-pa</b> or <b>--elf-ea</b> flags were set.
	However, in many cases, users expect the ELF to obey the logical
	to physical mapping, and in other cases, some tools simply set the
	physical addresses to zero.

	The new behavior is to default to using the local to physical
	translation, unless all physical addresses are zero, in which case
	only logical addresses are used.  The flag <b>--no-elf-pa</b> may
	be used to force the use of logical addresses only.

	* I've made a lot of changes to the assembler and linker, in terms
	of handling relocations.  I now attempt to handle them so that it
	will be compatible with existing linkers, in that relocations have
	the appropriate byte-aligned offsets, but that our linker and
	assembler, since they're generated, are smart enough to know how
	to undo the offset and apply values correctly.

	* I've modified the relocation action function to take an
	additional parameter, so that the function can know if it's being
	called for by the linker (which also holds true for a local label)
	or just being called by the assembler, with a subsequent linker
	pass required.

2015-10-20  Brian Kahne  <bkahne@lc2286-tx30>

	* Fixed up various build/distribution errors with ld in binutils.

	* I think I fixed the weird parallel build issue- I think this was
	caused by bfd rebuilding its doc/bfd.h header.  By removing these
	build targets, it no longer builds this file, which I believe was
	leading to the trouble.  Looks like I didn't previously build this
	either- it was caused by merging in Makefile code when initially
	working on the linker generation flow.

	** The adl2asm program now supports generating a basic linker.
	This is based upon the powerpc linker, so you'll still see
	references to powerpc in, for example, the linker control file.
	However, it creates custom relocation handling for the relocations
	defined in an ADL file.

	* More cleanup of the linker generation flow and added a
	regression (asm86.s, ld-mod1).

2015-10-16  Brian Kahne  <bkahne@lc2050-tx30>

	* Removed the special_function item from relocations and replaced
	it with "action", which allows the user to define a special
	relocation modification action.  This can be used, for example, to
	modify a high-16 relocation to take into account that the low 16
	is treated as a signed number.  This now allows me to link Quarq
	object files.

2015-10-15  Brian Kahne  <bkahne@lc2050-tx30>

	* More work on the linker.  For relocations associated with
	instruction fields, we use the appropriate setter function, so
	that we can handle complex, split fields.

	== file:///proj/.ppc_43/vc_noec/git/adl release 3.12.6 (v3_12_6) on Linux (lc2293-tx30) on 10/13/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.6 (v3_12_6) on Linux (lc2286-tx30) on 10/13/2015 ==

2015-10-09  Brian Kahne  <bkahne@lc2050-tx30>

	** The Graphite integration has been completely changed.  The
	original integration, which interfaced with the Graphite runtime,
	has been removed, since nobody was using it.  In its place is a
	new feature which allows a user to install a Graphite core
	performance model.  This model receives operand and instruction
	information as each instruction is executed, making its behavior
	similar to a uADL safe-mode model, except much simpler.  This
	works with both interpreted and decode-cache models.  This should
	work with JIT models, but this has not been tested.

	* More Graphite integration updates.

2015-10-08  Brian Kahne  <bkahne@lc2050-tx30>

	* The Graphite out-of-order model is now compiling in Quarq.

2015-10-08  Brian Kahne  <bkahne@lc2050-tx30>

	* Updates for the Graphite integration.

	* For assembler operand range checking, I turned off the checking
	for relocations. I was running into issues where I couldn't tell
	if a value was large or was supposed to be negative.  I figure if
	the linker thinks something is correct, I'll go with it.

2015-10-06  Brian Kahne  <bkahne@lc2050-tx30>

	* Updated the Graphite performance model to use the newest core
	models from UConn Graphite repository.

2015-10-05  Brian Kahne  <bkahne@lc2050-tx30>

	* Fixed a bug with the assembler.  We weren't checking operand
	ranges for fixups, so it was possible that a branch with a target
	label that was out of range would be assembled without error,
	producing bad code.  I fixed this by extracting out the
	range-checking logic from valid_input and put it into a new public
	function adl_check_range.  This is now called by adl_apply_fix to
	produce an error if we're out of range.

	Added asm85.s to test. I had to fix mod33.adl, since we were
	trying to apply a negative pc-relative fixup to an unsigned field
	in asm10.s and we now catch that error.

2015-10-02  Brian Kahne  <bkahne@lc2050-tx30>

	* More work on the Graphite performance model integration.  Added
	regressions and various minor fixes.

	* Performance models now work in interpreted mode; I always
	generate leaf wrapper functions and use a member variable
	instruction object to convey operand information to the
	performance model.  It'll be a bit slow, but means that we don't
	always have to use the perf model.

	* Working on the new Graphite performance model integration.  This
	removes the traditional logic, where we actually linked with
	Graphite.  Nobody was using that, so there was no need to
	continue; it just added an extra external dependency.

	In the new approach, we simply allow an external framework or a
	plugin to install a performance model with the core.  This model
	gets information on a per-instruction bases on operands, branch
	activity, and memory latency (if caches are present).  It's pretty
	simple, but should handle what we want- the ability to tack on a
	performance model and have it receive instruction information.

	At this point, the basics are working with the decode cache.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.5 (v3_12_5) on Linux (lc2242-tx30) on 9/18/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.5 (v3_12_5) on Linux (lc2632-tx30) on 9/18/2015 ==

2015-09-17  Brian Kahne  <bkahne@lc2541-tx30>

	* tests/scripts/itrace2tarmac.py: Changed this to invoke python
	via /usr/bin/env so that it will work on Ubuntu.

	* Fixed a bug with the Graphite integration- we were mis-handling
	output file names and not checking to see if an extension existed
	before trying to grab a substring, leading to an exception.  If
	the user used the option --no-output, then "false" was one of the
	listed files, leading to improper handling of the file.

	* We weren't properly handling basic-block construction with
	instructions marked as explicitly ending basic blocks.  For the
	regression, we have to mark all loads and stores as ending a basic
	block, since it could generate an exception, which would
	conditionally terminate a basic block, thus causing confusion with
	the performance model.

	* We had a subtle bug with the decode-cache:  We didn't have a TD
	counter check in exec_cold_block, so we could execute when we
	should have exited.  Fixed this and modified Graphite so that
	everything worked properly.

2015-09-15  Brian Kahne  <bkahne@lc2631-tx30>

	* iss/TarmacReader.C (adl): Subtle fix to get_step.  In the rewind
	code, it was possible to rewind back past the beginning of the
	mmap'd file, leading to a segfault.  Fixed it, but I didn't add a
	regression test, as I can't reliably reproduce it.  However, I did
	modify scripts/test-build to now run the gdb tests; this will
	hopefully expose the problem.

2015-09-14  Brian Kahne  <bkahne@lc2631-tx30>

	** The regression driver framework now accepts a new command-line
	argument, <b>--lsf-res-str=str</b>, which allows users to specify
	an LSF resource string when dispatching jobs via LSF.  I also
	fixed an issue with the handling of separate directories so that
	this feature works with LSF dispatch.

2015-08-28  Brian Kahne  <bkahne@lc2541-tx30>

	* We had a subtle issue with our flush logic which is only
	triggered on a forced flush, when the instruction causing the
	flush is not in position 0 of a stage.  Basically, the call to
	set_tail in the flush functin for that stage puts the stage into
	an inconsistent state wrt. the head and tail pointers.  This then
	causes issues trying to advance subsequent instructions down the
	pipe.

	I fixed this by getting rid of set_tail and replacing it with
	update_tail, which sets tail according to the current head and
	count in the stage.  This is safer and fixes the issue.  Added
	branch9 with dlx2-fwd-bad-br to test.

2015-08-21  Brian Kahne  <bkahne@lc2541-tx30>

	* Miscellaneous build and regression fixes.  I also modified
	itace2tarmac so that it defaults to using the basename of the
	input file.  This simplifies file creation for regressions, since
	the default output file is placed in the current directory.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.4 (v3_12_4) on Linux (lc2294-tx30) on 8/11/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.4 (v3_12_4) on Linux (lc2144-tx30) on 8/11/2015 ==

2015-08-06  Brian Kahne  <bkahne@lc2541-tx30>

	** Two new options have been added for controlling DAT file
	output: <b>--dat-max-size</b> and <b>--dat-max-instrs</b>.  These
	allow the user to specify a maximum DAT file size, in bytes, or a
	maximum number of instructions per file.  The maximum size value
	will be approximate, as we always separate files on an instruction
	boundary, and the first and last files will contain the initial
	and final state, respectively.

	Files are named <b>&lt;file-name&gt;_nN.out.dat</b>, where
	<b>N</b> is an index, starting at 0.  For example, if a simulation
	is run with <b>-trace -o=foo.out.dat --dat-max-instrs=10000</b>
	then the simulation will create files <i>foo_n0.out.dat</i>,
	<i>foo_n1.out.dat</i>, etc.  If the <b>--multi-file-trace</b>
	option is used, then the second core's output will be found in
	files <i>foo_1_n0.out.dat</i>, <i>foo_1_n1.out.dat</i>, etc.

	* The above changes were made to DatWriter.C.  I simply check for
	the overflow condition within the logger and create a new stream
	if necessary, closing the old one.  Added regressions with
	mod1/in4.dat to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.3 (v3_12_3) on Linux (lc2294-tx30) on 7/10/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.3 (v3_12_3) on Linux (lc2286-tx30) on 7/10/2015 ==

2015-07-08  Brian Kahne  <bkahne@lc2286-tx30>

	* Added support for recording thread IDs of fetch operations.
	Added a regression (mt12.dat with test-sysc-mt1) to test thread ID
	logging when using an external memory.

	** The uADL memory interface has been changed slightly:  Rather
	than an instruction ID being passed in to the request methods, a
	ReqInfo object is passed in.  This currently contains an
	instruction ID and a thread ID (only set if applicable), and may
	be expanded in the future.  Logging of memory transactions now
	also includes a thread ID, if relevant.

	Note that the template types of custom caches has changed slightly
	to also include an instruction type, in order to support this
	feature.

	* Lots of changes to change instId to ReqInfo references
	throughout the code.

2015-06-15  Brian Kahne  <bkahne@lc2293-tx30>

	** Added new command-line options for controlling how models dump
	cache and MMU contents to output files.  The options
	<b>--show-all-cache-inits</b>, <b>--show-all-cache-results</b>,
	<b>--show-all-mmu-inits</b>, and <b>--show-all-mmu-results</b>
	allow the user to specify that cache and/or MMU entries should be
	displayed in the initial and/or results sections of output files,
	even if not considered valid.

2015-06-12  Brian Kahne  <bkahne@lc2293-tx30>

	* Fixed a bug with the gdb server: Multi-core, multi-context
	simulations were not reporting the stopping thread number
	correctly.  Fixed this by adding context information to the
	breakpoint logger, so that the gdb server could figure out what
	core/context stopped the simulation, and report it via the
	stop-reply packet.  Added designs/gdbtest19.gdb to test.

2015-06-10  Brian Kahne  <bkahne@lc2293-tx30>

	* Fixed a bug with the gdb server:  Multiple contexts and multiple
	cores caused an assertion failure because of how we were
	populating the gdb server's core map.  Fixed this and added
	designs/gdbtest18.gdb to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.2 (v3_12_2) on Linux (lc2243-tx30) on 5/26/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.2 (v3_12_2) on Linux (lc2242-tx30) on 5/26/2015 ==

2015-05-26  Brian Kahne  <bkahne@lc2321-tx30>

	** A new command-line option, <b>--quiet</b>, can be used to
	suppress simulator output for standalone models.

	* The --quiet parameter sets the QuietMode global, which can be
	used by other frameworks to also suppress their output.

2015-05-22  Brian Kahne  <bkahne@lc2321-tx30>

	* Fixed a bug with uADL store-buffer predicate generation.  For a
	multi-threaded model, we weren't calling via a leaf node, which
	caused a compiler error.  Fixed this and added a predicate (always
	true) to dlx-mt1 to test code generation.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.1 (v3_12_1) on Linux (lc2243-tx30) on 5/15/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.1 (v3_12_1) on Linux (lc2242-tx30) on 5/15/2015 ==

2015-05-15  Brian Kahne  <bkahne@lc2321-tx30>

	* Fixed a bug with forwarding paths: After my other change to
	forwarding paths (searching from back to front), there was a
	situation where we could get an erroneous stall because we
	recorded the tag from the earlier instruction.  Fixed this and
	added fwd12.dat with dlx2-pmr to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.0 (v3_12_0) on Linux (lc2242-tx30) on 5/15/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.12.0 (v3_12_0) on Linux (lc2243-tx30) on 5/15/2015 ==

2015-05-11  Brian Kahne  <bkahne@lc2321-tx30>

	* Initial work on generating ld for a specific architecture.  We
	now build LD but have some deficiencies: It doesn't handle complex
	fields properly, so we'll need to generate setter functions and
	invoke them when necessary.

2015-05-06  Brian Kahne  <bkahne@lc2321-tx30>

	** CFI directives are now handled by ADL-generated assemblers.  We
	curently align data on a 32b boundary.

	* We might want to enhance alignment options at some point- either
	as a generation feature or an architecture feature.  Not sure yet.

	** The <b>adl2asm</b> program now generates a custom
	<b>addr2line</b> program as well as a disassembler and assembler.
	If an assembly file contains debug information and is assembled by
	the ADL-generated assembler, then the resulting ELF file now
	contains correct DWARF debug data which can be queried by the
	addr2line program in order to map addresses to line numbers.

	* Lots and lots of bug fixes to get line mapping to work.  First
	off, relocations are used by the addr2line program, so if we have
	ADL-specified relocations, we have to use them.  Thus, we now have
	to generate a custom addr2line program in order to handle that.
	Second, depending upon the target, it might use 8-byte pointers,
	even though we have a 32-bit ELF file.  That required various
	fixes in the binutils code to get that to work.  I ended up
	changing things so that we generate a custom BFD architecture info
	object which is then used to customize the assembler and
	disassembler so that relocations are handled properly.

2015-05-01  Brian Kahne  <bkahne@lc2321-tx30>

	* Fixed a bug with uADL breakpoints.  For an MT model, we didn't
	correctly detect a breakpoint, because the active() clause checked
	to see if either thread was active.  We also didn't properly
	propagate the clear-breakpoint command to all threads.  Fixed this
	by moving the breakpoint flag into the generated code and making
	UadlArch::setBreakpoint and UadlArch::clearBreakpoint virtual.
	Now, active() returns false if any thread has a breakpoint flag
	set.  Added brkpts2.cli with dlx-mt1-safe to test.

	* Fixed a bug with DWARF line number information emitted by the
	generated assembler.  We needed to emit this ourself; it was being
	generated via a default route, without the proper instruction size
	information, so that the resulting state-machine had incorrect
	data.  Still need to add a regression.

2015-04-30  Brian Kahne  <bkahne@lc2321-tx30>

	** The version of binutils used by the assembler/disassembler
	infrastructure has been upgraded to 2.25.

	* Ported binutils to the latest version: 2.25.  The basic
	methodology is to use external/binutils-adl/upgrade.pl to copy
	over necessary files, then manually convert the rest.  The script
	isn't very good- it currently clobbers the windows headers.  I've
	tried to mark modifications in the basic source with "ADL" to make
	future porting efforts easier.

	There are some definite shortcomings to this approach, however: It
	wipes out the windows headers in win-build and win-headers and it
	doesn't take into account minor modifications made for MSVC
	compatibility.  We might want to update the script to help out
	with that in the future.

2015-04-23  Brian Kahne  <bkahne@lc2321-tx30>

	* Fixed a distribution bug:  MSVC2010 project files weren't being
	included in the distribution tarball.

2015-04-10  Brian Kahne  <bkahne@lc2321-tx30>

	* iss/Memory.h (adl): I was casting to "unsigned long" to perform
	arithmetic for the DMI cache, but this caused a problem-
	apparently, on Windows, this is 32-bit.  So, I now cast to size_t,
	since that's 64-bit on a 64-bit system and 32-bit on a 32-bit
	system- need to verify this on Windows.

	* uadl/ForwardingPath.h (uadl): Minor fix for multiple forwarding
	path entries:  We need to search from the back to the front in
	order to get the correct value.

2015-03-23  Brian Kahne  <bkahne@lc2144-tx30>

	** In a prior merge, the change to breakpoint handling in uADL
	models had been accidentally eliminated.  This fix has been
	restored.

	* In a prior merge, the change to breakpoint handling in uADL
	models had been eliminated (defect #901).  I've re-added those
	changes and the change to brkpt.regress to test this.  Not sure
	how that happened!  Must have been due to selecting the wrong side
	during a merge operation.

2015-03-10  Brian Kahne  <bkahne@lc2524-tx30>

	** ADL's license has been upgraded to the Artistic 2.0 license.
	This mainly clarifies the terms of the original license and does
	not alter the main licensing terms.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.11.1 (v3_11_1) on Linux (lc2144-tx30) on 3/3/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.11.1 (v3_11_1) on Linux (lc2243-tx30) on 3/3/2015 ==

2015-02-27  Brian Kahne  <bkahne@lc2524-tx30>

	* Updated documentation generation.  TLBs now include their
	documentation string and contexts report their number of
	instances.

	* Fixed a bug with uADL safe-mode models: If we generated with
	--low-mem, then we only returned back an instruction object if the
	decode function (leaf wrapper) returned a value, because it was
	handled as an assignment from the function return.  But if an
	exception occurred, then the exception unwound the stack, meaning
	that the 'instr' object never got assigned, resulting in a leak of
	instruction objects and bad fetch behavior.  Fixed this by passing
	'instr' as a reference, so that it gets updated immediately.
	Added uadl/ex9.dat to test, and added new targets dlx2-lm and
	dlx2-safe-lm to test low-mem-mode with normal and safe-mode
	models.

2015-02-23  Brian Kahne  <bkahne@lc2524-tx30>

	* Fixed a bug with uADL safe-mode models: Because we were updating
	decode after we executed an instruction (because execution is now
	done in decode), this caused problems with Quarq when trying to
	repeat an instruction.  Fixed this by having the decode logic call
	decode-update.  Unfortunately, I don't know of a good way to
	duplicate the situation that Quarq found, so I wasn't able to add
	a targeted regression for recreating this problem.

2015-02-23  Brian Kahne  <bkahne@lc2320-tx30>

	* It seems that modern browsers were not rendering the alphabet
	index in the ADL documentation correctly- this was done using
	utf-8 non-blocking spaces, which the browsers don't see as the
	correct utf-8 character.  Since this is genereted as raw HTML, I
	simply changed the code to generate '&nbsp;' instead and modified
	the regressions to pass.

2015-02-20  Brian Kahne  <bkahne@lc2320-tx30>

	* We had a bug when compiling a uADL model with separate ISS
	compilation.  The ADL_HEADER ifdef's caused the breakpoint
	functions to be skipped by the uADL model compilation, so that
	we'd call the IssCore variants instead, which just reported that
	breakpoint support wasn't enabled.  Fixed this and modified
	scripts/dlx-lm-jobs-safe to use separate compilation; this runs
	uadl/brkpts.cli to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.11.0 (v3_11_0) on Linux (lc2243-tx30) on 2/10/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.11.0 (v3_11_0) on Linux (lc2144-tx30) on 2/10/2015 ==

2015-02-10  Brian Kahne  <bkahne@lc2320-tx30>

	* scripts/rdriver.pm: The default LSF job-size parameter was
	dropped with the change to calling the option --lsf-job-size.
	Fixed this.

2015-02-09  Brian Kahne  <bkahne@lc2320-tx30>

	* We now trigger exception handling for a state if write_ops is
	present, since that might trigger an exception via a register
	write hook.  Added uadl/ex8.dat to test.

2015-02-05  Brian Kahne  <bkahne@lc2289-tx30>

	* Added dlx2-pmr to the regression suite, using the same tests as
	for dlx2-pmr-safe.  This tests that we can have a normal-mode
	model with pipelined memory requests.

2015-02-04  Brian Kahne  <bkahne@lc2289-tx30>

	** This release features a re-working of uADL safe-mode models.
	Instruction execution now happens directly at time of decode,
	yielding a speed improvement and simplifying the handling of
	branches.  Logging has also been simplified and now features
	proper hanlding of branch and basic-block-end events.

	* Cleaned up generation of the transactional logging library.
	With these latest updates, there's no longer a difference between
	the two, so I've reverted back to only a single library.

	* Re-working transactional-ISS logging to simplify it.  The
	current version is quite a hack with instruction memory reads- we
	go through this complicated logic to figure out which logging
	elements to keep.  Now, logging is handled via the instruction
	read routine, which logs the relevant accesses.  This required
	some fiddling around with instr_read32, since with a simple
	example like tdriver, we split up misaligned accesses, while for
	uADL, we always read from the same buffer.  This required adding
	an option (trans_split_fetch) so that they can be handled
	separately.  Everything seems to work, but I need to clean up the
	actual transactional logger generation script before I'm fully
	done.

2015-02-03  Brian Kahne  <bkahne@lc2289-tx30>

	* I simplified instruction prefetching a bit, but the support for
	multiple fetch translation results still exists to support a
	simpler client, such as tdriver.C.  For uADL, where the fetch unit
	breaks up fetches, only a single prefetch translation exists.
	This is set via trans_ifetch_accesses in ConfigDB- it defaults to
	2, but uADL sets it to 1.

2015-02-02  Brian Kahne  <bkahne@lc2289-tx30>

	* Miscellaneous updates to get normal mode to work with all
	regressions.  I had to modify RecordLog and the logger functors to
	use a separate counter, since for 64-bit reads/writes, seq is 0
	across both words.  Various other fixes, including getting the
	blocking memory interface to work with a transactional ISS- I'll
	keep that concept around for now, since we have regressions which
	test it.

	All regressions now pass.  To do: Refactor fetch to be more like
	safe-mode, or else figure out why that's not a good idea.

	* Added the --lsf-queue option to the regression driver so that a
	user can modify the queue they want to use.  The default remains
	'normal'.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.10 (v3_10_10) on Linux (lc2144-tx30) on 2/2/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.10 (v3_10_10) on Linux (lc2243-tx30) on 2/2/2015 ==

2015-01-30  Brian Kahne  <bkahne@lc2289-tx30>

	* Various fixes for new normal mode.  Logging is now handled
	slightly differently- we record the ea/ra pairs on the first pass,
	using RecordLog to store them into the logger functor.  On the
	second pass, we use those addresses for logging, allowing us to
	avoid having to translate again.  About 48 regressions fail;
	everything else passes.

	* Starting work on getting pipelined memory requests working for
	normal-mode models.  This now kinda works with a manually edited
	model (ISS memory generation needs to still change).  The basic
	idea is that a read or a write is divided up into two phases,
	handled by two instantiations of read_internal or write_internal.
	The first phase does translation and records memory requests using
	a mechanism similar to safe-mode models.  The second phase simply
	swaps back to the pipeline model in order to retrieve or set data
	values.

	Work to be done:

	1.  Get ISS generation done.

	2.  Get all regressions to pass and add tests for dlx2-pmr (new).

	3.  Refactor prefetch code to be simpler and more akin to
	safe-mode.

	4.  Can we simplify the logging mechanism?  Handling instruction
	reads and stuff is too complex at this point.

2015-01-28  Brian Kahne  <bkahne@lc2289-tx30>

	* More safe-mode cleanup: Removed the instruction linked list.
	This linked list was added in order to simplify branch errors and
	recovery, but it's no longer needed, now that we've simplified
	safe-mode models to directly execute during decode.

2015-01-27  Brian Kahne  <bkahne@lc2120-tx30>

	* For MT uADL safe-mode iss-mem-mode models, we weren't generating
	shared caches, which could potentially affect performance.  I
	changed this and added dlx-mt1-imm-safe to test that everything
	compiles and runs.

	* Minor fix for the Windows compilation issue with MT models:
	Since get_logger() in IssNode isn't virtual, I removed
	get_logger_internal() and am just using get_logger() now.

2015-01-26  Brian Kahne  <bkahne@lc2120-tx30>

	* Added redundant returns to various uADL-generated functions to
	placate MSVC.  GCC correctly figures out that no return is
	necessary due to an assert(0) being there, but MSVC complains
	about no function return.

	* Fixed a weird error with MT models not compiling on MSVC- I'm
	calling get_logger() in some inner functors, due to protection
	issues with accessing _logger directly.

	** Branch logging now works properly for uADL safe-mode models: We
	now log basic-block end events and branch-end events, just as with
	an ADL model.

	* To test the above, dlx-safe loads the count-branches plugin and
	tests against in4.dat as a regression.

	* Decode-miss code has been moved into a leaf function when
	--low-mem is used for creating ADL or uADL models.

	* Undid the extra TLB lookup on prefetch- it doesn't occur
	frequently and it's required in order to catch alignment issues
	with branches.

	* More safe-mode cleanup.  Simplified external exception handling-
	genExceptions now updates the CIA to the NIA, then handles the
	exception.  There's also now no need to force a new TLB lookup in
	prefetch.

2015-01-22  Brian Kahne  <bkahne@lc2320-tx30>

	* Further cleanup of safe-mode: I now call the instruction
	handlers directly and no longer generate execution driver
	functions.

2015-01-21  Brian Kahne  <bkahne@lc2320-tx30>

	* All regressions now pass for the new safe-mode configuration,
	where exec and decode are merged.  Have not yet tested with
	adl-models.

2015-01-20  Brian Kahne  <bkahne@lc2320-tx30>

	* First pass at merging execution and decode for safe-mode models.
	This now works for all dlx2-safe tests.  The idea is that, for
	safe-mode models, we immediately execute the instruction in the
	decode function, if not running speculatively, and handle any
	exception information at that point.  This way, we don't bother
	with the overhead of calling an exec function later on.

2015-01-19  Brian Kahne  <bkahne@lc2320-tx30>

	* Simplified some of the fetch-exception detection logic, removing
	the call to instrReadTranslate right before calling decode.  I now
	just let decode handle it- we'll suppress NIA changes b/c we check
	for the speculative situation when we catch the exception.  Added
	uadl/issue14.dat to test.

	* For safe-mode models, we only execute exception handlers if
	we're not speculatively executing, i.e. use_addr is false.  Now,
	all adl-models uADL regressions pass.  Still need to add a
	regression for this fix, though.

2015-01-16  Brian Kahne  <bkahne@lc2120-tx30>

	* Merged from master and all relevant e200 regressions now pass.

	* I need to translate before calling decode for a safe-mode model,
	to catch the situation where an exception may have changed state,
	meaning that the second instruction for dual-issue might now
	generate an exception.  Added this and z446 regressions now pass;
	need to add a regression for ADL.

	* Last few changes to get all regressions passing.  Added
	-log-fetch to smdriver.C to toggle fetch logging, to handle
	differences between different cache models.

2015-01-14  Brian Kahne  <bkahne@lc2120-tx30>

	* The main feature to work on now, after the fetch-exception
	business, is merging exec and decode.  Then we need to merge and
	implement branch logging features which exist in the ADL models.

	* All regressions now pass, though a few smdriver test have been
	commented out until I figure out how to handle fetch exceptions in
	a way which works with safe-mode models and smdriver.

	* The safe-mode logging library is called SafeModeLogging.C and is
	generated via a different command-line option to
	trans_logging_events.

	* Removed reset statements for dynamic MMU parameters.

	** Added a new scripting command, <b>modelreset</b>, which resets

	** Added a new scripting command, <b>modelreset</b>, which resets
	the models in a simulation but does not reset memory.  This is in
	contrast to <b>simreset</b> which resets models and memory.

	** Parameters for parameterized caches and MMUs are no longer
	reset via a call to <code>IssNode::reset</code>.  Instead, they
	persist across reset and are only changed via the dynamic
	parameter interface.

	* Fixed a segfault caused by modifying parameters in an MT model
	with dynamic caches.  Basically, the cache's parameters were
	modified to a smaller cache, so the cache was reallocated, but the
	cache-parms-modified flag was only set to true for that core.  At
	reset time, the cache was reset back to its original, larger size,
	but it wasn't reallocated b/c the system-level cache-parms
	modified flag was still false.  This caused a segfault when we
	tried to access sets which we thought existed but had been deleted
	due to the prior reallocation.

	Fixed this by never reseting cache parameters.  Added
	uadl/dynparm3.cli to test this behavior.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.9 (v3_10_9) on Linux (lc2289-tx30) on 1/14/2015 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.9 (v3_10_9) on Linux (lc2320-tx30) on 1/14/2015 ==

2015-01-09  Brian Kahne  <bkahne@lc2120-tx30>

	** ADL/uADL models now natively support reading Intel Hex format
	files.  This is done automatically for files with a <b>.hex</b> or
	<b>.ihx</b> file extension, or if a format of type <i>hex</i> is
	specified.  Output defaults to DAT unless otherwise specified.

	* Added asm84.hex with mod1 and hello.hex with generic32 for
	testing.  The reader makes use of Boost mapped_file to allow it to
	use memory-mapped file I/O across both Windows and Linux.

2015-01-08  Brian Kahne  <bkahne@lc2120-tx30>

	** A new command-line option, <b>--static</b>, has been added to
	the generation scripts <b>adl2iss</b>, <b>adl2asm</b>, and
	<b>uadl2model</b>.  This will cause the linker to link the
	resulting program statically, in order to reduce the number of
	dependent shared libraries.  Only default system libraries, such
	as libc, are still linked dynamically.

2015-01-07  Brian Kahne  <bkahne@lc2120-tx30>

	* Fixed a bug with uADL and dcbz operations.  In the case where we
	kick the operation down to the next level of memory, e.g. because
	we aren't doing a write-on-allocate, we create a series of
	store-next actions and corresponding store buffer entries.
	However, we weren't setting up the addresses properly, so that we
	would hit an assertion because of mismatched effective addresses
	between the action and store buffer entry.  Fixed this and added
	cache7.dat to test.

2014-12-17  Brian Kahne  <bkahne@lc2120-tx30>

	* I'm trying to simplify setup for Windows builds by moving what
	was in the CASystem project into ADL as test-sysc-base and adding
	a setup script to create the links and regression files that we
	use (scripts/win-env-setup).

2014-12-17  Brian Kahne  <bkahne@BrianUbuntu>

	* Not sure what happened, but we had link errors on Ubuntu all of
	a sudden- we were missing some libraries like pthread and rnumber.
	So, I've fixed those.

2014-12-17  Brian Kahne  <bkahne@lc2120-tx30>

	* Fixed some minor build issues after merging from the hwsw branch.

2014-12-15  Lu Hao  <b48275@lvd1150-tx30>

	** A new hook has been added to the configuration file:
	<b>compl_time</b>.  When a model is compiled with
	<b>--log-td-commit</b>, this hook allows the model to query for
	the value to be used for the completion time of an instruction.
	By default, the current value of the temporal decoupling counter
	is used.

	** Added Hardware/software debugging feature: 1) TARMAC
	reader support to analyse TARMAC trace file; 2) Trace run-control
	to support post-processing GDB debugging for ARM core.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.8 (v3_10_8) on Linux (lc2320-tx30) on 12/15/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.8 (v3_10_8) on Linux (lc2289-tx30) on 12/15/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.8 (v3_10_8) on Linux (lc2289-tx30) on 12/15/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.8 (v3_10_8) on Linux (lc2320-tx30) on 12/15/2014 ==

2014-12-11  Brian Kahne  <bkahne@lc2120-tx30>

	* Fixed a bug with the caching of MPU regions.  For something like
	the e200 MPU, where we could have overlapping descriptors, we
	would cache the first entry, which might not even be valid, and
	not cache the potentially smaller segment that was valid.  This
	could then result in us thinking that an address in that larger
	segment was now valid.

	For example, we have a segment in way 5 that's read-only for all
	of memory and a segment in way 0 that allows writes to a subset of
	memory.  We would match in way 0, then match in way 5, but
	continue searching, but incorrectly cache way 5's region.  Later,
	we'd OK the memory access b/c it matched in way 0, but we've
	cached the way 5 data.  Another access comes along which shouldn't
	be allowed, because it doesn't hit in way 0, but does in way 5
	(which is cached).

	Fixed this way clearing the cache (set lb to 0 and ub to -1), then
	caching the smallest subset as we go along.  Added iss/in314.dat
	to test.

	* Minor change to breakpoint handling in safe-mode models:  We now
	breakpoint on the ISS's NIA in order to be consistent with ADL's
	behavior.  This seems to work OK, since the safe-mode model has a
	normal ISS within it.  Modified uadl/brkpts.regress to reflect
	this change.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.7 (v3_10_7) on Linux (lc2289-tx30) on 12/9/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.7 (v3_10_7) on Linux (lc2320-tx30) on 12/9/2014 ==

2014-12-09  Brian Kahne  <bkahne@lc2075-tx30>

	* Yet another problem with SMT models.  We weren't
	creating the declarations for multi-file models correctly; we
	weren't fully qualifying the core, i.e. thread, names, resulting
	in compilation errors.  I fixed this and modified mod13-em.so
	(driver17) to be multi-file in order to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.6 (v3_10_6) on Linux (lc2320-tx30) on 12/9/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.6 (v3_10_6) on Linux (lc2289-tx30) on 12/9/2014 ==

2014-12-08  Brian Kahne  <bkahne@lc2075-tx30>

	* We had compile errors when we compiled an SMT model with
	external memory and external DMI.  Basically, at the system level,
	we would reference the DMI object, but then not instantiate it.  I
	just modified the code to not reference the DMI object.  Added
	scripts/driver17 (based on mod13.adl) to test, using
	iss/in313.dat.

	* Added scripts/driver17 to test the compilation of a
	multi-threaded model with external DMI.  Moved uadl/mt11.dat to
	iss/in313.dat in order to test the standalone MT model, driver17,
	and dlx-mt1, all with the same example.

	* Fixed an issue with multi-threaded uADL models: When a thread
	would set up another thread by writing to register values, then
	activate the other thread, the second thread would not start at
	the proper location b/c its fetch unit was not properly
	synchronized.  So, it would work for ADL but not for uADL.  Fixed
	this by having the ADL model's activate() method call a new method
	called synchronizeActivation.  This is implemented by uADL and
	resets the fetch unit.  Added mt11.dat with dlx-mt1.uadl to test.

	* Fixed a subtle uADL bug with logging register-file updates which
	are logged as register writes/reads.  In the ADL model we'd create
	a register name via sprintf, then store that character pointer in
	the logging object.  However, the character buffer could get
	overwritten, resulting in a bad register name.  Fixed this by
	having the transactional logger store a string instead.

	* We weren't properly handling the shared block with defmod-
	basically, it would just replace any prior definition.  The
	problem was that we only had a single variable holding a shared
	block and not a list, as for other defines.  Fixed this and added
	fe/shared18.adl to test.

2014-12-04  Brian Kahne  <bkahne@lc2075-tx30>

	** When using tracediff, incremental scan is now only activated
	via the use of the --inc-scan command-line parameter, and not by
	file size, since incremental scanning is not supported for UVPs.

2014-11-21  Brian Kahne  <bkahne@lc2294-tx30>

	** uADL now supports dynamic selection of linefill widths during
	runtime.  The width may be specified on a per-cache basis via the
	new <b>linefill_current_access_width</b> hook function.  Please
	refer to
	<a href="http://cad.freescale.net/adl/chrome/site/uadl-manual.html">the
	uADL reference manual</a> for more information.

	* Modified dlx2-wide.uadl to test the above, but as of now, I
	don't really have a good regression which tests dynamic resizing
	at runtime.  Not sure what the best approach is for doing that.  I
	did add issue13.dat just to make sure that we don't get a crash or
	infinite loop.

2014-11-17  Brian Kahne  <bkahne@lc2294-tx30>

	* macros/bzip2.m4: Minor fix for the --with-bzip2 option.  In some
	cases, we weren't setting up the final cflags and ldflags
	properly.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.5 (v3_10_5) on Linux (lc2289-tx30) on 11/13/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.5 (v3_10_5) on Linux (lc2294-tx30) on 11/13/2014 ==

2014-11-12  Brian Kahne  <bkahne@lc2294-tx30>

	* scripts/make-release-notes (get_basic_credentials): Fixed a bug
	with processing Trac bug URIs.  The data returned from Trac had a
	UTF-8 byte-order-mark on it.  Perl doesn't natively remove that,
	so it ended up messing up the header info in the CSV data
	structure.  Fixed this by simply removing it via a substitution
	operation.  Now, the resulting URIs in the readme are
	correct. Previously, the bug numbers were missing.

	* uadl/Cache.C (uadl): We had an assertion failure caused by a
	mismatch between the next-level-action's addrss and the store
	buffer entry's address.  In that particular case, the problem was
	that the store buffer was disabled at the point of the store, so
	we didn't store the request's address information in the
	next-level-action.  However, we then re-activated the store buffer
	for that request, because we always use it for write-through
	transactions.  Then, we later checked the address information via
	the assertion and it failed.

	The fix was to always store the address information.  Not sure why
	this wasn't always done.  We didn't have any regressions with an
	optionally enabled/disabled store buffer, so we never tested this.

	I fixed this and added cache6.dat to test.  Modified
	mod21-uadl.adl/dlx-cache-split-pc2.uadl to add an enable predicate
	for the store buffer.

2014-11-11  Brian Kahne  <bkahne@lc2331-tx30>

	* Read/write system calls with very large buffers could cause a
	segfault when run in a multi-threaded simulator because we were
	stack-allocating the temporary data buffers.  This works for a
	single thread, but runs up against the smaller stack size
	limitations of threads.  I fixed this by creating a buffer object
	which heap allocates if the buffer is larger than a certain size
	(set to 1024 bytes at this point).

	* Added designs/syscall7.c to test.

2014-11-03  Brian Kahne  <bkahne@lc2525-tx30>

	* We had a bug in uADL for safe-mode multi-threaded models: The
	branch-error detection logic got confused if there was another
	instruction in the pipeline from another thread, causing an
	incorrect forced-flush.  This could lead to wrong answers in some
	cases, if the speculative flag wasn't set, causing repeat
	instruction execution.  Previously, we had logic which attempted
	to find the next instruction in the pipeline, but that could get
	complicated.  I replaced it with an extra pointer in each
	instruction which stores the next instruction in the pipe.  We now
	query this to compare its address with the branch's next address
	in order to see if we should flush.  Added mt10.dat to test this.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.4 (v3_10_4) on Linux (lc2525-tx30) on 9/15/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.4 (v3_10_4) on Linux (lc2053-tx30) on 9/15/2014 ==

2014-09-02  Brian Kahne  <bkahne@lc2053-tx30>

	** The cache size may now be set directly as a dynamic parameter,
	rather than having to specify the number of sets.  This will
	configure the set count based upon the current line size and
	associativity.

	* Modified in182.tcl to test this feature.

2014-08-29  Brian Kahne  <bkahne@lc2053-tx30>

	** A new ISS model-build configuration option (.ttc option) has
	been added: </b>post_sim</b>.  This is a 0-argument hook which is
	executed at the end of a simulation run or upon time-quantum
	expiration.

	* Modified mod72 and dlx-zl2-safe to test this feature.

2014-08-28  Brian Kahne  <bkahne@lc2525-tx30>

	** A new ISS model-build configuration option (.ttc option) has
	been added: </b>opt_bb_end_instrs</b>.  This may be set to a list
	of instructions or instruction attributes which can optionally end
	a basic block.  This is only applicable to generation of
	decode-cache and JIT models.  This allows an external entity to
	optionally force the simulator to exit the current basic block by
	causing the temporal-decoupling counter to expire.

	* Modified mod72.adl (with in312.dat) to test the above.

	* For multi-threaded models, I've added in a mutex so that
	external memory reads/writes lock memory accesses, as do the
	standard internal memory reads and writes.  This way, if another
	thread uses the core to access memory, it doesn't clobber a
	read/write from the core's own thread.

2014-08-25  Brian Kahne  <bkahne@lc2525-tx30>

	** Added a new configuration file (.ttc) flag,
	<b>external_dmi_write_update</b>, to allow updates on writes by the
	external DMI (when applicable) to the internal DMI, to be
	disabled.  It is necessary to disable this when a model contains
	two or more levels of cache and the top level(s) are
	write-through, since this means that data must exist in more than
	one location at a time, which is incompatible with the concept of
	the DMI cache.

	* I realized that two-level cache configurations, where the first
	level are write-through, really don't work with the internal DMI,
	because this assumes that the data is in only one place, causing
	various problems.  I'm not sure there's an easy way to fix this.
	Ideally, we'd figure this out, but for now, I added a new per-core
	configuration flag in the .ttc file, external_dmi_write_update, to
	disable the update feature, so that things work.  Modified
	scripts/driver9 (with dmiload5.dat) to test this.

	* Fixed some bugs relating to uADL models, found only with testing
	of Quarq with an L2 cache.  For example, we could cancel a
	store-next action b/c we thought that it didn't have an associated
	request, but that's OK, because we delete the request once the
	store-next action is initiated.  Added dlx-zl2-safe to provide a
	more complex model with an L2 cache.

2014-08-21  Brian Kahne  <bkahne@lc2525-tx30>

	** Cache miss latency values specified in a .ttc file may now be a
	function which returns an integer.  This allows a model to
	evaluate miss penalties as run-time, such as by calling a method
	on an external resource.

	* Modified mod89.ttc to test this feature.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.3 (v3_10_3) on Linux (lc2525-tx30) on 8/18/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.3 (v3_10_3) on Linux (lc2524-tx30) on 8/18/2014 ==

2014-08-08  Brian Kahne  <bkahne@lc2120-tx30>

	* The smdriver tests now compiler in tests/iss, but I still get a
	few fails.  Added in a new config parm for toggling the logging of
	fetches.  This is on for the smdriver tests but off for
	iss-mem-mode models.

	Major todos:

	  * Get all of the tests in tests/iss passing (just some smdriver
	    tests are failing right now.  Make sure all regressions pass.

	  * Get rid of the exec functions and merge that into decode.

	  * Benchmark the new safe-mode models against the prior models.
	    Should be faster with the exec functions eliminated.

	  * Verify against all of the e200 regressions.

	  * Do another simplification pass- can we simplify prefetch or anything?

	* Added in a new safe-mode logging library so that we can now
	build safe-mode and normal-mode models.  All of the uadl tests now
	pass.  The smdriver tests in tests/iss fail right now, but that's
	because we turned off fetch logging.  We may want to enable that
	as an option.

	* All safe mode tests now pass, but I'm still not completely happy
	with cache event logging- this should be more attached to the
	instruction than it is, I think.  Still need to fix the logging
	libraries so that we have two.

2014-08-07  Brian Kahne  <bkahne@lc2120-tx30>

	* All but two safe-mode tests are now passing.  Note that normal
	mode models are broken because the transactional-iss logging
	library has been hacked to support the new safe-mode
	architecture.  We'll need to create two different libraries and
	use the appropriate one.

2014-08-07  Brian Kahne  <bkahne@lc2120-tx30>

	** Improved debugability of uADL semaphores: The pipeline trace
	now shows the current count for a semaphore upon acquires,
	releases, and acquisition-failures, in order to make it easier to
	debug allocation issues.

2014-07-28  Brian Kahne  <bkahne@lc2120-tx30>

	** The IssNode get/set memory interface
	(<code>IssNode::getMem</code> and <code>IssNode::setMem</code>)
	now supports 64-bit reads and writes.

2014-07-23  Brian Kahne  <bkahne@lc2120-tx30>

	* We had a bug with the assembler: We weren't placing relocation
	offsets into the addend field in the relocation, so relocations
	with offsets, e.g. foo+100@h, did not work properly.  Fixed this
	and added asm83.s to test.

2014-07-10  Brian Kahne  <bkahne@lc2120-tx30>

	* Fixed a couple of scripting issues:  The interactive interpreter
	wasn't registering the interpreter with the static interpreter
	pointer used by the evalTcl function, so that we ended up creating
	two interpreters.  This caused two issues:  First, we could get a
	segfault due to a double deletion due to invoking the exit handler
	twice.  Second, callbacks with the interactive system didn't work,
	because two different interpreters were being used.  I moved the
	function-scope static to a module-scope static and have the tcl
	app-init function set a pointer to it when invoking interactive
	mode.  Added cli/c54.cli to test.

2014-07-08  Brian Kahne  <bkahne@lc2120-tx30>

	* Modifications to safe-mode models.  I no longer modify the NIA
	as part of branches, in order to simplify the model and make it
	easier to model things like course-grained MT.

2014-07-02  Brian Kahne  <bkahne@lc2120-tx30>

	* Start of major changes to uADL safe-mode models:  The idea is
	that branch handling with uADL is too clunky, since we claim to be
	safe, but then mess around with the NIA, leading to potential
	problems with control flow in the model.  The change is to have
	the ISS always execute according to the NIA and the model does not
	change the NIA.  On branches, we switch into speculative-execution
	mode, but we never change the model's program counter.

	This means that we execute immediately after decode.  We'll
	eventually get rid of 'exec' functions altogether for safe-mode
	models and just execute immediately.  We also don't support the
	instruction cache, right now, since that's designed around a
	fetch-driven architecture.  We'll rethink adding it back in,
	possibly within the ISS itself.

	Right now, basic models work (dlx-safe and dlx2-safe), but we have
	some issues with logging.  I think this can be simplified quite a
	bit, so that's next.

2014-07-01  Brian Kahne  <bkahne@lc2120-tx30>

	* iss/UvpWriter.C (adl): We had a bug with creating UVPs with
	little-endian models.  If a register had fields, then we
	calculated the field widths incorrectly with little-endian bit
	numbering, creating negative numbers which were interpreted as big
	unsigned numbers, causing a segfault.  Fixed this and modified
	mod40.adl and adding in311.dat/in311.uvp to test.

	* iss/ExecSupport.C (adl): I no longer clear the writers list in
	installLoggers, so that it can be called multiple times before the
	simulation starts.  I then created clearLoggers() to clear the
	list, in case somebody needs to restart the entire simulation.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.2 (v3_10_2) on Linux (lc2050-tx30) on 6/27/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.2 (v3_10_2) on Linux (lc2293-tx30) on 6/27/2014 ==

2014-06-23  Jing Huang   <Jing.Huang@freescale.com>

	* During assembler generation, a table of register names is
	generated, which includes the elements of each register file, if
	it has a prefix. However, since the prefix is optional but it
	certain occasions it is still required the elements be put into
	the table, then this new option prefix_for_regname can be used,
	which would populate the table with elements prefixed with the
	specified string.

2014-06-16  Brian Kahne  <bkahne@lc2632-tx30>

	* Fixed a bug with read/write contexts:  For uADL, we weren't
	disabling the logging of memory accesses, so an instruction could
	get assigned a large number of memory reads or writes as a result
	of a context switch.  This could end up going to an instruction
	which had already been comitted, resulting in what was essentially
	a memory leak of memory access objects.

	Fixed this by having a boolean to disable memory logging.  For
	safe-mode models, logging is disabled when doing a read or write
	of a context.  It's also possible to disable logging by calling
	UadlArch::enableMemLogging(false).

2014-06-13  Brian Kahne  <bkahne@lc2632-tx30>

	* We now support the --mt-support option for uadl2model, in order
	to create MT-capable uADL models (supports locking around memory
	blocks, etc.).

	* Fixed a bug with the reset-fetch checking logic in uADL models-
	we had an off-by-one error.

2014-06-12  Jing Huang   <Jing.Huang@freescale.com>

	* Added an assembler option, explicit_operand_regex_end, to explicitly 
	add the end of string to the operand regex. 

2014-06-12  Brian Kahne  <bkahne@lc2632-tx30>

	* Fixed a bug with external memory and 0-byte accesses:  We didn't
	have write0 defined correctly for SimpleCache, so 0-byte writes
	didn't actually do anything.  Fixed this and modified
	scripts/driver15 to test.

	* Course grained MT with uADL safe-mode models wasn't working
	correctly because there was no way to prevent a branch in the
	pipeline from updating the PC after a thread switch.  Now, after a
	fetch reset, any instructions prior to the fetch reset are ignored
	via UadlArch::_resetFetchId.  I also added
	UadlArch::restoreIssProgramCounter, which for safe-mode models
	restores the PC if it was set to the alternate path of a branch.

2014-06-10  Brian Kahne  <bkahne@lc2632-tx30>

	* asm/GenAsm.C (adl): Fixed a bug with instruction sorting in the
	assembler.  We were always prioritizing shorter instructions
	before longer instructions, even if the shorter ones had more
	register operands.  This could lead to incorrectly selected
	instructions, since we don't require a register operand to have a
	register prefix.  So, for example, "foo r4,1" would select a
	shorter register-register version of an instruction vs. a longer
	register-immediate instructions.

	To fix this, the sorting algorithm first sorts by field type,
	prioritizing immediates before register operands, then if all else
	is equal, selects the shorter instruction before the longer one.
	Added mod96.adl and asm82.s to test.

2014-06-10  Jing Huang   <Jing.Huang@freescale.com>

	* Added a relocation option, right_shift_exp, to specify the expression
	to the number of bits the relocation value is right-shifted before it is
	encoded. Note that there exists an option, right_shift, to specify the
	same but is limited to integers only. The new option, however, allows
	strings, so it can be used to express something beyond integers, as required
	by some assembler application. Currently, this new option only manifest
	itself in the generated XML.

2014-06-09  Brian Kahne  <bkahne@lc2632-tx30>

	* Fixed a memory leak with the ELF reader:  We weren't deleting
	the underlying ELF parser object, thus we weren't freeing up that
	data.

	* Fixed an uninitialized variable issue in uadl/Cache.

	* Fixed a memory leak with uadl models: We weren't deleting the
	cache-hint data.

2014-06-06  Brian Kahne  <bkahne@lc2632-tx30>

	* Some more changes to adl-config:  Got rid of --uadl-base and
	added --uadl-support to add on the uadlSupport library.

2014-06-05  Brian Kahne  <bkahne@lc2632-tx30>

	* Added support for --tags-only-caches to uADL safe-mode models.
	TODO:  Support this for normal-mode models.

	* Made some configuration globals visible to the outside world, so
	that an external simulation framework can set the.

2014-06-05  Jing Huang   <Jing.Huang@freescale.com>

	* Added an assembler option to specify the list of characters that
	may not appear in operand. This may help reject invalid syntax earlier,
	at parsing and not at encoding, as required by some assembler application.

2014-06-04  Brian Kahne  <bkahne@lc2632-tx30>

	** Added in UadlArch::run(), for uADL models, which uses the
	existing end-time value that's already set in order to simulate
	the model.

	** Added in a start-time value to uadl models
	(<code>UadlArch::setStartTime()</code>), which can be used to hold
	off ISS execution until the current time meets the start-time,
	which allows one to model fast-forwarding a model in time.  This
	allows the cycle-accurate model to still be cycled, to handle
	memory traffic, but have the ISS delay until a future time is
	reached.

	* scripts/adl-config.in: Added a new option to adl-config,
	--no-trans, which disables the transactional logging libraries and
	such.  This way, you can get the uADL libraries w/o the
	transactional ISS stuff via the flags --uadl --no-trans.

	* Modified AnyOption::setOptionalValue to return a bool so that it
	can be chained with AnyOption::setOption and AnyOption::setFlag
	for option creation via static-variable initialization.

2014-06-03  Brian Kahne  <bkahne@lc2632-tx30>

	* helpers/le_sintbv.h (adl): We had a subtle bug with signed
	intbv:  Single-bit accessors returned an sintbv<1> or
	le_sintbv<1>, which, when compared against 1, would be
	sign-extended out, producing -1 (since a 1-bit signed intbv is
	always negative!).  This would then fail the comparison.  I
	changed this to return intbv<1> or le_intbv<1> in order to avoid
	that sign extension issue.

	* iss/ModelSupport.C (adl): You can now create an IssSystem which
	will not delete its children upon destruction, which is useful if
	the children are owned by somebody else, e.g. a uADL model.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.1 (v3_10_1) on Linux (lc2293-tx30) on 6/2/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.1 (v3_10_1) on Linux (lc2050-tx30) on 6/2/2014 ==

2014-06-02  Brian Kahne  <bkahne@lc2632-tx30>

	* Fixed another bug in the count-leading-zeros intbv method.

2014-05-30  Brian Kahne  <bkahne@lc2632-tx30>

	** The <b>bits</b> bit vector type now has the
	<code>count_leading_zeros</code> method for returning a count of
	the number of leading zeros in the number.

	* Bit of a hack, but I now allow any global symbol which starts
	with __builtin, in order to allow various gcc builtin functions to
	be used, since those can speed up bit manipulation.  Yeah, it's
	not portable to Windows, but it's useful as a hack for a Linux
	only model.

	** A new logging call has been added:
	<code>LogBase::log_branch_end(addr_t ea)</code>.  This may be used
	by a logger or writer object to trigger actions to be taken by any
	branch instruction.  If a branch is taken, this call will have
	been preceded by a call to
	<code>LogBase::log_branch_taken()</code>, making it easy to track
	taken/untaken branch status.

	* Updated the interpreter, JIT, and decode-cache to handle this
	new logging call.  In the case of the JIT, we invoke a separate
	post-logger function after the call to the instruction handler
	function.  Added count-branches.so as a plugin to test this new
	feature.

2014-05-27  Brian Kahne  <bkahne@lc2632-tx30>

	** Support has been added to ADL for efficiently modeling split
	branches.  Split branches are branches in which a target location
	is calculated in one instruction and then control flow is modified
	in another instruction.  Normally, this would be modeled as a
	computed branch, which would impose a performance penalty on a
	decode-cache simulation.  By specifying the first half of a split
	branch with the <b>split_branch_begin</b> key in a core config
	block in an ISS configuration file and the second instruction in
	with the <b>split_branch_end</b> key, a decode cache model will
	model the split branch using the same technique as is used for
	normal branches.  Refer to Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* Updated split branch support so that we now specify the
	instructions in the .ttc file rather than via attributes.  I
	thought this was more consistent- we specify simulator specific
	stuff in a separate file, rather than messing with the description
	itself.

	* We had a bug in the constant propagation logic.  For example:

	int x = 0;
	if (y == 1) {
	  x = 1;
	}
	if (x==1) foo();

	In this case, we still think x == 0, and thus don't think that
	foo() is called as a helper function, even if y (a parameter) is
	set to 1.  This causes build failures, as we don't include the
	helper function foo() in the resulting model.

	Fixed this by modifying struct VarVal in VarWalker.C to store an
	Environment pointer at time of creation.  When we exit a scope and
	call exitValueScope, we then call ValueHash::propagate_changes to
	propagate up any variable changes.  By examining the environment,
	we determine whether a variable was declared in the scope.  If
	not, we propagate up the value, setting the value to 'dirty' if it
	exists in the outer scope.

	Added fe/helpers22.adl to test.

2014-05-23  Brian Kahne  <bkahne@lc2632-tx30>

	* Fixed a bug with uadl2model: We were ignoring the path when
	specifying an output file, so we'd always generate into the
	current directory.  Fixed this, so e.g. -o models/foo means that
	the temporary C++ files will be placed into directory foo, as well
	as the final executable.

	* Fixed a bug with uADL so that template helper functions are
	properly modified to pass in an instruction packet.  Modified
	mod11.adl/dlx2-pmr.uadl to test this.

	* Minor fix so that models compile correctly even if no
	instructions touch data memory.

2014-05-21  Brian Kahne  <bkahne@lc2632-tx30>

	* We had a subtle bug with DMI caches: If we had cache models
	containing data (not tags-only caches) and external DMI and
	internal DMI, then a situation could arise where we would store a
	DMI pointer to global memory, then activate a cache, and reference
	an address, and the internal DMI could still point out to memory.
	Fixed this by invalidating the internal DMI caches if a
	cache-enable register is modified, if we have external DMI,
	internal DMI, and non-tags-only-caches.  Added mod95.adl and
	in310.dat to test.

	* Added dlx2-wide-safe to test 128-bit memory accesses (both
	cached and non-cached).  Fixed a bug in exec_and_read, where we
	weren't iterating properly for a given count value.  Added
	loadstore9.dat and loadstore10.dat to test.

	* Support has been added to ADL for efficiently modeling split
	branchces.  Split branches are branches in which a target location
	is calculated in one instruction and then control flow is modified
	in another instruction.  Normally, this would be modeled as a
	computed branch, which would impose a performance penalty on a
	decode-cache simulation.  By marking the first half of a split
	branch with the attribute <b>split_branch_1</b> and the second
	instruction with the attribute <b>split_branch_2</b>, a decode
	cache model will model the split branch using the same technique
	as is used for normal branches.  Refer to Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* The above has not yet been implemented for JIT models.  Added
	mod94.adl to test.

2014-05-19  Brian Kahne  <bkahne@lc2525-tx30>

	* Various updates for compatibility with automake 1.14.

2014-05-19  Brian Kahne  <bkahne@lc2293-tx30>

	* Minor fixes for compatibility with SystemC 2.3.1.

2014-05-16  Brian Kahne  <bkahne@lc2525-tx30>

	* Fixed a bug with MT logging: If we cleared the logging flags
	during a simulation, we wouldn't shutdown the logging threads,
	leading to conflicts when dumping final state.  I now always shut
	down the logging threads (no-op for non-MT logging).

	I also switched back to a normal locking queue, since that makes
	it easier for debugging via helgrind.  We can try the lock-free
	queue again and assess performance.

	* Miscellaneous fixes for multi-threaded simulations for
	compatibility with the Quark MT simulation kernel.

	* Added the ability to force in values into AnyOption.

	* Added a new option to adl2iss/make-iss, --mt-locked-mem, to
	enable complete memory locking, in order to avoid erroneous
	helgrind errors when debugging MT simulations.  This is off by
	default, since it craters performance.

2014-05-15  Jing Huang  <Jing.Huang@freescale.com>

	* adl-asm-impl.C (combineInstr() and patchInstr()): Fixed possible
	opcode error of macro instruction when one of the micro instructions
	has no operand. Added regression for it.


2014-05-08  Brian Kahne  <bkahne@lc2525-tx30>

	* iss/uvpparser.yy (%): The UVP parser now works with bison 2.x
	and 3.x (minor change to one of the defines for backwards
	compatibility).

2014-05-07  Brian Kahne  <bkahne@lc2525-tx30>

	* The UVP parser is now compatible with bison 3.x.  We use a push
	parser so that we can exit and restart without losing location
	information.  I removed incremental scanning of UVPs from
	tracediff because the implementation was inefficient and very
	complex.  Since we're generally 64-bit now, I don't think it's
	particularly important to have it, plus DATs are better for very
	long traces.  We still scan per-test, however, so we can handle
	very long UVPs consisting of lots of tests.

	All regressions pass with the changes- I just removed the
	incremental parsing of UVPs from the regression (switched them
	over to be non-incremental).

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.0 (v3_10_0) on Linux (lc2293-tx30) on 5/5/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.10.0 (v3_10_0) on Linux (lc2525-tx30) on 5/5/2014 ==

2014-05-05  Brian Kahne  <bkahne@lc2525-tx30>

	** The ADL back-end libraries now no longer use the garbage
	collector, making it easier to integrate with other libraries such
	as with SystemC.  ADL now requires gcc 4.7.x to build on Linux and
	Microsoft Visual C++ 2010 to build on Windows.

2014-05-01  Brian Kahne  <bkahne@lc2525-tx30>

	* iss/GenRegs.C (GenRegsBase): We had a minor bug, whereby we
	weren't tracing branch-taken events if we had register-tracing
	turned off, because we filtered NIA_trace by CondRegTrace.
	Modified this condition so that we can trace branches without also
	needing to trace registers.  Added cli/c53.cli to test.

2014-04-30  Brian Kahne  <bkahne@lc2525-tx30>

	* Our assemblers would segfault if they encountered a data
	relocation.  This was because adl-asm-impl-gas.C:adl_apply_fix
	expected the fixup object's operand value to be non-zero, but this
	isn't the case for data operands.  Fixed this and added
	iss/asm81.s to test.

2014-04-29  Jing Huang  <Jing.Huang@freescale.com>

	* adl-asm-impl.C (init): Enhance the previous fix so that in
	InstrInfo::init all the arguments from alias would be copied.
	Pass all the current regressions. To add new test for it.

2014-04-28  Brian Kahne  <bkahne@lc2320-tx30>

	** ADL can now be built without having bison or flex present.  The
	relevant parsers will be built, but it will not be possible to
	edit and regenerate the parsers without flex and bison.  You can
	now use the <b>--with-flex</b> and <b>--with-bison</b> configure
	command-line parameters to point to specific versions of the
	tools.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.9.1 (v3_9_1) on Linux (lc2320-tx30) on 4/25/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.9.1 (v3_9_1) on Linux (lc2294-tx30) on 4/25/2014 ==

2014-04-25  Brian Kahne  <bkahne@lc2320-tx30>

	** ADL now builds on Ubuntu 14.04.  There is one minor issue:
	ADL's UVP parser, which uses GNU <b>bison</b>, is not compatible
	with bison 3.x, found on Ubuntu 14.04.  Therefore, make sure to
	touch <i>iss/uvpparser.cc</i> in order to make sure it is not
	rebuilt by bison.

	This issue will be fixed in a later release.

2014-04-24  Brian Kahne  <bkahne@lc2047-tx30>

	* iss/DmiMemHandler.h (adl): Fixed a bug with the external DMI
	handler: We were incorrectly narrowing the memory pointer to
	32-bits, meaning that 64-bit addresses did not work correctly.
	Fixed this and added mod93.adl to test.

2014-04-24  Brian Kahne  <bkahne@lc2360-tx30>

	** <code>clearBreakpoints</code> and <code>clearWatchpoints</code>
	have been added as <code>IssNode</code> methods, with
	<code>IssSystem</code> support to clear breakpoints or watchpoints
	in all child nodes.

	** Added an additional uADL instruction-class operation,
	<code>has_more_mem()</code>, to allow safe-mode models to test
	whether or not additional memory transactions exist.

	* Modified dlx2-pmr.uadl to test has_more_mem().

2014-04-18  Brian Kahne  <bkahne@lc2360-tx30>

	* adl-asm-impl.C (init): Looks like we had a bug, whereby we
	weren't copying all of the needed operands when we had an alias
	which had more arguments than the target, and we used expressions
	to reduce that number to compute the final values in the target.
	Modified InstrInfo::init to copy over the extra arguments.  Seems
	to work, but more testing is needed- all regressions pass, but I
	haven't added any new tests yet.

2014-04-18  Brian Kahne  <bkahne@lc2360-tx30>

	* Fixed some bugs to get uADL ISS-mem-mode models to work with
	TLM2 address swizzling.  We do the address swizzling on the initial
	instruction prefetching, then use address-invariant reads (which
	are just a direct read w/no byte-swapping in this case) to do the
	read within the prefetch buffer.  Added scripts/dlx-tlm2-em to
	test.

2014-04-16  Brian Kahne  <bkahne@lc2632-tx30>

	* As a safety check, the TLB read and write routines now check
	that the final address is equal to the original address plus the
	size of the TLB, as specified by the entry_mem_size parameter.

	* I modified how MMU resets work.  The user-function is now called
	<lookup>_reset_init and a new function, which just resets the
	lookup itself, is called <lookup>_reset.  For context-specific
	lookups, this takes a context index.

	* I modified how TLB serialization worked- rather than having
	context-specific functions do it, we now have per-lookup hooks
	(mmu_read and mmu_write), plus a size parameter to specify how big
	an entry is.  Then, you specify the lookup in the mem_layout
	parameter of the context.  I think this ends up being a lot
	cleaner than how I had it with context-specific hooks.

2014-04-15  Brian Kahne  <bkahne@lc2632-tx30>

	** ADL now supports per-context MMU lookups, allowing models with
	course-grained multi-threading to support per-thread TLBs or
	memory segments.  These TLBs can be read or written to memory
	using the new TLB hooks <code>mem_read</code> and
	<code>mem_write</code>.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* Added mod92.adl to test these new features.

2014-04-11  Brian Kahne  <bkahne@lc2632-tx30>

	* Our sorting logic was a bit off when generating the assembler-
	we were comparing syntax strings, but not ignoring the
	instruction's name, so that a longer syntax string (including the
	name itself) would be preferred over a shorter string, even if the
	longer string belonged to a longer instruction.  Changed this and
	added mod91.adl and asm80.s to test.

2014-04-09  Brian Kahne  <bkahne@lc2294-tx30>

	** A new interface function has been added,
	<code>IssNode::setExtResource</code> which allows the user to set
	a pointer to an external resource (<b>ext_resource</b> with
	<b>external = true</b>) by name.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information about external
	resources.

	* mod73.adl contains external resources, in order to make sure
	that this all compiles, though we do not have a proper test of
	true external resources.

2014-04-08  Brian Kahne  <bkahne@lc2294-tx30>

	* All regressions now pass after the merge.

	* Merged from master and fixed various conflicts.  Converted the
	writer lists over to using shared_ptr, since things are now more
	complicated with the use of contexts.  Regressions with mod1 now
	pass, but the rest has to be checked out.

2014-04-07  Brian Kahne  <bkahne@lc2294-tx30>

	* iss/GenRegs.C (GenRegsBase):  Fixes for register read/write
	callbacks for register files.  Modified in263.dat to trace.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.9.0 (v3_9_0) on Linux (lc2151-tx30) on 3/25/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.9.0 (v3_9_0) on Linux (lc2286-tx30) on 3/25/2014 ==

2014-03-24  Lu Hao  <b48275@lt07-tx30>

	* Added long int support

2014-03-20  Brian Kahne  <bkahne@lc2293-tx30>

	* Added in an additional helper function, read_string, for system
	call support.  This acts like read_memory, except it expects a
	null-terminated string and returns its data as a C++ string
	object.

2014-03-19  Brian Kahne  <bkahne@lc2293-tx30>

	* We weren't handling relocations properly because we weren't
	shifting and/or bit-masking the relocation value, so that we got
	an error if the value was too big.  Fixed this and added

2014-03-19  Brian Kahne  <bkahne@lc2293-tx30>

	* Fixed a bug with handling large values in relocation slots. We
	weren't properly shifting and masking the value, so that the
	resulting value was too big to put into the field, resulting in an
	error when the address was known (a known value w/a relocation).
	Added iss/asm79.s to test for this.

2014-03-17  Brian Kahne  <bkahne@lc2293-tx30>

	* We now check for context updates on external register writes.

2014-03-12  Brian Kahne  <bkahne@lc2293-tx30>

	* Added in the context clear operation().  Modified iss/in304.dat
	to test.

2014-03-11  Brian Kahne  <bkahne@lc2293-tx30>

	** The size of a context's memory layout, in bytes, has been added
	to the context introspection data structure, available via
	<code>IssNode::getContextInfo()</code>.

	** Functions for reading and writing contexts to memory and
	clearing contexts have been added to the Context API and to the
	IssNode interface.  This allows an element of a given context to
	be stored to memory at a specified address or read from memory at
	a certain address.  New keys were added to the context define to
	allow the user to specify ordering of resources.

	* Added in304.adl with mod31.adl to test the above feature.

2014-03-06  Brian Kahne  <bkahne@lc2293-tx30>

	** The standalone executable framework can now be used with ISSs
	compiled with different namespaces.  The main change is that the
	<code>init()</code> function now takes a creator function.  For a
	standard namespace, use <code>adliss::createTopLevelNode</code>,
	or change as appropriate for a different namespace.

	The standalone <code>main()</code> function has been moved into
	its own separate library and is included in the library list by
	<b>adl-config</b> unless the basic or shared-object target is
	specified.

	* The above was accomplished by adding in new methods to IssNode
	which call the relevant global functions- each generated core or
	system has versions which call the relevant globals in the item's
	namespace.  Modified scripts/driver.C to use 'myiss' as a
	different namespace, in order to test.

	I also had to move IssMain.C into its own library in order to
	avoid linking issues.

2014-03-05  Brian Kahne  <bkahne@lc2293-tx30>

	** The cache enable predicate can now take an optional address
	argument, allowing a cache to be enabled or disabled based upon
	the address used for the access.  This is optional in order to
	maintain backwards compatibility with existing ADL code.

	* Added/modified fe/cache1.adl, fe/cache9.adl, and iss/in303.dat
	to test this new behavior.

2014-03-04  Brian Kahne  <bkahne@lc2293-tx30>

	** The bb_end_instrs key in an ISS configuration file may now take
	instruction attributes as well as instruction names.  This key is
	used to specify instructions which can end basic blocks, when ADL
	cannot intuit this automatically.

	* Modified mod72.ttc to test the above.

	* We now support 0 and negative latencies for the log-td-commit
	option, in order to model instructions which can be folded out by
	the microarchitecture.

2014-03-03  Brian Kahne  <bkahne@lc2293-tx30>

	* iss/DmiMemHandler.h (adl): I was missing the fillpage method for
	the DMI handler, which was only needed for tags-only-caches, where
	the fill operation, in that case, directly fills memory, since the
	caches don't actually store data.  Modified iss/mod23.adl to
	create tags-only caches to test.

2014-02-25  Brian Kahne  <bkahne@lc2293-tx30>

	* The wrapper scripts (adl2iss, adl2asm, etc.) weren't returning a
	non-zero exit code when the ADL input was bad, resulting in what
	appeared to be a good run, causing confusion with make.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.8.2 (v3_8_2) on Linux (lc2330-tx30) on 2/10/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.8.2 (v3_8_2) on Linux (lc2632-tx30) on 2/10/2014 ==

2014-02-06  Brian Kahne  <bkahne@lc2120-tx30>

	* iss/ElfBaseReader.C (adl): We had an erroneous address
	comparison (using <= rather than <), so that we would log an extra
	word in a bss section, which could conflict with an adjoining code
	or data section.

	* Fixed bugs related to sparse register files with entries which
	map to registers and register-file entries in specific contexts.
	This didn't work, so I fixed that, plus we couldn't even parse a
	reference to a register-file entry in a specific context, so I
	added a front-end test for that, as well, plus enhancing mod3.adl
	(with in302.dat) to test the simulator support.

	* Fixed a bug with sparse register files: An entry with
	ignore=true for writes was generating bad code.  Fixed this and
	added in301.dat to test.

	* Ported the JIT over to supporting 64-bit models.  I basically
	moved the JIT to always use 64-bit constants, as we don't support
	32-bit JIT models anyway, so should be no loss of performance.
	Added jit tests for mod10.adl to test.

2014-02-05  Brian Kahne  <bkahne@lc2293-tx30>

	* Fixed various issues to get the decode cache working for 64-bit
	architectures.  The fundamental problem was that we were only
	storing 32-bit arguments, which didn't work properly with sign
	extension.  So, the decode-cache items now take a new template
	parameter which is either a 32-bit or 64-bit integer for storing
	the arguments.

	Note: The JIT has not yet been ported to support 64-bit
	architectures.  This needs to be done.

2014-02-04  Brian Kahne  <bkahne@lc2242-tx30>

	* scripts/regress_utils.pm (jit_test): I added retries=2 to all
	jit tests, to avoid the annoying spurious segfault we sometimes
	see.

	* misc/docgen.C (adl): Fixed a bug with creating the
	instruction-field enumerated values table: We weren't using the
	correct value for each enumeration, but rather, just had a
	counter, which was wrong if multiple enumerations had the same
	field value.  Fixed this and modified doc/doc1.adl to test.

2014-01-31  Jing Huang   <Jing.Huang@freescale.com>

	* Re-visited the upper limit issue of the number of instruction
	attributes.  Instead of being a mask, individual attribute enum
	value has been changed to represent a shift, thus avoid 64-bit
	number in enum. Such a shift instead of mask is taken into account
	during attribute combination and comparison.

2014-01-28  Jing Huang   <Jing.Huang@freescale.com>

	* asm/GenAsm.C: Increased the upper limit of the number of
	instruction attributes from 32 to 64. If the limit is reached, an
	error would be issued during assembler generation.

2014-01-28  Brian Kahne  <bkahne@lc2242-tx30>

	** A new API function, <code>SimInterface.h:addPlugin()</code> has
	been added.  This allows a plugin to be directly added by client
	code, such as when an alternative main() is being used to drive an
	ADL simulator.

2014-01-27  Brian Kahne  <bkahne@lc2524-tx30>

	* iss/ExecSupport.C (adl): Some more reorganization of the startup
	code.  We now supply a function, SimInterface.h:addPlugin(), which
	allows the user to specify, from their own code, a plugin to be
	handled, rather than only allowing plugins to come from shared
	objects.  This way, a program which uses an alternative main() for
	an ADL simulation can add on plugin functionality.

2014-01-24  Brian Kahne  <bkahne@lc2524-tx30>

	** The ADL generator tools (adl2iss, adl2asm, adl2doc) now display
	all output from the underlying ADL front-end tools so that the
	user can see any warnings, such as redefinition warnings.

	* adl-asm-impl-gas.C (handle_fixups): Added in a check to make
	sure that a fixup does not extend past the end of the
	instruction.  This can cause a hard-to-diagnose fatal error if we
	extend past the end of a frag.  So, this way, a relocation which
	is defined to be a 32-bit field, if applied to an instruction
	where the field is just 16-bits, will cause an error.  Added
	mod78.s to test.

2014-01-24  Brian Kahne  <bkahne@lc2524-tx30>

	* iss/GenRegs.C (GenRegsBase): Fixed a bug with register read
	callbacks: We weren't generating the callback if the register was
	never written, even though it was read and we needed a
	read-callback.  This was caused by us only checking to see if the
	register was written, since that's where we generated the
	read-callback code.  Fixed this and modified mod72.adl/mod72.ttc
	to test.

2014-01-23  Brian Kahne  <bkahne@lc2524-tx30>

	* scripts/makedat (assemble): The script now keeps the assembly or
	C temporary file if the user specifies an explicit file name.

	* iss/GenRegs.C (G): Fixed various bugs relating to handling
	registers which alias register-file elements which are contained
	in contexts.  We weren't handling the code generation properly.
	Modified mod3.adl/in11.dat to test.

2014-01-22  Brian Kahne  <bkahne@lc2524-tx30>

	** The ADL assembler can now handle expressions of the form
	<b>symbol@reloc + constant</b>.  These expressions are often used
	by compilers for accessing structures.

	* Added asm77s with as-mod1 to test the above feature.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.8.1 (v3_8_1) on Linux (lc2053-tx30) on 1/15/2014 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.8.1 (v3_8_1) on Linux (lc2321-tx30) on 1/15/2014 ==

2014-01-14  Brian Kahne  <bkahne@lc2243-tx30>

	* iss/GenRegs.C (GenRegsBase): Fixed a bug with contexts: We
	weren't generating a version of register-file read-internal with a
	context-index, resulting in a compilation error.  Fixed this, then
	modified mod3.adl to test.

2014-01-10  Brian Kahne  <bkahne@lc2243-tx30>

	** ADL assemblers now behave slightly differently: A relocation's
	value, if it's a local symbol, is now inserted into the relevant
	instruction field.  This means that the assembler output can be
	directly executed if only local symbols are used.

	* We will now no longer complain about an unsupported relocation
	if the field is marked as an absolute-address:  We just insert the
	value and use the default PPC low-address relocation.

	* The major re-write of the time-tagged ISS generator is now
	complete, with documentation updates.

	** The time-tagged ISS generator has been re-written in order to
	provide for more modeling accuracy.  The user may now specify
	pipeline-stages in the description, along with cach-miss
	latencies, instruction latencies, and instruction-issue
	restriction for multi-issue models.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2014-01-09  Jing Huang   <Jing.Huang@freescale.com>

	* asm/GenAsm.C: Fixed how relocation size is calculated in the 
	howto struct for relocations

2014-01-08  Brian Kahne  <bkahne@lc2243-tx30>

	* I removed ttmod4 and ttmod5, as I don't think the feature tested
	(a limited number of resources) is really required any more.  I
	think this can be modeled using a separate pipeline of stages,
	each with their own delays.

2014-01-06  Brian Kahne  <bkahne@lc2243-tx30>

	* iss/GenInstrs.C (adl): Modified the code generator for
	transactional ISSs so that LogBase::log_instr is called before the
	program counter increment, in order to be consistent with ADL
	models.  Modified uadl regressions to pass by filtering out NIA
	updates.

2013-12-18  Brian Kahne  <bkahne@lc2243-tx30>

	* Major re-write of the time-tagged ISS concept.  We now model
	stages with times, in order to get latencies correct.  This is
	just an initial check-in, with the basic stuff working, but
	regressions don't pass and we still need to handle multi-issue
	properly, as in, we need a way to specify multi-issue
	restrictions.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.8.0 (v3_8_0) on Linux (lc2321-tx30) on 12/16/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.8.0 (v3_8_0) on Linux (lc2053-tx30) on 12/16/2013 ==

2013-12-16  Brian Kahne  <bkahne@lc2243-tx30>

	* Fixed a problem so that td-commit logging works properly for
	decode-cache models.

	** Models compiled with the <b>--log-td-commit</b> feature now
	track cache-miss latencies, just like time-tagged ISSs.

	* I keep going back and forth on the time-tagged ISS
	implementation, but I think I've concluded that the current way it
	works isn't correct and needs work to be fixed.  Thus, I've
	reverted some changes so that the regressions are fixed, but I
	think it needs some major changes.  Specifically, we need to have
	time-tags for pipeline stages to correctly track issue and
	completion times, along with a way to specify where an instruction
	which accesses memory should have the memory latency added.  This
	makes it a bit more similar to uADL, in that each instruction (or
	class of instructions) would have pipeline stages, along with
	latencies attached (default to 1).

	The idea is that each stage's new time is the max of its old time
	or the instruction's issue time + length of pipeline for that
	stage.

	We can handle multi issue by just taking the max of issue times of
	two instructions.  We'll need a way to specify when an instruction
	should be serialized, though.

2013-12-11  Brian Kahne  <bkahne@lc2243-tx30>

	* iss/GenRegs.C:  We had a bug with time-tagged ISSs and partial
	writes: For simple register or register-file accesses, on a
	slice-write, we just called the read function, which returned a
	non-constant reference.  We then operated on that reference.  This
	meant that we didn't register this as a target, so timing was
	off.  Fixed this by adding, for time-tagged ISSs, a
	R_read_modify() function which returns a reference and records the
	access as a target.  This is then used by time-tagged ISSs for
	field and slice writes.  Modified mod89.adl to test.

2013-12-10  Brian Kahne  <bkahne@lc2243-tx30>

	* Updates to the icache and dcache latencies for time-tagged ISSs.
	This fixes some problems that I had previously. The downside is
	that the timing looks a little weird because cache-misses on the
	d-side are added to the accumulated time, thus showing up in the
	issue time, rather than just the completion time.  However, this
	means that things work correctly, in that the memor subsystem has
	its own tag node, so that subsequent loads or stores use that
	time, rather than losing it, whereas an independent add wouldn't
	notice the cache-latency time.

	* Added support for icache miss latencies to time-tagged ISSs.

2013-12-09  Brian Kahne  <bkahne@lc2243-tx30>

	** Cache-miss latencies may now be specified for time-tagged ISSs,
	via the make-iss configuration file (<b>cache_miss_latency</b>
	parameter).  This applies to both instruction and data caches.
	Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	** A new option has been added to make-is:
	<b>--tags-only-caches</b>.  This causes all caches to store only
	tag information and no actual data.  This is useful in a
	multi-core scenario, where it makes it easy to model caches to
	understand memory behavior, but means that one does not have to
	worry about creating a cache coherency protocol.  Currently, this
	is a global option.

	** A new option has been added to tracediff:
	<b>--ignore-cache=&lt;name&gt;</b>.  This option allows the user
	to ignore all cards (both intermediate and final results) of the
	cache specified by name.  This allows, for example, an instruction
	cache to be ignored while the results of the data cache are
	checked.

	* iss/GenRegs.C (GenRegsBase): Fixed a bug with generation of
	registers which have read hooks- we weren't generating an in-hook
	write function, so we'd end up with an error if we had a read hook
	which then modified the register, e.g. a read-and-clear register.

2013-12-06  Brian Kahne  <bkahne@lc2243-tx30>

	* iss/GenCache.C (adl): Working on refactoring the cache
	generation logic in order to support a tag-only mode for
	multi-core simulation w/o a coherency protocol.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.7.0 (v3_7_0) on Linux (lc2053-tx30) on 12/6/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.7.0 (v3_7_0) on Linux (lc2321-tx30) on 12/6/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.7.0 (v3_7_0) on Linux (lc2330-tx30) on 12/5/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.7.0 (v3_7_0) on Linux (lc2466-tx30) on 12/5/2013 ==

2013-12-05  Brian Kahne  <bkahne@lc2075-tx30>

	** ADL has been updated to work with gcc 4.7.x.

	** Various fixes have been made to the generated assembler, so
	that relocations defined in an ADL description will work correctly
	with the gnu linker when generated by the ADL-generated assembler.

2013-12-04  Brian Kahne  <bkahne@lc2075-tx30>

	* scripts/adl-config.in (CFLAGS): To reduce warnings with gcc
	4.7.3 I added -Wno-unused-but-set-variable to the adl-config
	cflags set.

	* Various modifications to get ADL to compile with gcc 4.7.3.  I
	also removed the -Wno-deprecated option and switched over to using
	tr1 associative data structures (unordered_map, unordered_set).
	This required a fair amount of changes to the regression suite, as
	the resulting ordering differed.  As a result, I changed several
	data structures over to being maps, in order to ensure ordering.
	For example, the instruction tables are now maps, rather than
	hashes, so that each element is sorted.  Tracediff also saw
	various changes over to using maps.

2013-12-02  Brian Kahne  <bkahne@lc2075-tx30>

	* Various assembler fixes to get relocations to work.  For now,
	I'm not inserting the value into the instruction for a relocation,
	as the standard gnu assembler does, but that doesn't seem to
	matter- the linker seems to ignore it anyway.  The code is in
	adl-asm-impl-gas.C if it is found to be needed- it's currently
	just commented out.  Added asm75.s to test.

2013-11-21  Brian Kahne  <bkahne@lc2330-tx30>

	* iss/MemoryInterface.h (adl): I had a bug with the 24-bit writes,
	where the 8-bit write to handle the 3rd byte was going to the
	wrong address.  The regression didn't catch it b/c the example
	instruction had 0s in the last byte.  Fixed the problem and
	modified mod88.adl and in295.dat to test this.

	* Oops- had an issue with reads as well.

2013-11-19  Brian Kahne  <bkahne@lc2330-tx30>

	* fe/Data.C (adl): Fixed a bug with sparse register files which
	map multiple elements of a register file to consecutive entries.
	We had a bug, where we re-used the id parm to calculate new IDs
	for each element, then we called RegBase::finalize with that
	updated parm, thus giving a register file a new id. This could
	cause compile problems if duplication happened.  Added mod88.adl
	with in295.dat to test.

	** The ModelInterface::setMem, ModelInterface::getMem routines now
	support 24-bit reads and writes, allowing for compatibility with
	24-bit data, such as that produced by the <b>makedat</b> script
	for 24-bit instructions.

	* mod88.adl/in295.dat tests the above feature.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.6.1 (v3_6_1) on Linux (lc2144-tx30) on 11/12/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.6.1 (v3_6_1) on Linux (lc2294-tx30) on 11/12/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.6.1 (v3_6_1) on Linux (lc2294-tx30) on 11/12/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.6.1 (v3_6_1) on Linux (lc2144-tx30) on 11/12/2013 ==

2013-11-12  Brian Kahne  <bkahne@lc2221-tx30>

	* iss/ElfBaseReader.C (adl): We had a bug, where if a section were
	one byte in size, we wouldn't actually read any data, leading to
	an infinite loop.  Fixed this and added in294.s/in294.dat to test.

2013-11-08  Brian Kahne  <bkahne@lc2221-tx30>

	* helpers/BasicTypes.h (adl): Updates for MSVC2010 compatibility.

2013-11-05  Brian Kahne  <bkahne@lc2221-tx30>

	* The documentation generation has been regressed against Apache
	FOP 1.1.  This seems to fix various issues that I had been seeing
	with 1.0, such as not being able to generate ARMv8 or
	generic32.adl documentation.

2013-11-04  Brian Kahne  <bkahne@lc2221-tx30>

	* I enabled 0-sized memory reads and writes, since it seems that
	this is sometimes used, e.g. for the decorated-storage APU notify
	instruction.  First, I now wrap all memory-write commands' value
	expressions with "to_bits", which is a templated function in
	TypeConv.h which will convert an object to a bits object.  Then, I
	added on the appropriate code to the memory hierarchy so that a
	0-byte read equates to a readpage of 0 bytes and a 0-byte write
	equates to a writepage of 0 bytes.  Modified mod11.adl and
	mod18.adl to test compilation of this and added in293.dat to test.

	* fe/Data.C (adl): Modified Instr::Field::dump to print friendly
	instruction field names in the documentation.  Rather than
	displaying the names of the implementation fields, we display the
	parent name, which doesn't have the "impl_bits..." junk on it.
	Modified docs/doc8, doc13 to test.

2013-10-18  Jing Huang   <Jing.Huang@freescale.com>

	* GenAsm.C: Revised how regular expression is formulated to match
	an operand: comma should not be part of any operands, thus should be
	excluded from the set of characters permitted for operand regex match.

2013-10-17  Brian Kahne  <bkahne@lc2330-tx30>

	* uadl/Makefile.mk (uadl_libuadlMain_la_HEADERS): Fixed an error
	with installing headers which caused distcheck to fail.

2013-10-11  Brian Kahne  <bkahne@lc2330-tx30>

	* I've updated the time-tagged ISS to now work with external
	memory.  On an external memory access, the external logic can call
	issNode::addLatency() to add additional latency to the current
	instruction.  When used with DMI, the DMI object stores a read and
	write latency value and applies that on a DMI hit.  This works for
	external and internal DMI caches.  The user should call
	IssNode::setDmiLatencies() to set read and write latencies at
	initialization time; these latencies are then applied on a DMI
	hit.

	Added driver16/ttmod1-em.so to test.

2013-10-10  Brian Kahne  <bkahne@lc2330-tx30>

	* Initial re-do of the time-tagged ISS.  The basic mechanism
	remains the same, but I've gotten rid of the global variables and
	replaced them with member variables.  The ISS now inherits from an
	additional base-class which provides the instruction counter, TD
	members, and time-tagged members, so that the register objects can
	be passed a reference to the base class in order to manipulate
	time.  The basic change has been completed and all regressions
	pass.  The time-tagged ISSs also work with the decode cache.  TBD:
	Add in support for the external memory to set memory latencies.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.6.0 (v3_6_0) on Linux (lc2050-tx30) on 10/9/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.6.0 (v3_6_0) on Linux (lc2144-tx30) on 10/9/2013 ==

2013-10-08  Brian Kahne  <bkahne@lc2330-tx30>

	** ADL's GDB server now supports non-stop mode.  When you use gdb
	to connect to a standalone ADL simulation consisting of a system
	of cores, each core appears to GDB as a thread.  By default,
	all threads stop when waiting for more input from gdb and when
	single stepping, only the current thread advances.

	In non-stop mode, threads can be continued using GDB's background
	execution commands.  You can then single-step a thread while other
	threads are still running.  This allows you to more easily debug
	producer/consumer problems, for example, where you want to step
	through the producer and have the other thread (the consumer)
	consume those values.

	Refer to GDB's documentation for more information about how to
	switch to non-stop mode.

	* I've updated the normal gdb mode of operation (all-stop) so that
	stepping one thread does not continue the other threads.  The
	confusing thing is that gdb sends a vCont;s:1;c command, so what
	does that trailing continue really mean for a simulator?  I choose
	to now ignore it if there are steps in the vCont command, so that
	we just step the specified thread.  If we get a continue across
	all threads, then we run everything.  Added gdbtest17.gdb to test.

	* Finally, it seems that non-stop mode works!  One of the biggest
	problems was getting the vStopped sequence to work: GDB will crash
	if you report a thread as having stopped if you've already
	reported it as having stopped.  So, when issuing a stop sequence,
	e.g. after a step or continue operation, you have to make sure
	that you never repeat a thread.  It's also the case that you can't
	chain together multiple thread stop messages; each message can
	only refer to a single thread.

	How it now works is that, in non-stop mode, we respond to vCont
	commands with "OK", then queue up stop messages into
	RemoteGdbServerNode::_stop_seq.  In the case of '?', we list all
	stopped nodes.  In the case of step, we just list the stepped
	node, and in the case of continue, we list any threads which have
	stopped due to a breakpoint or due to finishing simulation.  In
	the latter case, I had to add a new flag, GdbTarget::_cont, to
	track what threads were continuing in order to report on those
	that had been continued and then stopped.

	Added gdbtest15.gdb and gdbtest16.gdb to test.

	* I completely reworked the communication code so that responses
	back to gdb use synchronous writes in boost::asio, rather than
	asynchronous.  This makes things a lot simpler, since the ack
	protocol is basically synchronous.  So, we simply write our
	response, then loop, waiting for an ack, rather than chaining
	things together using asynchronous handlers. Both synchronous
	replies ($ packets) and asynchronous replies in non-stop mode (%
	packets) use the same mechanism.

	* I changed the response to vRun to return OK, which seems to work
	properly in non-stop mode as well as all-stop mode.  Changed
	gdbtest14.gdb to reflect this.

2013-10-07  Brian Kahne  <bkahne@lc2330-tx30>

	* iss/GdbServer.C (adl): Initial progress on non-stop mode.  Added
	support for the stop-thread (t) sub-command for vCont, fixed the
	vCont? reply, added support for vStopped, and started work on the
	reply protocol for vCont. All regressions pass at this point, but
	non-stop still doesn't really work.

2013-10-03  Brian Kahne  <bkahne@lc2075-tx30>

	* Fixed a bug with decode caches and exception handling.  When
	using the decode cache, if an external exception is raised which
	is placed onto the pending flag, then when the exception is
	re-enabled, and thus sets the exception flag, we don't ever
	process this exception if we're exiting the simulation loop due to
	exceeding our time quanta, e.g. single-stepping due to a threshold
	of 1.  Fixed this by checking the exception-flag when handling a
	JitRetCode situation.  Tested with driver15.C, scenario 1.

	* If we are simulating with the decode cache and we're in a
	hot-block and exceed our time quanta and the next instruction has
	a breakpoint, we don't detect the breakpoint.  Fixed this by
	calling commit_checks when handling JitRetCode.  Tested with
	driver15.C, scenario 2.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.5 (v3_5_5) on Linux (lc2050-tx30) on 9/27/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.5 (v3_5_5) on Linux (lc2330-tx30) on 9/27/2013 ==

2013-09-27  Brian Kahne  <bkahne@lc2075-tx30>

	** The run-control interface for IssNode has been refactored.  The
	methods <code>IssNode::simple_run</code>,
	<code>IssNode::simple_run_dc</code>, and
	<code>IssNode::simple_run_jit</code> can be used to execute a core
	usin the corresponding type of simulation, until the simulation
	halts, the temporal-decoupling threshold is exceeded, or a
	breakpoint occurs.  These routines do not catch the
	<b>SimInterrupt</b> exception which is thrown by breakpoints and
	watchpoints.

	The methods <code>IssNode::run</code>,
	<code>IssNode::run_dc</code>, and <code>IssNode::run_jit</code>
	behave like their simple_run equivalents, except that they do
	catch <b>SimInterrupt</b> and return a <b>ProgramStatus</b> value.

	In general, use the simple_run methods when creating your own
	simulator loops.  You can then use an outer try/catch block to
	catch breakpoint and watchpoint events.

	** The debugger interface now uses the RunControlIface class for
	running and stepping the simulator, allowing externally defined
	simulator loops to be used by declaring a class derived from
	RunControlIface.  Then, call <code>setRunControl()</code> before
	calling </code>createDebugger()</code>.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.4 (v3_5_4) on Linux (lc2050-tx30) on 9/26/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.4 (v3_5_4) on Linux (lc2330-tx30) on 9/26/2013 ==

2013-09-25  Jing Huang   <Jing.Huang@freescale.com>

	* GenAsm.C: Revised how regular expression is formulated to match
	an operand. With this, a (redundant) plus sign before an integer
	as an operand is supported when the syntax string contains plus sign.

2013-09-24  Brian Kahne  <bkahne@lc2075-tx30>

	* Fixed a bug with the decode-cache: We weren't honoring the
	bb_end_instrs key in the configuration parser for cold blocks.

	** A new option has been added to <b>adl2iss</b>:
	<b>--log-td-commit</b>.  When set, commit times for instructions,
	based upon the temporal-decoupling counter, are sent to the trace
	output.  This allows for tracing of times when an ADL model is
	used in a system-context.

2013-09-20  Brian Kahne  <bkahne@lc2075-tx30>

	* All inputs for gdbclient are now called *.gdb, in order to
	distinguish them from DAT files.  Finally correcting *that*
	mistake after years...

	* Turns out that we don't have a race condition.  The problem was
	just that we exceeded the maximum instruction count in the
	producer wait loop, thus ending the producer thread.  Oops.  Works
	fine w/mic=0.

	* Found a bug, due to the MT kernel.  We were always creating the
	thread pool, even when we weren't using MT sim.  These threads
	were active and were triggering off of simulator activity, thus
	they would simulate and confuse things when the debug server was
	changing around activity.  Now, the thread pool is only created if
	we go into the threaded-simulator function.

2013-09-19  Brian Kahne  <bkahne@lc2075-tx30>

	* Seems like we have a race condition with multiple simultaneous
	GDBs, when dealing with continue statements.  Doesn't seem to be
	anything that shows up in real life, but show up when using the
	gdbclient with simultaneous connections.  gdbtest14.dat passes
	with tracing on but fails with no tracing, and the failure seems
	to be powerpc0 runnnig to completion too early, so something fishy
	is going on...

	* I changed the default mod11.adl translation to be a 4k page,
	since I was finding out that we were getting inadvertent aliasing
	with a simple example.  This required changing some of our
	regressions to reflect that in the trace output.

2013-09-18  Brian Kahne  <bkahne@lc2075-tx30>

	* Multiple GDBs now work, allowing for fully independent debugging
	sessions on different cores in the same simulation.

2013-09-17  Brian Kahne  <bkahne@lc2029-tx30>

	* More work to get multiple, independent GDBs to work.  It
	basically works for simple things, e.g. one gdb can be in a
	continue operation and another can do stepi operations.  What
	doesn't work is independent continues with breakpoints, which is
	used by "step" in some situations.  That remains to be done.

	The new operation is that on I/O, the simulation is halted by
	placing all cores into an io-inactive state if the simulation is
	currently running.  Immediately after returning, in
	remoteContinue, we then restore everything.  At that point, we
	continue as before.  The comm thread schedules an additional
	remoteResume operation to start up remoteContinue again if we were
	interrupted, thus continuing the operation.

	To be done is to make breakpoints aware of who set them so that
	the response can be directed to the relevant originator.  We'll
	then continue if we need to.

2013-09-13  Brian Kahne  <bkahne@lc2029-tx30>

	* OK, now all regressions are passing, including for multiple
	connections.  I modified gdbin2.c so that count isn't overwritten,
	so that we can cycle both and get a correct sum at the end.  I
	also modified gdbtest5.dat, since I now longer support memory
	reads while the simulator is busy- it's not how gdb works and I
	don't think it's necessary.  I also don't support multiple udp
	connections to the same port anymore, since I don't think that's
	really necessary either.

	* iss/GdbServer.C: The basics for multiple gdb connections has
	been implemented.  Each connection is represented by a
	GdbServerNode, which is linked to a comm thread.  A
	RemoteGdbServerNode object exists to specialize this for
	ADL. Shutdown is now more complicated, but works rather nicely: We
	track what comm threads are active.  On shutdown, the comm thread
	receiving the shutdown command quits and posts to the server that
	it has finished.  The server then broadcasts a quit-if-inactive
	command to all of the threads, so that anything that's not active
	quits.  This way, if a user quits gdb and never started up gdb on
	another thread, we'll still exit cleanly.

	Work remains to be done on the continue command, which isn't
	working correctly yet for multiple connections.

2013-09-12  Brian Kahne  <bkahne@lc2029-tx30>

	* Well, this is unfortunate: It looks like GDB *doesn't*
	understand UNIX local pipes- what I found on the web was just a
	special port that apparently did.  The standard GDP just
	understands tcp and udp.  Bummer.  So, I converted the Unix local
	pipe service over to udp.  Maybe we should hack up our own gdb to
	support Unix local pipes... ?

	Because of this, when using remote commands, if the result is
	larger than the max packet size, we send it back as O commands and
	then just send "OK" as the final response.

	* iss/GdbServer.C (adl): Looking over the spec again, I realized
	that qRcmd commands (monitor commands) don't have to return their
	output using console output packets (O responses), but can just
	return the output as a hex string, rather than sending "OK".  So,
	I switched over to doing that.  Since we're not using UDP and
	we're using variable-length output buffers, we shouldn't have to
	worry about exceeding packet sizes.

	* Miscellaneous little fixes for the gdb server.  All
	single-socket regressions not pass.  The multi-socket regressions
	have been commented out, so that the "make check" will pass.

2013-09-11  Brian Kahne  <bkahne@lc2029-tx30>

	* Port file creation now works and the first regression with TCP
	and UDP now passes.  Minor fixes to gdbclien to get unix local
	ports working.

	* All of the gdb server has basically now been implemented,
	including the vCont command, but further testing needs to be done,
	the port file writing logic needs to be added in, and I probably
	need to work on independent operations for multi-core systems.

	* Significant changes to the new gdb server: I now use a
	reference-counted shared buffer for all output (copied from the
	Boost::asio examples documentation).  Previously, I used a single
	buffer in the comm thread, but this was too limiting: We couldn't
	send back more than one response, as required, for instance, by
	the Rcmd (monitor command), which returns its output as console
	output packets (O packetes), along with a final OK message.

	All commands now exist, but the step/continue logic is not yet
	implemented, except for a very simple continue command.

	* Updated gdbclient to read character by characeter for non-udp
	connections, so that it won't over-read and read more than one
	packet at once.

2013-09-05  Brian Kahne  <bkahne@lc2029-tx30>

	* Lots more commands added to the new gdb server.  I now handle
	get/set for memory and registers, plus extended-mode setup and
	kill and detach.

	== file:///proj/.ppc_43/vc_noec/git/adl release 3.5.3 (v3_5_3) on Linux (lc2031-tx30) on 9/5/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.3 (v3_5_3) on Linux (lc2031-tx30) on 9/5/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.3 (v3_5_3) on Linux (lc2331-tx30) on 9/5/2013 ==

2013-09-05  Brian Kahne  <bkahne@lc2029-tx30>

	* iss/GenInstrs.C (adl): For the decode-cache, there's no need to
	call reset on each basic block in the basic block hash, before
	clearing the hash.  That's only needed by the JIT, in order to
	clean up generated code.  Thus, this option is disabled for the
	decode cache to speed things up.

2013-09-04  Brian Kahne  <bkahne@lc2029-tx30>

	* We had two bugs with the decode cache: First, in certain
	circumstances we'd overwrite the end, because we'd add the branch
	trampoline at one-past-the-end of the decode-cache buffer.
	Second, when we reset the decode cache due to the buffer being
	full, we didn't reset the basic-block hash, causing all kinds of
	weirdness.  Added in292.dat to test this behavior.

	Note: Fixed in270.dat, since I changed the basic-block max-size
	condition to be >=, rather than >, which it had been.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.2 (v3_5_2) on Linux (lc2331-tx30) on 9/3/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.2 (v3_5_2) on Linux (lc2031-tx30) on 9/3/2013 ==

2013-08-30  Brian Kahne  <bkahne@lc2132-tx30>

	* adl-asm-impl.C: Our implementation of relocations in the
	assembler wasn't working quite right.  The offset for the
	relocation should be the nearest byte (rounded down) off the
	offset, but the calculation only worked correctly for 32-bit
	instructions where the offset was at the end, i.e. it only worked
	right for Power ISA.  I fixed this by adding a new bitpos field to
	adl_operand, which specifies the starting bit of the field, then
	using that when calculating a relocation fixup.  Added
	mod87.adl/asm74.s to test.

2013-08-30  Brian Kahne  <bkahne@lc2132-tx30>

	* More improvements to the gdb server.  First, I hadn't really
	created the protocol correctly- I wasn't properly expecting an ack
	on a response.  Second, the gdbclient wasn't properly expecting
	acks, so I fixed that too.  Now, the client is properly
	synchronous.  Finally, I implemented communication via UNIX pipes.
	On the server side, the --pipe=fn option is used to specify the
	pipe file.  Same with gdbclient.  Use --unix for gdbclient to
	specify unix pipes and use --gdb-local for the ADL server.

	The complexity definitely went up with the full protocol.  Might
	be easier to just do everything synchronously, since it is a very
	synchronous protocol.

2013-08-30  Brian Kahne  <bkahne@lc2132-tx30>

	* adl-asm-impl.C: Our implementation of relocations in the
	assembler wasn't working quite right.  The offset for the
	relocation should be the nearest byte (rounded down) off the
	offset, but the calculation only worked correctly for 32-bit
	instructions where the offset was at the end, i.e. it only worked
	right for Power ISA.  I fixed this by adding a new bitpos field to
	adl_operand, which specifies the starting bit of the field, then
	using that when calculating a relocation fixup.  Added
	mod87.adl/asm74.s to test.

2013-08-28  Brian Kahne  <bkahne@lc2132-tx30>

	* iss/GdbServer.C (adl): Very early work on portin the GDB server
	to Boost::ASIO.  This will allow the code to be portable between
	Linux and Windows and should simplify the overall design quite a
	lot, since we no longer have to deal with low-level networking
	issue.

	The basic architecture is:

	1. The simulator runs in the main program thread.  We run an
	asio::io_service loop to handle events posted by the comm thread.

	2. Network communications run in another io_service loop running
	in a separate thread.  This listens on a tcp port for incoming
	traffic.  When it gets something, it parses the packet, checking
	for the checksum, then dispatches the command
	GdbCommThread::handlePacket, where it's handled.  In most cases,
	we immediately post an event to GdbServer (actually calling the
	relevant RemoteGdbServer overload).

	3. The event is handled in the main thread, which then writes a
	reply packet and calls GdbServer::putGdbPacket.  This posts an
	event to the comm thread to send back the reply.

	4. Interrupts are an exception: The comm thread immediately calls
	GdbServer::remoteInterrupt, since the main thread might be busy
	running the simulation.

	The result is multi-threading w/o the need for mutexes and such,
	since we're using the fact that Asio only executes events in the
	thread which is running the event loop.

	What's been done:

	1.  Basic tcp network handling.

	2.  Demonstration of some basic communication.  Memory queries and
	continue/interrupt.

	To be done:

	1.  Bring back all of the complexity in RemoteGdbServer of
	handling multiple cores.

	2.  Handle all of the extra commands.

	3.  Add support for unix sockets.  The plan is to handle tcp and
	unix sockets, but not udp, since it's unreliable and we'll get
	high performance out of the unix sockets.

	4.  Regarding threads, the plan is to support both single
	instances of gdb and multiple instances of gdb.  For multiple
	instances of gdb, each will have its own comm thread.  Question:
	Do we run each corresponding simulator in its own thread?  This
	might cause nasty threading issues, but otherwise we have to
	interrupt the simulator every time traffic comes in.  We also will
	only support multiple simulators for core or system objects, but
	not for course-grained threading.

2013-08-26  Brian Kahne  <bkahne@lc2132-tx30>

	* helpers/intbv_impl.h (adl): Minor change to % operator to get it
	to pass Cadence's C++ parser front-end.

2013-08-23  Brian Kahne  <bkahne@lc2132-tx30>

	* Repository reorganization:  The Git repo has no been reorganized
	as follows:

	master:	The 3.x development branch (main development branch).

	1.x:	The 1.x development branch (no longer actively maintained).

	2.x:	The 2.x development branch (maintained only for Auto).

2013-08-22  Brian Kahne  <bkahne@lc2524-tx30>

	* helpers/BitTwiddles.h: We now omit builtins for byte swaps
	regardless of GNU version, if USE_NO_GCC_BUILTINS is defined.

	* I removed helpers/static_assert.h, as it was a copy of an old
	Boost header.  Now that we're using Boost throughout ADL, there's
	no reason to keep an old copy.  It also seemed to cause compile
	failures due to incompatibility with newer versions of Boost.

2013-08-21  Brian Kahne  <bkahne@lc2524-tx30>

	** The simulator generator now only generates register code which
	is necessary to implement register accesses found in the model.
	This can result in a reduction in size of the final simulator.
	For example, if a register is declared with 10 fields, and only
	one field is every accessed, then only that one field's access
	methods will be generated.

	Code generation can be controlled in one of two ways using
	parameters in an <b>adl2iss</b> configuration file (.ttc file).
	Both parameters exist in the global configuration block.
	<ul>
	<li><b>gen_all_reg_code</b>:   (bool)  Forces the generation of	all code for all registers.</li>
	<li><b>gen_full_regs</b>:  (string list)  Force genereation of all code for the specified register/register-file.</li>
	</ul>

	* We now track the use of the register-field helper functions
	(setfield_ and getfield_) and generate the relevant code only if
	they are used.

2013-08-20  Brian Kahne  <bkahne@lc2524-tx30>

	* We now only generate needed register access code.  The front-end
	records what's needed by creating a giant linked list of
	PtreeRegRead/PtreeRegWrite objects as they're scanned by
	VarWalker. This is then processed at the end of finalization in
	order to record, for each register or register-file, whether it
	was read, written, sliced-read, slice-written, or whether fields
	were read or written.  This data is then used by the GenRegs code
	to generate only the code that's needed.

	* uadl/Cache.C (uadl): Removed an assertion which caused some
	tests in the z720ca2 model to fail.

2013-08-19  Brian Kahne  <bkahne@lc2524-tx30>

	* iss/tracediff.C (adl): The use of --check-all-cards=CD didn't
	work, since we never checked for extra elements in the found hash
	vs, the expects hash.  Added a reverse check if
	--check-all-cards=CD is present, so that extra cache cards in the
	found file will be detected.

	* iss/GenCache.C (adl): We had a bug with JIT/decode-cache models
	with icaches, in that we always called the icache-touch function,
	even if the icache was disabled.  I added in a call to the
	enable-check function in order to make sure that the cache should
	actually be touched.  Added in289.dat to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.8 (v2_5_8) on Linux (lc2144-tx30) on 7/26/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.8 (v2_5_8) on Linux (lc2331-tx30) on 7/26/2013 ==

2013-07-26  Brian Kahne  <bkahne@lc2031-tx30>

	* Fixed up issues for setting external memory handlers for MT uADL
	models.  Added test-sysc-mt1 to test that we can run an MT model
	using the SystemC driver.

	* iss/ModelSupport.C (adl): I now replicate register and exception
	callback setup func calls to child items from the parent system.
	Same for breakpoints.

	* iss/GenRegs.C: We had a bug, where we didn't generate an in-hook
	handler if a register was aliased, even if it had a reset action.
	This caused a compiler error.  Fixed this and tested it by
	modifying mod13.adl and adding in290.dat.

	* Code for shared caches with dynamic parameters was broken: We
	weren't generating the dynamic parmaters correctly.  In the new
	system, the parameters are generated at the system level, then
	propagated down to the cores as references.  The system then
	propagates the dynamic-parameter calls to its childre.  I added
	shared caches to mod13 to test.

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.7 (v2_5_7) on Linux (lc2144-tx30) on 7/25/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.7 (v2_5_7) on Linux (lc2331-tx30) on 7/25/2013 ==

2013-07-25  Brian Kahne  <bkahne@lc2031-tx30>

	* iss/GenCache.C (adl): Slight modification to the lock-by-address
	routine: It now doesn't return a value, to simply the uADL
	implementation.

	* iss/GenInstrs.C (G): Fixes for multi-file multi-threaded ADL
	models.  Added mod13 in tests/scripts to test.

2013-07-24  Brian Kahne  <bkahne@lc2031-tx30>

	* uadl/Cache.C (uadl): Cleaned up handling of cache operations for
	instruction caches. Added a new lock command which takes an
	address, since the idea of calling touch, then find and lock
	doesn't work for safe-mode models, since the touch command logs a
	command to be taken, but then returns immediately.  There's
	probably a cleaner way to do this, but this works for now. Added
	cache5.dat to test this and the fact that we now cache the
	allocation-predicate result.

	* iss/GenCache.C (adl): We need to cache the allocate-predicate
	(miss_enable) for instruction caches, to take into account
	locking.  This caused some errors with the z650 timing tests,
	though there were additional problems caused by the z650's
	cache-enable predicate being incorrect.

2013-07-23  Brian Kahne  <bkahne@lc2031-tx30>

	* Changed the coroutine implementation slightly so that the yield
	context (which stores the main thread's context) is a member
	variable of the core object, rather than of each instruction
	packet, in order to reduce space slightly.

	* iss/Coroutine.h (Coroutine): We're now using Boost's Context
	library to implement coroutines, rather than our own version,
	which used setjmp/longjmp on Windows and ucontext on Linux.  This
	should provide for a more portable solution.  Things are also
	properly self-contained- we had a bug where the contexts were
	stored as statics, meaning that multiple instances of a core could
	interfere with each other.

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.6 (v2_5_6) on Linux (lc2144-tx30) on 7/22/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.6 (v2_5_6) on Linux (lc2331-tx30) on 7/22/2013 ==

2013-07-19  Brian Kahne  <bkahne@lc2031-tx30>

	* More uADL multi-threading fixes, including better support for
	deadlock detection/breaking.

2013-07-18  Brian Kahne  <bkahne@lc2031-tx30>

	* Turns out that to use clock_gettime, you have to link with
	librt, so I made those changes.

2013-07-18  Brian Kahne  <bkahne@lc2031-tx30>

	* Fixed a bunch of bugs related to uadl multi-threaded designs.
	First, we weren't properly propagating shared caches and we
	weren't properly generating code for shared caches. Fixed this and
	modified dlx-mt1.uadl to have caches.  Second, our stall indicator
	(_stall) wasn't global to the outer core, as it should have been,
	so stalls weren't handled properly.  Fixed this and it's tested
	via mt4.dat.

2013-07-17  Brian Kahne  <bkahne@lc2031-tx30>

	* It appears that for 32-bit environments, we need to link against
	libboost_atomic- apparently there's a bug that boost::atomic isn't
	header-only.  So, I modified the build system to take this into
	account.

2013-07-16  Brian Kahne  <bkahne@lc2031-tx30>

	* scripts/install-graphite: All versions of Graphite now use Boost
	1.53, since that's the version now required by ADL.

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.5 (v2_5_5) on Linux (lc2144-tx30) on 7/15/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.5 (v2_5_5) on Linux (lc2331-tx30) on 7/15/2013 ==

2013-07-12  Brian Kahne  <bkahne@lc2031-tx30>

	* uadl/Cache.C (uadl): We had a bug with how we handled whether
	the instruction cache was enabled or disabled with safe-mode
	models.  I had previously assumed that the cache operation would
	immediately follow a prefetch, so that any model parameters would
	be consistent, but that turns out to not be the case if we have a
	model with a higher bandwidth that allows for multiple fetch
	requests; these can get hung up in the cache, resulting in queries
	being out-of-order wrt. the prefetch calls to the ISS. Thus, I
	implemented the same mechanism for the icache as I use for the
	dcache: The cache_begin() function for the icache takes a
	CacheStatus object to determine enablement; this is set up in the
	fetch unit.

	Updated dlx-cache-split-pc3.uadl to have a branch predictor and a
	bandwidth of 2, and added cache4.dat to test this feature.  For
	safety, I also remove next-level cache actions in
	Cache::postCancelRequest which aren't line-fills and that have a
	null request object after the search.  This is what originally
	caused a segfault with Conti.

2013-07-09  Brian Kahne  <bkahne@lc2031-tx30>

	* uadl/Cache.C (uadl): Fixed a bug with uADL's cache: If we
	cancelled a memory write transaction, e.g. due to an exception,
	then in Cache::cancelNextLevelRequest, we would iterate over
	next-level actions until we got to the line-fill operation, then
	break out of the loop, leaving the store-next action.  Then in
	Cache::postCancelRequest, we would try to find the request, get a
	null, and then later segfault in Cache::postCycle when we tried to
	access action.request.

	The fix was to remove the break statement so that we iterate over
	all cache actions.

	Added dlx3-cache-split-pc3-safe-ext-mem with store8.dat to test
	the fix.

2013-07-03  Brian Kahne  <bkahne@lc2031-tx30>

	* Multi-threaded tracing with a merged, single stream is now
	supported.  A model is now generated with LogBase::log_commit
	calls if generated with mt support.  The log-commit objects in the
	LoggingMtObj store a time stamp using the real-time clock (ns
	precision).  The ThreadedLogger receives logging data on the
	lock-free queues (one per core), collects them into a pending
	queue until a commit object is found, then selects the lowest
	timestamp at the head of each queue and logs this item, then
	repeats.  The result is a single ordered trace of instruction
	execution, even though each core is running in a separate thread.
	Modified in287.dat to test this with mod84.  This now requires
	Boost 1.53.

	** Boost 1.53 is now required in order to build ADL.

2013-06-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* More gcc 4.4.7 fixes: Memory.h and MemoryLocks.h need the
	lock_guard header, which is locks.hpp in pre-1.53 Boost and
	lock_guard.hpp in Boost 1.53 (locks.hpp works, but has extra
	dependencies in it).  Added a new macro, BOOST_1_53, in
	BasicTypes.h to help with such conditional compilation.

	* tests/iss/libdriver.C (C): Added extra functions, since
	apparently gcc 4.4.7 gets pickier about missing template
	functions, even if they're not instantiated.

2013-06-26  Brian Kahne  <bkahne@lc2321-tx30>

	* uadl/UadlArch.C (uadl): When setting a dynamic parameter in
	uADL, we weren't signalling that we needed to reset necessary data
	structures via UadlArch::_hadReset, leading to potential
	segfaults, such as when cache data structures weren't resized.  I
	fixed this and also added UadlArch::forceHadReset(), so that if
	this situation arises again, a user could just call this function
	to force a reset, until we debug and understand what was missed.

2013-06-21  Brian Kahne  <bkahne@lc2321-tx30>

	* iss/ExecSupport.C (adl): I now properly handle when a user
	specifies --no-output, but then overrides it with -o=file.  This
	wasn't working because the flag-unset option (false) was confusing
	the file-name processing logic.  I now explicitly skip it sow that
	it works.

	* Fixed problem with a model compiled w/external memory, then run
	as a system via -n=N, segfaulting because the lack of an external
	memory wasn't caught.

	** The DAT reader will now skip, in lax-mode, any CORE card which
	is not recognized, skipping all register, cache, and TLB input
	until the next recognized CORE is encountered.

2013-06-20  Brian Kahne  <bkahne@lc2321-tx30>

	* uadl/Cache.C (uadl): We had a subtle bug in the cache logic: On
	a longer pipeline, we could have a delay between when a store
	added a next-level-action which would utilize a store-buffer
	entry, and the actual write(), when the store buffer entry was
	used.  In that time, Cache::postCycle() might process the
	store-next.  Since it used the store buffer but the store buffer
	entry didn't exist, it would try and access the request, but that
	was set to 0, causing a segfault.  Now, we keep the request
	pointer until the write() is performed, at which point we find the
	corresponding action and clear the request pointer to avoid stale
	data.  Added dlx-cache-split-pc4.uadl and loadstore8.dat to test.
2013-06-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/ElfParser.h (adl): The ELF parser now loads in all PROGBITS
	sections, even if non-allocate, so that other users can read
	special sections, which might, for example, contain testbench
	data, etc.  This might increase load times a bit, since we're now
	loading in more sections, but itshould be minimal.

2013-05-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/ThreadedKernel.C (adl): I've converted the threaded
	simulation over to using a thread pool.  Rather than creating
	threads and then destroying them on each call to threadedSim(),
	now you create a thread pool and supply that to threadedSim().  I
	use barriers to synchronize, so that threadedSim, when it reaches
	the barrier, causes the threads to do their simulation work.  When
	done, they then reach an end barrier, upon which threadedSim is
	waiting.

	There's a global thread pool in ExecSupport.C that's used by
	default, but a user can supply their own when calling
	threadedSim().  Everything seems to work, but I haven't regressed
	everything- just the MT tests.  Full testing is next...

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.1 (v3_5_1) on Linux (lc2632-tx30) on 5/31/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.1 (v3_5_1) on Linux (lc2466-tx30) on 5/31/2013 ==

2013-05-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL now supports the GDB interface with the multi-threaded
	kernel, for both interpreted and decode-cache models.  To use, run
	with the --gdb or --gdb-udp option and specify a port file using
	the --pf option.  Then connect gdb by sourcin that file.  Each
	core will then appears as a separate thread in gdb.

	* More fixes for MT/MP ADL models and gdb.  First, I added on
	support for the qThreadExtraInfo query: It now returns the full
	ADL path of the core on which the given thread is running.  This
	shows up in the "info threads" table (the Threads tab in Emacs).
	Second, I fixed a problem with multi-core decode-cache and JIT
	runs: Each run_dc or run_jit function was catching SimInterrupt,
	so it wasn't propagating up to the IssSystem, but was instead
	basically ignored.  Fixed this by creating simple_run_dc and
	simple_run_jit, which don't catch SimInterrupt.  These are what's
	called by the IssSystem run_dc and run_jit routines.  The run_dc
	and run_jit routines also call their simple counterparts and do
	catch SimInterrupt.

	Added designs/mpdbg2.c and gdbtest13.dat to test this.  I enhanced
	gdbclient so that it can format hex data into ASCII so that
	regression results are more meaningful.

2013-05-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial support for gdb with the multi-threading kernel.  No
	regressions yet- that's TBD.  Also fixed some other bugs: We were
	responding with a stop command, e.g. S05 after each step in a
	vCont, which was wrong- we want just a single response for
	everything, including the continue portion.  Also, threads never
	"die", since they're mapped to cores.  Plus, we should never
	respond with -1 as an active thread- we respond with the first
	thread (1) now.

2013-05-28  Brian Kahne  <bkahne@lc2321-tx30>

	* misc/dbgen.C (adl): We had a bug when analyzing aliases- if a
	resource was used which didn't map to an instruction field (for
	aliases which map to multiple instructions), we would get a
	null-string error.  Fixed this and modfied doc34.adl to test.

	* uadl/Cache.C (uadl): Added in more cache logging- I now log the
	cache next-level actions, so that it's more obvious what's going
	on.  For example, store-next operations are piling up because the
	store buffer size is unlimited.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.0 (v3_5_0) on Linux (lc2144-tx30) on 5/21/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.5.0 (v3_5_0) on Linux (lc2524-tx30) on 5/21/2013 ==

2013-05-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** This release now features support for uADL Graphite
	integration.  To generate a uADL model with Graphite support,
	simply run <b>uadl2model</b> with the <b>--graphite</b> option.

	** Graphite support was enhanced to properly handle multi-word
	loads and stores via the <b>graphite_multi_mem_start</b> and
	<b>graphite_multi_mem_end</b> attributes.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2013-05-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenInstrs.C: Fixed the Graphite integration wrt. multi-word
	loads and stores.  The problem was that we would only record a
	single memory access for an instruction, but then during
	execution, multiple loads or stores might be adde to the dynamic
	instruction queue for an lmw or stmw, thus resulting in an
	assertion fail in the Graphite core model.

	Now, a multi-word load or store must specify the start and end
	indexes via the attributes graphite_multi_mem_start and
	graphite_multi_mem_end.  For example, for an lmw, the start index
	is RT and the end index is 31.  Modified ppc-graphite.adl and
	added store2.dat to test this.

2013-05-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/adl_wrapper_support.pm (distcc_setup): adl2iss and
	uadl2model now support plain distcc (non-pump mode).

	* I moved the Graphite integration code into its own top-level
	directory, since it now integrates with uADL as well as ADL.

2013-05-17  Brian Kahne  <bkahne@lc2496-tx30>

	* Updated the Graphite integration to use a factory-based approach
	for creating the performance model, in order to avoid issues with
	shared object linking.  I also had to add -export-dynamic to the
	Graphite examples in order for them to work with plugins.

2013-05-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The event-bus stuff now works for the Graphite integration.

	* scripts/launch-lsf-graphite: Added a script for launching
	Graphite spawn servers on LSF.

	* Initial check-in for Graphite uADL integration.  Just about
	everything works except for event buses.

	* uadl/GenCode.C (uadl): Edge-sensitive external exceptions for
	uADL are now properly handled.  It was the case that we never took
	the exception because it got cleared too soon by prefetch.  Now,
	we treat it as level-sensitive by putting it in the
	pending-exceptions flag, but then automatically clear it when we
	take it by applying an edge-sensitive-exception mask.  Added
	dlx2-ese to test.

	* iss/ElfReader.C (adl): If _init_memory is false, we now skip
	initializing memory.  This speeds up Graphite loads and prevents
	tons of warning messages.

2013-05-13  Jing Huang   <Jing.Huang@freescale.com>

	* adl-asm-impl.C: Fixed a bug that failed to set a default value 
  to the pointer to source opcode data for shorthand when creating 
  an instruction by creatInstr(), which may result in segmentation 
  fault when the created instruction is used in certain cases.

2013-05-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Miscellaneous updates to get the Graphite integration working
	with the latest version of Graphite from GitHub.  I also removed
	Jit compilation from Graphite, since it seems like the Jit has
	some issues with multi-threading.  So, we just test with the
	decode cache right now.

2013-05-13  Jing Huang   <Jing.Huang@freescale.com>

	* Added offset keyword for the relocation specification, which is
	used to specify the relocation offset relative to the instruction
	width. It may be useful if the relocation is not aligned to the end
	of the instruction.

2013-05-07  Jing Huang   <Jing.Huang@freescale.com>

	* Enhanced the generation of reloc_howto_type structure which
	contains all the information that libbfd needs to know to tie up
	a back end's data for relocation, by enabling specifying the
	special function of reloc_howto_type, which is called to accommodate
	special relocation methods. This is only enabled for assembler but
	not dissembler, and should be used with caution.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.4.0 (v3_4_0) on Linux (lc2525-tx30) on 5/6/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.4.0 (v3_4_0) on Linux (lc2242-tx30) on 5/6/2013 ==

2013-05-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tests/iss/memtest.C: Further tweak to get this to pass with gcc
	4.6.3.  This realy seems likea bug to me in the compiler:  We only
	get a fail with optimized, shared code, as if the compiler is
	folding out an operation that's required.

	* iss/LoggingMgr.C: I removed the locking version of logging
	manager, as I don't think we need it: Only a core's thread writes
	to the respective logging manager; external exceptions just cause
	a flag to be set and thus are not logged immediately.  This should
	improve performance a bit and simplifies some of the Windows code.

2013-05-03  Jing Huang   <Jing.Huang@freescale.com>

	* asm/GenAsm.C: Fixed an issue when comparing if two instructions have
	equivalent immediate info, which is used to set the "longest" value.
	The instruction field can have unsigned upper bound when it is signed.
	This should be taken into account when comparing immediate info.

2013-05-03  Brian Kahne  <bkahne@lc2331-tx30>

	* iss/ThreadedKernel.C (adl): Well, that didn't work- the real
	solution is just to use the same mutex, else you still have the
	potential for a race condition.  So, I removed _active_count_mutex
	and I'm just using _run_mutex in the set_active_count callback.

	* iss/ThreadedKernel.C (adl): Looks like we had a race condition
	with quite signals, because the set_active_count callback doesn't
	use the same mutex as run_internal.  Therefore, I re-arranged the
	conditionals so as to avoid waiting w/o explicitly checking quit.

	* tests/iss/memtest.C (check_result): Weird compiler bug with gcc
	4.5.4 and 4.6.3: The assertion fails w/optimized builds, but
	passes with 4.4.4.  Seems like a compiler bug; by putting the
	check in a separate function, it works.

	* Fixed a bug with decode-cache generation: We weren't correctly
	setting up the basic-block instruction count for non-branch
	instructions marked as explicit basic-block-end instructions.
	Therefore, we might get garbage for the td increment multiplier,
	which could result in us prematurely exiting a simulation.

2013-05-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in288.dat to test MT synchronization and created mod86 to
	test having a model with external memory, internal DMI, and no
	external DMI.

2013-05-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenMems.C (adl): Miscellaneous fixes to get the internal DMI
	cache working when there is no external DMI cache.  I also now
	make sure that an update only occurs if the supplied real address
	matches the internal last-real-address.  The problem is that an
	external access could cause a problem, by updating memory using
	the wrong last effective/real address, e.g. an external access
	caused by a system call, thus putting memory into the wrong spot
	in the internal DMI cache.

	* iss/ThreadedKernel.C (adl): When only one core was active, I was
	setting the td-threshold to max-int in order to reduce the
	overhead of returning to the kernel.  However, this erased the
	instruction-max setting.  I now set the threshold to InstrMax if
	it's non-zero.

2013-04-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/ThreadedKernel.C (adl): Added in synchronization for the MT
	simulation.  This usese the TD counter- when cores hit their
	threshold, they wait at a barrier until all arrive, then they all
	proceed.  The idea is that this prevents one core from executing
	tons of extra instructions, such as in a spin-lock, due to another
	core not having run yet.

	I re-used the existing _run_cond condition variable, with my own
	wait count.  Breakpoints also signal everybody, since we want to
	exit in that case.  Exceptions do not wake everybody up- the
	theory is that cores will proceed as normal, eventually hitting
	their time quanta.

	I modified the active-callback object so that it's signaled on
	exceptions as well as set-active-count actions, so that I can set
	an internal flag that an exception has occurred.  This helped
	simplify some of the logic in the threading kernel.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.11 (v3_3_11) on Linux (lc2525-tx30) on 4/25/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.11 (v3_3_11) on Linux (lc2242-tx30) on 4/25/2013 ==

2013-04-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenRegs.C: Added a separate predict-not-taken macro just for
	registers, since it turns out Synopsys enables MMU tracing for
	side-band info even when most tracing is disabled.  This enhances
	speed by at least 10% for their integration.  I also added other
	"unlikely" hints for MMU and cache tracing.

2013-04-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new writer, the fast-dat writer, has been added, with a
	default extension of <b>.fdat</b>.  This is a fast, stripped-down
	DAT file: It only logs instructions (no other intermediate
	results) and only stores the last N instructions, where N defaults
	to 10,000 and may be set via the option <b>--fdat-icount</b>.
	This writer is useful for multi-threaded simulations, where the
	normal overhead of tracing might cause some bugs to disappear
	which are occasionally present when tracing is off.

	Since this is a DAT file, and contains initial and final results,
	it may be compared to other DAT files using <b>tracediff</b>.
	However, the <b>M</b> and <b>R</b> cards will have to be
	explicitly ignored if present in the original DAT, since they are
	not present in the fast-dat file.

	* iss/DatWriter.C:  Miscellaneous restructuring to support this
	new writer- most of the initial and final state reporting is
	contained in a new class, DatReporter, which is inherited by the
	original DatWriterImpl class and by FastDatWriter.

2013-04-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenInstrs.C (GenInstrBase): Turns out that I had an error
	with the temporal-decouplin check: I was missing a check for
	calculated branches, e.g. bclr, rfi, etc., in the decode cache, so
	that a loop consisting of just an rfi or a bclr would never exit.
	Fixed this and added in286.dat and in287.dat to test.

	* iss/GenInstrs.C (GenInstrBase): Removed exception checking logic
	that I had added earlier.  Exceptions are now applied externally
	in the threaded kernel, to keep things simpler.

	* iss/GenExceptions.C:  Modified how external exceptions are
	handled in the threaded kernel.  The delayed mode now means that
	we store the exceptions in a temporary flag, then the threaded
	kernel applies them via Modelinterface::applyExceptions.

	Added a more complex test with a Uart + interrupt controller
	model, tested with in285.dat.

2013-04-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/makedat (strings): Added a new feature to the makedat
	script: Data contained in a block marked with "str" will be
	converted to MD cards containing the equivalent bytes, with null
	termination.  The final string in the block has an extra null
	appended.  In the block, the command *addr: <addr>* denotes the
	starting address for the string block.  Multiple string blocks may
	be specified.

	* Added in284.dat, an example of using a Uart model with the MT
	kernel.

2013-04-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenInstrs.C (adl): Minor updates to get the decode cache to
	work with external exceptions and the MT kernel: We have to check
	the exception flag on a JitRetCode status in run_dc and run_jit.
	Added a simple plugin for testing (ExceptionsCallback.C), which
	allows a core to generate exceptions on another core.  Testing
	this with in283.dat.

2013-04-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenExceptions.C (adl): Initial support for external
	exceptions in an MT model.  External exceptions are recorded, but
	not immediately taken (toggled via
	IssNode::setDelayedExternalExceptions).  They just set the
	exception flag, then the td threshold is 0'd, so that we fall out
	of the loop and then process the exception flag.  The threaded
	kernel then restores the td threshold, since no breakpoint is
	active.

2013-04-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Makefile.am (perl -pi.bak -e ' s/std): Minor build fix- the
	regex expected whitespace between # and include, when searching
	for where to add the gc_allocator include, but this wasn't always
	the case.  I'm now allowing zero or more whitespace.

2013-04-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/ThreadedKernel.C (adl): The scripting interface now works
	with the multi-threaded kernel.  Breakpoints also work: When a
	breakpoint is hit in a core, we fall out and then set all other
	cores' td thresholds to 0, causing them to eventually stop.  Added
	cli/c52.cli to test this functionality.

	Note that right now, for tracing to work, you have to run with
	-mft on the command-line, since we set up MultiFileTrace before
	the scripting logic is invoked.  We probably want to enhance this
	at a later point so that it can be selected.

2013-04-10  Jing Huang   <Jing.Huang@freescale.com>

	* Fixed a bug that generated incorrect instruction field clearer functions in the assembler, which
	resulted in other assembly errors. The issue was due to that the clearer functions were generated
	in support of only big instruction endianness, so when the instruction endianness ss little, the
	generated functions worked incorrectly.

2013-04-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Removed the aligned-write stuff, as it's no longer necessary
	with the page-based locking scheme.

	* Added a sched_yield system call and I'm now using that in
	in282.dat if we fail to get a lock.

	* Yet another change to memory locks- we're now just locking for
	shared memory (identified by when the atomic instruction lock is
	enabled).  This seems to pass our tests and means less locking.

	* iss/MemoryLocks.h (adl): Added a whole new memory locking
	concept for MT models.  We now lock memory (DMI and non-DMI) on 4k
	pages, using a two-level hash.  This seems to get an optimized
	mod84 w/the decode cache to run and pass in282.dat consistently.
	Probably still a lot of room for optimization, though.

	* The memory lock and atomic instruction lock are no longer
	global- they're installed by the threaded simulation kernel using
	IssNode::setMemoryLocks.

	* Added IssNode::hasMultiThreadedSupport() so that the
	threaded-sim kernel can error out if a model does not have
	multi-threaded simulation support.

	* Building a model with MT support now implies that the TD API is
	enabled.  You can also not buld a model with Graphite and MT
	support- they're mutually exclusive.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.10 (v3_3_10) on Linux (lc2029-tx30) on 4/9/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.10 (v3_3_10) on Linux (lc2525-tx30) on 4/9/2013 ==

2013-04-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The fix for the critical-word logging wasn't quite right- that
	caused *all* logging to use log_core_mem_[read|write]_typed,
	rather than just those with the 5-parameter form.  So, I now added
	some logic to differentiate between the two.  I modified
	tracediff so that a new parameter --ignore-extra-found-fields
	(which defaults to true but can be ignored) can catch where an
	extra field is in the found file.  This allows me to check that D
	cards, for example, don't have the type field, which is indicative
	of the typed form of memory logging.

2013-04-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The MT kernel now seems to work pretty well with the decode
	cache and DMI, when doing atomic operations.  The DMI cache now
	uses special aligned-write calls which are purposefully not
	inlined, so that the compiler is forced to actually do the load or
	store.  The JIT seems to occasionally, fail, but that might be due
	to LLVM weirdness, so for now, I'm just testing with the
	interpreter and decode cache.  Seems like there still might be a
	problem, at least with optimized code, so we might want to
	investigate this further, e.g. should be perhaps not add to the
	DMI cache any data that's handled by atomic instructions?

2013-04-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial support for atomic instructions.  There's a lock on the
	event buses and there's a global lock for any instruction marked
	as atomic, which is any instruction which touches a register
	resource also touched by an event bus.  Thus, lwarx and stwcx both
	use this global lock.  This seems to work, but I'm getting some
	very occasional fails using the decode cache w/no tracing.  So, I
	need to do some more investigation on that.

2013-04-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/ThreadedKernel.C (adl): Using the new ActiveCallback object,
	the MT kernel now supports waking and sleeping cores in the
	simulation via a condition variable.  The callback is used to
	signal other sleeping cores when activity changes.  Added
	mod84.adl/in281.dat to test this feature.

	* iss/ModelInterface.h (adl): Added ActiveCallback, a new callback
	functor which will be called in place of the default
	set_active_count functionality if it is installed.  It gets a
	pointer to the core, a reference to the active-count, and the new
	active-count value, and should return the old active count.

	* fe/Data.C (adl): Added set_active_count, get_active_count, and
	is_active as valid global resources, so that one core can wake up
	or put to sleep another core via an event-bus.

2013-03-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* System calls now work with the threaded kernel.  The main change
	was that we no longer have a single, global default system call
	handler. Instead, everything now uses the SysCallExtHandler
	object; a default one is added by the standalone infrastructure.
	This way, different threads do not interfere with each other.
	Locking is not perfomed on this handler, since the only point of
	sharing is by the actual system call itself, where locking is
	handled by the kernel.

	* Fixed a bug with the shared sparse memory: The thread-safe
	define was being inserted too late, meaning that there was no
	locking, causing potential problems.  Fixed this- it and the
	system calls are tested via in279.

       == file:///proj/.ppc_43/vc_noec/git/adl release 1.8.35 (v1_8_35) on Linux (lc2496-tx30) on 3/26/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 1.8.35 (v1_8_35) on Linux (lc2242-tx30) on 3/26/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 1.8.35 (v1_8_35) on Linux (lc2496-tx30) on 3/26/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 1.8.35 (v1_8_35) on Linux (lc2242-tx30) on 3/26/2013 ==

2013-03-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/ThreadedKernel.C: Initial MT threaded kernel support.  It's
	very basic at this point- we just launch a thread for each child
	of the main top-level system and run them until they complete.
	Multi-threaded tracing is enabled if tracing is enabled, in order
	to avoid conflicts.  The main memory is defined with
	THREAD_SAFE_MEMORY in order to turn on a mutex.  This means that
	the model must be generated with --mt-support.

2013-03-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new option has been added for ISSs: <b>--multi-file-trace</b>.
	When used with a <b>-n</b> option greater than 1, a separate
	output trace is created for each top-level core.  This is similar
	to the <b>--dat-multi-file</b> option, but works for any kind of
	output file, though it is limited to multiple files only at the
	top-level of the hiearchy.

	There has been a slight API change to support the above:  When
	calling <code>createWriter</code> (SimInterface.h), you must now
	call <code>addWriter</code> with the Writer object which is
	returned.

	* iss/ExecSupport.C (adl): To support the above, I modified
	writers in ExecSupport.C to be a list.  Multiple WriterContext
	objects are pushed on in installLoggers if the flag is set and the
	top-level item is a system.  Getting all of this to work correctly
	necessitated the API change described above.  Added a test with
	in246.dat to test.

	* Fixed a bug with the decode cache and breakpoints: When we
	invalidated a block due to a breakpoint, the block remained in the
	block hash, but had both the start and branch-target pointers set
	to 0, so that if the block was a target of other blocks due to
	direct-threading, we'd go into an infinite loop due to the
	null-pointer branch target.  The fix was to create a special
	invalidate_bb function for the decode cache, which sets the branch
	target to the branch-trampoline, so that we bounce back to the
	simulation kernel.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.9 (v3_3_9) on Linux (lc2242-tx30) on 3/21/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.9 (v3_3_9) on Linux (lc2496-tx30) on 3/21/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.9 (v3_3_9) on Linux (lc2331-tx30) on 3/20/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.9 (v3_3_9) on Linux (lc2496-tx30) on 3/20/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.9 (v3_3_9) on Linux (lc2242-tx30) on 3/20/2013 ==

2013-03-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The logging of watchpoints has been enhanced: The new
	<code>LogBase::log_watchpoint</code> function also supplies the
	size of the memory access causing the watchpoint (in bytes) and
	the value, if a write.  Note that users will need to update any
	code which inherits from LogBase, in order to receive watchpoints,
	due to the change in the method signature.

	** A new logging method has been added:
	<code>LogBase::log_basic_block_end</code>.  This method is called
	by any branch or halt instruction, both in the interpreter or by
	JIT/decode-cache models, and is used to signify the end of a basic
	block.  The scripting interface has been enhanced to support this
	event via the <b>setlogcmd</b> command.  It is called immediately
	after <code>LogBase::log_instr</code>.  Its main purpose is to
	allow for more efficient function tracing: Use <b>log_instr</b> to
	denote the start of a basic block, then turn off the logging of
	instructions.  The end of a basic block will then be signaled via
	<b>log_basic_block_end</b>.

	* Added cli/c51.cli to test this functionality.

2013-03-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenMems.C (adl): When handling the 5-parm form of memory
	reads and writes (type specified, along with a critical address),
	we were dropping the typed portion and then not passing the
	parameters properly, resulting in a 0 for the address.  We also
	weren't calling the typed-form of the logging calls, which was
	confusing.  I just changed it so that we always call the typed
	version of the logging calls.  Added mod11 w/in277.dat to test.

	* We also had a problem with memory read and write hooks with
	values larger than 64-bits:  The generic form had incorrectly
	generated code.  This is also tested with in277.dat.

2013-03-13  Jing Huang   <Jing.Huang@freescale.com>

	* Changed the way to get the relocation value. Try to get relocation 
	value by name first. If the value is BFD_RELOC_UNUSED, then try to 
	look up the value from field directly. If it is -1 (default), then 
	use BFD_RELOC_UNUSED.

       == file:///proj/.ppc_43/vc_noec/git/adl release 1.8.34 (v1_8_34) on Linux (lc2242-tx30) on 3/7/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 1.8.34 (v1_8_34) on Linux (lc2496-tx30) on 3/7/2013 ==

2013-03-05  Jing Huang   <Jing.Huang@freescale.com>

	* Added disassembly syntax of instructions, if available, to the 
	generated XML database under <dsyntax> tag, immediately following 
	<syntax> tag.

2013-03-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/BlockHash.h (adl): Setting a breakpoint for a JIT or
	decode-cache model calls invalidate_ea, but that called
	instrReadTranslate on the model, which might cause an exception.
	Changed this to call extInstrReadTranslate, which uses the
	no-side-effect version of the translation functions, to avoid any
	exceptions.  Modified in214.dat (mod72.adl) to set a breakpoint at
	an unmapped region, just to look for this kind of problem.

	* configure.ac: I up'd the bison requirement to 2.4, to match
	what's on newer Fedora systems.  The only change that this
	required was to modify a couple of regressions- apparently the
	column-counting was off by one for the newest version.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.8 (v3_3_8) on Linux (lc2243-tx30) on 3/1/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.8 (v3_3_8) on Linux (lc2496-tx30) on 3/1/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.4 (v2_5_4) on Linux (lc2243-tx30) on 3/1/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.4 (v2_5_4) on Linux (lc2496-tx30) on 3/1/2013 ==

2013-02-28  Brian Kahne  <bkahne@lc2243-tx30>

	* helpers/intbv_base.h (adl): Minor fixes to reduce warnings with
	gcc 4.6.3.

2013-02-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** When loading multiple input files, ADL and uADL simulators will
	now warn if initialized data is being overwritten.  These warning
	messages may be controlled via the <b>--warn-mem-overwrite</b>
	command-line option, which may be negated.

	** The <b>--entry-point</b> command-line option has been expanded
	so that it can now take either an address or a symbol.  This
	option also works with any kind of input file:  ELF, DAT, etc.

	* Overhauled how branch prediction data is stored.  The prediction
	value and target are now stored in the instruction class-
	initially in the target address, which is then overwritten when
	the branch is actually executed (in safe-mode).  However, a
	prediction-result is updated to then store whether the prediction
	was correct or not.  Normal-mode is similar, but we directly query
	for branch status after the branch executes.

	This was done due to a bug with the stack-based predictor: We were
	storing the prediction result back into the array, which meant
	that it could get overwritten if two predictions were made for the
	same address, while both were in the instruction buffer.  With the
	new method, the predictor doesn't need to store this data because
	it's stored internally in the instruction.

	* Added better logging of prediction status, with target, for
	instruction buffer entries and instructions at issue time.

	* The forced-flush checking is now done conditionally if an
	instruction class has a mix of branches and non-branches, to avoid
	inadvertent flushes.

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.3 (v2_5_3) on Linux (lc2467-tx30) on 2/26/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.3 (v2_5_3) on Linux (lc2120-tx30) on 2/26/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.3 (v2_5_3) on Linux (lc2467-tx30) on 2/26/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.3 (v2_5_3) on Linux (lc2120-tx30) on 2/26/2013 ==

2013-02-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/GenInstClass.C (uadl): We had a bug, where we wouldn't put
	in a force-flush check for a safe-mode model if a branch
	transitioned in an internal state before then transitioning out of
	the stage, e.g. S_ID -> S_IDp -> S_EX.  Fixed this, so that the
	z720 passes a benchmark which previously failed with the
	link-stack predictor.

	* uadl/GenCode.C (uadl): Fixed a bug with safe-mode models with
	branch predictors.  We had a bug, where if a branch was predicted
	taken, but wasn't taken, and the model allowed another instruction
	to issue on the same cycle after that branch, then that
	instruction would be executed by the ISS, erroneously, when in
	fact it should have been skipped.  The problem was that we didn't
	set the speculative flag because we didn't call the
	branch_target_update function, because the branch wasn't actually
	taken, and that function is only called on a taken branch.  I
	fixed this by having the speculative bit be set in the branch-hook
	function.  The default, if we have a predictor, is to set the
	speculative bit, then to call the user-defined branch hook if one
	exists.

	Added dlx2-bp3.uadl with branch8.dat to test.

2013-02-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** New MMU hooks have been added: <b>load_miss</b> and
	<b>store_miss</b>.  Their parameters are identical to
	<b>data_miss</b>, except that they are only called for loads and
	stores, respectively.  If a <b>data_miss</b> hook is present, then
	it is called after the more specific hook.

	* Updated the front-end, simulator generator, database generator,
	and docs generator to handle these new hooks, plus modified
	regressions accordingly.

	* iss/GenInstrs.C (adl): The code for the decode cache had
	instruction logging after the NIA update, whereas for the normal
	interpreter, it was before the NIA update. I fixed this
	discrepancy so that they are now consistent.

2013-02-21  Jing Huang   <Jing.Huang@freescale.com>

	* Supported running micro instructions within one macro instruction
	in different cycles. By providing a new function called "run_commit()",
	which is simlar to "run()" but commits after the last micro instruction 
	specified as argument is execuated, one can emulate such behavior.

2013-02-19  Jing Huang   <Jing.Huang@freescale.com>

	* Adjusted the commit timing for micro instructions. Instead of
	committing after all micro instructions within a macro instruction 
	execute, it is done after each micro instruction executes. This is 
	due to the execution of micro instructions within a macro one may 
	be extended to several cycles, which may requires the instruction 
	executed in the later cycle use the result from the previous cycles.

2013-02-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/Cache.C (uadl): Fixed a problem with canceling memory
	requests in uADL.  This would only show up if the max_requests
	value was greater than 1.  The problem was that we use circular
	queues for memory requests, where generally we don't remove out of
	the middle, so it's safe to have pointers to these objects.
	However, if we do cancel a request, but leave another request in,
	then we remove out of the middle by copying, thus invalidating
	prior pointers.  This was the case with the Cache, where the
	NextLevelAction objects contain pointers to memory requests and
	those pointers became invalidated after a cancel.  Added
	dlx-cache-split-pc3.uadl to test.

	** The uADL pipeline tracing feature has been enhanced to now
	display all memory requests/transactions present in all layers of
	the memory hierarchy.  This should make it easier to understand
	what is going on in the memory hierarchy at any particular cycle.

2013-02-15  Jing Huang   <Jing.Huang@freescale.com>

	* Fixed a bug that results in missing micro instructions when they
	are patched to a macro one and the macro instruction operands have
	modifiers. It is caused by field cleaning used in insert_modifier(),
	which removed the micro instructions patched. Extra processing for
	macro instruction is added to avoid the issue.

2013-02-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated FlexLexer.h to flex 2.5.37 for compatibility with the
	4.5.4 toolchain.

	* tests/iss/memtest.C (main): When using a 64-bit random number
	generator (Boost), I got a memory explosion; guess it was just
	*too* random for the sparse memory.  Switched back to 32-bit to
	make it run faster and with less memory.

	* Fixed a bug related to compiling with gcc 4.5.4.  I had removed
	PLASMA_LIBS from the intbv tests and added -lgc explicitly, but
	that failed for the minimal build, but -lgc was required for
	non-minimal building due to the use of AnyOption.  I put
	PLASMA_LIBS back in and use a sed script to strip out -lplasma
	which doesn't exist for gcc 4.5.4.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.7 (v3_3_7) on Linux (lc2015-tx30) on 2/7/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.7 (v3_3_7) on Linux (lc2088-tx30) on 2/7/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.7 (v3_3_7) on Linux (lc2088-tx30) on 2/6/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.7 (v3_3_7) on Linux (lc2015-tx30) on 2/6/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.7 (v3_3_7) on Linux (lc2088-tx30) on 2/6/2013 ==

2013-02-06  Brian Kahne  <bkahne@lc2015-tx30>

	** ADL has been ported to the gcc 4.5.x compiler suite.

2013-02-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Some cleanup for compiling/assembling ELFs used in the
	regression.  All compiler calls are guarded, since we distribute
	the ELFs.  We don't want make failing because of a timestamp issue
	caused by the ELF looking like it's out od date.

2013-02-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL now has support for delayed writes to memory.  The syntax
	is the same as for delayed register writes:
	<pre>
	delayed_write(<memory-expr>,<delay>) = <expr>
	</pre>
	For example:
	<pre>
	delayed_write(Mem(ea,4),2) = GPR(RS)
	</pre>
	This would write four bytes to address <b>ea</b> two cycles in the
	future.  The delay value may be an expression, but then the
	simulator generator is unable to statically determine the maximum
	number of delay slots, which would mean that it would have to be
	set explicitly in a <b>.ttc</b> configuration file.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* iss/GenMems.C (genMemoryFuncs): Refactored this to support
	delayed memory writes.  I put the bulk of the logic in two
	functions, one for reads and one for writes, with the write
	function expanded to handle creating a write_mem_delayed function.
	Added mod83.adl, in273.dat to test.

2013-02-02  Jing Huang   <Jing.Huang@freescale.com>

	* Fixed the entry point as the virtual address of 1st program
	header when the ELF is executable and the machine is of certain
	architecure.

2013-01-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* asm/GenAsm.C (adl): We weren't properly masking addresses in the
	disassembler when calling the objdump symbol printing routine,
	which meant that some addresses could overflow (since we're using
	a 64-bit address type), resulting in not printing the correct
	symbol- it would just print the current symbol + offset, rather
	than a destination symbol.  Fixed this by adding a mask based upon
	the NIA width.  Added asm73.elf to test.

2013-01-29  Jing Huang   <Jing.Huang@freescale.com>

	* Fixed a bug that makes incorrect evaluation of whether to use 
	ELF function descriptor or not.

2013-01-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* asm/GenAsm.C (adl): I refactored how assembler regular
	expressions are created.  Previously, I was inserting optional
	white-space regexs into the main regex, but that's unnecessary, as
	the lexer compresses this.  It also caused problems in dealing
	with some examples, e.g. microinstr16.adl.  The resultin regex was
	overly general, matching code it shouldn't have.  To solve this, I
	reduced the whitespace regex down to just a single space, and only
	include it if the whitespace is needed as a separator between
	fields.  Thus, for two fields separated by a comma, there is no
	whitespace regex.  Added microinstr16.adl (with microinstr16.s)
	and extended microinstr8.s to test.

	* More assembler fixes: Given an instruction which had a field
	specifier, followed by trailing syntax (as opposed to just
	whitespace), we weren't calculating the end of the instruction
	name properly and thus the resulting regex was bad.  Fixed this,
	along with tweaks for whitespace handling.  Updated
	microinstr16.adl (with microinstr8.adl) to test.

2013-01-25  Jing Huang   <Jing.Huang@freescale.com>

	* Added a right_shift key for relocation to specify the number of
	bits the relocation value is right-shifted before it is encoded.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.6 (v3_3_6) on Linux (lc2015-tx30) on 1/24/2013 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.6 (v3_3_6) on Linux (lc2031-tx30) on 1/24/2013 ==

2013-01-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The <b>adl2asm</b> script now supports an <b>--output-dir</b>
	option to allow the user to specify an output directory for
	generated files and the final executables.

	* To avoid some linking issues on Windows, we now always generate
	relocation information, even if it's empty, in the assembler.

2013-01-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* asm/GenAsm.C (adl): We had a bug with the disassembler: The
	logic to detect a section crossing was wrong, so that we couldn't
	properly disassemble a file which had high-addresses- everything
	was OK with a .o file, but a linked ELF just showed "address out
	of bounds" errors.  Fixed this by modifying the logic to get the
	address comparison correct.  Added a test with asm1.elf (a linked
	version of asm1.s) to test.

2013-01-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Various fixes for local memories.  First, we had a bug with
	large writes to local memories, where the addressing unit was
	larger than a byte.  Since the address scaling was being done in
	mask_ea, for a large write, which we broke up into words, we were
	scaling the ea each time, potentially running past the end of the
	memory, if it was small.  Fixed this by moving that logic out of
	mask_ea and into a new Translate method called scale_ea, which is
	called just once, at the start of the access.  After that, the
	access uses normal addressing.  This means that for DAT loading,
	addresses are now per-byte regardless of the memory configuration.

	** Numerous enhancements and bug fixes were made to ADL for
	supporting local memories, including proper range checking of
	accesses (these now wrap, in the same way as the global memory).
	The only change which might affect users is that memory
	initialization, such as in a DAT file, uses per-byte addressing,
	regardless of the addressing unit of the target memory.

2013-01-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I modified gas/app.c to force double-slash comments.  That's
	hardcoded in the lexer, unfortunately, so it's not really
	user-configurable. iss/microinstr15.s tests to make sure that
	C-style and double-slash comments work.

	** The ADL assembler has been enhanced to support explicit
	separator characters between instructions for parallel
	architectures.  This allows, for example, ';' to be used as a
	separator for instructions on the same line, where all
	instructions on the same line are considered part of the same VLIW
	packet.  By default, multiple instructions may be specified on the
	same line, but this can potentially lead to parsing issues due to
	ambiguous assembler syntax.

	This feature is specified by using the <b>instr_separators</b> key
	in the <b>assembler</b> define.

	** The line-separator character of ';' is no longer the default
	for ADL assemblers.  This must now be specified explicitly using
	the <b>line_separators</b> key in the <b>assembly</b> define.

	* To support the above, the string is modified by
	adl_assemble_instr to add a null at the separator point, if a
	separator is found.  This is then either restored or used to move
	to the next instruction.

2013-01-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL's support for relocations has been enhanced.  You can now
	specify a field-width for the relocation and whether it's
	pc-relative.  If specified, this must correspond with the field
	widths and pc-relative flag of any instruction fields which use
	the relocation.  The generated assembler now accepts these
	relocations and the disassembler will display them as well.  The
	XML database has been expanded to store the extra information
	about the relocations.

	* To implement the above, the assembler/disassembler generator now
	creates an array of reloc_howto_type objects which store this
	information- just enough to be useful for the assembler and
	disassembler.  It's still fairly primitive:  I don't have any logic
	for actually doing anything with the relocations- they just get
	inserted into the relocation section of the elf file.

2013-01-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/UvpWriter.C: The --uvp-log-result-mem option now prints the
	initial testcase memory in both the init and results section, so
	that a testcase loader will see instruction data, even if tracing
	is turned off.  Added in271.uvp to test this.

	* scripts/make-release-notes (get_bug_csv): I'm opening the CSV
	file in binary mode now, to handle the apparent fact that Trac 1.0
	returns the CSV with a DOS encoding.

	* iss/ConfigDB.C (adl): I'm now calling standardParserSetup on the
	config-file parser, so that it gets any defines or include paths
	from the command-line.  Modified mod3.ttc to test this.

2013-01-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* asm/GenAsm.C (adl): In assembler code blocks, e.g. rules,
	shorthands didn't appear to have their parent's attributes.  The
	problem was that the opcode objects for the shorthand's target(s)
	didn't have a pointer to the respective attributes, even though
	the opcode for the actual shorthand did have the pointer.
	However, when the instruction object (InstrInfo) is actually
	visible to these code blocks, it's already been transformed into
	the target, hence the loss of the attribute data.

	I fixed this by simply adding in a pointer in the shorthand target
	opcode to the same attributes as used by the main instruction.  I
	added mod81.adl with asm71.s to test.

2013-01-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* adl-asm-impl.C (copy_operands): Fixed a bug with handling
	permutable operands: We removed trailing empty items, but didn't
	take into account that if an instruction only had permutable
	flags, then those empty items represented permutable flags which
	weren't present.  I now keep any trailing empty matches if they're
	in the range of the permutable flags.  Added mod80.adl (asm70.s)
	to test.

2013-01-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The branch trampoline for JIT and decode-cache models didn't
	check the td counter, so we ignored max-instruction-count and
	temporal-decoupling requests when artificially shortening basic
	blocks via the use of the --jit-max-bb-size command-line parameter
	(and corresponding API).  Fixed this and added in270.dat to test.

2012-12-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* All regressions now pass with no gc for the back-end.

2012-12-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/JitSupport.C (adl): Thanks to using helgrind on the
	backend-no-gc branch, I realized that I was missing several locks
	in the MT JIT compiler because I had written them as
	scoped_lock(_mutex), thus not actually declaring a variable.
	Fixed this in the current new-fast-iss branch.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.5 (v3_3_5) on Linux (lc2015-tx30) on 12/13/2012 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.5 (v3_3_5) on Linux (lc2031-tx30) on 12/13/2012 ==

2012-12-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The change made to create the high-fidelity td counter didn't
	address exception loops for itlbs, since we weren't ever fetching
	an instruction.  This meant that I had basically re-introduced the
	bug that I thought I had fixed earlier.  Added a series of tests
	for mod11 and mod72 (high and low fidelity td models),
	in266.dat-in269.dat, to test this.  Basically, I added the
	increment back into the catch block, to make sure that it does get
	incremented.

	* Apparently, having an ifdef around raiseException was causing
	issues with Windows bulds with MSVC2010.  Changed the ifdef to be
	JIT-specific to avoid the issue.

	* Modified the windows regression so that mod23 is now built with
	multiple jobs, in order to make sure that works, even though the
	issue described above apparently doesn't occur with MSVC2008.

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.2 (v2_5_2) on Linux (lc2015-tx30) on 12/7/2012 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 2.5.2 (v2_5_2) on Linux (lc2031-tx30) on 12/7/2012 ==

2012-12-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Various linker and compile issues fixed in order to port ADL
	2.x to gcc 4.5.x and binutils 2.23.

	* When sorting assembler shorthands, we were just comparing the
	number of field references and putting fewer first.  However, when
	there was a long list of shorthands with just a single reference,
	the output differed between gcc 4.4.x and 4.5.x due to changes
	in the underlying implementation.  This caused a regression fail
	(asm8.s) due to differences in the branch shorthand ordering.
	Now, I have a secondary sort criteria of the number of
	expressions, with more being better, since it implies a more
	specific alias.  This fixed the problem, e.g. bne+ comes before
	bne for bc shorthands.

	* Had to explicitly link rnumber with driver7 to get around the
	new linker's behavior (no more implicit linking).

2012-12-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* mod1 with UVP and DAT readers/writers are now valgrind clean
	w/no gc.  However, JIT support doesn't fully work- there's a
	linking error with boost, so I'm going to have to install Boost
	compiled with gcc 4.5.4 to fix it (I think).  Also, looks like
	LLVM with C++11 support in the standard library is problematic-
	might require installation of their new libc++ (LLVM C++ standard
	library) and I don't know how well that works on Linux yet.  For
	now, I can get around it by not having any C++11 features visible
	to LLVM, except for the auto keyword, which produces warnings but
	it still accepts.

2012-12-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The whole back-end system now compiles w/o the gc, but there are
	still some issues to work out.  Namely, mod1 crashes immediately
	in the DatReader, so there appear to be memory management issues
	to still work out...

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.4 (v3_3_4) on Linux (lc2031-tx30) on 12/5/2012 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.4 (v3_3_4) on Linux (lc2015-tx30) on 12/5/2012 ==

2012-12-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/tracediff.C (adl): tracediff now passes all tests w/o the
	gc.  There still seem to be some valgrind issues with incremental
	parsing, though I don't know if it's really that important...

2012-11-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The getCurrentInstrAddr/watchpoint test (c50.cli) was updated so
	that it tests execution with the decode-cache and JIT as well as
	the interpreter.

	** Resource usage information, such as that displayed in the
	generated XML database, now displays the delay expression for
	delayed writes.  For example, for a delayed-write of 2 cycles,
	the value of 2 is contained in the output section of an
	instruction's XML entry.

	** A new interface method has been added:
	<code>IssNode::getCurrentInstrAddr()</code>.  This returns the
	current instruction address, which may differ from the program
	counter for an architecture such as POWER, where the
	next-instruction-address is computed before instruction execution.

	** Added new scripting commands:
	<ul>
	<li><b>pc</b>:   Return the current program counter.</li>
	<li><b>cia</b>:  Return the current instruction address.</li>
	<li><b>setpc</b>:  Set the program counter.</li>
	</ul>

	Refer to the <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-cli.html">the
	ADL scripting guide</a> for more information.

2012-11-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new option has been added to adl2iss:
	<b>--per-instr-td-incr</b>.  If set to true (the default), then
	the temporal-decoupling counter is incremented each instruction,
	even when run with the decode cache or JIT.  If false, then the
	increments are bunched together at the end of the basic block.
	The advantage of having this set to true is that you get higher
	fidelity- instruction counts are accurate, even if an exception
	occurs in the middle of a basic block.  Setting this to false,
	however, should result in slightly higher performance, due to
	fewer individual increments of the counter.

2012-11-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I've successfully removed the need for the gc from the UVP
	parsing infrastructure.  I'm now using unique_ptr (which requires
	gcc 4.5.x) to manage memory where possible, though the bison
	parser works with bare pointers (due to its use of enum, where
	C++11's more advanced enums aren't supported yet), so I have to do
	explicit deletes there.  However, at least things like UvpMap and
	UvpList use unique_ptr, so there's no need to explicit deletes for
	that stuff.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.3 (v3_3_3) on Linux (lc2031-tx30) on 11/16/2012 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.3 (v3_3_3) on Linux (lc0104) on 11/16/2012 ==

2012-11-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Well, maybe that wasn't a good idea...  seems to be messing up
	the dependency file creation.  So, the subdir-objects flag, which
	I think fixes the issue.

	* Makefile.am: I added the 'foreign' automake option flag to each
	Makefile.am to see if this would avoid the annoying differences
	which seem to pop up, where sometimes the foreign flag is present
	in Makefile.in and sometimes it's the gnu flag.  I don't know what
	causes the difference, but maybe this will eliminate it.

2012-11-15  Brian Kahne  <bkahne@lc0098>

	* helpers/CodeGen.C (adl): In order for the JIT fixes below to
	work for compiled code, the relevant functions had to be marked
	with the used attribute so that the optimizer wouldn't remove
	them.

	* The fix for JITs and exception loops can now be run on the JIT
	code, since the JIT exception bug was fixed.

	* iss/GenInstrs.C (adl): For decode and JIT run functions, we
	never incremented the td counter for exceptions, so an exception
	loop would produce a hang.  Fixed this and added in265.dat to
	test.

	* iss/MmapFiles.C (open_mmap_file): Fixed a mistake with the MSVC
	configuration- we had an uninitialized variable that was never
	used, but we closed it anyway.

2012-11-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Exceptions were not being properly thrown from the JIT to the
	ISS code.  Looks like the problem is due to some difference in
	name mangling or something when using a non-POD type:  ints
	worked, but not adliss::P::Exception.  So, I modified the code
	generation so that raiseException is seen by the JIT code as just
	a decl, thus preventing inlining.  This worked.

	* Some cache tests were crashing in the JIT, possibly due to a
	difference in memory layout or something.  Fixed this by having
	the cache replace functions not be visible to the JIT, so that
	LLVM can't inline it.

	* For the above, I added a new set of JIT arguments to the
	jit_model_test function, which runs JIT-only with no MT, thus
	forcing all code to be JIT'd.

2012-11-14  Brian Kahne  <bkahne@lc0098>

	* For performance enhancements, the internal DMI is checked if a
	cache is disabled or if there is no read-allocation and thus
	misses to the next level of cache.  The external DMI update also
	updates the internal DMI, so that these situations can be handled
	via internal DMI accesses.

	* I added some extra, explicit inlining for intbv field operations
	and register index queries.  For some reason, the compiler wasn't
	inlining these things, resulting in performance penalties.  But
	when forced to inline, the compiler did a good job of evaluating
	and folding out constant operations, meaning there was no need to
	add redundant special-case logic.

2012-11-13  Jing Huang   <Jing.Huang@freescale.com>

	* Set maximum number of delay slots supported as 3, in accord with
	what is stated in the ADL language reference.

2012-11-05  Brian Kahne  <bkahne@lc0098>

	* iss/GenMems.C (adl): Fixed another bug with TLM2
	address-swizzling:  The internal DMI cache was using 0 offsets,
	thus causing problems.  I changed this to use the same technique
	as the external DMI:  Find a pointer using a double-word aligned
	address, then use an offset within that double-word address.
	Added the mod18-tlm2-em tests with the decode cache to test.

2012-11-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Makefile.am (DISTCHECK_CONFIGURE_FLAGS): Distcc for "make
	distcheck" wasn't working properly, i.e. running "pmake distcheck"
	because the CXXPROG value that was being used was just "g++",
	which pointed to the masquerade location used by distcc, so distcc
	though it was running recursively.  I fixed this by modifying the
	distcheck flags to pass in the values of CXXPROG and CPROG used by
	the outer project.  configure.ac was then changed so that it would
	use an existing CXXPROG and CPROG value.

	Also fixed make-oss-release to work properly with git.

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.2 (v3_3_2) on Linux (lc0104) on 10/31/2012 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.2 (v3_3_2) on Linux (lc2031-tx30) on 10/31/2012 ==

       == file:///proj/.ppc_43/vc_noec/git/adl release 3.3.2 (v3_3_2) on Linux (lc0104) on 10/31/2012 ==

2012-10-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Memory.h (adl): Yet another tlm2 fix.  My
	byte-read/byte-write routines were wrong- with byte-swapping, they
	do nothing, but with address swizzling, you still have to modify
	the address.  Added scripts/dmiload3.dat and scripts/dmiload4.dat,
	plus a memtest enhancement, to test.

	* iss/Memory.h (adl): Fixed some problems related to TLM2-style
	address swizzling.  The problem was that we were swizzling the
	final address (host machine address).  This isn't correct, because
	we don't know its alignment; you *have* to always swizzle the
	simulated address, so that, for example 0x0 becomes 0x4 for a
	32-bit read, etc.  Therefore, I changed the byte_readN and
	byte_writeN routines so that they do their swizzling on the
	offset, then add the result to the buffer pointer.  However, this
	means that the offset has to be valid!  Therefore, I also had to
	change the DMI handler routines so that they do their lookup based
	upon a double-word aligned address, then supply the offset as the
	offset within that double-word.

	Modified memtest.C and added mod18-tlm2-em to test this.

2012-10-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL now supports register read-callbacks.  These operate in a
	similar fashion to the existing register write-callbacks, except
	that the callback is called before the read operation occurs. If a
	callback is installed, then the register stores the callback
	function's return value and then proceeds with the normal read
	operation.

	Register read-callbacks are installed via the
	<code>IssNode::setRegReadCallback</code> methods.

	** Modified mod72, in263.dat to test the above.

2012-10-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The DAT writer now has the ability to create separate files for
	each core, or to write all output to a single file.  This is
	controlled by the option <b>--dat-multi-file</b>.  If enabled,
	then multiple output files are created, each with the respective
	core's ID appended, e.g. if the output is specified as
	<i>foo.out.dat</i>, then for a two processor system, core 0's
	output is written to <i>foo_0.out.dat</i> and core 1's output is
	written to <i>foo_1.out.dat</i>.

	* To support the above, the DatWriter class creates one or more
	DatWriterImpl objects, which basically contain all of the
	important information that was in DatWriter.  For normal
	operation, only a single impl class is created.  For multi-file,
	one object is created per core.

2012-10-29  Jing Huang   <Jing.Huang@freescale.com>

	* Added regression to test shorthand instructions with width 
	over 32 bits, to check whether the immediate values are correctly 

2012-10-29  Jing Huang   <Jing.Huang@freescale.com>

	* Added regression to test shorthand instructions with width over
	32 bits, to check whether the immediate values are correctly
	patched into the opcode

	* This regression is related to the ticket #889.

2012-10-28  Jing Huang   <Jing.Huang@freescale.com>

	* Fixed a bug that resulted in incorrect opcode for alias 
	instructions when the width of the instructions is over 32 bits

	* This fix would close the ticket #889.

2012-10-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The ADL GDB server now supports multi-threaded debug for
	multi-core systems.  Each core shows up as a separate thread to
	GDB, so that, for example, "info threads" will show information
	about each core in the system.

	* Lots of changes to support the above.  First, I found an I/O
	race condition- we weren't blocking I/O before we restored state,
	leading to a possible race-condition where we would get I/O which
	would de-active cores, just before we checked it.  Also, each
	GdbTarget now has a list of cores (for a simple core, this points
	to itself) and all activites such as activating and de-activating
	are done by iterating over those core items.  This way, a system
	activates all child items, etc.

2012-10-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/make-release-notes: The interface-change reporting
	mechanism now works with Git, and rather than creating an URL to
	Trac to show the differences (which didn't work outside of
	Freescale), I now just embed the Git diff directly in the release
	notes.

	** Users may now specify input and output file format types using
	the format <b>&lt;name&gt.&lt;format&gt;</b>.  For example,
	<code>model foo.in:dat -o=foo.out:uvp</code> would treat
	<i>foo.in</i> as a DAT file and <i>foo.out</i> as a UVP file.

2012-10-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL and uADL simulators now automatically detect if a file is
	an ELF file, and will load it, even if the file extension is not
	".elf".  For example, "a.out" as an input file will load correctly
	as an ELF file.

	* iss/GdbServer.C (adl): Enhanced the debug server to support
	vRun, vCont with a -1 tid (which means all threads), and vKill.
	Also, once the program has stopped, we respond to signal requests,
	e.g. ?, with X00, to avoid a bug in current versions of gdb.
	Added gdbtest14.dat to test.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.3.1 (v3_3_1) on Linux (lc8256-tx30) on 10/11/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.3.1 (v3_3_1) on Linux (lc0096) on 10/11/2012 ==

2012-10-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with the IssNode::mem_write<n> functions- they were
	still using the old-style "mask" form for writes, which meant that
	when they called the underlying routines, there was a segfault,
	since the mask was interpreted as the byte-count.  Fixed this so
	that the usage is consistent.

	** The ADL plugin API was changed slighty so that the setup
	function <code>Plugin::setup</code> now receives a pointer to the
	root <b>IssNode</b> object, allowing various setup operations,
	such as installing register callbacks, to be performed.

	* For the above, changed count-instrs.so output to test.

	** A new ISS model-build configuration option (.ttc option) has
	been added: </b>bb_end_instrs</b>.  This may be set to a list of
	instructions which should be regarded as basic-block ending
	instructions.  This is only applicable to generation of
	decode-cache and JIT models.  The purpose of this feature is to
	allow the user to explicitly specify extra instructions which
	might change the program counter.  Normally, only branch and
	halting instructions return to the simulation kernel so that the
	program counter is re-checked.  This allows other instructions to
	be explicitly checked, such as if a special kind of
	register-update instruction might trigger an action due to the
	existence of an external plugin, for example.

2012-10-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenMems.C (adl): We had a mistake in the DMI update code,
	when there was no cache, so that that the internal DMI looked
	directly into the external DMI: The address offset calculation was
	incorrect.  Fixed this and added scripts/dmiload1.dat to test.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.3.0 (v3_3_0) on Linux (lc8256-tx30) on 10/8/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.3.0 (v3_3_0) on Linux (lc0096) on 10/8/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.3.0 (v3_3_0) on Linux (lc8256-tx30) on 10/8/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.3.0 (v3_3_0) on Linux (lc0096) on 10/8/2012 ==

2012-10-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tests/scripts/Makefile.am: Build bug with optimization: The
	external memory object for the TLM2 memory test had to be built
	with the data-invariant define for it to work correctly.

2012-10-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL now supports TLM 2.0-style endianness handling, where
	address swizzling is used to handle big-endian models on
	little-endian architectures, as opposed to byte swapping.  This is
	enabled by generating the model with <b>--tlm2-endianness</b>.

	* The above was implemented by having two sets of byte_read and
	byte_write routines.  The first is the standard byte-swapping
	routines (which now use the gcc built-ins for speed).  The second
	set, used when DATA_INVARIANT_MEMORY is defined, use address
	swizzling, where the data is basically moved up to the high-bits
	of a 64-bit word.  Added scripts/mod1-tlm2-em to test this.

2012-10-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/GenCode.C (uadl): The safe-mode branch handling didn't work
	correctly if the flush was in a different stage from the exec
	stage, so things like the se_rfi in the z420 didn't work, because
	flush was in the write-back stage, thus we flushed too early,
	causing problems.  Now, we insert the branch check in the flush
	stage, rather than the exec stage, and we add it to the commit
	stage if there is no flush.  Modified dlx2-bp2.uadl to test this
	behavior.

2012-10-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I've improved branch handling in safe-mode models: When a branch
	moves out of its execution stage, checking logic is run which
	makes sure that the branches true next address equals the next
	instruction address.  This means we either check for the next
	instruction in the pipeline or query the fetch unit, then compare
	that against either the branch target or next instruction
	address.  If they don't compare, we flush the fetch, starting
	fetch at the proper next instruction address.  This should prevent
	infinite loops like we used to have.

	I created two bad-branch models: dlx.uadl with BAD_BRANCH defined,
	which eliminates the branch logic, and dlx2-bp2.uadl
	BAD_PREDICTION, which causes the link-stack predictor to return
	bad results.  These are then tested to make sure that they still
	function correctly, even if timing is off.

2012-09-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We need to use -export-dynamic when building Graphite models so
	that peripherals will work properly.

	* scripts/adl2iss.in: We now refuse to build a Graphite model if
	ADL wasn't configured with Graphite.

	* scripts/adl2iss.in (dobuild): Modified the LLVM filter due to
	modifications with LLVM 3.1 with optimized builds.  We probably
	need to re-think the whole filtering concept, to make it more
	robust.

	* iss/GenMems.C (adl): Modification for LLVM 3.1.  I guess I
	missed this the first time because I had inadvertantly not done a
	full test with JIT support.

	* scripts/adl2iss.in: Added in an explicit error message if the
	user tries to create a Graphite model and no Graphite support is
	present.

	* Various updates to support LLVM 3.1

2012-09-28  Jing Huang  <b38901@b38901-ec1.am.freescale.net>

	* Fixed a bug in doc generation for register read/write hook
        information when there is action aliased to register-file element

2012-09-27  Jing Huang  <b38901@b38901-ec1.am.freescale.net>

	* Fixed a bug in doc generation for register read/write hook
	information when there is action aliased to register-file element

2012-09-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenMmu.C (adl): Additional bug fix: We had a code generation
	error when an interface TLB had an array definition.  Fixed this
	and modified mod72.adl to test.

	* Lots of updates to the MMU generation to fix various issues
	combining page-based TLBs with region (bounded) TLBs.  You can now
	mix the two types (separate caches are created for each) and we
	properly support having array sizes of 0 or 1 elements. Modified
	mod72.adl to test these combinations.

2012-09-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I reworked the standalone reader/writer code to remove the
	static LoggingMgr object.  The static reader and writer lists
	still exist, but the user can supply their own WriterContext in
	order to isolate this logic.  This allows writers to now work
	properly in a multi-threaded environment, so that tracing in
	Graphite works for more than one core per process.

2012-09-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/adl2doc.in: The --output option didn't really work
	correctly, so I changed things so that the output option is used
	as the basename for the output, with the appropriate file
	extension added as needed, e.g. --output=foo yields foo.rst,
	foo.html, and possibly foo.pdf.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.2.0 (v3_2_0) on Linux (lc2031-tx30) on 9/24/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.2.0 (v3_2_0) on Linux (lc0096) on 9/24/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.2.0 (v3_2_0) on Linux (lc2031-tx30) on 9/24/2012 ==

2012-09-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The temporal decoupling API and internal DMI cache are now
	enabled if either JIT support or the decode cache are turned on
	(previously, only activated by default for the JIT).

	* Added a --dmi-cache flag to adl2iss.

2012-09-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Two new interface functions have been added: <code>bool
	ModelInterface::has_td() const</code> and <code>bool
	ModelInterface::has_dmi_cache() const</code>.  These return true
	if the model has been generated with the temporal decoupling API
	enabled and the external DMI cache enabled, respectively.

	* iss/ModelInterface.h (adl): Modified driver9.C and driver.C to
	test this functionality.

2012-09-20  Jing Huang  <b38901@b38901-ec1.am.freescale.net>

	* Added width() API for InstrInfo to return the width of the instruction in bits

2012-09-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Basic, functional support for peripherals in Graphite has been
	added.  These are enabled via a shared-object plugin interface:
	The user specifies plugins on the command-line, these are loaded,
	added in to the memory map, and then memory traffic, during
	simulation, which targets I/O addresses are trapped by the
	interface and sent to the new I/O server that I added to
	Graphite.  I added graphite/AccumPeriph.C to demonstrate a simple
	example, with iotest1.c to test it.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.5.1 (v2_5_1) on Linux (lc2031-tx30) on 9/17/2012 ==

	* iss/Graphite.C: Updates to the Graphite interface to support
	adding latency to I/O operations.  The I/O interface now supports
	using the performance model.  I also updated the documentation to
	describe how to create a plugin.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.1.0 (v3_1_0) on Linux (lc0096) on 9/17/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.1.0 (v3_1_0) on Linux (lc2031-tx30) on 9/17/2012 ==

2012-09-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenCache.C (adl): There was a bug with the touch and
	allocate cache operations: For transactional ISSs, we never
	initialized the set and way variables, causing potential segfaults
	with optimized models because of the uninitialized way variables.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.1.0 (v3_1_0) on Linux (bkahne-ec1) on 9/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.1.0 (v3_1_0) on Linux (lc0096) on 9/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.1.0 (v3_1_0) on Linux (lc2031-tx30) on 9/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.1.0 (v3_1_0) on Linux (lc2031-tx30) on 9/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.1.0 (v3_1_0) on Linux (lc0096) on 9/14/2012 ==

2012-09-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenInstrs.C (adl): Modified how register IDs are calculated
	for the Graphite performance model.  I now try to disambiguate
	sparse register files.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.5.0 (v2_5_0) on Linux (lc2031-tx30) on 9/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.5.0 (v2_5_0) on Linux (lc0096) on 9/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.33 (v1_8_33) on Linux (lc2031-tx30) on 9/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.33 (v1_8_33) on Linux (lc0096) on 9/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.33 (v1_8_33) on Linux (lc0103) on 9/14/2012 ==

2012-09-13  Jing Huang  <b38901@b38901-ec1.am.freescale.net>

	** Added instruction field property unsigned_upper_bound
	in the generated database and documentation

	* Added instruction-type to the instruction field type
	in the generated database

2012-09-13  Jing Huang  <b38901@b38901-ec1.am.freescale.net>

	** Added instruction field property unsigned_upper_bound
        in the generated database and documentation

2012-09-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/Cache.C (uadl): We had a corner case, where we would think
	we would hit in the linefill buffer, even though we were about to
	clear it.  For safe-mode models, this meant we'd report erroneous
	data at the end, since the UVP writer looks into the cache for
	final memory results.  Fixed this by adding a !clearLinefill term
	to the atLinefillBuf equation.

	* fe/VarWalker.C (adl): We weren't always correctly identifying
	helper functions- we didn't correctly get template-function calls
	due to name issues, so we might incorrectly omit needed helpers.
	Fixed this and added fe/helper21.adl to check this.

2012-09-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/BranchPredictor.h (uadl): For some reason, this passed the
	regressions, but failed when compiling the z720, due to some
	missing namespace qualifiers.  Added them in to fix.

2012-09-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Support for custom branch predictors has been enhanced.  You
	can now specify values for template and constructor arguments
	using the same mechanism as for custom resources, via the
	<b>args</b> define block.

	* Added an example, dlx2-bp2.uadl with a custom link-stack
	predictor, to test this behavior.

2012-09-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenCache.C (adl): Fixed a bug with uADL and caches: If we
	performed an operation which could yield a bad way, such as a
	touch w/no allocate, then when the operation was ended, we would
	still try and decrement the busy count, potentially resulting in a
	segfault, or undefined behavior, as we also didn't clear the set
	and way values in the access object for an ra-based operation.
	Fixed this and modified mod21.adl to have a no-allocate mode, so
	that we could test (added uadl/touch1.dat for testing).

2012-09-07  Jing Huang  <b38901@b38901-ec1.am.freescale.net>

	* Miscellaneous fixes for language reference typo and
	typewriting

	* Updated ChangeLog for ruby enhancements

	** Added a instruction field type: instruction-type,
	which associates the field with instructions within the
	specified instruction table

	** Added a global function run(), which executes the
	instructions within the instruction-type fields

	** Added a post-packet-assembler API combineInstr(),
	which creates an instruction under a template by filling
	its instruction-type fields with the encodings of other
	instruction

	** Added a post-packet-assembler API patchInstr(), which
	patches an instruction at one of its instruction-type fields
	with the encodings of another instruction

	* Updated the syntax and function of patchInstr(), making it
	simpler but more flexible, thus easier to combine with other
	post-packet-asm APIs

	* Added and updated regressions for the updated patchInstr()

	* Updated ADL language reference for updated patchInstr()

2012-09-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The initial ADL Graphite integration is now considered complete.
	An ADL may be generated using the <b>adl2iss</b> command-line
	option <b>--graphite</b> to create a model capable of simulating
	in a distributed (multi-core and multi-host) fashion using the MIT
	Graphite library.

	Debug and DMI cache integration has not yet been implemented.

2012-08-31  Brian Kahne  <bkahne@lc0098>

	* Added in a new system call for retrieving the core's ID, plus
	documented Graphite usage.

	Modified the LLVM filter so that it includes some of the more
	complex intbv logic which was needed in some situations by the
	JIT.

2012-08-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Graphite.C (simulate): Minor change so that ADL+Graphite
	uses pthread-based thread-local-storage in order to avoid the
	system-call override that exists when using the hash-based TLS
	mechanism.

2012-08-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I've modified how file loading works in Graphite.  Now, we only
	create the various readers once, then apply them to each core
	(still serialized).  This should solve the weird GC memory error
	that I would occassionally get with high thread counts.

	This meant that I had to modify the Reader interface so that it
	can take a null root pointer at first and then set a new root via
	Reader::setRoot.  The various readers were modified to reset
	themselves on a setRoot operation.

2012-08-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* More work on lwarx/stwcx.  The prior attempt didn't really work
	(just seemed to).  Now, I have a Graphite mutex installed at
	startup; all atomic operations (both lwarx and stwcx) use this
	mutex to ensure that they're mutually exclusive in operation.  I
	also modified the event-bus logic so that a sender waits until it
	receives replies from all other cores, in order to synchronize.

2012-08-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* ADL's Graphite integration now supports atomic operations.  The
	instructions in question, such as stwcx., needs to be marked with
	the graphite_atomic attribute.  This will place lock/relase calls
	around the action code.  I added back in spinlock.elf to the
	regression to test this.

2012-08-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The two larger Graphite tests (Blackscholes and Matrix Multiply)
	can now have their parameters set via make variables.

	* tests/graphite/collect-stats: Added a simple stats collection
	script which reads stdin, looks for graphite messages, and appends
	various statistics to a csv file.

2012-08-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Graphite.C:  Added in some basic speed displays for testing
	purposes, using boost/date_time.

2012-08-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Graphite.C: Miscellaneous changes to bring the Graphite
	integration up to speed with the latest Graphite changes.

2012-08-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/ADLPerlDB/ADLPerlDB.pm (process_query): We weren't
	handling white-space properly when looking for regex operators for
	array fields.  If no whitespace was present, we wouldn't match,
	and thus wouldn't automatically unroll the array.  Fixed this and
	added tests in 'doc' to test.

2012-08-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I modified Graphite so that it's now possible to use a
	shared-memory transport, as long as you only have a single
	process.  This eliminates the need to allocate a port, and as
	faster as well.  I modified the regress script to use shared
	memory as long as the process count is 1.

2012-08-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Graphite.C: The flags for the open system call weren't being
	translated from PPC newlib to x86, so file-open operations didn't
	always work.  I copied over the code from the normal system call
	handler so that this would work.

	* iss/Graphite.C: Minor changes to get "lite" mode working.  In
	this mode, there is only one process and no thread spawners, so
	the calculation of the number of application threads had to change
	slightly.  I added in test to make sure that matrix-multiply works
	in lite mode w/no performance model enabled.

2012-08-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The ADL database query tool <b>adl-db</b> has been expanded so
	that it can support multiple requirements in its conditional
	clause for the same field.  By default, fields which consist of an
	array are iterated over using an implicit loop and the conditional
	is checked on each iteration.  This approach fails if the user
	wants to make sure, for example, that an instruction has an input
	A and an input B: Since those are two different elements of the
	same array, the conditional will never match.

	Now, the user can unroll the array and check against the array
	using multiple terms.  This is done using the @ unroll operator.
	For example:
	<pre>
	--cond="@inputs =~ /FOO/ && @inputs =~ /BAR/"
	</pre>
	In this example, the <b>inputs</b> field is unrolled into a
	single, tab-delimited string, and then the condition is applied.
	It passes if the string contains both <i>FOO</i> and <i>BAR</i>.

	Arrays are implicitly unrolled if regular expression operators are
	used.  This behavior may be controlled by the
	<b>--unroll-arrays</b> command-line option.

2012-08-03  Brian Kahne  <bkahne@lc0103>

	* iss/logging_events_utils.pm (printStdCode): Looks like building
	in a separate directory from the source didn't really worrk if the
	logging managers were rebuilt, due to some include-file issues.

2012-08-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tests/graphite/graphite_api.c: I consolidated the Graphite API
	code that was scattered amongst the various tests into a single C
	file, then refactored the tests to take advantage of this.  The
	header and implementation file are also installed into
	share/graphite_api.

	* tests/graphite/mmultiply.c (main_thread): Added another test from
	Graphite- shared-memory matrix multiply.

2012-08-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Graphite.C (createMasterBarrier): In order to avoid a race
	condition, I added in a new message for the sync server, which
	returns true if the barrier exists, false otherwise.  Now,
	createMasterBarrier, for processes other than 0, use this to wait
	until the barrier exists.

2012-07-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Lots of work to get dynamic thread dispatching to work.  First,
	I re-did how the global barrier works.  Setup is now done by
	directly accessing the sync server, to simplify the code. I
	expanded the Grahite barrier a bit to add on a flag to prevent the
	barrier from changing thread state (this was messing with the
	running/idle status, which caused problems when scheduling
	threads).

	I then added system calls for spawning a thread, given a function
	pointer and argument pointer, and waiting until a thread request
	comes in.  In the later case, this meant some work in Graphite to
	create a routine which spins until a request matching a given
	tile-id arrives, or a quit message.

	I also added in a new client/server service for the thread manager
	so that threads can identify themselves as being idle.  This was
	required, as the default mode of operation for Graphite actually
	creates new threads, whereas we have a fixed number of existing
	application threads (the cores), on to which work is mapped.

	I added spawnthreads.c to test this, with various elf files,
	e.g. spawn-10.elf, corresponding to different numbers of threads.

2012-07-31  Brian Kahne  <bkahne@lc0103>

	* scripts/adl2iss.in (printversion): Yet another fix for
	compilation in adl2iss, this time fixing issues when the build
	directory is different from the source directory.

2012-07-30  Brian Kahne  <bkahne@lc0103>

	* Miscellaneous fixes for the regression and build system wrt. the
	JIT and Graphite.  Some minor issues with building using
	--enable-shared and getting the correct location for the bitcode
	file.  The regression wasn't working correctly due to how we were
	reporting errors, thanks for Perl's broken implementation of
	closures.

2012-07-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I've moved all LLVM compiling to using adl2iss with the
	--jit-compile-only option, so that we don't have the filtering
	scattered through the makefiles (which was always very ugly).
	Fixed adl2iss's filtering so that the Graphite models work with
	the JIT when optimized.

	* I cleaned up the time-out handling capability of the regress
	driver.  There were a number of issues, such as the alarm handler
	not being called because it went out of scope due to checking the
	$timeout value, and the kill_all routine wasn't working due to
	Perl's broken closure handling.  The Graphite tests now repeat
	twice, just to handle the occasional deadlock which still seems to
	sometimes occur.

2012-07-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The JIT now works with the Graphite integration, though it kinda
	seems like the MT compiler has some stability issues.  Thus, I've
	disabled that for now in the regressions.  I'll add it back in
	once I have time to look into any issues that might exist.

	The JIT integration is pretty straight-forward: It works just like
	the decode cache, except that the basic-block pointer is passed to
	the LLVM instruction handler function as an extra void pointer
	argument (an index to the element in the basic block is included
	for conditional memory operations).

	The decode-cache is the default simulation type, but if only the
	JIT is present in a model, it will automatically use it.
	Likewise, if the JIT is specified but doesn't exist, then it
	automatically falls back to the decode cache.

2012-07-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Graphite.C: Fixed a bug with Graphite's handling of long
	basic blocks: When we added in an explicit branch-stub trampoline
	to end a long block, we weren't calling Graphite to handle the BB,
	causing the performance model to get out of synch.  Fixed this by
	adding in calls to handle the bb in the branch stubs, if a basic
	block pointer is set.

2012-07-20  Brian Kahne  <bkahne@lc8012-tx30>

	* iss/Graphite.C: Just to be safe, I put the root-node creation in
	a mutex as well, so that there was no chance of the static data
	structures for the introspection data getting corrupted, which
	might be what cause some remaining occasional core dumps.

2012-07-19  Brian Kahne  <bkahne@lc8012-tx30>

	* iss/Graphite.C: OK, I think I figured one of the big problems
	with Graphite's stability: There were shared, static objects in
	ExecSupport.C, for readers and writers, which were probably
	getting clobbered by the multiple threads.  I put all of the I/O
	stuff within a global lock for the process, until I have time to
	re-architect all of that junk to make it properly re-entrant.

	I also added _REENTRANT and GC_LINUX_THREADS as project-wide
	defines so that the gc would hopefully be consistent in its
	handling of threads.

	I also catch any exceptions in the local threads and print their
	error, then mark the fact that an error occurred so that the main
	program can exit.  This way, things like missing files are
	reported properly without aborting.

	Finally, I realized that tracing doesn't work properly with
	multiple threads per process due to the above mentioned globals.
	Thus, output is disabled if there is more than one thread per
	process.

2012-07-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Graphite.C: More experiments with stability.  I removed the
	use of the global lock for reading input and that seemed to
	improve stability.  Not sure why, but the regressions seem to be
	passing, even with the use of an optimized Graphite.

2012-07-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Graphite.C: The graphite integration now supports n threads
	per model, so that we support a full n:m thread per process
	model.  We spawn off an ADL core for each application thread
	specified by the configuration.  All cores are then initialized
	and start executing, just as before.

	This is now accomplished by wrapping each ADL core in a class,
	LocalThread, which is launched using GC_pthread_create so that the
	garbage collector is aware of the thread.  It then creates the
	core and memory wrapper, initializes the thread with the rest of
	Graphite, and simulates.

	I added extra regressions to test various combinations of threads
	vs. processes.  I still see some occasional assertions and
	segfaults during the simulator shutdown- not sure what's going on
	there.

2012-07-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/gdbclient: Fixed a race-condtion issue with gdbclient:
	When trying to read a port file, sometimes it could open a file,
	but then it would read nothing in, as if the file were empty.
	Might be a weird file-system race condition in Linux.  However, it
	meant that we'd just try and connect on port 0, and thus would get
	no data.  Fixed this by trying to read from the port file; if we
	get nothing, sleep for 1 second and try again.  This seems to fix
	the issue.

	* Added in the Graphite synchronization API and created
	gspinlock.c and giolock.c to test.  Using Graphite mutexes and
	providing a master barrier function to synchronize thread startup
	seems to work pretty well.

	* Unfortunatley, I don't see a good solution for properly
	implementing stwcx right now.  The problem is a race condition
	where stwcx checks that it has the reservation, then tries to do a
	write, but lwarx comes in and clobbers the reservation, plus reads
	just before the write.

	What's needed is to create a critical section around the entire
	stwcx, so that an in-bound writeback request from dram, generated
	by the other core, is blocked until the write from the L1
	completes.  The problem is that I can't lock the L2, even with a
	recursive lock, since the L2 and the L1 operate in different
	threads.  I also can't easily turn off the network, since the L1
	uses it to communicate with the L2.  I think we'll need MIT's help
	to solve this.

	* I had to add in some extra thread stuff to get everything to
	work when using the Graphite mutexes.  At shutdown, the thread
	manager was complaining about non-idle threads, so I created a
	routine in Graphite to allow me to force all thread states to
	idle.  This is kind of a hack- a better solution is to get the
	thread states to be accurate.  I'll probably revisit this once I
	get everything else working.

2012-07-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenMems.C (adl): Turns out we didn't generate correct code
	for rollback-mode with external memory.  Fixed this and modified
	scripts/mod29-base-rn.so and scripts/mod1-em.so to add rollback
	mode in order to test that code generation is correct.

2012-07-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Cleaned up the output filename handling a bit, using
	Boost::filesystem.

	* In order to properly model conditional stores, such as stwcx., I
	had to modify Graphite so that it had a conditional flag for
	operands.  Then, I modified the code generator so that it sets the
	conditional flag to true if an instruction has the attribute
	graphite_conditional_mem.  Added graphite/store1.dat to test that
	we don't get assertions due to mismatches in the dynamic
	instruction information if a stwcx. does not execute.

	* Fixed a bug with event bus broadcasts: We weren't broadcasting
	anything because the IDs were always set to 0.  Now they're set to
	the ProcessIndex, so that we can recognize messages sent by
	ourself.  This then properly tests atomic operations, which then
	showed the problem described above (conditional stores which don't
	succeed).

2012-07-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* ADL now has a basic regression suite for Graphite.

2012-07-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new option has been added to <b>adl2iss</b>:
	<b>--incl-unused-helpers</b>.  This toggles whether unused helper
	functions should be included in the generated model.  The default
	is <b>false</b>: Unused helpers are not included.  This option may
	be negated.

	* To implement the above, I added the ability to check a function
	using Core::check_func(), which then calls VarWalker.  This
	required some changes to allow this to be a constant method, but
	it means that other hooks, such as trace_on() and trace_off(), can
	be checked and their usage information extracted, e.g. mod23.

2012-07-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* configure.ac: Fixed a problem with the Graphite check:  We had
	an AM_CONDITIONAL in conditional code, which caused configure to
	fail if we configured with --minimal-build.

2012-07-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/adl-config.in: Fixed a mistake- I had libltdl.la as
	coming from the ADL installation, when in fact it comes from
	Plasma.

2012-07-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* ADL is now able to build a Graphite simulator directly via the
	adl2iss --graphite option.  The Graphite-specific code is
	conditionally built into libAdlGraphite.la.  Use the environment
	variable GRAPHITE_ROOT to point configure to a Graphite
	installation.  A regression suite stil needs to be added.

2012-07-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Added a new generation option: <b>--extern-event-bus</b>.  When
	enabled, event bus broadcasts are handled via an external handler
	class, <code>EventBusExtHandler</code> which must be installed
	into the <code>IssNode</code> object, much as an external memory
	or system call handler.  This is slightly different from the
	option <b>--no-event-bus-send</b>, in that this mechanism is
	entirely generic and does not require the user to include the
	model as a header file.  However, this means that the event bus
	data is entirely opaque and can only be copied or applied to the
	model, and not examined.

	* fe/VarWalker.C (adl): Modified the usage-info tracking for
	memories slightly: Previously, use of dataWriteTranslate counted
	as a memory read, but I've changed that to a memory write so that,
	or example, stwcx doesn't get erroneous memory-read items in its
	usage info.  Probably the right way to solve this is to track more
	information for memories in UsageInfo, e.g. whether it's an access
	or just a translation function.

2012-07-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Reader.C (adl): There's now control, at the Reader level,
	for whether memory should be initialized, or simply logged.  This
	is tied in with SimInterface readInput (bool init_memory).  This
	way, if you have a shared memory with multiple nodes attached, you
	can load the same file into the different nodes, but have only one
	do the actual initialization.

2012-06-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The uADL2 cache model now supports configurable sizes for
	linefill accesses. Previously, these were fixed at 64-bits.  The
	size may be adjusted at model creation time by setting the cache
	parameter <b>linefill_access_width</b> to a size in bits.  The
	value may also be set at model instantiation/configuration time
	using the dynamic parameter
	<b>&lt;cache-name&gt;-cache-linefill-access-width</b>,
	e.g. <b>L1d-cache-linefill-access-width</b>.

2012-06-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial support for Graphite.  Minor changes made to the decode
	generator to support integration with the Graphite performance
	model.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.32 (v1_8_32) on Linux (lc0105) on 6/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.32 (v1_8_32) on Linux (lc6002-tx30) on 6/14/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.32 (v1_8_32) on Linux (lc0102) on 6/14/2012 ==

2012-05-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/JitSupport.C: Further changes to shutdown and reset.  I was
	still occassionally getting hangs due to all threads waiting.  So,
	I got rid of the barrier so that I shutdown and restart threads on
	reset.  I then also now call interrupt, rather than using the
	condition variable, b/c there appears to be a weird race
	condition.  We'll see if this fixes the issue...

	The real question here will be speed: When we start benchmarking,
	are we going to notice the slowdown for this kind of reset?  It's
	relevant, since breakpoints and tracing changes do resets.

	* I modified the JIT thread shutdown to use timed_join so that it
	won't hang, but will exit with an error if the threads cannot be
	joined.  I then *temporarily* turned off regression timeouts to
	see if we ever get this error.

2012-05-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** System-call emulation support may now use an external interface
	in a manner similar to external memory.  The option used to
	generate this is <b>--extern-syscalls</b>.  If turned on, then the
	user must install a system call handler, derived from
	<code>SysCallExtHandler</code> by calling
	<code>IssNode::setSysCallHandler</code>.  This can be done either
	when using an ADL model as a library/shared-object or via a plugin
	when using a standalone model.

	* Added external syscall suppport to tests/scripts/ExternMem.C to
	test the external system call support (used by mod1-em)

2012-05-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified mod1.adl to support basic system calls and added a very
	simple system-call test (iss/in261.elf) to make sure it works.

2012-05-24  Brian Kahne  <bkahne@lc0205-tx30>

	* scripts/rdriver.pm (kill_all): Added some debugging info to try
	and get to the bottom of the weird memory-wrap problem on the
	64-bit nightly regrssion.

2012-05-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Scripting.C (adl): Added proper shutdown to the scripting
	interface, since Tcl_Exit actually calls exit().  This fixed a
	segfault with the JIT with improper thread shutdown b/c the core
	destructor wasn't being called.

	* iss/JitSupport.C (adl):  We were calling notify_one() to wake up
	threads, but this could be a problem if multiple threads were
	waiting for a shutdown.  Now I call notify_all() to let everybody
	know that something needs to be done.

	* Miscellaneous build system changes.  Got rid of the
	tests/Makefile.am file, since this can be all done in the root
	makefile.

2012-05-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The --jit-mt command-line parameter for models can now take an
	integer value to specify the number of worker threads. The default
	is 1.  Using the negated flag, --no-jit-mt, turns off thread
	creation.

	* Removed the redundant locking from around the work queue, since
	we were already doing locking within the compiler object.

	* iss/JitSupport.C (adl): Fixed a bug with multi-threaded JIT
	tests.  The problem was that the default constructor for an
	IssSystem didn't delete its children, thus for an MP run,
	destructors weren't getting called on the cores.  This meant that
	we didn't have a clean shutdown of the JIT compiler threads,
	leading to weird segfaults.  Fixed this by creating a default
	constructor for IssSystem which deletes its children and modifying
	static system construction so that child objects are created as
	pointers.

	I re-enabled JIT MT tests, since this should now all work just
	fine.

2012-05-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* TEMPORARILY turned off JIT MT tests b/c of fails on the nightly
	regression.  I need to figure out why I'm getting these
	intermittent fails.

2012-05-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* All regressions in ADL can now be run in parallel (-p=n option).
	This was accomplished by adding a run-in-separate-directories
	feature to the regression driver, which is enabled by calling
	setupForSeparateDirs() in the regress script before defining any
	variables or listing tests in the Tests list.  The idea is that
	each test will then be run in a directory named tN, where N is the
	test number.  Paths are automatically changed to support this:
	$src is modified if it's relative and any instance of ./ is
	replaced with ../.

	The front-end tests and intbv tests don't bother with this, since
	they don't interfere with each other.  For the intbv tests, I
	added a regress script so that I could parallelize their
	execution.

	I added a top-level target of "pcheck" to automatically run the
	regression with -p=8 as an argument to each regress script.  The
	improvement is quite nice: pcheck runs in 8 minutes, whereas check
	runs in 14.5 minutes (test execution only, all test programs
	already built).

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.0.0 (v3_0_0) on Linux (lc1016-tx30) on 5/15/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 3.0.0 (v3_0_0) on Linux (lc0103) on 5/15/2012 ==

2012-05-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The temporal-decoupling theshold wasn't being obeyed for cold
	blocks in the decode-cache or JIT.  I added a td check right after
	exec_cold_block to now check for this situation and return if
	we've exceeded our count.  Added iss/in260.dat to check.

	* We had a bug with the gdb server, when working with JIT or
	decode-cache MP models: When allowing progress on a single core,
	we weren't maxing out the td threshold, so we'd hit that and not
	make it to the relevant breakpoint, confusin the debug server.
	Now, right before remoteContinue(), we save and max the threshold,
	then restore it afterwards.  Duplicated the MP mod11 gdb test for
	the decode-cache to test.

2012-05-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL group objects can now be given attributes via the usual
	<b>attrs</b> keyword.  They can thus be used to group objects, such
	as instructions, together with a series of attributes.  For
	example, a series of instructions might be grouped together within
	a group via the <b>has_attr</b> group selector, so that they can
	be associated with a common documentation string.

	* The --used-only flag has been updated for the database generator
	to filter out unused helper functions, registers, and
	register-files, as well as relocations and instruction fields.
	This is handled by keeping track of used registers and
	register-files in the front-end- we track it via the CheckCode
	class.

2012-05-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Makefile.am: The build system is now non-recursive for the
	non-regression portion of the build.  Thus, helpers, the
	front-end, iss-generation, doc/db-generation, and uadl are now
	built using a non-recursive methodology.  In those directories,
	build rules are specified using Makefile.mk files; these are
	included by the top-level Makefile.am.  This reduces complexity,
	since you no longer have to modify configure.ac to add new
	Makefile.in file sto be processed, and it increases parallelism,
	since all compile jobs can be done in parallel, rather than having
	the original serialization caused by recursion.

	I haven't modified the doc directory, since it contains a bunch of
	custom build rules and such.  Not much point in doing it either.
	Designs hasn't been flattened due to what looks like bugs in
	automake- it's having problems handling conditional builds of
	programs which are in subdirectories.  Weird- might still be a
	problem on our side, but doesn't appear to be.  Tests haven't been
	flattened yet due to time.  My hope is to flatten all of that, so
	that a "make tests/iss/mod1" will rebuild all necessary libraries
	and make-iss, as needed.

	Guide to modifying the build system:

	1.  Since everything is flattened, you can't just assign CXXFLAGS,
	or something like that- you need to use per-target versions of
	flags.  Consolidate common stuff into variables,
	e.g. "iss_includes" and such.

	2.  All targets and sources must have their sub-directories
	prefixed.  Fortunately, object files still go in their relative
	subdirectories due to the subdir-objects automake option.

	3.  The build actually occurs (the make process itself) in the
	top-level directory, so keep that in mind when dealing with
	includes and any custom rules.  You sometimes need to use the make
	functions $(dir) and $(notdir) to retrieve or strip directories,
	in order to target the right location.

2012-05-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed another adl-db problem: Queries of unknown attributes
	failed, because we only did substitutions of known attributes,
	thus leaving behind non-Perl code, e.g. "exists foobar" stayed
	that way, rather than getting transformed.  I added in a final
	pass which replaces any remaining "exists" tests with 0, in order
	to avoid this error.

	* scripts/ADLPerlDB/InstrHandler.pm (preprocess_objects): The
	adl-db program didn't work with the original database format for
	aliases- it only supported the newer format, which was designed
	for the new multi-alias support in ADL.  However, StarCore still
	used the original format.  So, I modified this function to support
	either format.

2012-05-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merge from trunk, plus build cleanup.  I also turned off
	multi-threading for one of the multi-core JIT tests, as I'm
	getting segfaults with MT.  This needs to be looked into.

2012-05-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with normal-mode models: If the instruction
	accessed memory and potentially halted, then the memory operation
	was lost.  The problem was that in normal-mode, if we can halt, we
	call exec_[stage] in order to make sure we check for the halt
	condition and then flush.  However, for memory ops, we have to
	call exec_mem.  We were checking for halting first in
	UadlWalker.C, meaning we didn't call exec_mem, meaning the memory
	operation got lost.  Fixed this by adding in exec_mem_[stage]
	functions which handle load/store instructions and the possibility
	of halting.  Modified uadl/mod1-uadl.adl so that stw looks as
	though it could call halt() in order to test.

2012-05-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added the used attribute to the decode miss handler so that the
	JIT can find the function when optimized.

	* Build cleanup.

2012-05-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated the make-release-notes script so that major version
	numbers must match, when checking versions.  This way, we can
	release different major-number versions and have the release notes
	be correct.

	** A new scripting command, <b>logreg</b> and interface function,
	<code>IssNode::logReg</code> have been added.  The functions
	simply log the current value of a specified register to any of the
	core's installed loggers.  This can be useful in combination with
	a call to <b>setreg</b> or <code>IssNode::setReg</code>, as these
	functions do not log the current value.  For the UVP writer, the
	result is displayed as an external write (<b>E:A</b> card).

2012-05-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I got rid of some of the non-header-only defines in the
	generated ISS models because of linking issues on Windows.  Since
	we filter out symbols from the bitcode file, this wasn't really
	necessary any more.

2012-05-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* helpers/intbv_impl.h (adl): Well, my initial attempt at
	improving performance didn't really work for the optimized JIT- it
	seems to make it a bit slower.  So, I've rolled this back for now.

	* iss/JitSupport.C (adl): I'm now initializing the LLVM
	multi-threaded support to avoid a segfault when using the
	multi-threaded JIT in an MP configuration.

	* helpers/intbv_impl.h (adl): I don't know why, but we were
	getting regression fails for optimized builds thanks to some of
	the improvements I put in.  I modified intbv::set slightly and
	that seems to have fixed it.

2012-05-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Performance tuning of the models.  I added in code for intbv
	slice-set, slice-get to skip logic if we're referring to the whole
	slice.  For sign-extend, we skip if we're trying to sign-extend
	the most-significant byte.  This helps, but for some reason,
	generic32 is still slower than mod1.  More investigation needed.

2012-04-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenSim.C (adl):  Fixed some trace-mode stuff for JIT models
	with event bus code generation.

	* More fixes for SMT systems and JIT compilation.

	* I re-did some of the class-path handling for ISS code
	generation, as it didn't work properly with nested classes,
	e.g. threaded models.  Added some instruction attributes to
	mod13.adl to test.

2012-04-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Miscellaneous changes to make sure ADL builds with and without
	LLVM present.

2012-04-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/remote-test (test_build_opts):  remote-test now sources
	.env-setup for per-environment customization.  You can set
	arguments to test-build and set the environment name by simply
	setting variables in .env-setup.

2012-04-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/JitSupport.C (adl): I moved all of the compiler code into
	JitSupport.C, out of the header, so that the Boost Thread headers
	are not required during compilation of a model.  This should speed
	up compilation, since those headers are pretty huge.  To make this
	work, I had to add some virtual functions to what were once
	non-virtual classes (the decode-items and basic blocks), but those
	are only used by the JIT compiler.  Since JIT compiling is
	expensive anyway, this shouldn't affect overall performance.

	* JIT compilation has been moved into a background thread.
	Threading is implemented via Boost Threads in JitSupport.h.  The
	basic idea is that, in multi-threaded mode (the default, disabled
	via --no-jit-mt), as the JIT hot-block threshold is crossed, the
	basic block is enqueued into a work queue.  The JIT thread works
	in the background, dequeueing blocks and compiling them.  The main
	thread (the ISS) uses the JIT code if it's available for a given
	basic block.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.13 (v2_4_13) on Linux (lc0103) on 4/24/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.13 (v2_4_13) on Linux (lc0108) on 4/24/2012 ==

2012-04-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merged from trunk, then enhanced dlx-mt2.uadl and dlx-mt3.uadl
	to support exceptions, as an exception was added to mod13.adl

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.31 (v1_8_31) on Linux (lc0108) on 4/23/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.31 (v1_8_31) on Linux (lc0103) on 4/23/2012 ==

2012-04-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial work to create a two-stage compile process.  For the
	JIT, we now byte-compile basic blocks first (if they exceed the dc
	hot-count), then JIT compile them if they exceed the jit
	hot-count.  This way, the JIT compilation is disconnected from the
	rest of the core, just processing data form the decode cache.
	Eventually, we'll put the JIT compilation into a background
	thread, but first we have to complete this transition.

	At this point, things are probably a bit slower than they were,
	since we're byte compiling, then JIT compiling, but we should
	regain the speed when we switch to background compilation.

2012-04-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The test writers were not properly updating their current-core
	values when an asychronous (external) exception was being
	generated, leading to missing regsiter updates, etc.  I updated
	the two writers and added cli/c49.cli to test this feature with
	mod13.adl

2012-04-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Further updates for the decode cache.  All regressions now pass.
	The jit_model_test regression function has been changed so that it
	now automatically adds in JIT and decode-cache tests, with
	hot-block execution on and off.

	Miscellaneous changes were made, including adding in icache and
	breakpoint support for the decode-cache, plus some minor things to
	get all execution correct.  Each basic block now contains two
	pointers and no longer has a valid flag.  The first pointer is the
	start of the actual basic block and the second pointer is the
	branch-target, which might point to the branch-stub, in the case
	of a breakpoint at the start of a basic block, for instance.

2012-04-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial check-in of the new decode-cache code (formerly known as
	the trace-cache).  Same basic concept as the trace-cache, except I
	thought that name was a misnomer.  In this variant, we byte-code
	basic blocks, rather than whole pages, as before.  Basically, it's
	the same concept as the new JIT, except using the byte-coding
	scheme implemented before, with the same software-pipelined
	dispatch loop, etc.

	This version passes in2.dat, in3.dat, and in4.dat.  Further
	testing needs to be done.  No regressions added yet, but we pass
	the existing regression suite, with mod1 now generating with the
	decode-cache enabled.

2012-04-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Relazed checking of "blk" for shorthand instructions.
	Previously, if one were specified for a shorthand, then it had to
	match that of the target instructions, but this was apparently too
	restrictive for StarCore, so I removed this check.  The normal
	inheritence rules still remain.

2012-04-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Very initial work on adding decode-cache support.  I've made the
	basic-block hash more generic and added in an initial
	implementation for storing decode-cache instruction items.

2012-04-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in a small hash for the JIT which stores basic blocks by
	effective-address.  This is meant as a small, fast lookup, to be
	tried initially.  If it's not found there, we do an address
	translation and look in the main hash.  I used a simple XOR'ing
	scheme on the ea- we should probably investigate how good it is at
	a later time.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.30 (v1_8_30) on Linux (lc0108) on 4/10/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.30 (v1_8_30) on Linux (lc0097) on 4/10/2012 ==

2012-04-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tests/scripts/driver8.C (]): Subtle bug found here:  We weren't
	properly terminating the program array with an Instr object set to
	invalid, so sometimes we could get a segfault.  Fixed this.

2012-04-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* misc/dbgen.C (adl): Added in attribute and doc-string support
	for relocations.

	* We didn't have things hooked up properly for specifying
	attributes to relocations.  This was just an oversite and I fixed
	it.

	** The key/value pairs feature of the Info, Warning, and Error
	commands have been extended to support string values as well as
	64-bit numeric values.  For example:
	<pre>
	info(1,"Example info message:  ",AdlDataStart,("id",1),("type","foo"));
	</pre>
	Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2012-04-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I enhanced the JIT bitcode filtering even more by now filtering
	out everything except the instruction handlers and logging
	functions (everything of the form adl_instr_*), plus global string
	constants.  This meant that I had to go through and add in used
	attributes for just about all functions created, so that they
	wouldn't be optimized out of the main executable.  However, the
	big advantage is that the resulting bit code files are a lot
	smaller.

	* In order to get the enhanced filtering to work, I had to clone
	and modify the llvm-extract program to remove some error
	conditions.  I don't want it to fail if a global or function isn't
	found, but just silently continue.  Added iss/adl-llvm-extract.C
	to do this.

	* Various build fixes.  For example, the bit code files are put
	into the .libs directory when --enable-shared is used, so that
	it's in the same location as the real executable.

	* e200 regressions for the JIT now pass for the z0, z0h, z420,
	z446, and z650.

2012-04-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated some macro files to work with the dynamic TR.  I had to
	switch from using w.which to tr.which for flex and bzip, though I
	check for the existence of either.

2012-04-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated some macro files to work with the dynamic TR.  I had to
	switch from using w.which to tr.which for flex and bzip, though I
	check for the existence of either.

2012-04-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/JitSupport.C (adl):  I now use getLazyBitcodeModule, rather
	than parseBitcodeFile, in order to reduce memory- this should just
	link things in as needed.

	* I experimented with the FastISel mechanism, but it turns out
	that it doesn't support tailcalls, so I can't really use it, since
	I rely upon tailcalls for direct threading.  I could only use it
	for basic blocks without fixed branches, which seems rather
	limiting.

2012-03-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial implementation of cold-block interpreting for the JIT.
	The basic idea is that cold blocks, ones which have been hit less
	than a certain amount, are simply interpreted.  This way, bits of
	code that aren't run much don't summer the overhead of compiling
	with LLVM.  Those that are run a lot do get compiled.  The get_bb
	function in the hash, for an invalid block (no compiled code)
	checks the hot-count against a translation parameter (set via
	--jit-hot-count on the command-line) and calls exec_cold_block()
	if it's not hot enough.  Otherwise, we do the usual compile and
	then execute the compiled code.  Once compiled, it never goes back
	to being interpreted.

	* Modified the regression suite so that each jit test is run with
	just --jit and with --jit-hot-count=0 so that we test with
	cold-block interpreting and with it turned off.

2012-03-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The user can now set the environment variable
	ADL_JIT_CMDLINE_OPTIONS to pass command-line parameters to the
	LLVM engine.  This can aid in debugging, e.g. set -jit-emit-debug
	to have the JIT create debug frames for better gdb debugging.

	* More filtering in adl2iss to remove unneeded functions.

	* I shrank down the maximum basic-block size to 50 instructions,
	as z650 testing showed that very large basic blocks could
	substantially decrease performance.  For example, in a testcase
	with lots of exceptions, but straight-line code, a large bb is
	created, then an exception is taken.  Now, a new bb must be
	created at the second instruction's location, then an exception is
	taken, etc.  This can still be overridden on the command-line by
	the use of --jit-max-bb-size.

	* At this point, all z650 functional tests pass with the JIT.

2012-03-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I'm now using llvm-extract to filter out a lot of functions from
	the generated bitcode file.  I don't know why, but some use of
	exceptions cause weird segfaults, fixed by having the LLVM code
	call the existing gcc code.

	* I backed out the bb-splitting for page crosses.  A problem could
	arise for misaligned instruction accesses- if we jumped to the end
	of a page and tried to execute a 16-bit instruction, we would just
	always split the block and never actually compile anything.  So, I
	added in258.dat to test this problem and modified in254.dat so
	that the results don't require a split across the page.

	Not sure what the best long-term solution is- I'd like to have
	that splitting in place, but getting it to work with sub-word
	instructions is tricky.  I suspect that we need to modify the
	fetch logic so that we'll fetch using the greatest common divisor
	of all instructions, e.g. 16bits for VLE.  That way, we won't have
	a misaligned instruction because for VLE, we'll just fetch
	multiple 16b values.  This would fix the bug we have of erroneous
	itlbs if there's a 16b VLE instruction at the end of a page- right
	now, we'll take the itlb.

2012-03-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* MP JIT simulations with a standalone model now work.  Added
	iss/in257.dat to test.  MP JIT models use the temporal-decoupling
	API to switch between cores, so that must be enabled for things to
	work.  I also enhanced the scripting interface to suppprt getting
	and setting temporal-decoupling parameters.

2012-03-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Minor bug with JIT breakpoints: The breakpoint check at the end
	of translate() was wrong b/c addr was being set to new_addr each
	time.  Thus, we weren't ever matching on a beginning-of-block
	breakpoint, which should cause us to keep our branch-target set to
	the branch stub in order to return back to the loop.  Fixed this
	and added in256.dat to test.

2012-03-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The CIA register, when running in the JIT, is now only
	conditionally updated, based upon whether an instruction requires
	it or could throw an exception (accesses memory, caches, or
	explicitly raises an exception).  This removes a bit of extra
	overhead.

	* Fixed a subtle optimization bug with the JIT.  LLVM can normally
	coalesce multiple load/update/stores to the same structure member,
	e.g. collapse a sequence of NIA+4 updates into a single
	NIA+(4*n).  However, it wasn't doing that when intbv's were being
	used.  Worse, if any intbv was used, no coalescing was happening.
	The problem was that the store of an intbv was preventing the
	Global Value Numbering (GVN) pass from collapsing loads- the
	aliasing logic thought the store might clobber the load.  With the
	use of a simple integer, though, this wasn't happening.

	The problem was that no type-based aliasing-analysis metadata was
	present for the intbv store, preventing tbaa from understanding
	that just a simple integer was being written.  No tbaa metadata
	was present because a default assignment operator was being used
	by intbv, and LLVM's implemention of a default structure
	assignment operator is to use memcpy.  Though a later pass
	converts this to a simple store, the effect was that no metadata
	was propagated.  I fixed this by adding operator= to each of the
	intbv_base implementations so that LLVM knew that a 32-bit or
	64-bit intbv assignment was really just a simple integer copy.  A
	larger intbv becomes a series of integer copies in a fixed loop,
	so that it can be unrolled.  Now, the collapsing can occur, so the
	resulting code is much more efficient.

2012-03-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* JIT models now support translation-time constant parms.  You
	declare them in a .ttc file in a core config block using the
	trans_const_parms key (specify a string list).  These parms are
	then converted to globals in the resulting model and set to
	constant in the JIT engine.  On a change, the JIT engine's
	initializer for the relevant global is changed, but the idea is
	that the code is never invalidated.  Thus, it's only valid for
	where the parameter can be considered a constant for a particular
	basic block.  This is most useful for 32-bit/64-bit mode
	selection, for example, where you're only really going to ever
	execute code in one form or another, but not switch between the
	two for the same code.  Added iss/in255.dat to test.

2012-03-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a requirement that any field in a prefix instruction had
	to be labeled as a prefix field, but that's not necessary if it's
	just used for opcode encoding.  So, if a field in a prefix has a
	value (it's an opcode), then we relax this requirement.  Modified
	fe/inst129.adl to test this.

	* StarCore doesn't apparently have the time to change their own
	database models, so I re-introduced the syntax that was used for
	aliases, but only if there's a single target and the
	--orig-alias-fmt option is used for make-db.

	* Shorthands with multiple targets may now reference instructions
	in different function blocks.  I also improved some error messages
	relating to prefix instructions requiring prefix instruction
	fields.

2012-03-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated how breakpoints work for the JIT.  We inserting
	breakpoint returns for the current instruction *after* the
	instruction was translated, but this was wrong: We need to return
	just *before* the instruction executes, to match the interpreter's
	behavior, which triggers a breakpoint when the NIA matches at the
	bottom of the loop.  If the starting address of the bb matches a
	breakpoint, then we cause its branch-target to be the branch-stub,
	so that a direct-chained branch will fall back to the kernel.  I
	also added a call to commit_checks() for a JitNopCode, so that
	branches will still generate a breakpoint check.

	* Basic blocks are now broken up on page boundaries, since
	otherwise we could end up with discontiguous RA sequences.  This
	becomes a problem with the block-page hash, which tries to contain
	all pages (arbitrary 1k pages) in order to enable look up of
	blocks containing particular addresses.  Added iss/in254.dat to
	test this behavior.

	* Added a new scripting language function, simstat, to be able to
	retrieve various simulation statistics.  Right now it can return
	info about the JIT, such as the number of escapes and the number
	of basic blocks in the hash.

	* Dynamic logging control has been added to the JIT.  This is
	accomplished by using LLVM to fold out the logging code.  The
	trick is that LLVM won't fold out a reference to a member
	variable- it never thinks they're constant.  So, I use the
	preprocessor to change _trace_mode to a global, which is then
	declared at the top, but only if LLVM is doing the compile (via a
	define in the instruction handler file which includes the ISS).
	At that point, all tracing control is then controlled by this
	global.  The JitSupport class looks up the global and declares it
	constant.  There's also a method for modifying its value.  The
	inliner pass takes care of folding out any code dependent upon
	that global, so that tracing is either included or not.

	I had to wrap calls to the register tracing functions with an
	extra conditional layer in order to have them inline when tracing
	is off because RNumber creation was too complex to fully inline,
	thus causing the register write functions to not be inlined at
	all.  Thus, when the code is wrapped with an outer check, it's
	folded out and the entire function can be inlined.

	Added iss/in253.dat to test this.

2012-03-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The use of nested fields has been enhanced to increase its
	flexibility.  Nested fields may now reference a parent's decoding
	table and may be combined with enumerated values in order to allow
	for useful shorthand syntax notations.  The result is also more
	efficent, as the prior method for describing the use case of
	mapping a small field to a series of nested fields via a table
	mapping involved an extra step of creating an intermediate
	bit-vector value, which was sometimes very large.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* To implement the above enhancements, two main changes were made:
	First, a nested field can reference a parent's table by specifyin
	the parent field's name and an index into the first dimension of
	the value table.  Secondly, if the field has a syntax description
	which references the value table, then the field is automatically
	converted to an enumerated list of options.  Refer to
	iss/mod77.adl for an example.

	* Fixed an oversight (bug) in dealing with nested fields: If the
	nested field had a table, that table wasn't referenced upon using
	the field.  This meant that a simple use of nested fields
	(enumerated values in the outer field, nested fields with 1-D
	tables) didn't work.  Added iss/mod76.adl to test this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.29 (v1_8_29) on Linux (lc0102) on 3/6/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.29 (v1_8_29) on Linux (lc0100) on 3/6/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.29 (v1_8_29) on Linux (lc0102) on 3/6/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.29 (v1_8_29) on Linux (lc0100) on 3/6/2012 ==

2012-03-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* helpers/BitTwiddles.h (swap_uint16): fix for a gcc 4.4.4
	vs. 4.1.1 incompatibility: 4.1.1 didn't accept "us" as a suffix
	type specifier for uint16_t.

	** New core/architecture-level keys have been added:
	<b>instr_endianness</b> and <b>data_endianness</b>.  Both take a
	value of either <b>big</b> or <b>little</b> and default to
	<b>big</b>.  This specifies the byte ordering of instructions and
	data for the core.  Note that these are static values and cannot
	be changed at run-time.  For dynamic changes, continue to use
	memory hooks.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* In order to test byte ordering, I added fe/inst141.adl and
	modified iss/mod75.adl to be little-endian.

2012-03-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had some bugs related to large instructions and
	exec_from_buffer: Not all of the extra fetches were guarded in
	exec due to a mistake.  I fixed this and added mod75 (an
	executable) to test.  We use the ijam command to test
	exec_from_buffer.

	* Changed the documentation slightly so that instruction fields
	which are listed as permutable fields in the syntax string are
	surrounded by braces if their enumeration set is too large.  This
	fixes some ugly documentation that was seen with the SPT model
	(mod75.adl).

2012-03-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* All regressions now pass!!

	* To get cache stuff to work, I exclude it from the LLVM module.
	For some reason, I was getting segfaults when this code was
	included into the LLVM module.  I also fixed problems related to
	multi-job compilation.  Also, the icache touching now works- same
	basic concept as before: If we cross a cache line, an explicit
	cache-touch call is added to the resulting basic block.  This can
	be toggled via --icache-touch/--no-icache-touch.

	* I also had to revert back to an earlier concept from the
	trace-cache of having separate instruction handlers for memory
	operations, in order to get memory ops to use the internal sw
	cache (dmi_internal).  If we always use the internal DMI, then we
	don't get proper logging when using the interpreter.  So, any
	memory op has two handlers- one used by the JIT and one by the
	interpreter.

	* Fixed a problem with clearing the JIT hash: We needed to delete a
	function via eraseFromParent() or else we got weird heap
	corruption errors.

2012-03-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The <b>unarchitected</b> and <b>indeterminate</b> parameters
	are now supported on TLB fields, just as they are for exceptions
	and registers.  If a TLB field is marked as <b>unarchitected</b>,
	then the UVP writer will not display it for initial and final
	results, nor for intermediate results.  If marked as
	<b>indeterminate</b>, it will not be displayed for intermediate
	results, but will be for initial and final results.  If the model
	is built with <b>--no-log-unarch</b>, then TLB fields marked as
	<b>unarchitected</b> will not be displayed at all.  However, their
	values can still be initialized.

2012-02-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I had to switch back to the concept of having separate handlers
	for memory operations, so that the JIT handlers will use the DMI
	cache but the interpreter won't.  This is because the DMI handlers
	do not issue M cards, since they never actually touch memory-
	memory ops are done as a single item.  I don't know if we can get
	that to work with the DMI, since it's designed to be fast.  Thus,
	JIT logging might not ever produce M cards- just register and D
	cards.

	* Added in a fairly complex test, iss/in247.dat, which tests
	repeated execution of the same code from different states (super
	and user) with switching, to make sure that the JIT can handle
	that.

2012-02-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in support for fetch exceptions. If a fetch exception
	occurs during page lookup, we catch it, update the CIA and
	instruction-count, then re-throw so that the outer catch block
	will catch the exception and call the appropriate handler.  During
	translation, when handling a direct branch or other kind of jump,
	if an exception occurs when get_bb_or_stub is called, the
	exception is caught and a special value is returned for the
	basic-block pointer, indicating that the target is bad.  The code
	generator then simply adds in a return, rather than a call to the
	branch target.  This way, we'll return to the simulator and handle
	the fetch problem as described above.

	Thus, if user code tries to call supervisor code, we'll add in
	this return and handle the fetch appropriately.  If supervisor
	code then tries to call this same supervisor code, it can directly
	chain to it, since we didn't install any basic block for the
	original fetch for the user-mode branch target.  However, if this
	code subsequently becomes OK to execute by user-mode code, we'll
	still allow it, but we just won't chain to it.  This might incur a
	small performance penalty when simulating code that does dynamic
	linking using exceptions, but hopefully that will be rare.

2012-02-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added a new script, scripts/sort-changelog, for sorting a
	ChangeLog.  This way, we can keep a ChangeLog file in
	chronological order, even though a merge operation may cause
	entries to originally be placed in non-chronological order.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.28 (v1_8_28) on Linux (lc0102) on 2/24/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.28 (v1_8_28) on Linux (lc0100) on 2/24/2012 ==

2012-02-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We were creating empty shorthand opcode-arrays for non-shorthand
	instructions, thus increasing the size of the assembler and making
	it not build on Windows (due to a weird MSVC restriction about not
	liking 0-sized arrays).

	* We had a bug with writing code for extracting large instruction
	fields from large instructions.  It happened to work for
	instructions <= 64 bits, but broke down for something like a
	128-bit instruction.  I changed the code so that it at least
	appears to work, though it's basically a separate system for
	32-bit or less and 64-bit or less, so I'm not convinced it's as
	optimal as it could be.  However, it seems to work for now, so
	I'll re-evaluate it later.  Added mod75.adl
	(assembler/disassembler) to test.

2012-02-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL now supports assembler shorthands with multiple targets,
	thus allowing the user to create simple assembler macros.  The
	shorthand's arguments may be split across these multiple
	instructions.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.  Due to this
	change, the schema for the ADL database has changed somewhat for
	aliased instructions.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-db.html">the
	ADL database reference</a> for more information

2012-02-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in support for temporal-decoupling checks (which also
	includes support for max-instruction-count checks).  I found that
	LLVM wasn't combining multiple td-counter increments, so the
	td-counter increment is performed at the end of a basic block- it
	takes an instruction count and multiplies that by the increment
	value, then adds that to the counter.  It then checks the counter
	against the threshold and returns a JitRetCode if it's exceeded.
	This check is inserted right before the exit point of any BB- just
	before a branch or return, basically.

	* Exceptions work.  I had to make sure that the exception was
	thrown by GCC compiled code- a throw by Clang wasn't caught by
	gcc.  Note- fetch exceptions don't fully work yet.

	* Breakpoints and watchpoints work.  Watchpoints were basically
	already implemented.  For breakpoints, the idea is that we have
	another hash which hashes all addresses contained within each BB
	by page number, where a page number is arbitrarily set at 1024
	(0x1000).  So, if a BB starts at 0xff0 and goes to 0x1010, then
	two entries will be added, one for 0x0 and one for 0x1000.  When a
	breakpoint is added or removed, any BBs containing that address
	have to be invalidated.  So, we look up in this secondary map all
	matching BBs, then iterate over the matches, looking for any
	actual matches.  The idea is that this cuts down on what we have
	to search, without forcing us to use a slower data structure or
	having to hash lots of addresses.

	The actual breakpoint implementation is simple- if we match
	against a breakpoint address, we add a return of JitBreakPtCode
	immediately after the instruction.  We then do the usual
	breakpoint handling in the simulation kernel.

	* Added in support for limiting maximum BB size.  This is set on
	the command-line via --jit-max-bb-size, or is accessible via a
	TranslationParm item.  When the counter is exceeded in translate,
	we add in a jump to the nia+4.  This then uses the usual branch
	direct-threading mechanism to chain these BBs together.

2012-02-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new key has been added for all define/defmod blocks which
	support attributes:  <b>inherit_attrs = &lt;bool&gt;</b>.  If true
	(the default), then an object inherits attributes from its
	parents, where applicable.  If false, no inheritence takes place.
	For example, an assembler shorthand instruction inherits
	attributes, by default, from its target instruction.  Setting this
	flag to default disables this inheritence.

	* Fixed issues with removing and overriding attributes for items,
	such as shorthands, which inherited attributes.  For instructions,
	the problem was that we were finalizing attributes before a
	shorthand inherited them, causing problems.  We also were takin
	the wrong value- we took the value from the item being added in,
	which meant that inherited values overrode default values, the
	opposite of what we wanted.  Added fe/attr8.adl and fe/attr9.adl
	to test this behavior.

2012-02-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Implemented direct-threading.  The original idea was to use lazy
	compilation and simply re-compile the machine code, but this
	didn't work: First, the stub added an extra branch, which is extra
	overhead, secondly, you can't easily erase and recompile the
	machine code.  The new approach uses global variables to store
	branch targets.  Each bb has a GlobalVariable function pointer (an
	unnamed global variable in the module).  For branch stubs, this GV
	points to a branch stub which simply returns after being called
	via a tail call.  For fully generated blocks, this GV points to
	the actual machine code.  Branches branch to these function
	pointers, thus we can modify the variable contents and not worry
	about who is pointing to them, since they'll just read the current
	contents of the global.

	This approach also makes invalidating blocks easy, since to
	invalidate we can delete all machine code and simply reset the
	global variable back to the branch stub.  However, we can't remove
	the global variable, ever, since there might be bb's out there
	pointing to the invalidated bb.

	Basic mod1 jit regressions have now been added back in.

2012-02-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The assembler and disassembler generated by ADL have been ported
	to Windows (Microsoft Visual Studio 2008).  The ADL solution file
	(adl.sln) contains projects (as-adl and objdump-adl) for compiling
	an assembler and disassembler.  Generation must be done on Linux,
	but the generated C++ files can then be copied over and compiled
	on Windows.  Refer to README for more information on using ADL
	with Windows.

	* Minor changes to the assembler generator and assembler support:
	We use xregex, rather than the system regex, for portability with
	Windows, and when generating the assembler, we generate any empty
	arrays as "{0}" to avoid a compiler error with MSVC; it doesn't
	support 0-sized array decls.

2012-02-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I added in a new configure option: --[enable|disable]-gdb-tests
	This allows the user to enable or disable the gdb tests, which can
	sometimes be a bit flaky.  I'm going to turn off testing them in
	the nightly run, but keep them on by default, so they'll be tested
	during an installation and normal check-ins.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.27 (v1_8_27) on Linux (lc0102) on 2/2/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.27 (v1_8_27) on Linux (lc0093) on 2/2/2012 ==

2012-02-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* fe/Data.C (adl): We had a bug in Attrs::add_attrs:  When
	applying attribute overrides from a defmod (in the case of this
	bug, from sc3900, it was complicated by the use of an outer defmod
	override to a nested instruction), we were exiting out of the
	entire function when we came across a type-difference in the
	parameters, rather than continuing on.  This meant that we would
	just drop some attributes in a rather mysterious way.

	The fix was to not exit out.  I also changed things to be
	consistent, since actual type differences resulted in an error, I
	now allow an override if there is no type.  In other words, an
	override of attribute Foo with Foo(1) is allowed.  Added
	fe/attr7.adl to test.

2012-02-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The basic JIT has been implemented, but without support for
	direct threading- branches just always return, requiring another
	lookup.  The iss tests all pass, though are are no JIT tests-
	basically, all of the JIT models compile, but I've just tested a
	few basic things with the mod1 JIT.  Next step: Add in support for
	direct threading and get mod1 JIT tests to pass.

2012-01-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new form for memory accesses have been added, so that an
	instruction can specify a critical address for logging purposes,
	even though the actual address accessed might be modified, such as
	for alignment purposes.  The basic form extended the <i>typed</i>
	memory access form:
	<pre>
	Mem(addr,size,access_type,true,critical_address);
	</pre>
	For example, a read of an Altivec register might look like:
	<pre>
	var x = Mem(ea,16,CacheRead,true,orig_ea);
	</pre>
	where <b>ea</b> is the actual starting address accessed and
	<b>orig_ea</b> is the unaligned address.  This address will be
	logged via a call to
	<code>LogBase::log_core_mem_read_typed</code>.  Refer to  <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2012-01-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new type of core-level resource has been added to ADL:
	<b>ext_resource</b>.  This defines an opaque, externally-defined
	resource which is globally available to all action code.  The idea
	is that it allows a model to use an external C++ class to
	implement various behavior, such as complex math routines.  The
	class may have its own state.  The external resource may be
	implemented as just a pointer to an object, in which case an
	external application must set the pointer via a method call, or as
	a member variable defined within the main simulator class.  Refer
	to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2012-01-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Basic run-time support for the JIT is in- we now load the
	bitcode file and get references to all instruction handlers.
	Rather than using -fkeep-inline to make sure that the instruction
	handlers stick around, I'm using the "used" attribute. This should
	shrink the file size (we don't want the crud from the standard
	headers), plus there was a strange bug when that flag was used
	with -O3 and gcc 4.4.4.

2012-01-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The JIT instruction handler file is now created and can be
	compiled by clang.  adl2iss was modified to invoke clang when the
	--jit flag is specified.

2012-01-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Start of the 3.x branch for LLVM JIT creation.  I just ripped
	out the trace-cache and old JIT at this point.  It compiles, but
	that's all that I've done.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.11 (v2_4_11) on Linux (lc0102) on 1/19/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.11 (v2_4_11) on Linux (lc0093) on 1/19/2012 ==

2012-01-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/Semaphore.h (uadl): Both semaphores and flags didn't have
	their counters reset in the constructor, leading to undefined
	behavior some of the time (only showed up on optimized builds on
	some queue machines).

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.10 (v2_4_10) on Linux (lc0102) on 1/19/2012 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.10 (v2_4_10) on Linux (lc0093) on 1/19/2012 ==

2012-01-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/GenCode.C (uadl): The branch_target_update hook's
	speculative condition now matches the safe_exec condition (I
	consolidated it into a single method).  This way, if you need to
	set the speculative flag for a safe-mode model, the branch will
	still execute properly b/c the id is checked, as well as the
	speculative flag.

	* I think that there was a problem with clearing the deadlock
	counter- flushes and such weren't counted, meaning that we'd
	eventually trigger a deadlock situation when that wasn't really
	the case. I've moved the reset into the free_instr function so
	that it'll be called on discards and commits, since anything like
	that signals pipeline activity.

	* uadl/UadlTypes.h (uadl): We weren't resetting the _serialized
	flag in UadlMemAccess, so some accesses could be incorrectly
	classified as serialized due to re-use.

2012-01-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in commit IDs (cid=N) to the trace output for uADL to make
	debugging easier.  As with uADL1, this works well for safe-mode,
	but not so well for normal-mode, since we don't really know what
	will commit or not.

	* helpers/intbv_base.h (adl): Minor fixes to get intbv to compile
	with Clang.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.25 (v1_8_25) on Linux (lc0102) on 12/13/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.25 (v1_8_25) on Linux (lc0205-tx30) on 12/13/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.9 (v2_4_9) on Linux (lc0102) on 12/12/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.9 (v2_4_9) on Linux (lc0205-tx30) on 12/12/2011 ==

2011-12-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with safe-mode uADL designs: If the user called
	set_speculative() in an init-state, then that would turn on the
	speculative flag, thus causing safe_exec to skip execution of the
	instruction.  This showed up as a bug with the z420's wait
	instruction.  This can be solved via a modeling change, by just
	creating a different instruction class which doesn't flush and
	doesn't call set_speculative, but I decided to just fix it by
	adding another term in safe_exec which allows the instruction to
	execute if it's id matches the spec-tag.  I modified dlx2-fwd.uadl
	to move halt into the isync class in order to test this.

2011-12-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The <b>tracediff</b> program is now stricter when comparing
	UVPs:  Differences between E:F, E:I, and E:A cards will now be
	detected and reported as errors.

	** A minor change has been made to the logging interface:  A new
	logging function, <code>LogBase::log_instr_from_buffer</code> is
	invoked when an instruction is executed via
	<code>IssNode::exec_from_buffer</code>.  Previously,
	<code>LogBase::log_instr_prefetch</code> was called, making it
	impossible to distinguish between normal instruction execution and
	inserted instructions.

	* The above fixes a problem with UVP generation: E:F cards were
	not being properly created but were instead displayed as ijam
	cards when an ISI exception was taken.

	* The --used-only flag for make-db was skipping instruction fields
	which were interface fields.  In other words, it recorded the
	implementation versions of the fields, but skipped the original
	interface versions, which is what most people care about anyway.
	Added in an extra step which records the interface field, if a
	field has an interface field.  Added doc13.adl w/make-db to check.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.8 (v2_4_8) on Linux (lc0102) on 12/2/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.8 (v2_4_8) on Linux (lc0205-tx30) on 12/2/2011 ==

2011-12-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Version bump and merge with trunk.  Plus, I realized that the
	original wake1.dat didn't fail with the previous version of the
	SystemC interface, so I added a hold-off parm to make sure that
	the thread's loop would exit, thus demonstrating the problem.

	* Fixed a problem with the uADL SystemC interface: For the
	threaded interface, the thread's loop would exit when the core was
	no longer active.  This was incorrect, as it's valid for a core to
	go to sleep, then be re-awakened.  Changed this to mirror the uADL
	1.x interface, where the loop is infinite, but the cycle()
	function is guarded by active().  Added wake1.dat (and enhanced
	the SystemC testbench) to test this functionality.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.24 (v1_8_24) on Linux (lc0205-tx30) on 12/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.24 (v1_8_24) on Linux (lc0102) on 12/1/2011 ==

2011-11-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Instruction attributes are now cleared once an instruction
	executes so that external exceptions don't get stale attribute
	data.  mod66 with in244.dat and in244.cli test this.

	* I pushed back the required Boost version to 1.36 due to some
	weirdness with using Boost 1.47 on Windows, discovered by ASTC.
	For now, 1.36 works, though 1.47 is required in order to compile
	with gcc 4.4.4, as 1.36 doesn't seem to be compatible with that
	version of the compiler.

	* Added --log-writeregs option to adl2iss (was missing from the
	wrapper script).

2011-11-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Minor change to uadl's addr_t/byte_t definitions (switched to
	using from a typedef) in order to get cores to compile on Windows
	using a different namespace.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.23 (v1_8_23) on Linux (lc0205-tx30) on 11/18/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.23 (v1_8_23) on Linux (lc0093) on 11/18/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.7 (v2_4_7) on Linux (lc0205-tx30) on 11/17/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.7 (v2_4_7) on Linux (lc0093) on 11/17/2011 ==

2011-11-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Registers or register-files with write-hooks and with fields
	which contain the <b>writable</b> attribute now report an error.
	The reason is that the existence of the write-hook was causing the
	field-write to not be obeyed, because of the read-only mask being
	enforced by the in-hook write function.  To avoid confusion, I
	simply disallow this combination.

	** The <code>IssNode::writeReg()</code> function (accessible via
	the <code>writereg</code> scripting function) now logs these
	external writes, unless the model is built with
	<b>--no-log-writeregs</b>.  The new logging events are
	<code>LogBase::log_reg_ext_write</code> and
	<code>LogBase::log_regfile_ext_write</code>.  When generating a
	UVP, these events show up as <b>E : A t="write</b> cards and when
	generating a DAT file, as <b>ERW</b> commands.  Tracediff has been
	enhanced to compare these commands as well.

2011-11-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Some cleanup with branch_target(): It's now just an
	instruction-object method and no longer part of the core object.
	Also updated the documentation.

	* Modified the DAT format to have a per-thread instruction count
	(tic value).  The tracediff program will now show local counts if
	the --local-count flag is used (defaults to on for UVPs).

	* Re-did branch targets for safe-mode.  Rather than a uarch member
	variable, it's now an instruction-packet variable in order to
	avoid a closely spaced branch from clobbering the target of a
	prior branch.

	* Fixed a problem with the branch predictor on fetch:  Because we
	had an incorrect instruction-size greatest-common-denominator (off
	by one), we weren't sending proper addresses to the predictor, and
	thus we weren't predicting branches correctly if the address was
	other than the very beginning of a fetch word.

	* Added in a new function, last_branch_prediction_correct(), to
	make modeling branches easier.  This checks the prediction value
	and checks the target as well.  I also now allow branch_target to
	be called, so that last_branch_prediction_correct can be modeled
	purely by the user.

	* The default branch hook now checks the predictor status, if one
	exists.

2011-11-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Relocations can now be placed into groups, just as
	instructions, registers, and other resources can be.

	** A new option for <b>make-db</b> has been added:
	<b>--used-only</b>.  This flag specifies that unused instruction
	fields and resources should be omitted from the generated
	database.  Otherwise, all instruction fields and relocations will
	be listed.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.6 (v2_4_6) on Linux (lc0205-tx30) on 11/4/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.6 (v2_4_6) on Linux (lc0093) on 11/4/2011 ==

2011-11-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fix for the Windows build: Stupid Windows compiler/linker!  It
	was producing a linker error b/c I had "class Plugin" in a header
	vs. "struct Plugin" in the implementation.  Gcc producees the same
	mangled variable name but MSVC doesn't, thus causing a linker
	error.  Fixed this, plus had to add a preprocessor define for
	UadlMain.lib to get it to compile.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.5 (v2_4_5) on Linux (lc0205-tx30) on 11/3/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.5 (v2_4_5) on Linux (lc0093) on 11/3/2011 ==

2011-11-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a problem with breakpoints.  We were catching the
	SimInterrupt exception right when we checked for breakpoints, then
	allowing the current cycle to continue.  The problem is that this
	could allow further instructions to complete for a multi-issue
	machine.  Now, we let the exception propagate up and catch it in
	the proceed() and run() functions.  This allowed us to also
	simplify the simulate() function somewhat- there's no need to
	check for a breakpoint in the loop.

	To test this, added two tests for dlx2: branch2.dat and another
	test using in3.dat, checked against in3-halt3.dat.  Note that I
	changed dlx2's write-back stage to not be lock-step.  The problem
	with having this as lock-step is that the second instruction
	issues its action (which commits architectural results) before the
	first instruction's move function, which is where the breakpoint
	is checked.  Since stalls don't happen on writeback, there's no
	difference in functionality.

2011-11-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed some compilation issues so that a DMI interface will work
	with a safe-mode uADL model.  Modified dlx-em to use an external
	DMI for testing.

	* External memories supplied via plugins are now supported with
	uADL as well.  Added scripts/dlx-em and uadl-extern-mem.so to test
	this.  To use, the plugin must derive from UadlPlugin and overload
	UadlPlugin::createUadlMemHandler.  The plugin is then responsible
	for calling setExtMem and setIssMemHandler as needed.

	* Internally, I now no longer generate a handle_mem_latency
	function in uadl if we're using safe-mode w/o iss-mem-mode.
	Instead, it's just stubbed out in the iss so that it'll be inlined
	out by the compiler.

2011-10-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Cleaned up a lot of the uadl tests, removing instructions from
	uadl files which weren't implemented in the corresponding adl
	files.

	* Fixed a bug with uadl model creation: We would generate
	incorrect code if a model only needed a single mask b/c we were
	checking the max-index value in the mask-info pair that was
	returned.  Changed this so that max-count is returned rather than
	max-index.

2011-10-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL plugins now support the ability to provide an external
	memory to a model.  This can be used, for example, to implement a
	simple system model, or a special memory with different behavior
	based upon memory regions, without all of the complexity of a
	full-blown SystemC-based model.

2011-10-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Minor updates for gcc 4.4.4 and merging in from trunk.

2011-10-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The UVP writer will now generate E:A "jam" cards when
	instructions are executed via the
	<code>IssNode::exec_from_buffer()</code> method, which corresponds
	to the scripting interface's <b>ijam</b> command.  This means that
	generated UVPs will be similar to Raptor UVPs with instruction
	jamming and also means that jam cards will be properly ignored
	when a UVP is read back into ADL.

2011-10-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

        * Once again trying to figure out how to reliably locate the
        centralized support Perl module for the various build wrapper
        scripts (adl2iss, uadl2model, etc.).  I finally just decided to
        use an autoconf variable.  It's located first, before the
        @prefix@/share, so tha the latter will take priority.  Thus, the
        installed version will override the source version.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.4 (v2_4_4) on Linux (lc0093) on 10/24/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.4 (v2_4_4) on Linux (lc0104) on 10/24/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.4 (v2_4_4) on Linux (lc0205-tx30) on 10/24/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.4 (v2_4_4) on Linux (lc0104) on 10/24/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.4 (v2_4_4) on Linux (lc0205-tx30) on 10/21/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.4 (v2_4_4) on Linux (lc0104) on 10/21/2011 ==

2011-10-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Breakpoints were kinda broken: We'd trigger on instruction
	issue, which wasn't really correct wrt. how things work with ADL.
	There, they really triggered on the equivalent of instruction
	commit.  So, the new system checks for breakpoints on instruction
	commits, for normal model models.  Safe-mode models are a bit more
	difficult: We have to check breakpoints right after we execute the
	instruction, which is on issue.  Unfortunately, even though the
	instruction has executed at that point, it won't show up in the
	trace until it's been committed, so traces will look incomplete.
	Not sure how to deal with that, since the two models behave
	differently.

2011-10-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a problem with system calls: Since we just pass the command
	to close(), if the program running on the simulator called
	close(0), close(1), close(2), this would close stdin, stdout,
	stderr, which would then close it for the simulator itself.  We
	now trap and ignore calls to close with a descriptor <= 2 in order
	to avoid this.

2011-10-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* A model would segfault if a TLB existed with no array and an
	addr_check hook existed which took the extended set of information
	(id, set, way).  Fixed this by passing in dummy values (-1), if
	such a lookup exists.  Added an addr_check hook to mod15.adl to
	test.

	** The <b>dsyntax</b> key within an instruction definition has
	been enhanced to now support helper functions in its expressions.
	For complex encodings, where the disassembly cannot be
	automatically derived from the assembly <b>syntax</b> string, the
	user may specify an explicit disassembly string via the
	<b>dsyntax</b> key.  The format is the same as for <b>syntax</b>
	but it is only used during disassembly.  Expressions in the field
	list may reference helper functions, but these must be simple
	functions which do not reference any of the model's resources such
	as registers.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.22 (v1_8_22) on Linux (lc0105) on 10/14/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.22 (v1_8_22) on Linux (lc0205-tx30) on 10/14/2011 ==

2011-10-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Upgraded the internal to binutils 2.21.  This gives the project
	a more up-to-date core for the assembler and disassembler than the
	really old 2.16 that we were using.

2011-10-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated the build system to the newest versions of the GNU
	Autotools (autoconf, libtool, automake) and turned on "silent
	build rules" to reduce the amount of output when building.  You
	can turn on the full compile line by setting V=1 when running
	make.

	** ADL now requires Boost 1.47.0 or higher in order to be built
	from source.  Currently, only headers are required and only for
	the ADL infrastructure: ADL models do not require Boost headers
	for compiling or require any boost libraries for linking.

	* I'm currently only using Boost in a very limited way- tuple and
	tokenize.  I experimented with the use of filesystem, but ran into
	some issues dealing with complex extensions, e.g. it didn't like
	.out.dat for some reason.

2011-10-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/DefaultFetchUnit.h (uadl): Merge from trunk.  In doing so,
	I found a bug in the fetch unit- when checking for space in the
	instruction-buffer queue, we ended up using unsigned arithmetic,
	but expecting a signed value, so we never returned false.  This
	wasn't a problem for uadl1, but in uadl2, we use a fixed-sized
	queue and thus end up overflowing the circular queue, causing
	weird problems.  Fixed this by using explicit integer casts in the
	comparison.

2011-10-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with the memory subsystem.  The problem is generally
	encountered when there's a high read or write latency: We would
	allow a read or write to proceed by looking only at the max number
	of requests for a given port, +1 if we didn't already have a
	waiting request.  However, when adding the request, if the main
	requeste queue was full, we'd put it in the waiting-request slot.
	The problem was that the main request queue could be full, which
	would mean that the waiting request could be clobbered.  This came
	about because the main memory had a fixed queue size which could
	be smaller than the sums of the allowed max-requests in each port.

	The fix is to update the main queue size to the sum of the
	max-requests for each port, so we don't have this problem.  Added
	dlx-delay.uadl and load8.dat to test.

2011-10-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The assembler/disassembler now supports ppc64 targets.  The
	default configuration for binutils is now ppc-elf64.  The precise
	target (32-bit or 64-bit) is set via two new assembler
	command-line arguments: -a32 or -a64.  Added a test for
	iss/as-mod1 and iss/asm2.s to test 64-bit assembly.

	* In order to get large models to compile under MSVC, I had to
	modify how code is generated for trace-cache models.  The
	translation functions are now no longer class methods, but are
	instead external functions, in order to get over some weird
	internal limitation in VC2008 which caused the compiler to crash.

2011-09-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in a safety-check in the ELF reader to prevent segfaults
	if using function descriptors and the ELF file doesn't have
	function descriptors.  Basically, I just do a sanity check on the
	input address and make sure it's larger than the
	function-descriptor table starting address.

	** The ADL scripting-interface command <b>simload</b> now accepts
	extra reader-specific flags.  The new format of the command is:
	<pre>
	simload &lt;file&gt; [format] [setpc] [--] [flags...]
	</pre>
	The <b>--</b> option acts as a separator to delineate between
	reader-specific flags and the optional format string or
	<b>setpc</b> option.  It is not needed if the format or
	<b>setpc</b> are set.  The reader-specific flags allow for extra control
	over the reading of a file.  For example, the ELF reader accepts
	<b>no-elf-use-fd</b> to toggle off the use of file descriptors.
	Refer to the <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-cli.html">the
	ADL scripting guide</a> for more information.

2011-09-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/ModelSupport.C: The set of recursive trace-flag modifying
	functions did not return a prior value, meaning that models which
	consisted of hierarchies, such as MT models, couldn't have their
	flags reset properly.  This became a problem when loading files
	via the scripting interface (simload):  A simload command which
	followed a traceon command would clobber the trace flags.

	Fixed this by changing the recursive functions so that they return
	the first leaf's flag values, since trace flags are generally
	common amongst all leaves.  Added cli/c47.cli to test.

2011-09-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with handling implicit mappings of register-file
	elements to sparse register-file elements.  If the user had a read
	or write hook and used ThisReg to reference the target item, then
	the resulting code did not read or write the correct register.
	The problem was that each new RegEntry object created for the
	implicit mapping was a shallow copy, so everything pointed to the
	last piece of action code, and since, during the front-end
	translation of the code we created the RegAccess items with the
	index stored in it, all of the items referenced the last element
	of the register file for the ThisReg reference.

	I decided not to change the front-end, since I didn't want to
	duplicate the code and take up more memory.  Instead, I updated
	RegAccess to store whether something is a ThisReg reference.  I
	also updated InstrWalker so that, if an alternate-index is
	specified, then when translating code, if a ThisReg reference is
	found that has an index, the alternate index is used.  Then, in
	GenRegs, if we have a read or a write to a register-file entry, a
	single hook function is created for that target register-file and
	an extra parameter is added on which is used to specify the index
	for the read or write of the register file.  Added iss/in242.dat
	to test with mod13.adl.

2011-09-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/adl_wrapper_support.pm (dofork): I've consolidated
	common perl-wrapper functions into a single module so that they
	can be re-used across the various wrappers, e.g. adl2iss,
	uadl2model, etc.

	* Added support for distcc/pump to the build routines used by
	adl2iss and uadl2model so that, if distcc is available, it'll use
	it to distribute the builds.  So, for example, the models in
	tests/scripts can now be built using distcc rather than only
	locally.

2011-09-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merged in MT support from the MT branch.  The MT branch has been
	reintegrated and should thus no longer be used.

	* tests/uadl/dlx-mt3.uadl: Added a new model which consists of two
	fused cores (like dlx-mt2), where each of those contains two
	threads (smt).

2011-09-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tests/uadl/dlx-mt2.uadl: Modified the example to alternate
	between threads when scheduling cfx instructions.

2011-09-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tests/uadl/dlx-mt2.uadl: I've added a new multi-threading model
	which demonstrates SMT on an OoO type machine.

2011-09-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* More improvements for multi-threading support. I also added a
	new hook, branch_hook, which, if present, is called after a branch
	executes. This is necessary in safe-mode models to set the
	speculative mode in the model, if branch execution exists in a
	stage other than the very first one.  Added uadl/mt2.dat to test
	branches in an mt model.

2011-09-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Various updates to get dlx-mt1.uadl to work properly.  This is
	an in-order, dual-issue model, with a shared pipeline.  Various
	fixes so that pipeline flushing will only affect instructions of
	the same thread.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.3 (v2_4_3) on Linux (lc0098) on 9/13/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.3 (v2_4_3) on Linux (lc8008-tx30) on 9/13/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.3 (v2_4_3) on Linux (lc0098) on 9/13/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.3 (v2_4_3) on Linux (lc8008-tx30) on 9/13/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.21 (v1_8_21) on Linux (lc8008-tx30) on 9/13/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.21 (v1_8_21) on Linux (lc0098) on 9/13/2011 ==

2011-09-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merge from trunk, which brings in the interleaved memory
	control.  This was merged with the controllable split-size on this
	branch.

2011-09-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/logging_events.pm: We had a subtle but with the
	transactional-logging mechanism and log_annotation: We were always
	sending a pointer to the data vector, even if empty, which is
	incorrect.  We now send a null pointer if the vector is empty.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.20 (v1_8_20) on Linux (lc8008-tx30) on 9/12/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.20 (v1_8_20) on Linux (lc0098) on 9/12/2011 ==

2011-09-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new core/arch parameter has been added: <b>exception_is_branch
	= &lt;bool&gt;</b> If true, then an exception is considered a
	branch, from the point of view of logging and the
	<b>branch_taken</b> hook.  The default is <b>true</b>.

	* Fixed a bug with aligned 16-bit writes and the pre-write hook.
	Added in241.dat to test.

2011-09-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The log_as_reg attribute wasn't being applied to the showRegs
	routine, so those were still being logged as register-file
	entries.  Changed this to be consistent.

	* There was a mistake in adl2doc.in, where the include
	command-line option was created incorrectly for the make-doc
	command-line.  Fixed this and added docs/doc31.adl to test.

	* Defmods of arch blocks now works and I fixed a problem with
	defmods of cores: We weren't adding parent references into the
	environment of the core defmod, so that a problem would occur when
	processing hooks in a core defmod, such as for a register
	read/write hook.  Added fe/reg46.adl to test.

2011-09-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** New core/architecture-level keys have been added for
	controlling the behavior of reads, writes, and fetches:
	<b>interleaved_fetch = &lt;true|false&gt;</b>,
	<b>interleaved_reads = &lt;true|false&gt;</b>, and
	<b>interleaved_writes = &lt;true|false&gt;</b>

	If true, then on a misaligned access, the actual memory access is
	interleaved with the translations, whereas if false, all
	translations occur first, followed by the memory accesses.  In
	other words, for a misaligned read, if <b>interleaved_reads</b> is
	<b>true</b>, then the order is <b>translate</b>, <b>read</b>,
	<b>translate</b>, <b>read</b> whereas if <b>false</b> the order is
	<b>translate</b>, <b>translate</b>, <b>read</b>, <b>read</b>.

	* The above was implemented by adding a boolean template parameter
	to MemoryAccess to control the interleaving.  So, this should be
	compiled out when the template is instantiated, adding no
	overhead.

	** New hooks have been added to the MMU definition:
	<b>pre_read</b> and <b>pre_write</b>.  These are equivalent to
	<b>post_read</b> and <b>post_write</b> except that they are called
	before the read or write occurs, but after all translations have
	taken place.  These hooks may only be used when the respective
	memory interleaving is set to false (not interleaved).  Refer to
	<a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information about these new
	hooks.

2011-09-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Next-instruction-address (program counter) updates in
	exceptions are no longer treated as branch conditions, so the
	branch_taken hook, if it exists, is now no longer called within an
	exception handler.  The log_branch_taken event is also no longer
	called within an exception.

	* We had the garbage collector turned off during parsing, but this
	was causing a major memory leak problem b/c finalization can
	involve lots of parsing, then throwing away of that data,
	e.g. parsing helpers.  The gc is now enabled before the second
	pass.

	* In order to speed things up, I now cache helper-function,
	aguments -> translated code, usage-info.  This way, rather than
	re-parsing it constantly, we just parse it once and we can re-use
	that data, assuming the arguments are the same.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.19 (v1_8_19) on Linux (lc8008-tx30) on 9/7/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.19 (v1_8_19) on Linux (lc0098) on 9/7/2011 ==

2011-09-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The regression driver now complains if no tests are run.  This
	way, a typo in a -s expression will produce an error, rather than
	silently passing.  This can be overridden by adding a non-zero
	value as the second argument to doTest.

	* I've temporarily rolled back the memory subsystem changes which
	meant that all read translations were performed before any read
	access.  This is going to have to be user selectable in order to
	satisfy all modeling requirements.

2011-09-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I created a whole new approach to register and forwarding path
	handling.  Now, registers are identified using an opaque type
	(basically just a pointer to the object), so they're unique across
	all threads.  Forwarding paths use these IDs for identification.
	Rather than the old behavior of having to pass in an operand so
	that the forwarding path could check the tag, I just pass in the
	tag now, simplifying that logic.  I also changed how partial
	allocations are handled.  Now, we scan for matches in the
	fowarding path, then return a pair consisting of the mask of bits
	found and the last tag that was found.  Then, the register has a
	new method called rm_later_partial_alloc, which scans backwards,
	removing bits from the mask for tags which don't match against
	that last tag, until the last tag is encountered.  This passes all
	regressions and simplified things, but I still need to check it
	all against the Zen regressions as a double-check, plus run some
	performance tests to make sure that this is actually faster.

2011-09-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Delayed for later. * Next-instruction-address (program counter) updates in
	exceptions are no longer treated as branch conditions, so the
	branch_taken hook, if it exists, is now no longer called within an
	exception handler.  The log_branch_taken event is also no longer
	called within an exception.

2011-09-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* In order to handle forwarding paths correctly for MT cores,
	non-shared register IDs are now modified by a thread offset to
	form a unique ID.  The offset is simply the thread ID * the max
	number of registers in the core, so that thread 0's registers are
	different from thread 1's.

	This seems like a bit of a hack to me. I'd prefer to eliminate the
	need to track an index and an id and just track a unique id via a
	pointer, so that each private resource is unique and shared
	resources are naturally detected, since they'll have the same
	pointer.  However, there are a couple of problems: Right now, we
	have to be able to access the underlying register object in order
	to get the last-allocation tag and to get the valid mask (used for
	partial allocation of the register).  So, that requires the index.
	If we switched to using poiners as IDs, then maybe we could just
	access the register object directly, but unfortunately RegAlloc is
	a template because of the need for the mask.  So, we could
	possibly move the non-templated portion to a base-class and return
	a pointer to that object, but we need to rethink how
	get_valid_mask works, because we then cannot communicate the mask
	to the forwarding path.

	One solution would be to change how we work with partial
	allocations.  Right now, for each match in the forwarding path, we
	then query the operand for the valid mask, given a tag.  This goes
	to the register, searches for the tag, grabs the mask, then
	removes portions of the mask as it finds other items with
	different tags that were subsequently allocated.

	The alternative is that the fowarding path usess the stored masks
	to form a mask, then returns the mask plus the tag of the last
	match in the fowarding path.  Then, in the operand code, we query
	the register, giving it the tag; it returns a mask of the partial
	allocations made subsequent to that tag; we then mask out that
	returned value.  This should work and would mean that the
	forwarding path doesn't need to communicate with the register for
	the mask.  We might be able to extend this so that the forwarding
	path never has to communicate with the register at all, meaning we
	id would just be an opaque type and we wouldn't have to worry
	about a non-templated base class.

2011-08-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* A very basic mt example now wiggles.  I added the max_fetch_count
	parm to the fetch unit to limit each threads' fetching so that
	instructions will alternate.

	* The back-end now generates an MT model which compiles.

	* The back-end now generates an MT core that almost compiles- I
	still have to handle ISS functions which need to be overloaded.
	This was done using virtuals, but the nested nature of an MT ISS
	makes this difficult, since we'd have to use factories to generate
	the child classes.  Instead, I'm going to have a switch to convert
	to simply not generate those functions; uADL will then generate
	the implementations itself and the linker will stitch them
	together.

2011-08-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/DatWriter.C (logAnnotation): Fixed a bug with writing
	annotation levels- we weren't reseting the stream state to 'dec',
	so the level could be printed in hex w/o a leading prefix
	depending upon prior output.

2011-08-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The back-end now compiles, though I haven't done any testing or
	work on MT models yet.  This just passes all regressions for the
	existing single-thread tests.

2011-08-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The front-end now works for MT designs.  Added front-end test to
	check this and updated the documentation.  The back-end is still
	commented out.

2011-08-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Scripting.C: We had a bug in the scripting interface:  The
	step and cycle commands always searched for the first active node,
	meaning that it didn't really work correctly for a multi-threaded
	design.  Changed this so that both now take a path, using the
	current node as the default.  They then step that node the
	requisite number of times.

	* Fixed a bug with register initialization.  If a register had a
	watch which affected another thread, then during construction a
	segfault could occur because the other thread might not have been
	setup yet, since the register reset was called in the constructor.
	Fixed this by having resetInit called by the top-most constructor.
	Child nodes omit their calls to resetInit.

2011-08-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The instruction key <b>enable_post_fetch</b> has been expanded
	so that, in addition to accepting a boolean value, it may also
	take a predicate function, allowing for dynamic control over
	post-fetch logic on a per-instruction basis.

2011-08-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Delayed for later. * New hooks have been added to the MMU definition:
	<b>pre_read</b> and <b>pre_write</b>.  These are equivalent to
	<b>post_read</b> and <b>post_write</b> except that they are called
	before the read or write occurs, but after all translations have
	taken place.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information about these new
	hooks.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.18 (v1_8_18) on Linux (lc8008-tx30) on 8/24/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.18 (v1_8_18) on Linux (lc0098) on 8/24/2011 ==

2011-08-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* First check-in for the multi-threading support branch.  The
	basics are in for the front-end and the existing regressions pass.
	No MT tests have yet been written.  The idea is that a hierarchy
	of Thread objects exists which store resources.  This hierarcy
	matches the ADL hierarchy of systems and cores.  The leaf nodes
	contain all of the resources, with intermediate nodes containing
	just what's shared, e.g. a shared floating-point pipeline would
	have shared fp stages at the top, with the integer stages unique
	but would also have the fp stages in each thread as well.

	The back-end is temporarily disabled while the front-end work is
	finished up.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.2 (v2_4_2) on Linux (lc0098) on 8/19/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.2 (v2_4_2) on Linux (lc8008-tx30) on 8/19/2011 ==

2011-08-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/GenCode.C (uadl): Using different namespaces for uadl
	models wasn't working properly.  We had no tests and it was
	broken.  Fixed this and modified scripts/driver6 to build dlx with
	a different namespace, in order to test.

	* The use of an external memory w/safe-mode wasn't working because
	MemoryDelegate::setRequestSize() was missing.  Fixed this and
	added dlx-z0-ext-mem to test.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.1 (v2_4_1) on Linux (lc8008-tx30) on 8/18/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.1 (v2_4_1) on Linux (lc0098) on 8/18/2011 ==

2011-08-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with register aliases and watches: A write to the
	target of an alias wasn't triggering a watch, which meant that if
	a defmod was used to convert a register into an alias, then a
	watch on that register might fail to trigger if a write was made
	to the target of that alias.  Fixed this and modified mod13 (with
	in238.dat) to test.

2011-08-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/rdriver.pm (runTest): Enhanced the regression driver so
	to add a timeout to the command that's executed for each test.  If
	the command times out (the default is 5 minutes), then the test is
	recorded as a failure.  The timeout can be adjusted via the
	$timeout variable or --timeout command-line parameter.

	There was some complexity here in making sure that all child
	processes were killed if a timeout occurred.  I had to switch to
	using a Perl pipe open, rather than backticks, so that I could get
	the pid, then I created a kill-all function which uses ps to get
	the process table and then recursively walks it to kill all
	children of the pid which has timed out.

	* Found a bug with fetch exception handling in safe-mode: If a
	fetch exception occurred while the core was in the speculative
	mode, e.g. a branch or exception had already occurred, we were
	still commiting the fetch exception, causing incorrect execution.
	Fixed this by guarding commit_fetch_exception with a check of the
	speculative flag.

2011-08-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Folded in more updates to rdriver.pm.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.0 (v2_4_0) on Linux (lc0098) on 8/15/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.0 (v2_4_0) on Linux (lc8008-tx30) on 8/15/2011 ==

2011-08-15  Brian Kahne  <bkahne@lc0100>

	* Modified the destructor for the sparse memory so that entries
	are set to 0 during destruction.  If the memory is instantiated as
	a global, then this prevents a double-deletion issue when shared
	objects are used.

	* scripts/rdriver.pm (lsf_dispatch): Fixed a mistake wrt. LSF: We
	weren't printing the SUCCEEDED/FAILED banner for LSF child jobs,
	so the master didn't know if a fail occurred.

2011-08-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/UadlTypes.h (uadl): The request-head pointer in InstrBase
	wasn't being reset, causing weird fails for safe-mode models.

	* Fixed a bug with handling fetch exceptions: In a very
	hard-to-reproduce situation, the _fetchExceptionInProgress flag
	wasn't getting reset, so now I reset it in the flush routine, just
	to be sure.

2011-08-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Folded in updates to rdriver.pm.

	* Modified the destructor for the sparse memory so that entries
	are set to 0 during destruction.  If the memory is instantiated as
	a global, then this prevents a double-deletion issue when shared
	objects are used.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.0 (v2_4_0) on Linux (lc8008-tx30) on 8/12/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.4.0 (v2_4_0) on Linux (lc0098) on 8/12/2011 ==

2011-08-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/GenCode.C: For safe-mode models, we were still committing
	the exception in the state action where exec() was called.
	Functionally, things were OK b/c we turned on speculation when the
	exception occurred.  The only difference was that the fetch logic
	might be incorrect, since the MMU would still be in the user-mode
	state, rather than the supervisor state due to the exception
	having occurred.  However, this change in fetch behavior could
	still affect timing, so I changed it so that commit_exceptions is
	called immediately when the exception occurs.

	* Fixed a problem with sparse register files and fowarding paths:
	When writing to the forwarding path, we were writing information
	about the sparse register file, not the underlying item, so a
	match would not occur if a subsequent instruction queried the
	path, using information about the real register.

	Fixed this by modifying the sparse register file's getIndex
	function and creating a getId function, to disambiguate the alias.
	Added fwd11.dat with dlx2-fwd to test.

2011-08-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/rdriver.pm (lsf_dispatch): Minor improvements to
	rdriver.pm to improve the --lst option.

2011-08-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new option has been added to the ADL database query program
	(adl-db): --exclude=&lt;filter-str&gt; This option allows the user
	to specify an exclude filter; any matching item will be excluded
	from the final list of reported items.

2011-08-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenRegs.C (adl): Fixed a bug with slice aliases whose
	targets had reserved masks.  The slice-write-internal function of
	the target did not obey the reserved mask, so the alias had the
	effect of ignoring the reserved mask.  Fixed this and added
	iss/in237.dat to test.

	* uadl/uadlMemory.C (uadl): We had a bug with removing memory
	requests.  Each port can store a waiting request, but there's just
	a single request queue.  On a remove operation, we were only
	checking for a waiting request from the port associated with the
	removed request.  This could mean that waiting instruction fetch
	was never placed into the queue because the request removed was a
	data request.  Fixed this by iterating over all ports to look for
	waiting requests.

2011-08-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/ADLPerlDB/ADLPerlDB.pm (process_query): Fixed various
	query issues.  These mainly involved bad regular expression
	matching in the transforms designed to create the actual Perl code
	that's executed.  Added doc30.adl to test various queries.  The
	problems were: Matching using 'eq' wasn't working right, matching
	against attributes, where another attribute existed as a
	substring, e.g. foo and foo_bar, caused problems, and wild-card
	matching didn't always work.

	* misc/DocHelpers.C (adl): Reworked how expression expansion is
	handled.  We used to see if a variable was a global resource, and
	if not, expanded it.  However, this didn't work if the variable
	was local, but had the same name as a global resource, just as
	"zero".  Fixed this by switching to a stack of variable maps and
	recording all declarations; we now longer check to see if an item
	is a global resource.  Added doc28.adl to test.

	* misc/DocHelpers.C (adl): We weren't handling
	modifying-assignments properly, e.g. +=.  Now, if we come across
	such an assignment, we store an infix expression with the
	appropriate operator.  Added doc29.adl to test.

2011-08-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/Scripting.C (adl): Fixed a bug with the ijam command: We
	didn't allow the user to specify a path and it always worked from
	the root, meaning that ijam wouldn't work with multi-threaded
	models.  Fixed this and added in236.dat/in236.cli to test.

2011-07-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added the check_latency() function to the uADL latency API.
	This returns true if latency == 0, but issues a stall message if
	it's non-zero, making debugging easier for models when pipeline
	tracing is enabled.

	* Cleaned up some autoconf macros.

2011-07-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Some autoconf macro cleanup.

	* Further update to op_transforms.  Now, during substitution, I
	treat assignments in a special way, not expanding the lhs so that
	expression expansion can be performed properly.  Added doc27.adl
	to test.

2011-07-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with the front-end- an error would be produced if we
	had no default instruction, even if there were no unimplemented
	instructions.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.3.1 (v2_3_1) on Linux (lc8008-tx30) on 7/11/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.3.1 (v2_3_1) on Linux (lc0098) on 7/11/2011 ==

2011-07-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** New MMU and TLB hooks have been added.  Both are called
	<b>final_hit</b> and are executed once a complete search has been
	performed.  For the TLB version, this causes similar behavior to
	occur as with a multi-hit handler: The complete set is searched
	for all matches.  The existance of the MMU version is also similar
	to the MMU-level multi-hit handler: All relevant TLB lookups are
	tried and then the final-hit handleris called if any hits
	occurred.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information about these new
	hooks.

2011-07-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Kind of a big change to the documentation/database expression
	expansion/op-transforms system.  The expression expansion is no
	longer handled in the DocWalker, but instead combined into the
	SubstObj class which handles op_transforms.  This was to be able
	to recursively do expression expansion after a transformation,
	which might have produced assignments/decls.  Seems to work, but
	I'm a little worried that there might be corner cases I haven't
	handled, since SubstObj works at a lower-level than a Walker does.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.17 (v1_8_17) on Linux (lc0098) on 7/6/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.17 (v1_8_17) on Linux (lc0100) on 7/6/2011 ==

2011-07-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added an _eval_() function to op_transforms to evaluate simple
	numeric expressions.

	* fe/VarWalker.C (adl): I now transform declarations, if they're
	really register-file slice writes, from the incorrect declaration
	structure to the correct nested-function-call structure, so that
	subsequent processing doesn't need to special case this situation.
	Added doc/doc23.adl to test that this transformation occurs.

2011-07-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I now support the creation of 0-sized intbv objects just so that
	a memory read of 0 can be made.  I guess StarCore wanted that for
	some signaling reasons.

	* Some fixes for op_transforms: The way I was squashing empty
	blocks caused an assertion when an if-clause actually was empty,
	e.g. just had a ';' in it.  This has been fixed; if the statement
	is originally null, it's added on just to preseve the block as it
	was originally.

2011-07-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The set_ignore_mode() feature has been enhanced so that reads
	from memory are now squashed (they just return 0) if
	<code>set_ignore_mode(true)</code> is called.

	* Further enhancements to the op_transforms feature of make-doc
	and make-db, including the addition of special transform
	functions.

2011-06-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Expanded the expression expansion capability by enhancing the
	op-transform feature of the database and documentation generators.
	The op_transforms block in the config file can now contain
	capturing tokens which match against an expression, then
	substitute the captured value into the resulting substitution
	expression.

	** The ADL ELF reader has been refactored so that the core
	routines are usable by external applications.  A user can simply
	include <code>iss/ElfBaseReader.h</code> and link against
	libElfReader to make use of this functionality.

	* I refactored most of the elf reading code into ElfBaseReader, so
	that ElfReader, the ADL specific portion, mainly just takes care
	of address translation and entry-point selection.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.16 (v1_8_16) on Linux (lc0098) on 6/28/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.16 (v1_8_16) on Linux (lc0109) on 6/28/2011 ==

2011-06-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* More work on the expression expansion option in the database
	generator.  Fixed some special cases, such as for alias parameter
	resolution.  Also, the expanded block is now stored in the
	extracted-doc-op section of the database so that the parent-action
	can be kept in its original form.  It is also possible to toggle
	off expression expansion via the doc_no_expand_exprs attribute.

2011-06-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I tried experimenting with improving register-range
	instructions, e.g. stmw, lmw, by processing only the relevant
	range, but it actually turned out to be slower, so I didn't bother
	checking in the changes.  Weird...

	* scripts/uadl2model.in: I got rid of the optional compilation
	feature- there were just too many annoying issues where it didn't
	quite work right.  I can always recover it if I decide it is
	worthwhile to pursue.

2011-06-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with delayed/parallel register updates: We didn't
	have free() defined for register-slice writes, so the packets were
	never put onto the free list, leading to an assertion failure for
	longer tests.

2011-06-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* In anticipation of further work on the database/documentation
	flow, I've added a --config option to make-db so that it can read
	in a DocCfg object.  The idea is to expand the op_transforms
	concept to handle StarCore's needs.

2011-06-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* A very preliminary expression-expansion feature has been added
	to the database generator to help StarCore with their
	documentation flow.  Eventually, this will be expanded to fully
	suit their needs, but this is just a first test.  It's activated
	with the make-db option of --expand-exprs.

	* Fixed a bug with mmulookup introspection:  We were creating a
	vector for all non-interface lookups, but populating it with just
	the lookups with arrays, potentially leaving an uninitialized
	element if the user had a lookup w/o an array, used for reporting
	purposes.  Added mod21 with itest4.regress to test.

	** A new ISS generation config parameter, <b>packet_pool_size</b>,
	has been added, to enable the user to adjust the size of the pools
	used for delayed writes, such as for parallel architectures.  This
	is supported in the top-level config block in the .ttc file.

2011-06-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with uADL parsing: When parsing a design with
	multiple core blocks, e.g. a defmod which overrides another core,
	the original environment was not being preserved, meaning that
	parsing of helpers which called other helpers would fail.  Solved
	this by storing a list of all core-block environments in UadlIr,
	then adding all of those environments as base-classes before
	finalizing the core.

	* Fixed a segfault with uADL: If a cache was implicitly included,
	i.e. was defined in ADL but not uADL, or if the next-level memory
	wasn't defined, we'd use the default ADL memory-name, which might
	not match the uADL memory resource's name.  When generating the
	memory block, we'd try to get that memory resource, expect it to
	be there, and end up doing a null-ptr dereference.  Fixed this by
	defaulting to using the first memory defined if not otherwise
	specified, plus add an error if no memory was discovered.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.15 (v1_8_15) on Linux (lc0098) on 6/22/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.15 (v1_8_15) on Linux (lc0109) on 6/22/2011 ==

2011-06-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with generation of the in-hook write functions for
	register files.  The presence of a read-only flag produced an
	incorrect expression.  Fixed this and modified mod13.adl to test.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.3.0 (v2_3_0) on Linux (lc0098) on 6/21/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.3.0 (v2_3_0) on Linux (lc0109) on 6/21/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.3.0 (v2_3_0) on Linux (lc0098) on 6/21/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.3.0 (v2_3_0) on Linux (lc0109) on 6/21/2011 ==

2011-06-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new key has been added to register and register-file
	write-hook definitions: <b>immediate = &lt;bool&gt;</b>.  If true,
	then if this is a parallel architecture, then the write-hook
	executes immediately, while the actual update of the register is
	delayed until the commit-phase, at the end of the packet.  If
	false (the default), then the write-hook executes during the
	commit-phase.  If the <b>ValueBundle</b> syntax is used, then a
	write-hook cannot have the immediate flag set to true.  If not
	specified, then the hook inherits its value from the
	architecture-level flag <b>immediate_writehooks</b>.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.3.0 (v2_3_0) on Linux (lc0098) on 6/20/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.3.0 (v2_3_0) on Linux (lc0109) on 6/20/2011 ==

2011-06-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed various bugs with MMU processing so that it's possible to
	create a very stripped-down TLB to be used just for logging
	purposes, e.g. logging PTEs in a hardware tablewalk situation.  We
	had several bugs in the ISS generator which caused segfaults when
	an interface TLB was instantiated.  Fixed these and modified
	mod21.adl to test.

2011-06-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with tracing: Opcodes smaller than 4 bytes were not
	displayed in the pipeline trace.  The problem was that the loop
	which displayed opcodes was taking the size and dividing by 4.
	Thus, if an opcode had fewer than 4 bytes, the result was 0 and
	nothing was printed.  I now special case the < 4 situation and
	then print out just the relevant nibbles, so a 16-bit instruction
	will be displayed as 0x1234, for example.  All opcodes are now
	also filled with leading 0s, if relevant.  Added a test using
	dlx-vle and vle2.dat to test this.

2011-06-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Register and register-file aliases now obey their own reserved
	and read-only masks.  Previously, only the reserved or read-only
	mask of the target was used.  Now, the value is masked according
	to the alias's masks, then written to the target.

	* The front-end had a mistake, whereby it wasn't storing
	instruction attributes which appeared in the MMU
	permission-checking functions, as MMU attribues.  This could cause
	a problem with the mmu cache, where the cache might not be flushed
	due to the change in attributes, thus allowing a translation to be
	re-used which shouldn't have been, producing invalid results.
	Modified Data.C and updated fe/mmu13.adl to test.

2011-06-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The uadl2model script has been enhanced so that it only compiles
	files which have changed from the last time.  This is done by
	generating to a temporary name, comparing it to the original, and
	if they differ, copying the temporary to the standard name and
	then compiling.  If the object file is missing, or the original
	source file doesn't exist, or they differ, then the compile is
	performed, otherwise the compile is skipped.

	* uadl/RegResource.h (uadl): Converted partial-register
	allocations over to using circular queues, rather than deques.

2011-06-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified the branch predictor so that it now uses circular
	queues, rather than an STL deque.

2011-06-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/CircularQueue.h (adl): Refactored so that a common base
	class implements all of the logic.  Differences between queues are
	maintly implemented via a helper class.  I also added a
	dynamically-sized queue, which will re-size itself when the queue
	is full.

	* Modified the uADL Cache to remove all use of deques, replaced by
	the dynamically-sized circular queue.

2011-06-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added the force_source and force_target operand specifiers, so
	that a false dependency can be specified for an instruction class.

	* Fixed a problem with range-operands, e.g. stmw's sources.  Our
	logic for handling that with forwarding paths was totally broken,
	so I fixed it and added stmw to dlx2-fwd and dlx-fwd to test.

	* Fixed a bug with operand specifiers and range operands- we
	weren't matching a register-file only operand against an
	instruction's range operand, e.g. (GPR,0xffffffff) wasn't matching
	against stmw's source operands.  Fixed this and added in43.uadl to
	test.

	* Added a new regression model, dlx2-pmr.uadl, to test pipelined
	memory requests, along the lines of what's inteh z446's memory
	model.

2011-06-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug that got introduced from the Windows port.

	* Added two new helper functions, thisInstr() and thisCore(), so
	that the user doesn't have to use *this when dealing with helper
	functions.

2011-06-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The concept of 'typed' memory accesses was only applied to
	transactional and hybrid ISSs.  However, StarCore needed it for
	plain ISSs with external memory.  So, I extended it for that as
	well.  Added scripts/driver13 (uses scripts/mod3-em.so) to test
	this.

	** The logging interface has been modified.  Typed memory accesses
	are now logged using <code>LogBase::log_core_mem_read_typed</code>
	and <code>LogBase::log_core_mem_write_typed</code>.  These have
	the same parameters as <code>log_core_mem_read</code> and
	<code>log_core_mem_write</code> but add an additional
	<code>CacheAccess</code> parameter to log the user-specified type
	for that access.

2011-06-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added a new option to adl2doc: --unused-instrs.  If true, then
	unused instructions are displayed in documentation (those not
	instantiated by any instruction tables in the core).  If set to
	false (negated), then those instructions are not displayed.  The
	default behavior is true (they will be displayed).  Added
	docs/doc19.adl to test this feature.

	* I added a better warning message when instructions are listed in
	instruction classes, but not implemented in ADL.  The prior one
	was kind of confusing.  I also fixed an issue with handling the
	defeault_instr psuedo instruction: We previously weren't filtering
	on un-used instructions, so, for example, the z420 wouldw show
	warnings about BookE instructions, even though those weren't used
	by the model.

2011-06-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I fixed the problem noted below.  Now, MmuBase has two new
	virtual methods: user_entry() and clone().  When
	log_mmu_translation is called, if the pointer to the MmuBase
	object is to be retained beyond the lifetime of
	log_mmu_translation, then the function must call
	MmuBase::user_entry().  If the return is true, the the object must
	be cloned and then later deleted.  If false, then it need not be
	cloned.  The transactional-iss logger and the UVP writer have been
	modified for this.  The DAT writer didn't need any modification,
	since it doesn't retain any pointers to these objects.

2011-06-03  Brian Kahne  <bkahne@lc0100>

	* uadl/UadlScriptLogger.C (uadl): Subtle bug which only showed up
	with optimized builds:  We didn't have the end of the
	uadl-commands array terminated by a null, so in some cases, the
	loop setting up the uadl commands would continue past the real
	array, corrupting other data.

2011-06-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new ADL API function has been added:
	<code>logMmuTranslation</code>.  In certain situations, such as to
	model hardware tablewalk, it may be necessary to explicitly log
	TLB entries which are not directly used in the translation
	process.  This function may be called by users to do this.

	* The above feature doesn't currently work if logMmuTranslation is
	called with a local variable and we're using the transactional
	logger, because the variable disappears before the logger uses it.
	We should fix this at some point, but since explicit calls to
	logMmuTranslation are only done for Raptor, and since it just uses
	ADL, we currently don't have a problem, I think.  Still, we should
	fix it at some point, perhaps by adding a reference count or
	something like that.

2011-06-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uADL helper functions are now instantiated within the uADL
	class, rather than in the ISS, so that they can call uADL resource
	methods.

	* I added a new define block within instruction classes, called
	"functions", which allows the user to call different helper
	functions based upon what instruction is being executed.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.14 (v1_8_14) on Linux (lc0098) on 6/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.14 (v1_8_14) on Linux (lc0109) on 6/1/2011 ==

2011-05-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/DefaultFetchUnit.h (uadl): I refactored the fetch unit so
	that the branch predictor is no longer a parameter.  It seemdd
	unecessary, as the fetch unit pretty much just went through the
	architecture.  This means that branchPredict() only ever queries
	the predictor specified by the fetch unit.  There's also a new
	function, branchPredictEnabled(), which returns the enabled status
	of the predictor.

	* uadl/UadlMemory.h (uadl): I've rewritten the memory so that it
	uses a circular queue instead of a deque in order to improve
	performance.  Also, the rest queues have been moved to the
	MemoryPort data structure, allowing me to get rid of the need to
	have a request count; this is now tracked using the number of
	requests in the request queue.

	* tests/iss/queuetest.C (cqtest): Added a regression for testing
	circular queues.

	* iss/CircularQueue.h (adl): Added a dynamically-sized circular
	queue (sized once at constructor time).

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.2.0 (v2_2_0) on Linux (lc8012-tx30) on 5/26/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.2.0 (v2_2_0) on Linux (lc0109) on 5/26/2011 ==

2011-05-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for constant-value operands.  These just store a
	constant value, but per-instrution overrides can change the value,
	allowing them to be used as flags, evaluated at compile-time, for
	changing behavior within an instruction class.

2011-05-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenRegs.C (GenRegsBase): We were returning a reference for a
	registe-read function, even if it involved a slice with a shift,
	which created a temporary.  This could cause problems when
	optimization was turned on.

2011-05-25  Brian Kahne  <bkahne@lc8009-tx30>

	* uadl/GenCode.C (uadl): Minor change for 64-bit gcc 4.4.4
	compatibility: unsigned and size_t are different types, so max()
	won't work.  Had to change maxOps to size_t for type
	compatibility.

2011-05-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new set of query methods was added to the model interface:
	<code>IssNode::readReg</code>.  These functions are similar to
	<code>IssNode::getReg</code> except that they access registers
	using the in-model access methods.  Thus, if a read-hook is
	present, it will be called.

	This method is accessible in the scripting interface via the
	<b>readreg</b> function.  Note also that tracing is turned off
	while in <code>IssNode::readReg</code> or
	<code>IssNode::writeReg</code> in order to avoid extraneous
	logging information.

2011-05-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fairly major changes to the scripting interface:  The handler
	functions are now static members, which allows other classes to
	add handlers.  uADL makes use of this to add ccount, cycle,
	ptraceon, and ptraceoff functions.  Logging event callbacks for stalls and
	flushes are now supported.

	* The logging system was modified to support the concept of a
	logging-client class: This class is called by loggers if
	installed, to report various activities, basically just stalls and
	flushes right now.  The logging of messages is controlled
	independently so that clients can be inserted w/o all of the
	overhead of string creation that normally goes with logging.

2011-05-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with custom resources- we weren't using the correct
	translate function, so we were only parsing constructors if their
	implementation was in-line with the class.

	* Added support for pre-cycle, post-cycle, and post-sim hooks to
	custom resources.  Also, a custom resource now has to inherit from
	Resource, which defines methods for creating and deleting loggers
	and reporting.  All custom resources are hooked up to the main
	reporting function.

2011-05-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merge from trunk to get the custom-cache/memory object support.
	In uADL2, the user also has to create a template wrapper, but the
	advantage is that users can create their own cache transactions.

	* The virtual-dispatch option now works for forwarding paths and
	the z446 with virtual dispatch passes its regressions.  Added
	dlx2-fwd-vd to test virtual dispatch with a more complex model.
	Currently, I don't see the need to allow for per-class control
	over dispatch type, but this can be added later quite easily.

2011-05-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The first step of enabling virtual-dispatch (as opposed to
	templates) for operands is done: Basic support for an
	all-or-nothing approach.  This doesn't yet support forwarding
	paths or proper handling of values; those will need
	per-operand-group base classes.  Also, it's currently
	all-or-nothing in terms of dispatch type.

2011-05-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified pipeline tracing so that we only get a logger object in
	the cycle() routine if pipeline tracing is on.  Previously, we'd
	check for any logging, but this was wrong, as we only instantiate
	the instruction loggers if pipeline logging is on.  Thus, it was
	possible to get a segfault by trying to get the loggers when they
	didn't actually exist.

2011-05-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* It appears that we had a long-standing bug with how we handled
	parallel writes to registers.  We had this concept of a write-mask
	which would mask updates to parallel registers, but it's not clear
	why that existed.  However, it caused a bug: A write to a field
	would set the write mask, but if, in the same packet, a full write
	to the register occurred, then that write would use the write mask
	and would have its update masked according to the prior field
	write, thus squashing most of the update.

	To fix this, I just eliminated the write mask.  It seemed
	redundant, since the commit-write functions for fields already
	knew what update was needed and only set the necessary bits.
	Modified mod67.adl and added in230.dat to test.

2011-05-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** uADL now allows a user to specify a custom cache model via the
	<b>custom</b> key within a cache define.  Please refer to
	href="http://cad.freescale.net/adl/chrome/site/uadl-manual.html">the
	uADL reference manual</a> for more information.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.13 (v1_8_13) on Linux (lc0100) on 5/17/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.13 (v1_8_13) on Linux (lc0109) on 5/17/2011 ==

2011-05-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with alias slices: The setReg function was wrong
	when a shift was present.  Fixed this and modified in228.dat to
	test.

	** The MMU data and instruction miss handlers now return a boolean
	value.  If the return value is true, then the translation process
	is restarted.  This allows a miss handler to insert new data into
	the TLBs, such as for a hardware tablewalk.  A value of false
	means that the effective address should be used as the translated
	address.  If the handler simply throws an exception, then no value
	need be returned.

2011-05-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with mmu lookups:  If we did a defmod on a lookup
	which inherited from another lookup, then added a test, this test
	would show up in another lookup b/c we weren't doing a deep-copy
	of the test sets.  Fixed this by changing MmuLookup::copy().
	Added fe/mmu20.adl to test.

	* Fixed a bug with the register-file hasAttr routine:  For sparse
	register files, entries which didn't map directly to a register or
	register-file element didn't print anything, meaning that the
	select statement fell through to the next entry, returning
	incorrect results.  Fixed this so that it returns false for an
	entry w/no direct register or register-file target.

	** Register aliases have been extended so that it is now possible
	for a register to alias a slice, with an optional shift, of
	another register or register-file element.  Previously, the
	<b>slice</b> key was supported for aliases, but the slice had to
	be the same size as the register definition.  Now, the slice can
	be any size and an optional shift may be specified to shift the
	slice to another positon within the final register result.  This
	slice and shift can be set within a read or write hook, or defined
	at the register-definition level so that it applies to both reads
	and writes.

	* For testing of the above, added iss/in228.dat.

2011-05-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* helpers/intbv_impl.h (adl): The signedRightShiftEqual function
	had a bug- it should sign extend the result, but if the shift was
	larger than the value, it would just always set all bits, when it
	should test the original sign bit and only set all bits (in
	effect, sign-extending across the entire value) only if the
	original sign bit was 1.  Fixed this and updated miscSignedTest.C
	to test.

2011-05-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Register write-hooks which use the extended form (have
	parameters for designating the start and stop bit positions of the
	access) now skip recording a slice access of the current register,
	since it's technically redundant.  This way, documentation won't
	be confused by the accesses in the write hook.  Modified
	fe/reg14.adl and docs/doc18.adl to test this.

	* Further changes to the cache to get it to agree with the z420.
	I think this is far too model specific, so I want to back these
	changes out, eventually, once we have support for custom cache
	models.

2011-05-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Well, things get more complicated: Compiling as a single file
	can increase compile times (z446lca2 goes up by about a minute),
	so now uadl2model will choose separate ISS compilation w/o
	optimization, but use same compilation w/optimization.

	* I had to back away from the idea of separate compilation of the
	ISS and the uADL files. The problem was that optimized models with
	-fkeep-inline-functions produced this weird assembler error.  By
	moving towards a single compilation, I don't need the
	-fkeep-line-functions option.

2011-05-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The use of the -fkeep-inline compiler flag is now guarded by
	whether JIT support is enabled.  For some reason, under gcc 4.4,
	this was causing an assembler error when optimization was used.
	However, this option is only needed by JIT models, and the JIT
	isn't supported under gcc 4.4 anyway.

2011-05-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The fact that GlobalMemName was defined as a global C++ string
	meant that weird errors could crop up with shared-object usage.
	It was possible that this global could be merged into a shared
	data segment, causing a double-deletion error.  Changed this to a
	const char ptr to avoid these issues.  This is apparently a known
	issue with C++ globals in shared objects- they get merged together
	in order to obey the One Definition Rule, but then destructors end
	up getting called twice, leading to a double-deletion issue.

2011-05-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified the fetch unit so that it now uses a circular queue
	(CircularQueue.h) rather than an STL deque.  This avoids memory
	allocation overhead and results in a nice speed improvement.

2011-05-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added a cache of instruction objects to avoid decode overhead.
	This can be enabled via --instr-cache and the cache size and cache
	page size can be set via --instr-cache-size and
	--instr-cache-page-size.

	The cache is implemented as an "infinite-way" cache: Each set
	points to a ring of elements.  On a lookup, we go to the relevant
	set and then search through the ring to see if there's a match.
	If so, then we index into the relevant item in the page, which is
	a linked list of instruction objects.  If the relevant index is
	non-zero, then we remove the instruction and proceed.  Instruction
	objects are stored in a list, since it's possible that the same
	instruction at the same address might be in the pipeline multiple
	times, such as for a small, tight loop.  If the relevant location
	in the page is zero, then we also have a miss.  On a hit, we
	modify the cache set's pointer so that it points to that element
	of the ring, thereby making subsequent hits faster.

	On a hit, we still have to reset the instruction, but we don't
	have to do a full decode.  A new set of per-instruction functions,
	the quick-reset function, was added to the instruction packet.  On
	a miss, we do a normal decode.

	On a commit, we have to look up in the cache again, and insert the
	instruction into the linked list at the relevant index in a page.
	In this situation, if the page is not found, we insert.

	The instruction cache is off by default.  Right now, it doesn't
	handle self-modifying code.  Performance gains were relatively
	modest- it looks like the fetch unit is the current long-pole in
	the tent.

2011-05-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I had special-cased NIA so that it would be logged if it was an
	alias, but it turns out that it shouldn't be a special case: If we
	have a register that aliases a register-file element, we should
	log a write, since the target routine used by the alias doesn't
	include tracing.  Changed this and modified iss/in217.dat to test.

2011-05-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** New helper functions have been added for signed multiplication
	and division: <code>sbitsSignedMultiply(x,y)</code> takes two
	unsigned arguments, multiplies them using signed arithmetic, and
	returns a signed result.  <code>sbitsSignedDivide(x,y)</code>
	performs the same way for divide.  For a little-endian
	return-type, use <code>le_sbitsSignedMultiply(x,y)</code> and
	<code>le_sbitsSignedDivide(x,y)</code>.

	* Modified miscSignedTest.C and NumberTest.C.in to test these new
	functions.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.12 (v1_8_12) on Linux (lc0100) on 4/29/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.12 (v1_8_12) on Linux (lc0109) on 4/29/2011 ==

2011-04-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/Cache.C: Changed the behavior of block_on_critical_word so
	that a value of true only blocks when there was activity in the
	prior cycle, in addition to a critical word arrriving in the
	current cycle.

2011-04-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with the read_rest transaction- it wasn't looking
	at the operand count, just the register-file size, so it worked
	for stmw but not for other multi-word reads which didn't read the
	entire register-file.

	* Fixed le_sintbv so that its behavior matches that of sintbv, in
	terms of returning signed values when used with a signed immediate
	value.

2011-04-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenMmu.C (adl): I modified mmu generation so that it's now
	possible to have an array-less lookup.  Basically, this just calls
	the miss function, allowing the user to do whatever they want.
	You still need to declare wayfields and set the size and shift
	values in order to correctly return a real-page value and have the
	cache set up correctly.  Modified iss/mod15.adl to test this.

2011-04-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* helpers/sintbv.h (adl): Fixed a bug with binary operations: We
	were returning unsigned values when one operand was an immediate,
	even if the immediate was signed.  Changed this and added
	intbv/miscSignedTest.C to be able to test various corner cases.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.11 (v1_8_11) on Linux (lc0100) on 4/26/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.11 (v1_8_11) on Linux (lc0109) on 4/26/2011 ==

2011-04-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Removed read_offset from MemoryRequest, cleaning up the memory
	interface a bit.

	* A uADL file can now refer to the implicit issue stage by using
	the special variable Issue.  This is mainly useful for quering for
	instruction attributes, for example.

2011-04-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/GenInstClass.C (uadl): We had a bug with mask sharing.  For
	example, let's say e_rlwi. shares a target with e_add2i. and its
	source is shared with and..  First, e_add2i is generated and uses
	3 mask slots.  Then and. is generated and it uses one mask.  It
	needs to allocate its mask in the 4th slots, because of the
	sharing relationship via e_rlwi., but if e_rlwi. hasn't been
	generated yet, then those masks won't be in the mask map, and thus
	and. won't see any sharing and will select a mask slot of 0,
	leading later to a conflict when e_rlwi. is generated.  This was
	due to the fact that we only replicated masks for aliases operands
	when the alias was generated.

	The fix is to replicate the aliases when the initial operand is
	generated.  As soon as it's generated, we iterate through all
	aliases, replicating masks.  That way, the next operand will see
	any masks which exist through any sharing relationships.

2011-04-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* In the case where the NIA was an alias to a register-file
	element, no logging of the NIA was being performed.  This happened
	b/c we skipped the logging on the register-file side due to the
	particular kind of aliasing, and we also skipped the logging on
	the register side, since it was an alias.  Fixed this and modified
	in24.dat to test.

	** The TLB test function <b>Bounded</b> has been enhanced to
	support an optional third argument.  This allows the user to
	specify a mask which is used to mask the address before it is
	compared against the lower and upper bounds (the first and second
	arguments to the test).

2011-04-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Various memory modifications to get a data-width of 64 to work
	with a normal-mode model.  We were still setting 'nb' in
	MemoryRequest to a value based upon the natural alignment and we
	had a bug in the memory logging code (getMemoryData).  Fixed this
	and added dlx-64, which is just dlx.uadl compiled with
	-D=MemWidth=64.

	* Merge from trunk.  dlx.uadl's data_width has been changed to 32
	temporarily, to get everything to pass.

2011-04-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* For MMU Check tests, we weren't translating them using
	InstrWalker, so register reads didn't get translated properly.
	Fixed this and modified mod72.adl to test.

2011-04-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* In order to improve the speed of the z420 model, I added a new
	operand transaction, read_rest_operand, which behaves like
	read_next_operand, but reads in all remaining operands.  This way,
	we can model the behavior we had previously, whereby the first
	operands, RA and RS, were read w/forwarding path checks, but the
	remaining ones weren't.  Currently, forwarding path logic is slow,
	so checking all operands against the forwarding paths was causing
	a big slowdown.

2011-04-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The comparison algorithm for Operand was slightly wrong- it
	didn't properly take into account that masks in Operand are simply
	overrides for the masks in the source or target UsedReg item.
	This resulted in incorrect comparisons when an OpVect was used in
	a map, resulting in reduced sharing of operands.  Fixed this by
	changing compare_lt_if_mask.  It now takes mask overrides, which
	it uses in its comparison.

	* uadl/GenInstClass.C (uadl): I've further reduced the size of the
	mask array by now calculating what instructions share operands,
	then basing starting mask indexes upon the operands that are
	shared.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.10 (v1_8_10) on Linux (lc0100) on 4/15/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.10 (v1_8_10) on Linux (lc0109) on 4/15/2011 ==

2011-04-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Operands are now compared ignoring mask values, so that we can
	further reduce the number of operands.  Still to be done: Reduce
	the size of the mask array by only comparing operands which ever
	exist together.

2011-04-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a problem with how we set child IDs:  Because it was set
	in the body of the constructor, the child items were constructed
	w/o the proper child id, so any register resets which called
	getChildId() returned bad data.  Fixed this by making child_id a
	constructor parameter.

	* Our shared-watch code was incorrect.  We would only call the
	first child of a given type, rather than calling all of them.
	Fixed this by modifying GenSim.C:pathToMember to return a list of
	all paths which match a given type.  Added iss/in224.dat to test
	this on mod13.

2011-04-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial check-in of code for moving masks to an
	instruction-class array of mask values, rather than having them as
	literals.  This will allow us to reduce the code size by ignoring
	masks when searching for operand aliases, but this doesn't do that
	yet.  Plus, the total size of the mask array is larger than it
	needs to be because each operand has a unique set of slots.  This
	can be reduced in the future by sharing slots when possible.

2011-04-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Did some initial work on decreasing the size of the generated
	code for uADL.  First, in safe-mode, the templated read functions
	don't really do anything except log.  This should be a nice speed
	boost, plus it decreases the code size.  Second, I maintain a map
	of function calls in action code.  This is then queried during
	code generation- if functions aren't needed, then they aren't
	generated.

2011-04-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Writes to register fields which are marked as reserved or
	readonly are now squashed.  However, by marking a read-only
	register field as <b>writable</b>, a write specifically to that
	field is allowed, but writes to the register as a whole will still
	treat that field's bits as read-only.

	** The UVP writer now always writes a RES card for cores, even if
	no instructions are present.

	* We were ignoring the readonly and reserved flags on register
	fields, so that a write to a field marked as readonly or reserved
	would still modify the value.  This seemed wrong, so I changed it.
	Now, a write to a field marked as reserved or readonly will be
	ignored.  However, if the field is marked as readonly and also
	marked as writable, then a direct write to that field is OK, but
	the value will be masked for a full write to that register.
	Modified iss/mod12 to test this.

	* iss/UvpWriter.C: I changed the writer so that it will always
	printa RES card.  Apparently simulation relies upon this, so even
	if no instructions are generated, it's still necessary.

	* When generating the database, for instruction usage information,
	we remove the primary source/target register when merging in usage
	info from read or write hooks, in order to avoid interference.
	For example, if we had a write to SR.FOO, and SR has a write-hook,
	then we don't want the SR.FOO to be clobbered by the data in the
	write-hook, so we remove "SR" from the write-hooks usage info.
	Added doc/doc18.adl to test this.

2011-04-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenRegs.C (GenRegsBase): We had a bug with handling aliases
	to context registers, e.g. IAR to NIA for altair_r1_mt.  I added
	in checks to see if the target of an alias is a context register.
	If so, the current context is used.

	** The UVP reader and writer have been simplified: We no longer
	modify register-file names or support the uvp_full_name attribute.
	Instead, register-file elements are displayed using their logged
	name.  This may be controlled using the log_name key in the
	register-file definition.  The default, of course, is to simply
	use the definition name.  This means that for PowerPC, in order to
	maintain compatibility with Raptor, the <b>GPR</b> register-file
	should have its log_name set to <b>G</b>.  For example:
	<pre>
	  define (regfile=GPR) {
            """
            The general purpose register file.
            """;
            size = 32;
            width = regSize;
            offset = defaultOffset;
            prefix = r;
            log_name = G;
          }
	</pre>
	Likewise, the <b>FPR</b> log_name should be <b>F</b> and the
	<b>VPR</b> log_name should be <b>V</b>.

	In addition, <b>IAR</b> is no longer automatically translated to
	<b>NIA</b> in the UvpReader.  Instead, the user should declare an
	alias of IAR -> NIA in the model so that the name will be
	recognized as a valid register.

	* uadl/Cache.C (afterTimeStep): Added a check on store-buffer size
	for getting the serialized value.  Looks like the lack of this
	check was causing a segfault in the system model.

2011-04-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with sizing of translation pages for the JIT or
	trace cache.  If we had an MMU that didn't do translation, and
	thus didn't have a page size, then we'd size the page to be 0,
	causing an immediate segfault when we ran with --trace-cache.
	Now, if the page size is found to be 0, we use the default.  The
	user can also set the page size via jit_page_size in a config
	file.  Modified mod72.adl to test this.

	* We had a bug with the database generator.  When processing
	inputs and outputs, we were using a single set to store what
	registers we had handled.  Unfortunately, this meant that if we
	had handled a register as a source, then it was skipped as a
	target.  Fixed this by using two different sets, one for the
	source and one for the target.

	* The resetting of shared TLBs was slightly incorrect.  First, the
	system and each child was resetting everything, which was
	redundant.  However, the system's reset occurred after the
	children did their reset, so a reset translation would be erased.
	Now, system resources are reset first, before the children, and
	the children do not reset shared TLBs.  Modified mod14 and added
	iss/in223.dat to test.

2011-04-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/Cache.C (beforeTimeStep): I re-did how serialization
	checking is handled in the cache: It's now all done from the
	perspective off the cache, and checked via the flag
	_serializedValid.  This is set in beforeTimeStep based upon
	whether any read or store actions are present (which means that
	serialized transactions can't be performed) or a linefill (if
	present, then all requests must have been sent and the critical
	word returned).  This is then checked in afterTimeStep via
	check_serialized.  This should be more accurate than what we had,
	which was checking the memory's activity itself.

2011-04-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified the UVP writer so that it can handle externally
	generated exceptions which occur before the first instruction.
	This was causing a segfault.  We now check to see if a current
	instruction exists, and if not, create an asynchronous-exception
	card (E : A) to store the data.  Modified scripts/driver7 to test
	this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.2 (v2_1_2) on Linux (lc0100) on 4/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.2 (v2_1_2) on Linux (lc0109) on 4/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.2 (v2_1_2) on Linux (lc0100) on 4/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.2 (v2_1_2) on Linux (lc0109) on 4/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.2 (v2_1_2) on Linux (lc0109) on 4/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.2 (v2_1_2) on Linux (lc0100) on 4/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.2 (v2_1_2) on Linux (lc0109) on 4/1/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.9 (v1_8_9) on Linux (lc0100) on 3/31/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.9 (v1_8_9) on Linux (lc0109) on 3/31/2011 ==

2011-03-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/uadlMemory.h: I moved the level logic into MemoryDelegate,
	since there was no need to keep that virtualized.  I also re-did
	how parameters and ports are set with external memories: Calls to
	set these up are virtual, and called when the external memory is
	set, so that the external memory will be consistent with what the
	model specifies in the source file.  Added uadl/test_pc2_systemc
	to test this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.8 (v1_8_8) on Linux (lc0100) on 3/29/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.8 (v1_8_8) on Linux (lc0109) on 3/29/2011 ==

2011-03-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/uadlMemory.h (uadl): The nAvailableRequestSlots() methods
	were not present in the memory interface or delegate classes,
	leading to compile errors if the send_write_request was used in a
	model.  Added these methods to those classes and modified
	uadl/Zen0.uadl to test this.

	* Fixed a bug with the internal DMI cache used by the JIT and
	trace-cache.  If a cache line was replaced, the wrong entry in the
	DMI cache was being invalidated- it was using _lastEffectiveAddr
	rather than the tag for that cache line, meaning that there could
	be stale data in the DMI cache.  Fixed this and added
	iss/in222.dat to test.

	* We had a small bug for trace-cache generation: If a function did
	not have any translatin-time conditionals, but accessed memory, we
	would still go ahead and use the default handler (the one also
	used by the interpreter).  This meant that memory might go through
	the default memory route, rather than using the trace-cache memory
	routines which use the DMI cache, thus slowing down performance.

2011-03-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for the Repeat label to allow code to repeatedly
	execute when an instruction is stalled in a lock-step pipeline.

	* Added a public check_allocate method to 'flag' and 'semaphore'
	so that the user can check these w/o a log message on a return of
	false.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.7 (v1_8_7) on Linux (lc0100) on 3/21/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.7 (v1_8_7) on Linux (lc0109) on 3/21/2011 ==

2011-03-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* A new cache parameter has been added, currently just for testing
	purposes:
	<pre>
	block_on_critical_word = &lt;true|false|serialized&gt;;
	</pre>
	If true, then a request is blocked if a critical word arrives on
	that cycle.  If set to serialized, then the request is only
	blocked if it is marked as serialized.

2011-03-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Looks like linefill_request_block_cycle was incorrectly
	implemented: It should depend upon a request returning data, not
	on a new request being issued.  Made this change and updated the
	regression.

	* Modified linefill_block_inquire so that the block happens if the
	request is a hit or a miss.

	* I changed the uADL linefill_request_block_cycle cache parameter
	so that it now blocks requests for n cycles after a hit, when a
	linefill is ending.  This seems to describe the z420 cache
	behavior.  There is also a predibcate, linefill_block_inquire,
	which allows the user to query to see if this block is in place
	(the block also occurs on a send_request transaction).  Modified
	dlx-cache-split-pc2.uadl to test.

2011-03-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The memory interface for ADL and uADL was heavily modified.  I
	go rid of all of the annoying alignment requirements for byte
	reads and writes.  Now, reads are performed at the specified,
	non-aligned address, as are writes.  Writes no longer have a mask,
	but have a byte-count instead.

	This greatly simplifies things and means that the annoying offsets
	in uADL can be eliminated.

	I then modified MemoryAccess in Memory.h to have a SplitSize
	parameter, which determines the size, in bytes, at which accesses
	are split.  It used to be hardcoded to 4 bytes (32-bit access) but
	now supports 8-byte accesses as well.  This parameter is
	controlled by a parm in CoreConfig.  uADL sets it based upon the
	top-level data-memory's data_width value.  If set to 64, then
	8-byte accesses are used, else if 32, 4-byte accesses are used.

	For data_width=64, a word-misaligned lwz, but data-word aligned
	lwz, will produce just a single read-request/read.  This allowed
	me to eliminate all of the junk related to ADL_split vs. split in
	uADL1.  Added load1-dlx-cache-split-pc2-safe.dat to test this
	behavior.

2011-03-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Added a new core-config option (in the configuration file) for
	transactional and hybrid ISSs: <b>log_original_mem_access =
	&lt;bool&gt;</b>.  If true, then information about the initial
	effective address and size of the total access, in bytes, is
	stored in the core for each memory access.  They are accessible
	via the methods <code>get_orig_access_addr()</code> and
	<code>get_orig_access_size()</code>.  The default for this option
	is <b>false</b>.

	* Modified smdriver.C (for smdriver2) to test this.

2011-03-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Miscellaneous updates to forwarding paths.  We weren't properly
	supporting complex situations where an instruction needed bits
	from different forwarding paths, and what was in the forwarding
	paths were only part of what was required and what was partially
	allocated for the register.

2011-03-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified make-release-notes to work with Trac 0.12.2.

	* asm/GenAsm.C (adl): Modified _lower, _upper, and _ask in
	adl_operand to be 64-bit constants, so that 32-bit and 64-bit
	assemblers would work in the same manner.

	* iss/tracediff.C (adl): tracediff now accepts --ignore-field=ep
	to ignore the ep field for a UVP T card.  In that case, an ep of 0
	is used, so only the name and way are used for comparison
	purposes.

	* uadl/uadlArch.C (uadl): We were accessing the currOSM iterator,
	even though it might have been retired, thus making it invalid.
	This was caught by MSVC's stricter checking of iterators.  Changed
	to using a flag to indicate active state, thus avoiding using the
	iterator if it's not active.

2011-03-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I moved the default IssNode::setRegExt function implementations
	into the header so that it would work properly when RNumber isn't
	used.

	* We had a bug in VarWalker, where we weren't handling boolean
	default parameters, just integer default parms. Fixed this and
	added fe/inst137.adl to test.

	* MSVC doesn't like MemoryRequest w/o a namespace qualifier, so I
	modified the call to operationBegin() to have that.

2011-03-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/uadlMain.C (main):  We were not exiting with a non-zero
	error-code with an abnormal-quit, so a fail-on-deadlock never got
	reported as a failure.  Now, between tests, if abnormal-quit is
	set, then we will throw an exception, which will cause the
	simulation to terminate with a non-zero error code.

2011-03-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/uadlArchSystemC.h (uadl): Updated the SystemC interface
	file so that SC_THREAD can be used if _UADL_SYSC_USE_THREAD_ is
	defined.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.6 (v1_8_6) on Linux (lc0100) on 3/4/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.6 (v1_8_6) on Linux (lc0090) on 3/4/2011 ==

2011-03-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/osm.C (uadl): The _delayed flag wasn't initialized in init,
	so weird stuff could happen as OSMs were re-used later in a
	simulation.  Fixed this.

	* Checking in initial implementation of
	linefill_request_block_cycle, so that it can be tested by MSG.
	This allows the user to block requests to the cache n number of
	cycles after the start of a linefill.

2011-03-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added a new uADL cache transaction, store_buf_done(name), which
	will stall an instruction until all store-buffer entries for that
	instruction are done.  This allows the z420's serialized stores to
	be modeled.

	* Modified the behavior of serialized memory accesses with caches
	enabled.  Rather than waiting for the whole linefill to complete,
	we now just make sure that all requests have been sent and that
	the critical word has returned.  Added uadl/load6.dat to test.

2011-03-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with breaking deadlocks, when delayed moves are
	present.  We were still adding an OSM to the delayed-move
	list, even if it had been retired due to a deadlock.  Fixed this
	by adding in an active() check to prevent this.

	** A new register/register-file hook has been added:
	<b>external_write</b>.  This allows the user to describe behavior
	to be performed on a write to a register when the
	<b>IssNode::setRegExt</b> function is called for that register.
	By default, the behavior of <b>setRegExt</b> is the same as for
	<b>setReg</b>.  This feature can be useful, for example, to model
	external-interface behavior when a core is part of a systems
	model.

	** A new instruction key has been added: <b>enable_post_fetch =
	&lt;bool&gt;</b>.  The default is <b>true</b>.  If true, then the
	post-fetch logic is executed for this instruction, which generally
	involves incrementing the program counter, but may be overridden
	by a <b>post_fetch</b> hook.  If set to false, then this logic is
	not inserted, allowing an instruction, for example, to not
	increment the program counter.

2011-02-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The stalled predicate now returns true if any stall occurs in
	the pipeline, even in stages which don't have stall_backwards set.
	This allows the predicate to be used in the decode stage of a
	design, where stall_backwards can't be used due to deadlocks.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.1 (v2_1_1) on Linux (lc0100) on 2/23/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.1 (v2_1_1) on Linux (lc8009-tx30) on 2/23/2011 ==

2011-02-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug, whereby uadl wouldn't handle a null return from
	the iss's decode function if only one size of fetch existed for
	the model.  Instead, it would just assert.  Unfortunately, a null
	return value is exactly what was returned by decode if the
	max-instruction-count was exceeded.  Fixed this and added code to
	turn off instruction-size checking in the ISS if only one size of
	fetch existed.  Added a max-instruction-count test for dlx2 to
	test this.

2011-02-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The uadl raiseExternException function now forces a value into
	NIA as well as CIA, to handle exceptions which update based upon
	the NIA, rather than the CIA.

2011-02-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merged in scripting language improvements from the trunk.

2011-02-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The exec_from_buffer function for an ISS didn't catch
	exceptions, so they'd propagate out of the model and abort the
	program.  Added exception checking logic to fix this.  Added
	iss/in220.dat,in220.cli to test.

2011-02-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The scripting interface has been enhanced for uADL.  The user
	may now call <b>cycle</b> to cycle the model 1 or N cycles.  For
	ADL, this is identical to step, but for uADL, this advances by 1
	or N pipeline cycles.  The user may also call <b>ccount</b> to
	return the current cycle count.  For ADL, this is identical to the
	<b>icount</b> function.

	* Fixed various bugs in the scripting interface for uADL.

	* The order in which we listed a system's childrens' constructor
	arguments was wrong wrt. parms and TLBs.  Fixed this and also
	changed shared TLB member variable creation to use ClassData, to
	avoid compiler warnings.  Added a parm to mod14 to test this.

2011-02-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merged in all of the memory subsystem changes from the trunk.
	However, this doesn't yet implement a mechanism for setting the
	serialized mask in a memory request.  I'm going to use a different
	mechanism based upon a hook, rather than an instruction flag,
	since that doesn't work well between safe and normal models.

2011-02-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenRegs.C:  Changed how register member variables are
	instantiated, they now use the ClassData object, in order to avoid
	warnings about inits being out of order.

	* It's now possible to call getChildId() in ADL action code.

	* setReg and various other functions which call register debug
	accessors will handle recursive aliases, though it's a bit of a
	hack.  It would be better to create the standard debug access
	functions for all registers, even if they have aliases.  TBD.

	* There seems to have been a subtle bug in the uADL cache model: A
	store might proceed before the respective line had been brought
	into the cache because, on a write, we would check to see if we
	hit in the linefill buffer, but not if the data had come back yet.
	Therefore, we might allow a write to proceed, which would write
	into the line, but then it would get clobbered by the linefill
	that would come in.  Made this change and modified uadl/store3.dat
	to adjust its timing based upon this change.

2011-02-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* There was a bug with handling user-specified sources and
	targets.  We weren't parsing a range resource correctly,
	e.g. GPR(RS,31), so that the resulting transactional ISS was
	wrong.  Fixed this, then added 'stmw' to mod3.adl and am testing
	with in218.dat with tdriver2.

2011-02-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL now supports an array syntax for declaring elements within
	a system.  For example:
	<pre>
	define (sys=Foo) {
          Thread t[2];
	}
	</pre>
	This would instantiate objects <b>t0</b> and <b>t1</b> within
	system Foo.

	** ADL now supports child-relative indexing for register aliases and
	sparse register-file entries.  This is indicated using the special
	identifier <b>child_id</b> as a register-file index.  For example:
	<pre>
	defmod (reg=NIA) {
          alias = NIAs(child_id);
        }
	</pre>
	The alias or entry is indexed based upon the index of the core
	within the parent system's list of children.  This is useful when
	modeling multi-threaded systems, for example, to allow each core
	to map a resource, such as the program counter, uniquely into a
	shared register-file.

	** ADL now allows all elements of a register-file to be mapped
	into consecutive elements of a sparse registe-file without needing
	to enumerate each item.  Simply create an entry with a
	register-file as a target and no index specified.  The
	register-file's elements will be mapped to consecutive entries,
	starting with that entry's id.

	* Modified iss/mod13.adl to test the above features, along with
	fe/share14.adl and fe/share15.adl.  This demonstrates the use of
	these features for modeling a simple SMT system, where the number
	of threads is parameterized via a #define.

2011-02-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/osm.C (uadl): I modified the OSM scheduler for when stages
	have the stall_backward attribute.  Now, if an instruction in a
	stall-backwards stage can move to a new state (not just loop in
	the existing one), it stores its movement information in
	delayed-movement member variables.  The outer scheduler stores the
	OSM in the _delayedMoves vector and only performs the moves when
	it gets to a new stage and there were no stalls.  This allows us
	to model the situation where two instructions should always move
	in lock-step, even if the first can move forwards but the second
	is stalled, e.g. an add and a load, where the add can progress,
	but the load stalls.  Added stall5.dat

2011-02-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/uadlMemory.C (uadl): There was a subtle bug in
	Memory::saveQueueStatus: We didn't clear the value of
	_hasPreemptionId, so an erroneous preemption could occur.  This
	was introduced when we added per-port waiting-requests.
	Previously, _hasPreemptionId was set each time, but was changed so
	that it was only set if we found a valid waiting request.  Fixed
	by clearing the flag before iterating over the ports.  This fixes
	varioius z650 fails.

	* The concept of memory access serialization has been added to
	uADL to be able to model guarded accesses.  Each memory element
	(cache or memory) has a level associated with it.  The user can
	call set_mem_serialized(manager) to specify that the current
	memory access should be marked as serialized.  This sets a bit
	flag with the appropriate bit set for the level of that manager.
	Requests take the serialized flag into account and check to see if
	there's any activity, returning false if the request was
	serialized and there was activity.

	This required changing a lot of methods, since the serialized flag
	has to be passed form the memory access to the request, stored in
	the request, then checked when needed and passed along down
	through the memory hierarchy.

	Modified dlx-cache-split-pc2.uadl to test this, using load5.dat.

	** Added a new uADL transaction:
	<b>set_mem_serialized(&lt;manager&gt;)</b>

	This markes the current memory accesses for the instruction as
	serialized for the specified manager.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.0 (v2_1_0) on Linux (lc0090) on 2/4/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.0 (v2_1_0) on Linux (lc0090) on 2/4/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.0 (v2_1_0) on Linux (lc6001-tx30) on 2/4/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.1.0 (v2_1_0) on Linux (lc6001-tx30) on 2/4/2011 ==

2011-02-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added addr() and size() as instruction class functions which can
	be called by the user.  Got dlx2-fwd to work with in3.dat- on a
	predicted-taken misprediction, since the branch didn't update the
	NIA but the predictor had, the model was going off in the weeds.
	Fixed this by calling taken_flush with addr()+size() to update the
	NIA to the proper value.

	* Changed how reservation stations are modeled.  You now call
	operand.record_sources to record source information in the
	instruction.  This is recorded in the instruction packet's
	write-masks, but that's hidden from the user.  So, for example, if
	an instruction has a source of GPR1 and GPR5, if GPR1 is
	available, then a tag of 0 is stored.  If GPR5 is not available,
	then its last-allocator is recorded, e.g. instruction 20.  Then,
	read_avail reads all operands with a tag of 0 and then checks any
	forwarding paths for the specified tag.

	This took some rework of the forwarding path- a new set of
	accesors was added so that a tag could be supplied.  The logging
	system was also amended so that read_avail's fail could be logged.

	dlx3 now passes in4dat.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.5 (v1_8_5) on Linux (lc0100) on 2/2/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.5 (v1_8_5) on Linux (lc0101) on 2/2/2011 ==

2011-02-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified uadl's logging system.  The listing of instructions in
	a stage was done on an absolute basis, e.g. position 0 always
	reported first, so instructions could be listed out-of-order,
	since their true order is dynamic, based upon _head and _tail.
	Fixed this by having the StageLogger maintain its own list, which
	is set up by each call to StageInstrLogger::report().

	* Forwarding paths now support the <b>broadcast</b> flag.  If set
	to true, then tags are not checked.  This can be useful for
	modeling a completion bus, which broadcasts to multiple
	instructions.

	* Register resources were modified so that can_alloc will return
	true if the instruction requesting the value is the same as the
	last-allocator.

	* Note: The out-of-order support is currently incomplete.
	Reservation stations are not modeled correctly, so ooo1.dat
	passes, but a slightly more complex test will fail.  This will be
	fixed next.

2011-02-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new uADL cache parameter has been added:  
	store_buffer_size = &lt;int&gt;

	This parameter allows the user to set the maximum size of the
	store buffer.  If set to 0, then no size check is performed.

	** A new uADL predicate has been added:
	next_level_actions_empty(&lt;cache&gt;).

	This takes a cache manager as an argument and returns true if the
	cache's next-level-actions queue is empty, e.g. no linefills,
	evictions, etc. are currently active.

2011-01-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

 	** Two new uADL predicates have been added:
	<b>is_cur_memrequest_misaligned(mask)</b> and
	<b>is_cur_memexec_misaligned(mask)</b>.  While the original
	<b>is_misaligned(mask)</b> predicate checks the misaligned status
	of the first memory request for an instruction, this checks the
	current memory request and next-to-execute memory access,
	respectively, for its alignment.

2011-01-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial support for out-of-order architectures.  Each stage can
	now have three types of scheduling, as specified by "scheduler =
	<ident>".  These are: dependent (default), lock_step (used to be
	lock_step=true) and independent.  The last one is new, and means
	that the stage acts like a queue, but we iterate over 'bandwidth'
	elements, acting on any that allow it.

	Next, 'shared=true' was added for stages, allowing an instruction
	to be added explicitly to a shared stage.  That stage only acts if
	the instruction lives in that stage for that cycle.  This allows a
	stage to act as a re-order buffer.

	Finally, added the read_avail function for operands, which acts
	like can_read_fp and read.  It attempts to read the sub-operands
	if they haven't already been read, then returns true if everything
	has been read.  This allows a state to act like a reservation
	station, monitoring a fowarding path (implementing a completion
	bus).

	Out-of-order/speculative-execution support is currently limited to
	normal-mode models so that we can flush w/o updating architectural
	state.  Eventually, we can implement rollback to handle this in
	safe-mode, but I probably won't bother until and unless it's
	needed for performance reasons.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.4 (v1_8_4) on Linux (lc0100) on 1/26/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.4 (v1_8_4) on Linux (lc0101) on 1/26/2011 ==

2011-01-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified the various autoconf input scripts so that the autoconf
	substituted variables are in single-quotes so that weird pathnames
	won't be interpolated by Perl.

	** The uADL parser has been modified to allow memory inquiry
	operations, e.g. request_queue_empty and request_queue_inactive,
	to use other than just the top-level memory.  This allows, for
	example, a model to inquire about a memory, even though the design
	may have a cache.

	* For the above, I modified tests/uadl-fe/in32.uadl to test.  The
	parser hardcodes in what inquiries are allowed.

	* The UVP writer used to complain if it couldn't create a
	translation for the NIA's final value for the RES card.  This
	created a problem if a design had an MMU, but its use was
	optional.  I changed the UVP writer so that it now uses ra=ea if a
	translation doesn't exist.  Modified mod52.adl and added
	in216.dat/in216.uvp to test this.

2011-01-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The logic for calculating masks for indexed register files, when
	the option to log register-access masks, was wrong; we were
	completely ignoring the indexed nature of the access.  Fixed this
	and modified mod10.adl so that mod10 logs register reads and
	masks.  Added iss/in215.dat to test.

	* Fixed a problem with compiling multi-file trace-cache models
	on Visual C++.  Unlike gcc, MSVC doesn't like to have the
	attributes only on the decl; it complains about a mismatch between
	the decl and defn.  So, I had to add in an extra attribute that's
	only defined for MSVC in order to get it to compile.  I modified
	scripts/win-test-setup to create the model as a multi-job file in
	order to test this on Windows from now on.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.3 (v1_8_3) on Linux (lc0100) on 1/20/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.3 (v1_8_3) on Linux (lc0101) on 1/20/2011 ==

2011-01-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new uadl cache parameter has been added:
	<b>consecutive_linefills = &lt;bool&gt;</b>.  If set to true, the
	first request of the next linefill will be sent as soon as all
	requests for the current linefill are complete, even if not all
	data has been returend.

	* For the above item, only one extra request is currently
	supported.  This should be enhanced to support an arbitrary
	number, so that longer memory latencies can be handled.  TODO:
	Add a regression for this!

2011-01-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The allow_bus_wait flag for uADL memory configurations can now
	be specified on a per-port basis.  If specified at the
	memory/cache level, the setting applies to all ports.

	* To implement the above, the _waitingRequest item has been moved
	into the MemoryPort data structure.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.0.1 (v2_0_1) on Linux (lc0100) on 1/14/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.0.1 (v2_0_1) on Linux (lc0101) on 1/14/2011 ==

2011-01-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug when generating a model w/trace-cache across
	multiple files.  The declaration for TraceFunc specified fastcall,
	but the actual function definitions didn't use fastcall.  This
	caused a segfault due to the different calling conventions.  Fixed
	this by changing the definitions to use fastcall.  Added
	tests/scripts/mod1-jobs to test this.

2011-01-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new MMU test has been added:
	<b>Bounded(&lt;lower-bound-expr&gt;,&lt;lower-bound-expr&gt;)</b>

	This allows a TLB to match an effective address against an
	inclusive range defined by the <i>lower-bound</i> and
	<i>upper-bound</i> expressions.  This is similar to just using the
	<b>Check</b> test, except that the ISS generator is able to
	understand the bounds of the match and thus cache the hit for
	faster subsequent lookups.

	** When defining a TLB (lookup), it is now valid to omit the size
	and real-page parameters.  The resulting lookup will then perform
	no address translation, but still perform a search so that
	permissions and hit/miss hooks will be called.  This makes it
	possible to model a memory-protection unit which does not perform
	any translations.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.2 (v1_8_2) on Linux (lc0100) on 1/12/2011 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.2 (v1_8_2) on Linux (lc0101) on 1/12/2011 ==

2011-01-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A simple mechanism for communication between the ISS and a uADL
	model has been added.  Within the ISS, action code may call
	<code>setExtInstrFlag(unsigned)</code> to set the communication
	flag or call <code>getExtInstrFlag()</code> to retrieve this flag.

	Within the uADL model, the predicate <code>instrFlag</code> may be
	used to retrieve this flag.  This predicate may be used as an
	argument to a helper function call.  Refer to
	<i>tests/uadl/mod11-uadl.adl</i> and
	<i>tests/uadl/dlx_bp_fetch_safe.uadl</i> for an example of how
	this may be used.

2011-01-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Integrated in the memory changes found in the 1.x trunk
	(per-port max-requests).

2011-01-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/uadlMemory.h (uadl): Fixed an issue with handling per-port
	requests.  When adding in the extra bus-cycle request, we weren't
	modifying the request count on the relevant port.

2011-01-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Turned off cache logging for performance caches, to avoid
	duplication of logging data in iss-mem-mode.

	* We had a bug when generating trace-cache code for conditional
	branches: If a conditional branch had no translation-time
	conditionals, then we only emitted a version which didn't return
	the branch-taken status, causing a compiler error.  Fixed this by
	always emiting the boolean version if it's a conditional branch
	and storing the function's name in InstrSym::_alt_exec.  Modified
	mod3 to add instruction "bc2" to check this.

2011-01-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** In order to model the z420's pipelined cache w/non-pipelined
	Harvard memory, I added the ability to specify a maximum number of
	requests on a per-port basis, plus the ability to combine port
	bandwidths together.  In a port definition, you can now have the
	following:
	<pre>
        define(port D) {
          bandwidth = 1;
          max_requests = 1;
        }
	</pre>
	By just using <b>bandwidth</b>, rather than <b>data_bandwidth</b>
	and/or <b>addr_bandwidth</b>, both address requests and data
	accesses are combined into the same bandwidth quantity.
	Specifying <b>max_requests</b> tracks the total number of requests
	for the port.

	* Added dlx-cache-split-pc.uadl and load2.dat to test the above.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.0.0 (v2_0_0) on Linux (lc0101) on 12/7/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 2.0.0 (v2_0_0) on Linux (lc0100) on 12/7/2010 ==


2010-12-07  Brian Kahne  <bkahne@lc0098>

	* Minor modifications to get the regression to pass with a
	separate build directory.

2010-12-06  Brian Kahne  <bkahne@lc0098>

	* uadl/UadlParser.C (uadl):  The full-path-errors option for
	make-uadl now controls whether full paths are printed when dealing
	with custom resources, in order to get the regressions to pass for
	"make distcheck" and installation.

2010-12-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** This is the first release of the ADL 2.x series.  This includes
	uADL2, a new version of the uADL micro-architecture description
	language.  The basic concepts of uADL2 are the same as uADL, but
	the language has changed to increase modeling flexability and to
	enable various performance improvements.  Please refer to the <a
	href="http://cad.freescale.net/adl/chrome/site/uadl2-manual.html">the
	uADL2 Manual</a> for more information.

	The 1.x release series will be maintained in parallel until all
	legacy models have been ported.  The functional language (ADL) is
	the same between both releases.

	* configure.ac:  Updating version to 2.0.0 to designate the new
	version of uADL.

	* Documentation updates.

2010-12-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Documentation updates.

	* We weren't properly handling the removal of fetch exceptions.
	If a processor had fixed-width instructions, then
	DefaultFetchUnit::removeInstr was still removing an item, even if
	the size was 0.  Now it returns if the size is 0.  However, I had
	to change the transactional-ISS generator so that decode-misses
	have a size of the maximum-instruction size, since now a value of
	0 means that no data will be removed from the instruction buffer.

	* We had a subtle bug in forwarding paths:  can_read_fp, for
	multiple sub-ops, was returning 'true' for a partial can-read
	operation, rather than returning only false, and continuing on to
	check the other sub-ops on a true condition.

2010-12-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/GenCode.C (uadl): We could get a segfault if a branch
	flushed a pipeline and it contained a fetch exception.  Modified
	the instruction object's size method to make sure that an
	instruction actually existed.

2010-11-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added checking to the uADL front-end to make sure that, if state
	actions exist, a call to exec() exists.  Not calling exec() can
	mean that safe-mode models don't handle exceptions, causing
	problems b/c the speculative flag is never cleared.

	* The basic instruction type now has an extra pointer for storing
	fetch-exception data.  This stores logging info and various fetch
	exception stuff such as the exception flags and exception data.
	Previously, this was stored in core member variables, but logging
	for fetch exceptions just wasn't right.  Now, proper DAT and UVPs
	are generated (E : F cards for UVPs).  Some extra logging helper
	methods were added to the ISS to make this easier.  The fetch
	exception data is simply heap allocated with new, because fetch
	exceptions shouldn't be common, so optimizing performance isn't
	necessary.

	* Logging was modified slightly- the base class for transactional
	logging just contains minimal information, rather than a complete
	InstrPacketBase, so that this class can be re-used by other
	things, such as the fetch-exception object mentioned above.

2010-11-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* test-build was updated so that it checks or another running
	test-build in the same environment and kills it if it exists.
	This way, if a nightly regression is hung, the next night will
	kill it and start over.

	* rdriver.pm now supports a -p=n or --parallel-run=n option to
	fork child processes for running regressions.  This is similar to
	using the --lsf option, except that all processes are run on the
	current host, and so a sandbox may exist on a local dis.

2010-11-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We now detect when a state might throw an interrupt (any call to
	exec) and then check to make sure that an exception state exists.
	If not, an error is generated.  We also only generate exception
	handling code if necessary, e.g. an exec call exists.

	For safe-mode, a speculative tag was added to store the
	instruction's id that sets the speculative flag.  If the flag is
	set, then the tag must be equal to an instruction's id for branch
	behavior to take effect, e.g. exec_branch() to do anything.  This
	avoids situations where one instructions sets the speculative
	flag, but then another instruction acts upon it.

2010-11-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new key has been added for instructions and architectures:
	<b>reserved_bits_value = &lt;0|1&gt;</b>.  By default, reserved
	bits in instructions have a value of 0.  This flag allows this to
	be changed to a value of 1.  This may be set globally or on a
	per-instruction basis.

2010-11-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a problem with multi-issue and fowarding paths.  It was
	possible for an instruction to write to a fp, then another
	instruction would allocate that same register, but a second
	instruction would see that the fp was still valid.  Fixed this by
	modifying registers to contain a last-allocator tag, and added a
	tag to forwarding paths.  The two must match in order for an fp to
	have a valid value.

	* Modified the prefetch function generator in GenInstrs.C so that
	we can toggle whether the cia should be incremented.  uadl2
	handles this itself and this increment was causing incorrect
	behavior when an issue was delayed.

2010-11-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Turned off log-usage for mod1-simple, which should reduce
	Subversion conflicts, since the version number (the date) was
	changing each time.

2010-11-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL now allows the user to control group membership and aspect
	expansion by specifying attribute values.  Previously, an item
	could only be selected, or aspect expanded, by specifying whether
	the relevant item had an attribute.  Now, the user can test that
	the attribute exists and has the specified value.  For example:
	<pre>
	define (group = g2) {
	  has_attrs = (left("a"),right("b"));
	  type = instr;
        }
	</pre>
	This will select any instruction which has an attribute named
	<b>left</b> with a string value of <b>"a"</b> or an attribute
	named <b>right</b> with a string value of <b>"b"</b>.

2010-11-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added a new fetch-unit method, set_cancel, to allow for control
	over the cancel policy before doing a flush.

	* The flush() function now works for safe-mode and a new method,
	set_speculative(), was added so that an instruction class, for
	safe-mode, can shut off execution if it knows it's going to flush
	the pipe.

2010-11-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The MMU lookup (TLB) definition has been modified so that the
	priority value may be set to <b>ignore</b>.  When such a value is
	specified, the TLB is not used in the general address translation
	process, but it still generated, so it may be referred to directly
	within action code.  This allows a TLB to be used as a general
	mechanism for storing values in a table.

2010-11-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added an additional check to the uadl front-end to make sure
	that all to-states are defined in the instruction-class.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.1 (v1_8_1) on Linux (lc0101) on 11/4/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.1 (v1_8_1) on Linux (lc0100) on 11/4/2010 ==

2010-11-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/make-release-notes: Fixed the date format b/c use of '/'
	as date delimiters doesn't seem to work with Trac 0.12.  Replaced
	it with yyyymmdd style of date.

	* Modified adl2doc so that it can accepta .rst or .html input
	file- it then runs only those steps requird, e.g. html generation
	and/or pdf generation.

2010-11-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* helpers/LogUsage.C (adl): Usage logging had been disabled for
	some reason.  It has now been re-enabled.

	* Modified disassembler.h so that it works in C or C++.

2010-10-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We now support overriding states in an instruction-class on a
	per-state basis using defmod blocks.  This was done by changing
	InstClass::_action_block to a vector, and then processing all
	items stored in the vector.

	* Added memory aliases:  define (mem_alias) { src = trg; ... }
	The idea is that the user can write a uADL description using a
	memory alias, then define a memory alias, in order to reduce code
	duplication.  For example, all load/store classes might refer to
	'Mem', but then 'Mem' might be an alias to L1d or to Mem.D,
	depending on the model.

2010-10-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in extra regressions to test various bugs fixed when
	testing the z0 in uADL2.

	* We had a bug with alias register files: We weren't handling the
	aliasing properly in forwarding paths, e.g. with the rGPRs for
	VLE.  Fixed this by adding a index-mapping function to all
	register files and calling that in the operand classes so that the
	forwarding paths see the correct index.

	* Instruction attributes were not being handled correctly by
	uADL2.  For exceptions, in safe or normal models, we weren't
	setting the packet before calling genException.  For safe-mode
	models, the hybrid ISS was using a class member variable for
	attributes, which didn't really work correctly; changed this to
	use the value in the instruction packet.  Added iss/in213.dat to
	test this.

	* Memory packets were not being properly cleaned up, resulting in
	assertions for long tests.  Instructions which had memory accesses
	but then took an exception weren't freeing their packets.  Also,
	discarded instructions weren't freeing their packets.  Added a
	special free-all method to PacketPool and discard now calls this,
	plus the commit state frees any remaining memory.  Added
	uadl/loadstore6.dat to test this behavior.

	* In order to be able to quickly free multiple memory accesses at
	once, I modifed how cache hints are stored: Rather than being
	allocated each time, they are pre-allocated for all memory
	accesses.

2010-10-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The can_read method of operands which are targets is now
	implemented, so that a read-modify-write situation can be
	modelled.  This means that querying can_read on a mixed
	source/target operand might now block- it might be required to
	differentiate between the two, as was the case for dlx2, where I
	broke Flags into SrcFlags and TrgFlags for the sfx class.

2010-10-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added a new type of resource: flag.  This is equivalent to a
	semaphore with a value of 1, except that it may be released in the
	future by calling deallocate with a value, e.g. flag.deallocate(2)
	releases the flag 2 cycles in the future.  This allows an
	instruction to influence others even though it may have been
	committed.

2010-10-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug in uadl models, when dealing with variable-length
	instructions.  We weren't updating the fetch unit with the
	just-decoded instruction's size.  Fixed this and added vle2.dat to
	test.

2010-10-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added additional syntax to operand specifiers so that an
	explicit target or source specifier may be set,
	e.g. (GPR(RT),source) or (GPR(RT),target).  This way, the user can
	handle instruction fields which are both souces and targets.

	* If only one machine is given in a design, then instruction
	classes need not specify a machine- that single machine is used.
	If more than one exists, then a machine must be specified.

	* Modified instruction class code generation in order to reduce
	redundancy.  I used to generate unique classes for each and every
	operand for every instruction.  Now, operands are cached according
	to their operand and slot allocations.  Before generating, I do a
	search to see if something equivalent already exists.  If it does,
	then only a typedef is inserted.  This reduces code size by ~50%,
	in some cases.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.0 (v1_8_0) on Linux (lc0100) on 10/18/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.0 (v1_8_0) on Linux (lc0101) on 10/18/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.0 (v1_8_0) on Linux (lc0100) on 10/18/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.8.0 (v1_8_0) on Linux (lc0089) on 10/18/2010 ==

2010-10-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Safe-mode models no longer store data in their caches, since the
	data was never really used anyway.  Same for performance caches-
	that was the case, but I regularized the mechanism for including
	data somewhat in GenCaches.C.  The DatWriter will omit the 'd' key
	in 'CD' cards if there is no data.

	* tracediff will remove CD data in expects if it's not in the
	found file, so that you can compare a safe-mode results file with
	an expects file that might have data in its CD cards.

	* Added instruction-class attributes.  The old key of 'attrs',
	which was used for instruction selection via attributes, is now
	"instr_attrs" and can handle multiple attributes.  Now, the key
	"attrs" is used for assigning attributes to instruction classes.
	These attributes can then be queried in action code by calling
	PipelineStage::has_attr(index,attr) or just
	PipelineStage::has_attr(attr), where the index defaults to 0.
	This allows for the simplification of multi-issue tests, for
	example, because you can just query for a single attribute, rather
	than a series of classes.

2010-10-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The <b>IssNode</b> API and scripting interface have been
	updated to support the direct execution of instruction words,
	bypassing fetch logic.  This allows an external application or a
	TCL script to emulate an external debug mode of a processor, where
	instructions are directly injected.

	The new method is <code>IssNode::exec_from_buffer</code> and the
	new scripting function is called <code>ijam</code>.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-integration.html">the
	ADL integration guide</a> for more information about the API
	changes and refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-cli-interface.html">the
	ADL scripting guide</a> for more information about the scripting
	interface changes.

	* The implementation of these features required splitting the
	simulate() function into two functions:  simulate(), which handles
	the fetch, and exec(), which handles the actual execution.
	exec_from_buffer() calls exec(), as does simulate().

2010-10-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uADL caches configured with linefill_lazy_writeback = true
	didn't flush the final linefill buffer to the cache, resulting in
	incorrect cache state.  This doesn't affect functionality, but
	meant that the final report of memory state for UVPs was wrong.
	Fixed this by adding a uadlArch::afterSim(), which is populated
	with calls to Cache::afterSim() which will perform the write-back
	if necessary.  Added cache3.dat with dlx_cache_unified to test.

2010-10-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/TransactionCodeGen.C (uadl): Modified grouped reads and
	writes to remove extra transactions from the relevant memory.  The
	problem was that a misaligned, grouped transaction might leave a
	final memory request lying around, which would clog up the system.

2010-10-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I no longer use PtreeUtil::GenSym() for symbol creation.
	Instead, I now use AdlGenSym in Types.h.  This is much simpler and
	just uses a single counter value.  That way, symbols are
	deterministic and thus two files generated from the same source
	will be the same.

	* Added in guards for dynamic parameters with caches.  If dynamic
	parms are used, then these guards are set, which disables
	model-based updates of cache parameters.  Added iss/in211.dat to
	make sure that dynamic parameters will take priority.

	* Performance caches now use the respective non-performance's
	parms for setting the size (in the case that these are dynamic).
	Added uadl/dynparm2.dat to test that the two caches are kept in
	sync.

2010-10-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added a new flag, allow_extra_operands, at the instruction-class
	level.  If true (default), then we allow there to be operands
	which aren't used by all instructions.  allow_missing_operands has
	changed so that it only produces an error if an instruction has an
	operand that doesn't map to a listed operand.  Default is true.

	* Added a new uADL core-level flag, allow_unimpl_instrs.  Default
	is false.  If false, then any instructions which exist in the ADL
	core but not in any instruction class generate an error.

	* Added a new pseudo-instruction, default_instruction.  Any
	instructions not listed in any other class are added to the class
	containing default_instruction.

	* I changed commit_on_exception to be true, by default, so that
	the default behavior is more intuitive.

	* Added Dhrystone regression, using the z0 model.

	* Added support for external exceptions.  This is basically the
	same implementation as in the original uADL, but the big
	difference is that I simplfied things by removing the
	_externExceptionMask member from uADL.  It was basically redundant
	wrt. __pending_exception_flag.  Now, ADL is configurable about
	whether __pending_exception_flag is cleared when an exception is
	set in __exception_flag.  For uADL2, this is turned off, so that
	__pending_exception_flag represents the level-sensitive exception:
	It will keep re-firing until it's canceled.  Various helper
	methods were added to re-set the exception on each cycle.

2010-10-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Scrubbed front-end regressions, adding in anything that was
	removed during development of uADL2.

2010-09-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Added a new tracediff option:
	<b>--map-core-name=&lt;initial&gt:&lt;final&gt;</b>. This maps CORE
	names from initial to final during parsing, allowing two DAT files
	to be compared which might have different core names.

	** Added a new option for standalone models:
	<b>--dat-map-core-name=&lt;initial&gt:&lt;final&gt;</b>.  This
	maps CORE names from initial to final during parsing, allowing a
	DAT file to be used by a model which might have different core
	names from what the model has.

	* Fixed an issue with performance caches: The had their own member
	variables for set-size, etc., which meant that dynamic parameters
	weren't really working correctly, since a dynamic parameter change
	would update the "real" cache and not the performance cache.  Now,
	the performance caches use the member variables of the real cache,
	so that they're in-sync.

	* Implemented -iss-mem-mode for uADL.  Added in the appropriate
	tests.

2010-09-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in some of the tests/scripts uADL shared-object tests.
	For dyntest, I changed it so that the memory object is allocated
	on the heap.  This appears to fix a weird glibc heap corruption
	error that seemed to be a result of some ordering problem with how
	the dynamic linker schedules cleanup.

	* Added support for external memories.

	* Added in SystemC support.  The --systemc option now takes an
	optional value of 'thread' or 'method' to indicate the type of
	interface to create.  If just --systemc is used, then it defaults
	to 'method'.

2010-09-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The assembler has been extended so that it will detect
	situations where operand must have the same value and will reject
	an instruction if this is not the case.  For example, an
	instruction may have a syntax string which implies that two fields
	must have the same value:
	<pre>
	syntax = ("add %f,%f,%f",RA,RA,RT);
	</pre>
	The assembler will check to make sure that the first two operand
	values are the same and reject the instruction if not, allowing
	the search to continue for another version of the instruction.

	* To implement the above, an additional checker, designed to
	search across arguments, was added to adl_opcode, called
	argchecker.  We check to see if any fields are repeated in the
	instruction stream and create an argchecker if this is the case.

	A more general solution would be to allow users to use assembly
	rules for this, using pseudo-fields for the initial input data.
	Right now, however, rules are only designed to signal errors and
	are called after the instruction is saved.  To allow rules to
	reject an instruction, we'd have to change when the rules are
	called, and change how we save instruction data, so that it can be
	ignored if an instruction is rejected.

	** The temporal-decoupling API is now enabled by default for
	trace-cache models.  ADL now uses this API to implement
	the <b>--max-instr-count</b> option for standalone ISSs.

2010-09-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for memory ports.  The user can refer to memory
	ports using the usual dot notation: Mem.D.can_request_read(), etc.
	Added uadl-fe/{in18.uadl,in19.uadl} to test front-end parsing and
	added uadl/dlx-hrvd.uadl to test functionality.

2010-09-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed another inline issue causing problems with -O3.

	* The multi-file code changes were breaking with optimization due
	to an inline keyword being used.  Fixed it- wrappers are now not
	inlined, since the simulate() function refers to them and it's in
	another file.

2010-09-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* In order to get large trace-cache models to compile on Windows,
	all instruction-related functions are now distributed across the
	implementation files for multi-job, low-mem models.  I also
	converted the trace-cache handlers into non-member functions in
	order to stay below what appears to be an internal compiler limit,
	in MSVC2008, on the max number of methods in a class.

2010-09-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with forwarding paths: We weren't making sure that a
	read-query checked to make sure that the mask was not set.  It
	only checked the id and index, so a partial value in a fowarding
	path could be mistaken for a full value.

	* Modified operand handling, so that a duplicate operand for an
	instruction class, if it differs only by a mask, will overwrite
	the old value.  So, you can now say "Src = sources; Src =
	(CR,0xf0000000);" and there won't be duplication.  Added
	uadl-fe/in18.uadl to test.

	* There's a slight discrepancy now between uADL and uADL2: Partial
	writes to fowarding paths use the dynamic mask in uADL, making it
	hard to avoid partial-update semantics if you don't want it.  In
	this case (dlx-all w/in4.dat), the old way meant that there were
	extra stalls b/c bc tried to read CR from FwdEX, but couldn't
	because it thought that FwdEX contained only a partial value set
	by cmpi.  With uADL2, cmpi writes the full value.  If we need to
	support this behavior, we may need to add a special keyword,
	e.g. "dynamic" as a mask value, so that the sub-operand mask
	function queries the instruction packet to get the current mask,
	rather than using a constant.

	* I had to change how the branch predictor is queried.  Previously,
	this was done by checking a _last variable, which stored the last
	prediction.  This, however, was fragile, as slight changes in
	fetch behavior could change the results.  The PredictData object
	now contains a _pred member to store the last prediction.

2010-09-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added deadlock detection and recovery (in safe-mode).  Added
	dlx-stall.uadl to test.

2010-09-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Minor fixes to adl2iss and uadl2model: If we're not generating,
	i.e. the user has specified .cc files as input, then we ignore
	--src-prefix.  We also only append -so if it doesn't already
	exist, so that the above situation doesn't result in an extra -so
	being added on.

	* Fixed a bug with hybrid or transactional ISSs and the use of
	table-based instruction fields.  The operand's index value was not
	properly set; the instruction field itself was properly converted,
	but the function-call syntax to access the table wasn't modified,
	so the result ended up being a single-bit access of the result.
	Changed this so that we now transform this into the table call, so
	that the index is set appropriately.  Modified mod69.adl to test
	(using in210.dat).

2010-09-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added the is_inactive memory transaction and added dlx-stwcx to
	test this.

	* dlx-l2 regressions added for normal and safe-mode models.  Fixed
	a code generation bug: Caches need to execute in their sorted
	order in the post-cycle routine, but reverse order in the
	pre-cycle routine.

2010-09-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I re-did the dlx-cache-split[-safe] tests to turn on the caches;
	CCR wasn't set, so the caches weren't on.  I found that some
	timing differences showed up because in the original uADL,
	send_read_request_queue_inquire, in safe-mode, behaves differently
	and returns false if any other instructions in the pipeline are
	not yet done with their memory accesses.  I don't like this,
	because it doesn't work for normal mode and it's implemented
	rather inefficiently, so I skipped it.  We might have to revisit,
	but I think the best solution is for the user to use a semaphore
	to signal this behavior.

	* Fixed a bug with cache sorting behavior: We should be iterating
	over the sorted cache list in reverse, so that the L2 acts before
	the L1s do.  dlx-l2 is now built, but we don't have any
	regressions yet.

	* uADL's decr_latency() now checks to see if _latency is 0 and
	doesn't decrement if it is.

2010-09-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for cache hints for supporting safe-mode models
	with caches.  I had to move instruction execution in safe-mode
	models out of issueInstruction into issueInstructions, and only
	called if the init-state action returns true.  This allows one to
	model behavior, where an instruction should only issue if a
	condition is met, e.g. only issue cache instructions if the pipe
	is empty.

	* Added an internal configuration flag, ConfigDB::_skip_caches, to
	indicate if caches should be skipped in the ISS execution path.
	If set, then we'll generate all of the cache code, but mem_read
	and mem_write will go straight to memory.  This is then used by
	safe-mode uADL models, since they do their own cache management
	and the ISS simply talks directly with memory.  Added
	dlx-cache-split2-safe and the associated tests.  Cache hints,
	however, have not yet been implemented.

2010-09-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Overhauled ISS-type and memory-interface-type to separate them
	into two distinct categories, whereas before they were sort of
	munged together.  The new categories are:

	ISS Type:

	1.  tNormal:  Normal ISS.

	2.  tTransactional:   Instruction packets store operands

	3.  tHybrid:  ISS executes immediately, but tracks operands via the
	instruction packet.

	Memory Interface Type:

	1.  mNonBlocking:  Uses coroutines to interface with a performance
	model.  The performance model does all of the memory management
	work, including cache manipulation.

	2.  mBlocking:  Uses a virtual function in the ISS to handle
	memory operations.  Results must be returned immediately for the
	instruction to progress.

	3.  mLogging:  The ISS handled memory operations itself, but also
	calls a virtual function in order to communicate memory operations
	to the performance model.

	For uADL, normal mode models use tTransactional/mNonBlocking and
	safe-mode models use tHygrid/mLogging.

	Next step:  Add the ability to generate an ISS with a mLogging
	interface, but where the ISS's interface skips the caches.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.4 (v1_7_4) on Linux (lc0101) on 8/31/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.4 (v1_7_4) on Linux (lc0100) on 8/31/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.4 (v1_7_4) on Linux (lc0089) on 8/31/2010 ==

2010-08-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The post_packet_asm handler can now directly call savePrefix to
	trigger the prefix checking algorithm, which checks to see if a
	prefix is needed.  If so, then calling InstrBundle::has_prefix()
	will then return true.  Added asm54.s with mod65.adl to test this
	feature.  This is useful if a prefix field should only be set if a
	prefix instruction will be generated; normally, setting a prefix
	field would cause the prefix instruction to be generated.

2010-08-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for cache commands, such as touch and invalidate.
	Added uadl/in43.dat with dlx-cache-split to test.  Right now, dcbf
	is broken into two operations; not sure if that'll cause timing
	issues with models later.  If it does, we'll have to have a way to
	fuse a flush and invalidate into a single cycle.

2010-08-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Added a new helper function for register hooks:
	<pre>
	updateReg(const ValueBundle &);
	</pre>
	This is used for parallel-execution register and register-file
	hooks which take a ValueBundle as an argument.  This applies all
	of the ValueBundle elements to the hook's register.  The main
	benefit is that the static usage tracking will not record this as
	a full register-write.

	* Modified mod50.adl and added in209.dat to test this.

2010-08-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new InstrInfo method has been added for use by the assembler:
	<pre>
	bool InstrInfo::instrHasAttrVal(attr-name,int|string);
	</pre>
	This returns true if the instruction item has the specified
	attribute and its value matches the specified value.

	** The ADL database query tool (adl-db) has been enhanced to make
	it easier to query for attributes.  Attributes are added as keys
	into each objects' hash that is being queried.  If the attribute
	has a value, then that value is added as the key's value.  This
	allows the conditional to test for the existance or value of any
	attribute.  For example:
	<pre>
	adl-db --object=instrs --cond="exists foo" ...
	</pre>
	will select any instruction which has an attribute named
	<b>foo</b>, regardless of whether it has a value or not.  To test
	for a value, simply use an expression:
	<pre>
	adl-db --object=instrs --cond="foo > 7" ...
	</pre>

	* Modified doc15.adl to test the attribute query mechanism.  I
	also changed the Perl loading process to use "do", as this appears
	to be substantially faster than using "eval" on a string.

2010-08-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Subtle, but big change: exec_mem now adds memory transactions to
	the instruction object, rather than having this done by
	send_[read|write]_request.  The original way didn't work when
	cache latencies meant that a request might be delayed, and a fetch
	might interfere, clobbering the data memory result.
	dlx_cache_split/in18.dat tests this.  In order for this to work,
	had to introduce exec_mem_no_ma(), called by the versions of
	exec_and_read and exec_and_write which coalesce multiple accesses.
	This version does not create a new MemAccess object.

2010-08-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new instruction-field parameter has been added:
	<b>unsigned_upper_bound = &lt;true|false&gt;</b>.  This controls
	upper-bounds checking for signed immediate fields.  The options
	are:

	<dl>
	<dt>true</dt>
	<dd>
	A signed field's upper bound is considered to be unsigned.  For
	example, this allows the user to specify 0xdeadbeef as a value for
	a 32-bit immediate field, where normally this would generate an
	error, as it exceeds 0x7fffffff.
	</dd>
	<dt>false</dt>
	<dd>
	The default.  The upper bound is considered to be the maximum
	signed value.
	</dd>
	</dl>

	The <code>--ext-signed</code> assembler option has been removed.

	* Modified as-mod44 to test this new feature.

2010-08-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial cache implementation for normal-mode models.  A simple
	split-cache model (dlx-cache-split) has been implemented, which
	uses mod21-uadl.adl as the model, and dlx-cache-split2 which uses
	mod23.adl.  Still to do:  Cache operations, basic safe-mode,
	cache-hints for mmu attribute tracking, etc.

2010-08-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uADL would get stuck in an infinite-recursion loop and segfault
	if a register had a write hook which just wrote itself.  This was
	caused by changes to how we did resource tracking for register
	hooks, needed by StarCore.  I added code to allow uADL to exclude
	hook resources from the alias-resolver functions and from being
	considered an alias, when uADL is generating the ISS.  Added
	oprnd4.dat with dlx_bp_fetch_safe to test.

2010-08-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The adl-db's handling of encodings has changed: If a field has
	an opcode value, then for bin-fields encoding, the field name,
	bit-range, and value will be printed, rather than printing just in
	binary.  For long-fields encoding, we print each bit of the field,
	followed by the value for that bit.  Added docs/doc17.adl to test.

	* Added instruction-field attributes to the ADL database.
	Modified adl-db to handle instruction fields in a more regular
	way- only if the --expand option is set is the special expanded
	mode entered; otherwise they behave as normal.

2010-08-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tracediff was clobbering register-write R cards with
	register-read R cards.  I changed it so that it now ignores
	register-reads.  It also only compares 'dt' data if both sides
	have it.  Added trorig8.dat/tr24.dat to test.

	* We had a bug with our decode logic, when extra fetches were
	required.  The problem occurred when an extra fetch was required
	up front, but then when data could be re-used later on,
	e.g. the first set of opcode bits were in word 2, but then another
	set was in word 1.  We weren't properly keeping track of what bits
	we had fetched, so we'd re-fetch, but overwrite existing data,
	causing errors.  Added mod71.adl with asm53.s to test this.

	* The DAT writer was not printing dependency-data (dt) with
	decimal encodings, causing readability issues.

2010-08-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* misc/dbgen.C (adl): We had a bug with genInstrAlias, where we
	were using usage information form the alias's target for
	generating sources and destinations data, rather than using the
	alias instruction's own usageinfo, which takes into account
	constant propagation for conditional evaluation.  So, it was
	possible that extra destinations or sources could show up which
	don't belong.  Modified docs/doc14.adl to check for this.

2010-08-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/ModelSupport.h: I moved ExHandle routines into
	ModelSupport.C and removed the inline keyword in order to avoid
	some annoying linking issues: If you tried to include
	ModelInterface.h in an unoptimized client, but link against an
	optimized version of ADL, various ExHandle routines wouldn't be
	present, causing linking errors.

	** ADL now supports data dependency tracking.  ADL model writers
	add information about data-dependencies to instruction definitions
	via the <b>dependencies</b> key.  A model which contains this
	information and is built with <b>--dep-tracking</b> will then
	support this feature.

	The basic idea is that writes are correlated with reads via
	sequence numbers.  A memory or register sequence number may be
	queried by calling <code>IssNode::get_reg_seq_num()</code> or
	<code>IssNode::get_mem_seq_num()</code> during a read logging
	event.  During a write logging event, a the current dependency
	list may be queried by calling
	<code>IssNode::get_last_dependencies()</code>.  This returns a
	list of items containing dependencies, correlated by sequence
	number.

	Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information about the ADL
	language changes, refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-integration.html">the
	ADL integration guide</a> for information about the model API, and
	refer to <a
	href="http://cad.freescale.net/adl/chrome/site/dat-format.html">the
	DAT format guide</a> for information about changes made to the DAT
	format to display this information for debugging purposes.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.3 (v1_7_3) on Linux (lc0100) on 8/13/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.3 (v1_7_3) on Linux (lc0101) on 8/13/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.3 (v1_7_3) on Linux (lc0089) on 8/13/2010 ==

2010-08-13  Brian Kahne  <bkahne@lc0101>

	* iss/tracediff.C (adl): Fixed a conflict with llabs.  For gcc
	3.4.3, there apparently exists a conflict between a header in
	/usr/include and a header that comes with the compiler.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.3 (v1_7_3) on Linux (lc0101) on 8/13/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.3 (v1_7_3) on Linux (lc0100) on 8/13/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.3 (v1_7_3) on Linux (lc0089) on 8/13/2010 ==

2010-08-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in front-end support for dependency tracking.  Added
	fe/dep1.adl and fe/dep2.adl for front-end regression testing.

2010-08-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* uadl/GenCode.C (uadl): made no_move_p static to fix a 64-bit
	build problem.

2010-08-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Implemented custom resource managers.  Modified
	uadl-fe/in12.uadl (and others) to test basic parsing.  Added
	cr1.dat to test functionality with dlx-fwd.uadl.  This will parse
	the header to extract template and constructor information so that
	parameters will be used appropriately.

2010-08-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The assembler is case-insensitive for instruction names and it
	implemented this within GAS's line reader.  However, this only
	worked for the initial instruction on a line; subsequent
	instructions within a packet would not be properly lower-cased.
	Fixed this by making the assembler case-sensitive so that we don't
	incur the lowercasing overhead twice, then modified
	handle_prefix_values to lowercase each word it encounters.
	Modified iss/asm39.s to test this.

2010-08-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added doc/adl-db.rst to describe the ADL database format.

	* Modified the database so that the disassembler option now prints
	"true", "false", or "prefix", since it is now not a simple boolean
	value.

2010-08-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The uadl2model script now works with the uadl2.  Both uadl2model
	and adl2iss have been updated so that the parallel-build option
	can be used to specify a max number of parallel build jobs.

	* make-uadl now supports generating separate files for each
	instruction class.  More than one instruction class will be
	grouped into a single file, however, if a single instruction is
	mapped to multiple classes due to operand constraints.  make-uadl
	lists the files it generates; this is then read by uadl2model to
	know what files to compile.

2010-08-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for decode-miss modeling using the
	pseudo-instruction "decode_miss", which acts just like
	"fetch_exception" in that it can be used as an instruction in a
	class.

	* Added support for register-file aliasing, such as that used by
	VLE, in which a register is aliased on a per-index basis.  Added
	dlx-vle and dlx-vle-safe to test this behavior and fetching of
	instructions of different lengths.

2010-08-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified dlx-fwd to use mod1-fwd.adl, which adds some
	condition-register instructions.  This allows me to test
	partial-value forwarding.  Added uadl/fwd5.dat to test some of
	this.

2010-08-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/make-release-notes (get_bug_csv): The release notes
	script now requirese the use of Trac >= 0.12 so that we can use
	the date-range syntax of the query language.  This means that we
	no longer have to rely upon a special report identified by a
	number.

2010-07-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Operand values can now be queried in safe-mode.  We figure out
	what instructions need to have their operands read, and a call in
	the exec function is made to do that.  Added dlx-z0-safe tests.

	* Modified uadl/BookeAlu01 to have timing data.  dlx-z0 passes
	with the timing data (generated from the original Zen0 model).

2010-07-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The main makefile now supports a new target, side-dist, which
	creates a side distribution and places it in the release
	directory.  The side-release version is expected to be conveyed
	to make via VERSFX.  install-proj, for a side release, calls
	cadinstall with this as an additional target.

	** Aspect expansion has been enhanced so that aspects which match
	against nested instructions will expand within their parents'
	action code, if the nested instruction does not itself have action
	code.

	* iss/GenInstrs.C (GenInstrBase):  Fixed an error with multi-file
	code generation:  The fieldid-getter and attribute-getter
	functions emitted "static" even when just a definition, resulting
	in a compile error.

	** ADL's system-call support now supports a
	get-current-working-directory (getcwd) system call).  The system
	call number is 183 and takes the same arguments as the standard
	function: A buffer pointer and a buffer size.  The return is 1 for
	success, 0 for failure.

	** ADL now correctly translates newlib fcntl flags to the native
	platform's values so that file opening operations will behave as
	expected, e.g. the standard fopen(<file>,"w") will open a file
	with <b>O_CREAT|O_TRUNC|O_WRONLY</b>

	* Fixed an error with field-id getter functions:  We were not only
	translating an expression and storing a field-id, but also
	printing out constants, which didn't make sense.  This could
	result in bad output.  Changed this so that the FieldIdWalker
	stores the field that's encountered, then just that is emitted.
	Updated smdriver to test field printing using getInstrFieldData
	and field-id getter functions.

	* Changed OpInfoM so that it contains a boolean to indicate which
	element refers to the operand in the instruction-packet slot.  If
	true, then the read/write masks for the slot should be used.
	Otherwise, the mask in the OpInfoM is valid.

	* Added reg-read support to the scripting language for callbacks
	and set/clr filtering options.

2010-07-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Major update to forwarding paths to support partial writes.
	They now store masks and the generated logic for reading them
	supports partial access checking, including accumulating bits from
	the actual register and multiple forwarding paths.  This hasn't
	been fully tested yet- that'll be next.

	* uadl/RegResource.h: Once we find a matching element, we
	shouldn't match again, since there might be multiple instances of
	a mask as a target.  We were matching multiple times, resulting in
	an empty partial mask, which meant we thought the register wasn't
	allocated.  This is tested with dlx-z0 with BookeAlu01.dat.

2010-07-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merge from trunk.

2010-07-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The tracediff --remove-consecutive-mem didn't work properly for
	stores, since it kept the initial value for a duplicated address,
	rather than the last.  I changed this so that we overwrite on a
	duplicate address.  Modified tr23.uvp regression to test this.

2010-07-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Minor updates to get dlx-bp-issue working.  This basically meant
	adding a "predict" interface to the branch predictor and allowing
	the user to specify a destination address for taken_flush.  This
	redirects the fetch unit to another address other than the ISSs
	NIA.

2010-07-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Further improvements to the getResolvedOp function.  The OpInfoM
	type is now templates, based upon a mask size, to handle > 64bit
	masks.  The mask is now propagated for the register in question,
	but for other registers which are read or written, the mask
	obtained from the usageinfo is used.  Added in207.dat with
	smdriver5 to test large masks.

2010-07-22  Brian Kahne  <bkahne@freescale.com>

	* Modifications for CygWin port.

2010-07-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* For some reason, I was excluding the parent register from
	usageinfo for register read and write hooks.  This caused a
	problem for creating register alias resolving functions in hybrid
	and transactional ISSs.  I've removed this so that it is now
	included.

	* Slot allocations for aliased instructions was broken:  We were
	treating them as individual instructions, w/o recognizing the fact
	that they're calling their target alias, which already has a
	certain slot allocation.  So, the result was that we ended up with
	a bad model b/c different slots were used.

	To fix this, slot allocation for aliases first makes sure that the
	target is allocated.  It then iterates through its own resources,
	finding equivalents in the target.  It constructs a mapping of its
	resources to the target's, in order to find the equivalence.
	Added mod69.adl and in206.dat to test.

2010-07-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Enumerated instruction fields with default values were still
	using empty sub-expressions, which doesn't work with the Cygwin
	regex engine.  Fixed this.

	** Users may now specify C source files to adl2asm in order to
	simply build an assembler, e.g. <code>adl2asm as-foo.cc
	objdump-foo.cc</code> will build the respective assembler and
	disassembler without invoking <b>make-asm</b>.

	** The instruction packet getResolvedOp function has changed for
	transactional and hybrid ISSs.  Previously, this function would
	translate a single operand to a target alias.  However, this
	didn't work for more complex situations, such as where a sparse
	register entry mapped to multiple modifications of a register.
	The new version of the instruction pushes source and target
	elements onto a list in order to handle this more comple type of
	mapping.

2010-07-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Simplified the building of corotest for Cygwin porting.

	* A commit-queue flush is made after the post_packet_commit hook
	in order to dump out any changes made by the hook.

	* Fixed code generation issues with hybrid and transactional ISSs:
	We weren't translating the code used to index into a register
	file, so if a register was used to index into a register-file, the
	resulting code was incorrect.

2010-07-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Tests involving dlx-bp-fetch are now done.  The major thing is
	that I re-architected how slot assignment is done so that the uADL
	front-end can query for this information during operand
	processing.  Slots are now allocated up-front before the ISS is
	generated, then the data is stored in a hash of Core* ->
	GenInstrPacketBase.  When the ISS is generated, if an object in
	the hash doesn't already exist, then it's generatated, so that
	standalone hybrid or transactional ISS creation is not changed.

	Doing this allows me to process operands which come about
	implicitly, e.g. mmu control registers which might only be
	modified in a pre_fetch hook, etc.

	* The scripting interface now works, with support for dynamic
	parameters and breakpoints.

	* Fixed an issue with exceptions: We weren't flushing resources
	for the instruction which generated an exception.  Added
	uadl/ex5.dat to test this situation.

2010-07-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I modified how enumerated values are handled in the assembler.
	Previously, empty strings were handled as an empty sub-expression
	in an alternation list.  That turns out to be non-portable and
	didn't work on Cygwin.  Now, the grouping becomes optional with
	the result that the initial argument list from the regcomp can
	contain "holes".  We now copy over all arguments, including empty
	items, then remove any trailing empty items.

2010-07-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The scripting interface now supports logging to stdout and
	stderr.  To use this feature, specify a destination as a second
	argument to the <b>strace</b> command, e.g.:
	<pre>
	straceon dat stdout
	</pre>

	* Fixed a problem with typed memory writes and parallel
	architectures:  We weren't creating the proper commit-write
	function to handle the write type.

	* Fixed a bug with dynamic caches: If we had changed the cache
	size earlier to a smaller size, then a reset would segfault b/c it
	didn't know to resize the cache.  Fixed this by implementing the
	same mechanism as for TLBs: A cache-parms-changed variable tracks
	the fact that the cache size was changed since the last reset and
	reallocates it if it was.  Added a mod21 test to check this.

	* Fixed a bug with database generation: We could omit fields
	(with the --used-reg-fields flag) because once we had a covering
	set of fields, we then sorted by biggest, then omitted fields
	based upon high-bits and low-bits.  If a non-contiguous field
	surrounded another field, that surrounded field would be dropped.
	Added doc/doc16.adl to test this.

2010-07-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for memory read/write grouping to implement, for
	example, lmw/stmw, where each access handles 64-bits.

2010-07-13  Brian Kahne  <bkahne@lc0089>

	* A few more gcc 4.4.4 updates.

2010-07-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Ported to gcc 4.4.4.  The JIT doesn't fully work, so it's
	disabled- I guess something changed with exception handling, as
	exceptions are not being properly caught.  Also,
	tests/scripts/dyntest isn't working for some reason- it reports a
	double-deletion error.  I've just disabled that for now, but it
	needs to be looked into.  I was unable to easily pinpoint the
	error- I could narrow down the error location, but then it didn't
	seem to be a relevant problem.

2010-07-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for allowing the user to specify an optional type
	parameter for memory accesses.  For transactional and hybrid ISSs,
	this is propagated to MemAccess::_type.  We might expand this in
	the future to support additional information.

2010-07-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Basic branch prediction now works.

2010-07-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/adl2doc.in:  Added control options for xhtml2pdf.

	* Added various headers required for gcc 4.4.x support.

2010-07-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Basic branch predictor code is in.  I haven't yet tested the
	predictor, but all other models pass regressions.

2010-07-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merge from trunk.

2010-07-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for exceptions for safe-mode models.  This is
	basically the same as for the standard model, except that
	exceptions are caught by safe_exec().  After a call to exec() in
	instruction-class code, we have to check to see if an exception
	exists.  If it does, we jump to where the exception is then
	handled.  Communication about destination addresses is handled via
	_taken_addr, just as for branches.

2010-07-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/xhtml2pdf.in: Added options to specify extra options for
	FOP and to directly specify the maximum JVM heap size.

2010-06-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The bit-wise field definition with values for fields wasn't
	working with a mixture of fields w/values and an implicit opcode.
	Fixed this and added fe/inst133.adl and fe/inst134.adl to test.

2010-06-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Bit-wise instruction field definitions now allow for supplying
	a value to a field, so that opcodes may be specified using named
	fields.  For example:
	<pre>
	      fields = (
                (bits(0),OPCD1(0),1),
                (bits(1),OPCD1(1),0),
                (bits(2),OPCD1(2),0),
                (bits(3),OPCD1(3),1),
                (bits(4),OPCD1(4),0),
                (bits(5),OPCD1(5),0),
                (bits(6),RA(0)),
                (bits(7),RA(1)),
                (bits(8),RA(2)),
                (bits(9),RB(0)),
                (bits(10),RB(1)),
                (bits(11),RB(2)),
                (bits(12),RT(0)),
                (bits(13),RT(1)),
                (bits(14),OPCD1(6),0),
                (bits(15),OPCD1(7),0)
                );
	</pre>
	where OPCD1 is defined as:
	<pre>
	  define (instrfield=OPCD1) { width = 8; pseudo = true; }
	</pre>

	* We had a compilation problem related to the changes made to
	instruction-field getters to support large fields.  We were
	incorrectly generating hybrid ISSs- the generic getters were not
	correct wrt. the return types for prefix getters.  Added smdriver7
	(using mod67.adl) to test this.

2010-06-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We didn't handle the situation correctly where an alias had a
	pc-relative field and specified a value for one or more fields.
	We ended up not merging in the new usageinfo data because the
	usageinfo was non-empty b/c of the pc-relative field.  Added
	fe/inst131.adl to test.

	* Instruction fields now return bits objects and bits objects are
	used by the disassembler.  The problem was that StarCore wanted
	very large fields, e.g. 96 bits, for some nested-field
	definitions.  Previously, we were using at most a uint64_t for
	handling this.  For the assembler, I now use an RNumber for
	handling nested, table-based fields, to handle large values.
	Modified mod61.adl to test a 96-bit field.

	* iss/GenInstrs.C (adl): We weren't using decimal formatting when
	printing the size-check for transactional ISSs, resulting in bad
	output if the size was greater than 9 bytes, e.g. we'd print
	something like "if (size < c)...".  Fixed this by having it always
	use decimal formatting.

2010-06-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with make-db: When adding in resources used by
	register hooks, we weren't differentiating between sources and
	targets, so we'd include write-hook resources even when a register
	was only a source.

	* Added a preliminary ADL -> PDF flow using XSL-FO.  The idea is
	that we take the XHTML output from prest and then transform it to
	XSL-FO via XSLT, then use Apache FOP to convert that to PDF.  The
	XHTML -> PDF flow is encapsulated in a script called xhtml2pdf.
	adl2doc has been enhanced to accept a -pdf option which calls
	xhtml2pdf after generating HTML.  All documentation now uses
	xhtml2pdf rather than Latex and the prest latex writer.  Thus, we
	no longer use Latex in this project.

2010-06-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with evaluating constant expressions:  exprEval
	checked for single-character operators before checking for
	double-character operators and didn't check the length, so for
	example, "||" was evaluated as just "|".  This could cause wrong
	answers which manifested themselves as looking like the expression
	wasn't resolved.  Added fe/inst130.adl to test.

	** The database generator, make-db, now includes resources used by
	register read and write hook functions when reporting inputs and
	outputs.

2010-06-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with handling instruction packets in the assembler:
	The operand regular expression didn't exclude packet characters
	for simple immediate operands when a syntax string was present,
	resulting in us incorrectly grabbing the end-of-packet character,
	e.g. ']'.  This would then cause us to reject the instruction.
	Modified asm46.s to test this.

	* When creating equivalence classes for the big-mem option (which
	means we'll select the equivalent instruction with the largest
	immediate fields when an unresolved symbol is encountered), or
	concept of equivalent was not sufficient.  We weren't checking for
	signed/unsigned and enumerated/not-enumerated and we weren't
	comparing the regular expressions themselves, which must be the
	same or else subtle differences in semantics might be missed,
	e.g. an instruction which adds the program counter to one version
	but not the other.  Modified mod61.adl with asm51.s to test.

2010-06-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fetch exceptions now work.  All dlx2 tests have been
	implemented.  Exceptions have not yet been tried on safe-mode
	models.

2010-06-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial support for exceptions.  Fetch exceptions are not yet
	supported and safe-mode has not yet been tested.  dlx2 is
	currently being used for exception tests.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.2 (v1_7_2) on Linux (lc0100) on 6/9/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.2 (v1_7_2) on Linux (lc0101) on 6/9/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.2 (v1_7_2) on Linux (lc0089) on 6/9/2010 ==

2010-06-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* misc/DocWalker.C (adl): Added support for resolving ternary
	expressions so that they're handled in an analogous fashion to if
	statements.

2010-06-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* fe/Types.C (adl):  UsedReg::operator== now uses a more efficient
	comparison function (Equal) for _begin and _end comparison.

	* Merge from trunk.

	* Flush functions are now created, which deallocate resources.
	This is done by looking at all allocate method calls in
	from-states and adding on deallocate calls for each.  The
	front-end was expanded to figure out from-states.

	* All dlx2 and dlx2-safe non-exception tests now pass.

2010-06-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with decoding of variable-length instructions for
	uadl.  We had a problem where, if we attempted to decode what we
	had, e.g. 2 bytes, and that correlated to a decode-miss, then we
	would execute the decode-miss object, rather than wait and try to
	decode when we had more data.  I think I've fixed this by having
	the decode-miss code return a 0 if the supplied size is less than
	the max instruction size for the core.  The theory is that we
	can't know if we have an illegal instruction until we have the
	maximum amount of data.  Hopefully this will work...  Added
	uadl/vle1.dat to test this.

	** Usage tracking has been improved for instruction aliases.
	Instruction fields which have constant values from the alias are
	now taken into account when evaluating conditonals such as
	if-then-else and switch statements.

	** The Perl/XML database generator now displays inputs and outputs
	for alias instructions.  These take into account the alias's field
	mapping and any constants specified by the alias.

	* To take into account constants when evaluating usage-info for
	aliases, the alias inserts values into a the value hash in
	VarWalker before evaluating the target's action code.  If the
	resulting usage info differs from the target's, then the new usage
	information is kept.

	* The database generator was enhanced to convert target
	instruction fields into the alias's fields.

	* Enhanced usage tracking to take into account aliases which use
	'parm' instruction fields.  We now evaluate the target
	instruction's action code using those parm values, in order to
	resolve conditionals.

2010-06-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated documentation and database generation.  The doc-op
	defined by the label in the action code is now called
	"extracted-doc-op" in the db or "Extracted Operation" in the
	documentation and is presented in addition to the explicit doc_op
	that can be specified directly in ADL.

	* Expanded the DocWalker's handling of alias parms to also process
	switch statements.

2010-06-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The register resource has been reworked so that it now stores
	more information: A counter for full-register allocations and a
	deque for storing mask info.  The problem was that, when we were
	just storing a single mask, we couldn't handle multiple
	deallocations, e.g. two instructions are in-flight targeting the
	same register. When the first one complets, it would clear the
	mask, allowing a third instruction to potentially proceed, even
	though the second instruction is still in-flight.

	* Modified the parser so that it correctly includes just sources
	or targets when using the special keywords "sources" and
	"targets", even if a single resource is both a source and a
	target.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.1 (v1_7_1) on Linux (lc0100) on 6/1/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.1 (v1_7_1) on Linux (lc0101) on 6/1/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.1 (v1_7_1) on Linux (lc0089) on 6/1/2010 ==

2010-06-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug in the assembler, where we wouldn't advance the
	input pointer if we failed to match any regular expressions, since
	instr_end was being advanced by copy_operands.  Fixed this by
	advancing instr_end if it was the same as orig_str.  Added asm50.s
	with mod60.adl to test.

2010-05-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The assembler generator's instruction sort order was subtly
	wrong.  It prioritized enumerated fields over non-enumerated
	fields, but it included assembler fields in this count.  This
	meant that an instruction with an enumerated assembler field would
	be chosen before another, even if the other were smaller (and thus
	should be preferred for code-density reasons).  Fixed this by
	modifying the enumerated-field count function to ignore assembler
	fields.  Modified mod47.adl to test this.

2010-05-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified how lock-step multi-issue works.  Previously, we
	attempted to separate a state's action into an inquire and action
	functions, but that didn't work for if-then-else logic.  Now, we
	separate it into action and move, where action is the complete
	action function, but a change-of-state results in us simply
	storing a move function and returning true.  The move function
	performs the actual move.  This way, if all instructions' actions
	succeed, then we can move all instructions at once.  dlx2 now
	passes all issue tests.

	* More work on multi-issue: issue1.dat and issue3.dat pass for
	dlx2, but there's still a problem with if-then-else state logic:
	We cut off the else clause, so right now, loads and stores won't
	work.

2010-05-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Integrated diff's from Dan Helm's porting to Ubuntu.

	* Added post_read and post_write hooks to the mmu define block,
	along with support for them in the iss, doc, and db generators.
	Modified fe/mmu13.adl and iss/mod11.adl to test.

2010-05-24  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added the doc_title_add key to Named objects.  This allows the
	user to append extra information to an item's title in
	documentation.  This is simply appended to whatever the title is,
	whether it's the default title or one set via doc_title.

	* The DevTech assembler expects relocation information to be
	returned in the original order of the VLES, rather than the final
	order after possible instruction re-ordering.  To do this, I added
	an 'order' member to InstrInfo, which is propagated via
	replaceInstr and the copy-constructor.  The DevTech integration
	sorts the relocations via this order value before returning to the
	DevTech assembler.  The user may need to explicitly set the order
	if calling createInstr, though usually that's just used for
	padding with nop's, and thus wouldn't have relocations.  Added
	scripts/distest6.regress to check this.

2010-05-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial implementation for multi-issue.  The stall_backwards key
	has been replaced with "rigid".  If set, then has_space in the
	pipeline check's the uarch's stall() predicate as well.

	* Implemented operand value constraints for instruction class
	selection.

2010-05-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The DevTech assembler integration now uses the gas expression
	parser, so that it can better detect symbols, handle basic numeric
	expressions, etc.  I think that right now, this doesn't handle
	64-bit immediates, so I might need to modify things if that causes
	a problem.

2010-05-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Improved assembler-rule handling: If an assembler rule was
	applied to a shorthand alias, the alias target's fields were being
	used, which could result in errors, since the writer of a rule
	would expect to be able to access the shorthand's input fields.
	Fixed this by adding a new item to adl_opcode: A list of integer
	pairs representing the field names (by index) mapped to argent
	indices.  The field-lookup function sees if this list exists, and
	uses it, otherwise it uses the normal lookup mechanism of looking
	at the operand array.  Modified mod61.adl and added asm48.s and
	asm49.s to test.

2010-05-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated forwarding paths to work with operands with more than
	one sub-operand.  Modified dlx-fwd.uadl to use this capability.
	This required that an operand have can_read(), read(), and
	log_read() functions which take a sub-op parameter.

	* Added convenience functions exec_and_read() and exec_and_write()
	to simplify working with memory.

2010-05-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added forwarding paths.  This construct is simpler than the
	original, in that data is invalidated after the current cycle.
	Also, data is stored according to a user-specified-width intbv
	(defaults to nia width).  Added dlx-fwd and dlx-fwd-safe to test
	this.

	* Modified the memory interface.  The user must now call
	post_read() and pre_write() before the relevant exec() to make
	sure everything is set up.  Previously, I has the relevant request
	routine set the memory result, but this doesn't really work, as
	the memory-result can be modified between states.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.0 (v1_7_0) on Linux (bkahne-ec1) on 5/14/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.0 (v1_7_0) on Linux (lc0089) on 5/14/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.0 (v1_7_0) on Linux (lc8008-tx30) on 5/14/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.7.0 (v1_7_0) on Linux (lc0100) on 5/14/2010 ==

2010-05-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a subtle problem in the front-end, whereby we wouldn't
	remove nested instructions (and parent, if applicable), via a
	group-remove if there was an intervening defmod of the nested
	instruction.  This was because the defmod was inserted as a dummy,
	so then the group-remove item saw that item and removed it from
	the core's instruction hash.  However, the nested instruction
	still existed, so it was never really removed.

	Fixed this by modifying check_remove for instructions so that it
	doesn't remove dummies.  The instruction setup function then
	propagates the remove flag.  Added fe/group10.adl to check this
	behavior.

2010-05-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug relating to indexed register fields in
	transactional ISSs.  The problem was that it's legal for user to
	use an index that's greater than the register width, since we
	always mod the index before applying it.  However, in the logic we
	generated for transactional ISSs, the index was offset by the
	packet offset, then mod'd later, resulting in the wrong index.
	Fixed this by mod'ing the index immediately in the field
	get-function before then extracting the relevant field from the
	packet slot.  Using mod10.adl and in201.dat to test this.

	** uADL models now support dynamic parameters.  These parameters
	may be set, queried, or listed via <code>uADLArch</code> methods
	or via the scripting interface, using the same Tcl functions as
	for ADL models.

	* Implemented dynamic parameters for uADL models.  A uADL object
	that wants to have dynamic parameters needs to derive from
	DynParms and implement the relevant methods, then call
	Timer::register_dyn_parms to register itself.  The scripting
	interface uses the RunControlIface object for setting dynamic
	parameters, so that it can work with adl and uadl.  The uadl
	dynamic parameter routines first try to access uadl parameters,
	then pass it on to the ISS.

2010-05-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified documentation generation so that operations are now
	printed as code blocks.  This allows them to be multi-line.

	* We had a problem with assembler syntax, where we couldn't handle
	syntax of the form %i %f %f.  Having more than one set of spaces
	through off our calculation of where the end of the instruction
	would be.  This was due to the fact that we had to calculate the
	end of the instruction b/c our regex was anchored to the end of
	the string.  That was only due to the fact that we wanted to be
	able to support multiple forms for instructions, where the
	different forms might have different numbers of operands.

	To fix this problem, I eliminated the end-of-string anchor on the
	regex and I just match against the input string, with no temporary
	end-of-instruction terminator.  I then check, after the match, to
	see if there are non-whitespace characters at the end of the
	match. If there are, I try again, assuming we had an incomplete
	match.  This seems to work.  Modified mod61.adl and added asm47.s
	to test this.

2010-05-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Duplication of the feature enhancements from the prefix-counter
	branch, so that they'll show up in the next release notes:

	** The assembler now understands prefix counters and the
	<b>post_packet_asm</b> handler, in the assembler, must now
	explicitly set prefix fields using
	<code>InstrBundle::set_prefix_fields()</code>.  If this handler is
	not present, then the default action is to set prefix fields, if
	the architecture uses prefix instructions.  This allows the user
	to rearrange instructions within a packet and then to set prefix
	bits accord to this new arrangement.

	** A new parameter has been added to <b>instrfield</b>
	definitions: <b>index_endianness = &lt;big|little&gt;</b>.  This
	allows the user to control how slices are retrieved from indexed
	instruction fields.  The default is <b>big</b>, meaning that the
	slice for the first instruction in a packet comes from the
	left-most (high-order) bits of the prefix.

	** A new parameter has been added to core/architecture
	definitions: <b>packet_pos_incr</b>.  This controls how parallel
	architectures increment their packet position counter.  If 0 (the
	default), then the counter is incremented by 1 for each
	instruction executed.  Otherwise, the increment value is
	``fetch-width / packet_pos_incr`` (all values are in bits).
	Therefore, a value of 16 for <b>packet_pos_incr</b> would
	increment by 32-bit instruction by 2.

	** A new resource type has been added to core/architecture
	definitions: <b>prefixcounter</b>.  These allow the disassembler,
	assembler, and simulator to understand how bits from a prefix
	instruction are to be used by instructions within a packet.  Refer
	to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* Merged from prefixcounters branch to trunk.

	* Merge from trunk.

2010-05-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added the is_misaligned() predicate for querying memory.

	* Implemented semaphores, which are the replacement for virtual
	flags.  They can take a max-value and can be queried to see if
	their current count is less than the max.

	* Added field_value() and is_real() functions to uadl instruction
	classes.

	* Added a counter to each instruction class for latency control.
	Added uadl/lat1.dat to test this behavior.

2010-05-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenRegs.C (GenRegsBase): The slice-write wasn't defaulting
	to a read-modify-write approach for context regs, as we do for
	fields, resulting in a compiler error.

	* adl-asm-impl.C (bfind_n): Minor change: I no longer need to
	create a temporary Arg, as I just expanded the functor to handle
	the various permutations of an Arg and const char * that are
	needed.

	** A new option has been added to tracediff:
	<b>--remove-consecutive-mem</b> If true, then consecutive
	equivalent intermediate-result memory acceses are removed.  This
	option may be negated.  The default is <b>false</b>.

	* Modified nested-field support so that 64-bit fields are
	allowed.  This involved changes to the assembler and the
	disassembler to use the proper types when necessary.  Modified
	mod61.adl to test this (using asm45.s).

2010-05-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The assembler's enumerated fields are no longer cached in
	hashes.  Instead, a new object, enum_fields, contains a pointer to
	a sorted enum_field array, and a count of the number of items.  A
	binary search is used to find items, so no pre-processing is
	required to set up any data structures.  This dramatically reduces
	the assembler memory size for large assemblers, such as StarCore.

2010-05-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with the DevTech assembler integration:  Its
	expression parsing was bad and wouldn't handle large immediates.
	It also didn't clear the expression object, resulting in bad
	data.  Modified iss/mod61.adl to have an instruction with a large
	(32-bit) immediate, then added a regression in scripts, using
	dtest2, to test this.

2010-05-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Extended uadl operand-selection functionality by allowing the
	user to use the special keywords "sources" and "targets" to
	specify that an operand represents all source operands or all
	targets.  Added uadl-fe/in14.uadl to test the front-end and
	modified uadl/dlx.uadl to test code generation.  Added
	uadl/store2.dat to make sure that store-with-updates work.

	* Miscellaneous minor modifications to load/store offsets for
	half-word accesses to get them right.  Added in the rest of dlx's
	standard regressions (normal and safe-mode).  I'm still not happy
	with how memory works- too complicated with these offsets.  This
	should be revisited at some point.

	* Modified tests/uadl/Makefile.am to try and get parallel builds
	working.  It's kind of tricky, since we now build the iss and uadl
	files separately, then link them together.

2010-05-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* To facilitate easier testing of the new uADL, I've changed
	dlx.uadl so that a pipeline flush only occurs for a HID0 or HID1
	mtspr.

2010-04-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added support for specifying operands on a per-instruction basis
	within an instruction class.  This handles the situation, for
	example, where RA is a source for some fixed-point instructions,
	but a target for others, e.g. or.  Added uadl-fe/in13.uadl to test
	this for the front-end.  The prime-number sieve (in4.dat) now
	passes for dlx.uadl (normal and safe-mode).

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.16 (v1_6_16) on Linux (lc0100) on 4/30/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.16 (v1_6_16) on Linux (lc0101) on 4/30/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.16 (v1_6_16) on Linux (lc0089) on 4/30/2010 ==

2010-04-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with handling inputs/outputs for database and
	documentation generation.  We weren't properly matching used-masks
	to fields.  Fixed this, so that we display a mask if we don't find
	a complete covering set of fields for all bits in the mask.

2010-04-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Basic branches now work for normal and safe-mode models.  For
	safe-mode, I modified how the hybrid-iss works.  On a taken
	branch, a virtual function is called so that the uadl model can
	update its state.  This stores the target-address and sets
	speculative to true.  Execution of subsequent instructions is
	skipped until a flush, which resets the speculative flag.

2010-04-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had an inconsistancy in the new expanded-register-write-hook
	logic, between slices and field writes, in how they gave their
	data to the write-hook (justified or not).  Fixed this and
	modified mod12.adl to test.  Now, fields pass the input value
	directly to the write-hook, as do slices.

	* Fixed a bug with adl-db and displaying encodin types of
	bin-fields and long-fields.  We weren't properly breaking down
	fields into contiguous bit sequences.  This would show up with we
	had a reverse-sequence of bits for a given field.  Modified this
	by tracking what bits an individual bit-pair of a field
	corresponds to in the initial creation of the ifields array in
	gen_field_enc.  Modified docs/doc13.adl to test this.

	* The database generator now uses DocWalker to do some basic
	transformations on parent_action: We substitute the alias
	arguments according to the alias's mapping and we do some basic
	constant-expression evaluation in order to try and evaluate
	conditionals which use instruction-field parms.  Added
	docs/doc14.adl to test this.

2010-04-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Removed address alignment from the DevTech assembler
	integration, as this seemed to be incorrectly adding padding when
	it shouldn't be.

	* An alias's target's action is now included in the generated
	database under the tag "parent_action", so that we can manipulate
	it during database generation.

	* Added regressions for testing the new --enc-type option for
	adl-db.  Minor enhancements to that functionality.

2010-04-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We register-read logging is on, the NIA read for CIA updating
	uses the no-trace version so that we don't log that read.
	Otherwise, this would appear as a read of the prior core's
	instruction (in MP), because we haven't yet issued a
	log_instr_prefetch command.

	* Moved the post-exception logging call to before the call to the
	post-exception hook in order to make sure that the logging call
	always occurs, even if the post-exception hook itself throws an
	exception.

	** Slice-writes in register write-hooks now obey the reserved
	mask.

	* Modified mod12.adl to test this above and added in199.dat to
	test.  We also had a problem where we weren't propagating masks
	correctly on a slice-write.  Changed this by simply calling the
	write-hook if it takes the extra index parms.

2010-04-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Removed some extra references to prefix buffers that we no
	longer use, which caused link errors.

	** Two new methods have been added to <code>InstrBundle</code> for the
	assembler:  <code>set_prefix_index(unsigned)</code> and
	<code>unsigned prefix_index()</code>

	These allow the user to get and set the position at which the
	prefix instruction, if it exists, should be placed.  Setting the
	prefix index to the size of the <code>InstrBundle</code> places
	the prefix at the end of the packet.

	* To implement the above, space for the prefix is allocated just
	like any other instruction.  This simplified space management and
	meant that I didn't have to deal with shifting to use unused space
	in the prefix, etc.  This meant that some of our regressions
	changed because we no longer had extra unused space at the end.

2010-04-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** <b>adl-db</b> has new options:

	<dl>
	<dt>--orig-action</dt>
	<dd>
	Original action code will be displayed, with no aspect
	expansion.  This option is also valid for <b>make-db</b> and is
	identical in operation to the same <b>adl2doc</b> option.
	</dd>
	<dt>--used-reg-fields</dt>
	<dd>
	When displaying <b>inputs</b> and <b>outputs</b> fields,
	register-field names will be used, rather than masks, for
	displaying partial register usage.  This is equivalent to how the
	documentation generator works.
	</dd>
	</dl>

	** The ADL Perl/XML database was modified slightly:  Nested
	instructions now contains a field called <b>parent</b> which
	specifies the parent instruction.

	** The ADL database query tool (<b>adl-db</b>) propagates parent
	information to nested instructions.  Any field which does not
	already exist in the child is copied from the parent.  Action code
	is copied and renamed to <code>parent_action</code>.

	** <b>adl-db</b> now supports the creation of comma-separated-value
	(CSV) files in order to make importing into Excel easier.  This
	can be selected by specifying an output file with a <i>.csv</i>
	extension or specifying <i>csv</i> using the
	<b>--output-format</b> option.

	** Format-specifier widths are now optional for <b>adl-db</b>.
	They are used for the text-writer but are ignored for HTML and CSV
	output.

2010-04-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new option has been added to <b>group</b> definitions:
	<b>check_parent = bool</b>.  If true, then when selecting items
	for a group, such as via <b>has_attrs</b>, we will check a parent
	instruction for inclusion.  If false, then we do not include the
	parent.

	* When adding items to groups, we were skipping parent
	instructions if they had nested instructions.  We now also check
	the parent and add if necessary if the group has check_parent =
	true set.  Added fe/group9.adl to check this.  I had to modify
	group5.adl slightly for it to work.  Also- when processing dummy
	instructions, we don't complain about a missing instruction for a
	remove operation, so that groups will work, since a group might
	add a parent and a child.  A subsequent remove defmod might remove
	the parent + child, leaving the defmod to not find the element it
	expects.

	I had to add the flag b/c a lot of StarCore files were built
	around not needing to list the parent instructions in various
	groups.  Adding the flag minimized disruption.

2010-04-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Basic stores now work (aligned and misaligned).

	* Loads and stores on safe-mode models work.

2010-04-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a problem with indexed-register-field checking.  We would
	erroneously generate an error for an indexed field of width 1 due
	to an off-by-one calculation.  Modified fe/reg8.adl to test this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.15 (v1_6_15) on Linux (lc0100) on 4/19/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.15 (v1_6_15) on Linux (lc0101) on 4/19/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.15 (v1_6_15) on Linux (lc0089) on 4/19/2010 ==

2010-04-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Basic loads (aligned and misaligned) now work on a normal-mode
	model.  Added uadl/load1.dat with dlx to test this.

	Note:  Right now, the safe-mode model doesn't compile b/c memory
	operations for it aren't yet supported.

2010-04-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The <b>--orig-instr-action</b> option for <b>adl2doc</b> has
	been removed and replaced with the option <b>--orig-action</b>,
	which is applicable to all tools, including <b>adl2doc</b> and
	<b>make-db</b>.  This option turns off all aspect expansion.
	Thus, it has the same effect as <b>--orig-instr-action</b>, except
	that it applies to all action/hook code and it means that usage
	tracking will be correct wrt. to the action code displayed.

	* For the above feature, I removed orig_action from the
	front-end.  This new option was added to BaseParser.C and the
	value is stored as a static within Data.

2010-04-15  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* misc/dbgen.C (adl): We had an error with our db generator:
	"sources", "destinations", and "miscs" fields for alias information were
	incorrectly generated as arrays, even though their contents were
	tagged pairs, and thus should have been stored as hashes (for
	Perl).  This doesn't affect the XML.  Changed this and modified
	the instruction handler for adl-db to properly handle this.  This
	made it much easier to parse the Perl db.

	* misc/dbgen.C (adl): Modified the type used for printing integers
	to uint64_t to avoid some truncation issues.

2010-04-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* misc/dbgen.C (adl): Updated make-db to include doc_op in the
	database.  Added tests using doc12.adl to test this.

2010-04-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed some problems related to the changes made to register
	write hooks.  First, if we had a write-hook on the NIA, we were
	calling the standard in-hook write function, which called the
	branch-taken logging function, thus every instruction was logged
	as a taken branch.  Changed this by creating a special in-hook
	write function which doesn't make this call.  Secondly, there was
	a bug with our slice-write-in-hook function- it was calling
	<reg>_read, which returned a constant if we didn't have a hook,
	resulting in a problem.  Changed this to call set_data.  Modified
	mod12.adl to check this stuff.

	* Added StarCore's doc_op requirement, which allows them to add in
	pseudo-code for describing an instruction's operation.  I think
	that this is a bad idea, since the whole point is to have an
	*executable spec*, but they're insisting on it.

	** New options have been added to the documentation generator.
	When processing an instruction's action code, if a statement or
	block is labeled with <code>doc_op</code>, then that statement or
	block will be extracted and listed as the instruction's
	"operation".  The operation code can undergo additional
	transformations using the <code>op_transforms</code> define within
	a <b>adl2doc</b> configuration file.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2010-04-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated adl-db so handle sources/destinations fields for
	instructions.  We weren't propagating this data from the input and
	the data had to be massaged somewhat to make it suitable for
	printing.  Added docs/doc1-sd to test this.

	** The register and register-file write-hook functions have been
	expanded so that they may optionally take two extra unsigned
	parameters.  These represent the range of bits written by a write
	operation.  So, for example, a whole-register update will have a
	start/stop value of (0,register-width), whereas a field update
	will supply the bits representing that field's range.

	* To implement the above, the internal-write function now takes
	start/stop index values if the register or register-file has a
	write hook with the extra parameters.  This data is then
	propagated to the hook.  Default values of the entire range are
	supplied so that the normal write doesn't need to be changed.  One
	major change is that in-hook writes now do their own logging,
	rather than logging everything at the end.

2010-04-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/GenRegs.C: I now only generate register-field in-hook write
	functions when needed, thus reducing code-size a bit.

2010-04-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Our additional-fetch logic for the disassembler was wrong b/c we
	re-declared a temporary variable.  I just removed the need for the
	temporary.  Modified mod67.adl so that mv_big is 48-bits in size,
	so that it tests additional fetch.  Added asm44.s to test this.

	* The assembler now understands prefix counters.

	** The assembler now understands prefix counters and the
	<b>post_packet_asm</b> handler, in the assembler, must now
	explicitly set prefix fields using
	<code>InstrBundle::set_prefix_fields()</code>.  If this handler is
	not present, then the default action is to set prefix fields, if
	the architecture uses prefix instructions.  This allows the user
	to rearrange instructions within a packet and then to set prefix
	bits accord to this new arrangement.

2010-04-06  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new parameter has been added to <b>instrfield</b>
	definitions: <b>index_endianness = &lt;big|little&gt;</b>.  This
	allows the user to control how slices are retrieved from indexed
	instruction fields.  The default is <b>big</>, meaning that the
	slice for the first instruction in a packet comes from the
	left-most (high-order) bits of the prefix.

	** A new parameter has been added to core/architecture
	definitions: <b>packet_pos_incr</b>.  This controls how parallel
	architectures increment their packet position counter.  If 0 (the
	default), then the counter is incremented by 1 for each
	instruction executed.  Otherwise, the increment value is
	``fetch-width / packet_pos_incr`` (all values are in bits).
	Therefore, a value of 16 for <b>packet_pos_incr</b> would
	increment by 32-bit instruction by 2.

	** A new resource type has been added to core/architecture
	definitions: <b>prefixcounter<b>.  These allow the disassembler,
	assembler, and simulator to understand how bits from a prefix
	instruction are to be used by instructions within a packet.  Refer
	to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2010-04-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Merge from trunk.

	* A basic dlx safe-mode model now works.  Its output compares with
	the equivalent main-line uadl version, but *both* differ from
	non-safe-mode due to the flush for mtspr at writeback, which can't
	be duplicated in safe-mode, since we can't un-execute instructions
	with this type of model.

2010-04-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* fe/FieldSupport.C (genPrefixFieldGetter): We had a weird string
	test that didn't look right, so I modified it.  I think there was
	a weird cast that was allowing it to proceed.

2010-04-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The basic dlx model now compares against the trunk uadl for a
	simple test of add's and a mtlr.  This is now tests/uadl/in1.dat,
	as the original in1.dat was just a parsing test from tests/iss and
	thus not really very useful.

	* Added support for pipeline flushing.  Flush functions exist
	per-stage so that we can hardcode in the logic for what's
	required.  A per-stage exec function exists for instruction
	classes which contain instructions which can halt- this executes
	the instruction, then checks to see if the ISS is halted and
	flushes the pipe if it is.

	* Tracing now works.  Also, built-in discard() and commit()
	functions were created, which are called automatically on a
	transiton to the init-state (for commit) or a flush (for discard).

2010-03-31  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Implemented operands code and basic register/register-file
	support.  This also includes the central log-queue object, which
	tracks who owns what.  This now means that the dlx model has basic
	flow-control based upon operands.

2010-03-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* adl-asm-impl.C: We had a problem, where we'd enter an infinite
	loop when we encountered an unknown instruction in a
	parallel-architecture that allowed multiple instructions on the
	same line.  Fixed this by skipping past whitespace and the next
	operand block when an instruction wasn't found.  Added asm43.adl
	with mod61.adl to test this.

2010-03-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Implemented basic pipeline logging.  The model now wiggles!!!  A
	simple test of dlx with a dummy add function shows instructions
	moving through the pipe.

	* Merge from trunk.

2010-03-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* fe/Data.C (adl): Instr::apply_modifications wasn't applying
	assembly rules from defmods to nested instructions.  Fixed this
	and added fe/asm10.adl to test.

2010-03-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a problem with exception data structures: We put the enum
	declaration after helper code, so it wasn't possible for helpers
	to use the enum declaration.  Fixed this by moving exception
	generation above helper code generation.  Modified mod3.adl to
	test this.

	* Enhanced support for assembler support of abbutting fields.  We
	had supported this, but the problem was that we couldn't handle a
	situation where there was an abutting field, but another version
	of the instruction which contained characters in the instruction
	name that the abutting field's enumerations contained as a first
	character, e.g. foo[n], where n is "0", "1" and foo0 or foo1.

	To handle this, we now have two sets of terminating characters,
	the original, which removes characters which are in instruction
	names, and the larger set, which doesn't remove those.  We first
	try with the smaller set and if that doesn't work, try again with
	the larger set.  Tested with iss/mod62.adl and iss/asm42.s.

	* fe/InstrTable.C (adl): Fixed a subtle encoding bug: Given a
	group of instructions, if they all share the same opcode in their
	first word, but one (call it 'a') differed by some value from the
	rest in the second word, then we would incorrectly encode it in a
	non-leaf node.  The problem was that we would sort instructions by
	opcode, then pop off the last item, create a tree node, and
	continue building the tree.  Because we popped that list item
	(thinking that we had already used its mask value), we didn't take
	into account its mask in the second word, where it was actually
	differentiated.  Fixed this by simply not popping that last
	instruction.  Added fe/inst127.adl to test this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.14 (v1_6_14) on Linux (lc0100) on 3/22/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.14 (v1_6_14) on Linux (lc0101) on 3/22/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.14 (v1_6_14) on Linux (lc0089) on 3/22/2010 ==

2010-03-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Register-files were ignoring reserved and read-only bits.  We
	just simply never implemented it.  I basically just copied what
	was going on for registers and added iss/in196.dat with mod66 to
	test.

	** The <b>log_branch_taken</b> logging event has been enhanced to
	now receive the branch-target effective address.  The new
	signature is: <code>LogBase::log_branch_taken(addr_t ea)</code>.

	** The user may now control how register-files are logged by using
	the <b>log_as_reg</b> attribute.  If a register-file has this
	attribute then it will be logged as a register, with the index
	appended to the name, e.g. access to element 1 of a register-file
	named <i>ABC</i> will be logged as a register access to
	<i>ABC1</i>.  This can be used by modelers to hide the details of
	the model from a parent application, i.e. whether certain
	resources within a processor are modeled as individual registers
	are as a register-file.

2010-03-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Basic fetch/decode/issue code is now in and the model compiles.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.13 (v1_6_13) on Linux (lc0100) on 3/12/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.13 (v1_6_13) on Linux (lc0101) on 3/12/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.13 (v1_6_13) on Linux (lc0089) on 3/12/2010 ==

2010-03-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Changed the scheduler to what we found worked in the current
	trunk uadl:  We always evaluate all stages, but we have a stall
	predicate that can be queried.  If lock-step and multi-issue, then
	we evaluate all outer guards first, then the inner if that passes,
	but we still evaluate all states.

2010-03-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Minor mistake in make-doc: The xor MathML entity is "oplus" not
	"xoplus".  This caused an extra 'x' to be added to the left of the
	circle-plus operator.

2010-03-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with code generation when dealing with
	register-file aliases used in sparse register-files.  We didn't
	instantiate the register-file object, so a hasAttr() query
	produced a compiler error.  Fixed this and added iss/mod66.adl to
	test various aspects of register attributes, register-file
	aliases, use of register-files in sparse register-files, etc.

	* Added an initial flow for an extra level of syntax
	high-lighting, using the option adl2doc option --hl-level=2.  This
	changes code blocks to use the "adl" language and has make-doc
	create a small data file containing perl lists of all
 	registers/register-files and just register-files.

	adl2doc then runs prest with a different states file (doc/adl.st
	or share/adl.st if installed).  It actually creates a temporary
	states file and uses the perl data file to fill in regular
	expressions so that registers and register-files will be
	highlighted appropriately.  It also does some substitutions on
	operators so that the mathematical symbols are used.  This is done
	by using rst's substitution syntax and MathML symbols.

2010-03-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with register-file finalization: If we hadn't
	finalized a register-file alias yet, we wouldn't have set its
	size, so a sparse regfile which referred to it would see a size of
	0.  Split up the aliasing logic to go first in order to avoid the
	aliasing issue.

	** The UVP writer will now print full register-file names for any
	register-file marked with the <b>uvp_full_name</b> attribute.  For
	historical reasons, register-file names are displayed using the
	first letter of the register-file followed by its index,
	e.g. <code>GPR(0)</code> is displayed as <code>G0</code>.  This
	attribute allows the user to turn this behavior off.

2010-03-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified the assembler's handling when an instruction doesn't
	match- we now advance to the first bit of whitespace, rather than
	by one characeter.

	** Non-sparse register-files may now have non-power-of-2 sizes.
	Handling of invalid accesses is the same as for sparse
	register-files: Invalid read/write hooks for the register-file
	will be called.  If those are not defined, then the global invalid
	read/write hooks will be invoked.  If those are not defined, then
	the simulation will print an error and abort on an invalid access.

2010-03-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* asm/GenAsm.C (adl): The sorting algorithm for FInfoSet was
	wrong, meaning that we were incorrectly classifying instructions
	as equivalent b/c we were collapsing fields.  The equivImmedInfo
	function was also slightly wrong, so that we were marking
	instructions as equivalent which weren't.  Fixed this for
	StarCore.

2010-03-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new option has been added to <b>adl2asm</b>:
	<b>--asm-ver=str</b>.  This allows the user to specify a version
	string to be used.  This string is visible via the <b>--help</b>
	option of the standalone assembler or via the
	<code>AdL_get_version</code> API function.  It overrides the
	version specified via <b>--log-usage</b>, if that option has been
	specified.

	* Fixed a bug with how we calculated the largest-immediate
	instruction for the assembler.  We had a bug with sorting
	instructions, where we weren't properly comparing all fields.
	Also, our attempt to create equivalence classes of instructions
	was flawed- we only looked at consecutive sequences, which wasn't
	always correct.

	The new code, in GenAsm::genBigMemInfo, first sorts all
	instructions by immediate size into a multi-set.  It then creates
	an equivalence class by looking at the first instruction in the
	set, then iterating over the remaining items, seeing what's
	equivalent and adding that to the equivalence-class list.  Then,
	we set the longest value to the last item in the list, since the
	source of the list was a sorted set.  Modified as-mod61 to test
	this (uses asm41.s).

	* Modified behavior for replaceInstr and createInstr in the
	assembler so that they produce fatal errors if the specified
	instruction does not exist.  This prevents later problems, such as
	null-pointer dereferences.

2010-03-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The <b>--shared</b> option for <b>adl2asm</b> now accepts an
	optional parameter to specify the output shared object name for
	the assembler.  The default is <i>adl_asm.so</i> for compatibility
	purposes.

	* Added StarCore's example test harness for testing assembler
	shared objects.  This program is now tests/scripts/dtest2.C.

	* We had a bug when assembling instructions which have fields
	which can abut an instruction name and the model has a
	parallel-architecture and thus divides instructions into packets.
	We try to find the end of the instruction, then match a regex
	against that string, where the regex is anchored to the end.  This
	is done in order to not under-match, e.g. when you have a 2-op and
	3-op form of the instruction that are both valid.  However, the
	logic to find the end of the instruction didn't handle abutting
	fields.  Changed this so that we skip any non-whitespace, then
	skip whitespace, then skip operands.

	I modified the disassembler as well.  We were left-justifying
	instructions, so abutting fields did not abut.  Changed that so
	that if we have abutting fields or prefix fields, we don't do any
	left-justification; we simply print the syntax string, so that the
	instruction name is handled as any other non-field character.

	Modified iss/mod61.adl to test this.

	* asm/GenAsm.C (adl): Modified regular-expression quoting within
	character classes.  It turns out that you can't use \ in a
	character class to quote a character for POSIX regexs.
	(http://www.regular-expressions.info/posixbrackets.html).
	Instead, you have to rely upon tricky ordering issues.  Perl does
	allow \, so what works for Perl doesn't work for POSIX!  The new
	quoting mechanism re-orders special chars, e.g. [, ], and ^, so
	it's string-based by necessity.

2010-03-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* asm/GenAsm.C (adl): Modified the disassembler so that
	instruction names are now right-justified.  Space is inserted if
	there is whitespace immediately after the instruction name w/a
	syntax string.  Otherwise, no space is added, so that abutting
	fields work properly.

	* Modified the assembler to remove the find_instr_end() function,
	which didn't always work with abutting fields in an assembler that
	dealt with a packet.  Now, the instruction end is directly
	calculated from the end of the regular expression match.

2010-03-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/NodeHelpers.h (adl): Removed unecessary const_cast in
	CTarget.

2010-03-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* misc/docgen.C (adl): When creating the instructions-by-block
	index, we ended up with duplicate entries b/c we didn't filter out
	instructions which only had a single nested alias.  We were
	already renaming such an entry, so it looked like a duplicate.  I
	now filter this out, ignoring the parent in such a situation so
	that only the child is linked.  Modified docs/doc2.adl to test
	this.

	** A new register-file method has been added:  <b>hasAttr( &lt;
	index &gt; , &lt; attribute &gt; )</b>.  For example:
	<pre>
	if ( SPR.hasAttr(SPRN,is_protected)) { raiseException(Program); };
	</pre>
	This feature allows users to query the attributes of elements of a
	register-file within action code.  It is really only useful for
	sparse register files, as non-sparse register-files are
	homogeneous and thus all elements contain the same registers.  The
	first parameter is the index to query and the second parameter
	contains the attribute to check.   The result is <code>true</code>
	if the specified element possesses the specified attribute.

	* The above is implemented pretty much as instruction attributes
	are implemented, except that a new method was added to the
	register-file proxy object.  This behaves like validIndex() for
	sparse register-files.  For non-sparse, the result is a constant
	value for all items.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.12 (v1_6_12) on Linux (lc0100) on 3/2/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.12 (v1_6_12) on Linux (lc0101) on 3/2/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.12 (v1_6_12) on Linux (lc0089) on 3/2/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.12 (v1_6_12) on Linux (lc0101) on 3/2/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.12 (v1_6_12) on Linux (lc0089) on 3/2/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.12 (v1_6_12) on Linux (lc0100) on 3/2/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.12 (v1_6_12) on Linux (lc0101) on 3/2/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.12 (v1_6_12) on Linux (lc0089) on 3/2/2010 ==

2010-03-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Two new selection mechanisms have been added for <b>group</b>
	creation.  You can now use <b>has_attrs</b> to create a group
	based upon whether items have one or more of the listed attributes
	and <b>has_fields</b> to create a group based upon whether items
	have the specified fields defined.  The latter is only applicable
	for instructions, registers, and register-files.  Use of these two
	parameters requires that an explicit type be specified via the
	<b>type</b> key.

	* To implement the above, I had to change group handling pretty
	fundamentally.  It used to be that we'd resolve a group in
	add_defines by looking up the handlers that existed and then
	producing a list of names.  This didn't work for attribute or
	field selection, since we needed access to the eventual data-model
	object.

	So, I changed to a lazy-evaluation mechanism.  Now,
	ArchHandler::add_defines returns a single object with a name of
	group_defmod, whenever a group is encountered.  The returned
	handler, which derives from AspectRemoveHandler, contains a
	pointer to a GroupHandler.  Two hooks were added into Handler to
	then enable checking for this:  has_expansion and get_expansion.

	As we process items in process_named_handler, we check to see if
	an item has an expansion (in this case, meaning that it has
	GroupHandler pointer).  If it does, then we call get_expansion,
	which then resolves the group and returns the list of items.  We
	then replicate the handler for each item in the group, remove the
	special group-referencing-defmod, then proceed to process each of
	these new items.

	Added fe/group7.adl and fe/group8.adl to test this stuff.

	** Group item selection has been improved so that sub-expressions
	are supported within the <b>items</b> parameter.  For example, the
	following is now legal:
	<pre>
	define (group = g7) {
	  items = ((*g1 | *g2) - *g3);
	}
	</pre>
	This takes the union of groups <b>g1</b> and <b>g2</b> and then
	subtracts the elements of <b>g3</b> to form group <b>g7</b>.

	* To implement the above, I converted the group-handling logic to
	a basic recursive-descrent parser, where sub-expressions are
	handled using a temporary set of results.  Groups are resolved in
	a lazy fashion as they are encountered in expressions.  Any groups
	not encountered in a defmod or an expression are finally handled
	at the end of ArchHandler::process_keys.

	** Any block which handles attributes can now use the
	<b>remove_attrs_nc</b> parameter to remove an attribute, with no
	error message displayed if the attribute does not exist for that
	item.  This is convenient for removing attributes form a list of
	items (using a defmod with groups or the list-syntax), where items
	affected might not have all of the attributes specified for
	removal.

2010-02-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new aspect parameter has been added:  <b>priority = int</b>

	The priority controls the relative ordering of aspect expansion,
	when multiple aspects are found for a given insertion point.  A
	value of 0 represents the highest priority.  By default, no
	priority is set, which equates to the lowest possible priority.
	If multiple aspects have the same priority, then aspect ordering
	is undefined.

	* The above is implemented as a simple unsigned priority value.
	The default value is max-int, so that sorting can be done w/o any
	special cases.  The VarWalker::getAspects method now inserts
	aspects into a temporary vector, sorts it, then inserts the
	resulting list into the actions PtreeArray.

2010-02-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new instruction-field parameter has been added:
	<b>disassemble = &lt;true|false|prefix&gt;</b>.  This controls how the
	field is disassembled by default.  The options are:

	<dl>
	<dt>true</dt>
	<dd>
	Default behavior.  The field is disassembled normally.
	</dd>
	<dt>false</dt>
	<dd>
	Do not disassemble.  This is overridden by an instruction's
	syntax, if specified.
	</dd>
	<dt>prefix</dt>
	<dd>
	Disassemble in front of an instruction's mnemonic.  This occurs even if
        an instruction's syntax string also specifies it.  This is useful for
        implementing instruction prefix syntax without explicit <code>%p</code> fields in
        all syntax strings.  To support assembly, the user would normally mark
        this field as an <b>assembler</b> field and then set it via assembler
        instructions and the <b>pre_asm</b> hook.
	</dd>
	</dl>

	* Added iss/mod65.adl to test this behavior.

	* Fixed a bug with prefix bits and the assembler.  If a field used
	prefix bits, but non-prefix bits were contiguous with the prefix
	bits, then we weren't properly splitting the field.  Fixed this by
	modifying the set-function generation code.  Added iss/mod65.adl
	to test this.

2010-02-23  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The disassembler had a bug, whereby it would not preserve
	trailing bits from prior words when shifting to take into account
	prefix bits.  This meant that operand bits could be lost if it
	occurred at the edge of a word.  Fixed this and modified
	iss/mod59.adl with asm38.s to test it.

	* Makefile.am (DISTCHECK_CONFIGURE_FLAGS): Turned off
	usage-logging during distcheck.

	* We had a subtle error in PipelineStage for multi-issue machines.
	When updating the token cache, we weren't clearing out old
	entries, so a call to set_releasable(bool), which affects all
	entries, could modify an instruction that was no longer in that
	stage.  Fixed this by clearing remaining elements of the
	token-cache and modifying set_releasable(bool) so that it iterates
	over the list of tokens (doesn't use the cache), since that's
	unnecessary.

2010-02-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We weren't handling the situation where the user has a bad
	enumerated value that could be legal.  Fixed this and modified
	iss/mod60.adl to test this.

	** <b>adl2doc</b> has a new option, <b>--syntax-prefix-fields</b>
	for controlling whether fields which precede the instruction
	mnemonic are displayed.  The default is true.  This option may be
	negated.

2010-02-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The assembler now has a list of friendly-field names, sorted by
	index.  This is now used to produce better error messages, such as
	when a user tries to access a non-existant field in an asm hook.

2010-02-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified assembler argument processing so that pseudo-fields can
	be used as instruction-prefix fields and then used within
	expressions properly.  Previously, this was broken.  I re-did how
	the assembler parses arguments, moving to a model in which it
	collects all prefix and regex arguments into an array of string
	extents, then passes this to process_operands.

	The front-end also changed- when creating disassembly-syntax
	strings, I now do a final substitution on expressions, so that we
	don't have pseudo-fields in that string.  Added fe/inst126.adl and
	fe/mod64.adl to test this.

2010-02-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Yet another change to the uADL scheduler: I now skip execution
	of instructions in stall-backwards pipelines, that are in the same
	stage.  I have also introduced a stalled() predicate so that users
	can gate action to prevent execution when there are stalls.

2010-02-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We didn't support ThisReg for sparse-register entries.  We also
	weren't initializing VarWalker::_cur_reg, so it was possible to
	get a segfault.  Added fe/reg41.adl and modified iss/mod3.adl to
	test this.

2010-02-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I've commented out the DevTech assembler tests b/c the output
	seems to change frequently and includes absolute paths, so it's
	difficult to regress.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.11 (v1_6_11) on Linux (lc0100) on 2/11/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.11 (v1_6_11) on Linux (lc0100) on 2/11/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.11 (v1_6_11) on Linux (lc0089) on 2/11/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.11 (v1_6_11) on Linux (lc0101) on 2/11/2010 ==

2010-02-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We weren't handling a corner case when creating instruction
	tables which required the allow_conflict flag on a field.  It was
	possible that, for instructions of varying size, a field with
	allow_conflict might fall outside the range of other instructions,
	causing an issue.  We now clear all bits in the conflict mask that
	fall outside the range of the smallest instruction in the set of
	conflicting instructions.  Added fe/inst125.adl to test this.

2010-02-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added a --no-log-usage option to adl2asm so that usage logging
	can be toggled off.

	* Changed the signature for the DevTech assembler integration
	ADL_get_version function to return a string reference.

2010-02-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a problem with executing instruction handlers multiple
	times in a multi-issue uADL model.  We would keep processing a
	fetch exception, resulting in a bad SRR1 value.  Fixed this by
	adding an extra flag which tracks if the exception has been
	issued.  Added dlx2_safe with issue6.dat to test this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.10 (v1_6_10) on Linux (lc0100) on 2/4/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.10 (v1_6_10) on Linux (lc0101) on 2/4/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.10 (v1_6_10) on Linux (lc0089) on 2/4/2010 ==

2010-02-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified usage logging to support extensions that will be made
	to the statistics generation back-end.  Added KEYWORD, GENTOOL,
	and GENVERSION information.  The rdriver and adl-db scripts now
	log usage, as do the generated assemblers and disassemblers and
	transactional/hybrid models.

	* We had a problem with name conflicts when dynamically linking in
	an assembler.  The issue was that we weren't protecting some of
	our classes with namespaces, e.g. InstrInfo, so if a user's
	program also had a class of that name, the linker could get
	confused and use the wrong operations, e.g. a vector of InstrInfo
	might get the wrong class-size and thus cause segfaults.  Fixed
	this by moving InstrInfo and some other stuff into the adl
	namespace.

	* Reverted to the pre-1.6.8 scheduler for uADL, where instructions
	in a lock-step pipeline are evaluated behind stalls.  This allows
	the existing z650 and z446 regressions to pass, but there might be
	other issues.  However, the 1.6.8 scheduler, which didn't evaluate
	such instructions, made it impossible to model the z650 because
	the z650 expects to start memory transactions as soon as an
	instruction moves into Exec0, even if another instruction stalls
	when it's in Exec2.

2010-02-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed a bug with disassembler-syntax generation.  If we had to
	create a dsyntax object, then we were ignoring the addition of
	simple enumerated objects, e.g. %p fields which preceded an
	instruction.  This caused a mismatch in the dsyntax format, which
	could lead to an exception when the disassembler iterated through
	the various fields.

	* adl-asm-impl.C: Added a better error message for when a matching
	instruction form cannot be found, so that the user can figure out
	what the input was that caused the problem.

	* Fixed another encodingg problem.  We would check the conflict
	mask first, before progressing to another word, sometimes
	resulting in us choosing a conflict mask bit when we shouldn't
	have.  If all instructions then depended upon that single bit,
	then encoding would fail.  We now try all words first w/o the
	conflict mask, then try again if that fails.  Added fe/inst123.adl
	to check this.

2010-01-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new parameter has been added to instrfield definitions:
	<b>allow_conflict=&lt;bool&gt;</b>  If set to true, then during instruction
	encoding, it is legal for this field to conflict with other
	instructions' opcode fields.  The idea is that the field will be
	set to a value such that a conflict will not actually occur.
	However, because this is a field, it can theoretically take any
	value, and thus it appears to the decoder-generator as if a
	conflict does exist.

	** A new parameter has been added to instruction definitions:
	<b>next_table = func() { ... };</b> This is a new hook which
	allows the user to define an alternate instruction table to be
	used for the next instruction decode.  This instruction is used by
	both the static disassembler and by the simulator, so it is
	limited to querying only instruction field values and then setting
	a new instruction table via <b>setCurrentInstrTable()</b>.

	* Added iss/mod63.adl and fe/inst122.adl to test the above new
	features.

	* Fixed an issue in the disassembler generator with prefix bits.
	A problem could arise if we attempted to create a disassembler for
	an architecture with prefix bits, if some of the opcode bits were
	shifted across a word boundary due to the prefix shift.  Fixed
	this by instead shifting and combining the instruction data
	itself.

2010-01-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* I improved the algorithm for selecting terminating characters
	for the assembler.  We now only consider characters from
	enumerated fields which abut the end of the instruction name.  I
	also moved the instruction-name search logic in to the front-end
	and store offsets for the name in the Syntax object.  I modified
	mod61.adl to have a field which is unused, but would conlict if it
	were considered, to make sure that we properly ignore it.

2010-01-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/make-release-notes (make_change_url): We now create
	links to a change-set for when interface changes are detected.

	* We now use the ADL_FULLPATH macro for prest, since prest is
	installed in the MTR/STR.  This way, releases will point to a
	properly installed version of prest.

	* Fixed a problem with dynamic TLBs: We weren't properly reseting
	a dynamic TLB if it had a reset function, which mainly was a
	problem if we decreased the size.  Fixed this and added mod21 with
	in192.dat to test.

	* The number of allowed instruction attributes has been increased
	from 32 to 64.  The code generator is now smart enough to use a
	uint64_t if the number of attributes exceeds 32.

2010-01-26  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Updated the methodology notes to reflect the current release
	process.

	* Updated make-side-release to create a distribution as well.

	* Updated make-oss-release to generate an oss-specific readme and
	then to copy the data to the external server.  Thus, the release
	process is now fully automatic.

	* Updated make-release-notes to download CSV and modified the Trac
	report to include the resolution.  We now skip invalid and
	duplicate tickets when listing tickets in the readme.

	* The open-source release process is now fully automated and the
	readme file for the open-source release contains a relevant
	header.

2010-01-25  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Converted back to the pipeline-scheduling algorithm from 1.6.8,
	where a stalled instruction stops evaluating the instructions
	behind it.

	* Modified the documentation generator.  We now create explicit
	links for all sections and use those names in link references in
	order to avoid issues with case sensitivity and ambiguity when
	targets differ only by punctuation (which gets clobbered in the
	conversion process to an id).  I also fixed some problems which
	were due to StarCore specific changes: We were always printing in
	little-endian, rather than basing the decision on the core and we
	weren't printing instructions' encodings if there were aliases
	present, which is an SC specific behavior.  I now print the
	encoding unless all aliases are nested instructions.

2010-01-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added in support code for running the simulation until completion.

	* Moved the pool allocator into iss/PacketPool.h so that it can be
	used by modules other than just an ISS.

	* Added code for generating the pool allocator for instruction
	classes.  The factory functions now allocate from this pool.  The
	instruction class is freed back to the pool when it transitions
	from the final state back to INIT.

	* Initial development of the scheduler.  This handles both
	lock-step and non-lock-step pipeline stages and combinations of
	the two.  In the case of lock-step, we break a state's action into
	an inquire and an action phase, then evaluate all inquires first,
	followed by actions and subsequent stages, only if no stalls are
	encountered.

	* Basics of state-machine traversal are now in and the initial
	model compiles.

2010-01-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* In order to reduce the total number of hash tables, I create a
	hash table mapping enum_field ptrs to enum_hash ptrs during
	instruction field creation.  During instruction setup, I check
	this hash, and re-use the hash if one is found.  I'm using an STL
	hash b/c the gas hashes only handle char* keys.

	* Fixed a bug in the new process_operands function.  I wasn't
	properly iterating over the relevant data structures.  We
	basically have three independent arrays: the arguments, the
	operands, and the operand-value array (with enums being parallel
	to this).  Each requires its own iterator.

2010-01-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The ADL-generated assembler now supports the ability to have
	flags precede the instruction name.  This allows the user to
	implement a predicate syntax, e.g. <code>flag instr arg,arg</code>

	Only enumerated, order-independent fields (<b>%p</b> in the syntax
	string) may precede the instruction name.

	* To implement the above, the operand processing code in the
	assembler was extensively reworked.  When initially processing the
	assembly input line, we go through three phases: Identify any
	possible prefix flags, identify an assembler instruction, then get
	the instruction itself.  When generating the assembler, we look
	for all possible enumeration values that can precede the
	instruction name and scan for this pool.  Right now, we don't
	catch the situation where the user uses a prefix field that isn't
	handled by the instruction; we'll just ignore this for now.

	During operand processing, we also process in three phases: Handle
	the prefix fields from an independent list, then scan the regex
	results for permutable fields, then process the fixed fields.

	Added mod62.adl with asm33.s to test this new feature.

	* Converted bfd_boolean to bool in the assembly code, since we're
	now compiling in C++.

2010-01-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The <b>adl2iss</b> option <b>--log-reg-unarch</b> has been
	changed to <b>--log-unarch</b>.  It now affects both registers and
	exceptions.

2010-01-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added attributes to the xml/perl database generator for register
	fields.

	** The ADL assembler generator has been enhanced so that
	user-defined helper functions may now be called in short-hand
	alias expressions and by the various assembler hooks, such as
	<b>post_asm</b>, <b>post_packet_asm</b>, <b>pre_asm</b>, and
	assembler rules.

	* The generated assembler now includes intbv headers, in
	anticipation of support for arbitrary user helper functions.

2010-01-14  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* iss/tracediff.C (adl): Modified this to use traceable
	containers, rather than gc'd containers, since their usage is
	hierarchical and this should improve performance and decrease
	memory usage (esp. in MinGW).

2010-01-13  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL <i>aspects</i> have been enhanced.  Identifiers listed with
	<code>if_defined</code> are checked against an instructions
	<code>blk</code> type in addition to instruction fields and core
	resources.  This allows an aspect to be conditionally expanded if
	an instruction has a certain block type.

	Additionally, a new key, <code>has_attrs</code>, has been added.
	This allows the user to list attributes to be checked.  Aspect
	expansion only occurs if the resource in question has one or more
	of the attributes listed.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.9 (v1_6_9) on Linux (lc0100) on 1/13/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.9 (v1_6_9) on Linux (lc0101) on 1/13/2010 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.9 (v1_6_9) on Linux (lc4001) on 1/13/2010 ==

2010-01-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The assembler InstrInfo API has been expanded to include
	<code>instrHasField(&lt;field-name&gt;)</code>, which allows the
	user to query for whether an instruction has the specified field.

	* iss/GenSim.C (adl): We were not reseting architectural
	parameters in the reset function, which meant that it was possible
	for a subsequent test, after a reset, to have incorrect behavior.
	Added mod11 with in191.dat to test this.

2010-01-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Instruction field getter functions weren't being processed by
	the standard instruction walker, and thus couldn't access
	registers and such in the design.  This is now fixed- a walker can
	be passed in, which is done by the ISS.

	* Added an example of a model with high-register encodings, but
	where only some instructions can use those bits (fewer than the
	number of instructions which can execute in parallel).  The model
	(mod61.adl), test both the assembler and the model.

	* We weren't catching the situation where an instruction field
	might reference another instruction field, but the widths didn't
	match, and it was indexed.  Fixed this and modified fe/inst57.adl
	to test.

	* We weren't properly handling the case where we had a 0-operand
	instruction in the same VLES as another instruction.  The trick
	here is that we have to recognize that the textg matched by the
	regular expression will always fail b/c it's actually the next
	instruction.  We tried to detect this case, but it was a hack- it
	only worked if there was a single assembler field.  I modified
	adl_assemble_instr so that it now works for any number of
	assembler fields.  Modified mod60.adl and added asm30.s to test
	this.

	* Fixed problem in GenAsm: When checking to see if something is an
	instruction packet object, we didn't test to see if an item was a
	leaf before we took the Car(), thus potentially causing a
	segfault.

	* u_int is now defined in BasicTypes.h for MinGW builds.

2010-01-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We weren't properly handling O_illegal in build_instruction, so
	that we thought a fixup was required.  In fact, we should ignore
	illegals, as they really indicate that a value just wasn't
	present.  This was a problem when using createInstr and not enough
	arguments were supplied.

	* info() and error() weren't working in post_packet_asm because we
	weren't generating the support functions.  Fixed this and modified
	mod60.adl to test.

2010-01-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Further memory work: Converted more data structures in VarWalker
	to just using the traceable allocator in order to reduce memory
	usage.  At some point, we'll need to figure out why the
	gc_allocator doesn't seem to be working correctly all of the time.

2010-01-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Switched all front-end components over to using gc_string, which
	is just basic_string with the gc allocator.  It turns out that the
	memory leak of using std::string with the gc became acute for some
	users, such as S12, so that memory was exhausted.  We still seem
	to have a memory leak in VarWalker, but this change helps a lot.

2010-01-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** Added more flexibility to the post-packet assembly handler.
	The user can now create and modify instructions using two new
	functions: createInstr and replaceInstr.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* For the above feature, iss/mod60.adl was added to demonstrate
	and test the new API.

2009-12-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Various changes to fix issues with instruction fields which
	split bits between prefixes and the instructions themselves.  Our
	field setters weren't detecting when some bits were in a prefix,
	thus potentially wrapping over into other bits in the
	instruction.  We also didn't detect when a field in a prefix
	instruction had a non-prefix field, causing a segfault, and we
	weren't handling default values correctly.  Added iss/mod59.adl to
	test this.

2009-12-08  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* When using fixed-size slices in library-mode, an error would
	result because of C++ ambiguity.  The solution is to use the
	.template disambiguator, but that's only valid when used in
	templates.  Yuck!  So, RtlWalker has to know if we're in
	library-mode and generate different code.  That's implemented and
	I modified libdriver.C to call srw, which uses such a slice, in
	order to make sure that this works.

	** The <code>addr_check</code> hook can now take 3 extra optional
	arguments.  Its new forms are:

	Original:
	<pre>
	addr_check = func(addr_t ea,addr_t ra,TransType tt)
	</pre>
	or the new form:
	<pre>
	addr_check = func(addr_t ea,addr_t ra,TransType tt,int id,int set,int way)
	</pre>

	The <b>id</b>, <b>set</b>, and <b>way</b> parameters identify the
	tlb and location in the tlb used to make the translation.  These
	parameters can be omitted for improved performance.

	* Modified mod11.adl to test the above enhancement.

	* The assembler now automatically handles the case where
	instruction fields map onto prefixes.  If a value of a field
	changes a prefix's default value, then the prefix is automatically
	inserted by the assembler.  Implemented this by extending the
	initial 'assembler' field concept for normal fields.  I also had
	to change the prefix-field setter code generation so that it
	handled the case where a field consists of only a portion of a
	prefix field, e.g. RA has an upper bit that's bit 1 of HighReg,
	which is a prefix field.  Modified mod58.adl with iss/asm25.s to
	test this.

	* Fixed default file names for the assembler- they were still set
	to use .c as a default extension, even though we're now generating
	C++ files.

	* Had to refactor the finalization of instructions- processing
	instructions whose encoding is split between the instructions and
	prefixes had to be pushed to after finalization so that fields are
	finalized first in an instruction's 'type' target.

2009-12-07  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Fixed two assembler bugs: We weren't properly handling bounds
	checking for fields which, due to a shift value, ended up being
	32-bits in width; the upper bound got set to 0, which was wrong.
	We now calculate bounds using uint64_t and store as longs in order
	to be compatible with the assembler.

	We also weren't ignoring assembler fields when doing input
	validation, which could cause us to reject an instruction.  We now
	skip over assembler fields in valid_input().

	Modified mod45.adl and added iss/asm26.s to check these issues.

2009-12-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* fe/Data.C (adl): We weren't handling the case, when processing a
	shorthand, that a target might not have been set up properly,
	resulting in no target field pointer.  This caused a segfault.  I
	now check for that and throw a PError.  Updated fe/inst20.adl to
	check for this.

	* Improved error handling for runcmd in wrapper scripts: It now
	prints the failing command and whether a coredump occurred.

	* The Perl interpreter's true location is now discovered and used
	by the various wrapper scripts, just as for the C and C++
	compilers.

	** Two new commands have been added to the scripting interface:

	<dl>
	<dt>active [path]</dt>
	<dd>
	Returns the active-count for the current or specified path.  For a
	core, the active count is 0 if halted, 1 if active.  For a system,
	it is the sum of the child active counts.
	</dd>
	<dt>setactive [path] value</dt>
	<dd>
	Sets the active count for the current or specified path.  This
	enables the user to halt or re-active cores within the scripting interface.
	</dd>
	</dl>

	Refer to the <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-cli.html">
	ADL ISS scripting-interface manual</a> for more information.

	* Added the above command, plus cli/c44.cli to test it.  I also
	fixed a bug in the scripting logger- the TargetState temporary,
	because it didn't have a name for the variable, was having its
	destructor called immediately.  So, the path was not set correctly
	once an event was called.

2009-12-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The disassembler wasn't properly building decode trees when
	prefix-shift was enabled because we were shifting the value
	obtained after grabbing a single word from a larger mask; the
	shift needed to be done on the entire mask in order to handle
	large masks.  The prefix-shift option is now on by default.

2009-12-01  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified the assembler messaging system (warnings, errors,
	fatals) so that it will interface with the DevTech assembler.  The
	gas interface uses the same interface as before, but I had to copy
	the routines, since the original ones used stdard ... and didn't
	have va_list variants.  The way it works now is that adl_bad,
	adl_fatal, etc call the as_* equivalent (the va_list variants).
	The equivalent routines for the dt integration push messages onto
	a vector using the API that was worked out with DT.  Added
	adlapi2simapi/asm2.s to test that messages can be displayed with
	file/line-number info and that no segfault is caused.

2009-11-30  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added an option to the disassembler generator, --prefix-shift,
	to turn on or off the shifting of the instruction based upon
	prefix bits.  This is a bit of a hack right now, as it appears
	that the RunSim integration doesn't want the shift, but the
	standalone assembler does.  I'll probably remove this option as I
	learn what the differences are- when one is needed vs. the other.

	* Added a regression to check the DevTech assembler integration.
	The environment variable DTASM_DIR is used by configure to find
	the DevTech assembler executable.

2009-11-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Reverted to the prior method for implementing rigid pipelines.
	I had moved to simply not evaluating active instructions after a
	stall, but his caused some problems with how the z650 was modeled.
	I don't think that concept is flawed, but it was easier to not
	worry about it right now.  The new implementation is an
	improvement over the old, however, as I simply check a boolean
	flag that's set when a stall occurs.

	* Minor fix to the disassembler:  We now figure out if the next
	read will exceed the boundary of the current section and we change
	our read-size accordingly.

	* Makefile fix for file distribution issue.

2009-11-18  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Additional assembler support, plus an example of setting prefix
	fields using an assembler rule.

	* Addition of support for multiple blocks and fixes to frag
	allocation order.

	** The syntax for assembler rules has changed slightly.  Whereas
	instruction-rules used to take no arguments, they now take a
	<code>InstrInfo</code> argument.  Previously, helper functions
	such as <code>instrHasAttr</code> and <code>instrBlk<code> were
	used to query the current instruction's attributes and block type.
	Now, these are methods of the <code>InstrInfo</code> argument.

	In addition, support for multiple instruction-block types has been
	added to the assembler.  The <code>instrBlk</code> method will
	return true if an instruction is a member of the specified block
	and <code>numInstrBlks</code> returns the number of blocks that
	the instruction has.

	* The assembler implementation now uses the C++ interface so that
	users can directly access the instruction bundle or item within
	rules and packets.

2009-11-17  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The assembler implementation has now been converted over to
	using some C++ data structures.  This mainly concerns the storing
	of instructions (packets and groups of packets), which now use a
	C++ vector.  Little else has changed for now and the interface on
	the user-side has not yet changed.

	* The generated assembler, plus ADL support, is now compiled in
	C++.  This doesn't change any functionality yet, but the intent is
	that it will make it a lot easier to support sophisticated user
	hooks by allowing us to pass in C++ classes.

2009-11-16  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new option has been added to <b>adl2iss</b>:
	<b>--ignore-mode</b>.  Setting this flag enables the ignore-mode
	API in a model.  When the mode is activated within the model, all
	writes to registers and to memory are skipped.  For hybrid-ISSs,
	tracking of writes still occurs.

	* Modified mod48.adl to test the above.  This was mainly added so
	that StarCore could use this for modeling their predicated
	instructions. The idea is that the performance model still needs
	to track what resources are used, so you can't just simply skip
	the instruction.

2009-11-12  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Initial instruction class code generation.

	* Initial creation of a stubbed out uadl model.  I had to split
	the uadl model into a header and impl file due to mutual recursion
	between needed declarations.

	* uadl/GenCode.C (uadl): Just getting started on the new code
	generation.  This just creates the relevant, empty files.  The
	idea will be that the .cc file for uadl is basically empty- it
	just includes the header (which has everything in it), with
	appropriate defines so that it's treated as an implementation
	file.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.8 (v1_6_8) on Linux (bkahne-ec1) on 11/11/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.8 (v1_6_8) on Linux (lc0101) on 11/11/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.8 (v1_6_8) on Linux (lc0100) on 11/11/2009 ==

2009-11-11  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** <b>adl2doc</b> has a new option,
	<b>--proportional-subfields</b> for controlling whether subfields
	of registers are forced to display with widths proportional to
	their bit-size.  The default is false.  This option may be
	negated.

2009-11-10  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Modified how make-doc creates the instructions-by-attributes
	appendix.  For each instruction, it makes sure it's used and not
	an alias.  However, if it's not added, it then scans all children
	to see if they have the attribute, and adds itself if any one
	does.  For children, aliases are not skipped.  Modified
	docs/doc8.adl to test this.

	* <b>adl2doc</b> has a new option, <b>ops-in-affect-tables</b> for
	controlling whether explicit operands are displayed in the
	Affect/Affected-by tables for instruction aliases.  The default is
	true.  This option may be negated, in which case explicit operands
	will only show up in the Operands table.

	** <b>adl2doc</b> has a new option, <b>--instr-prefix-bits</b> for
	controlling whether prefix bits are shown in an instruction's
	encoding.  By default, this is true.  The option may be negated,
	in which case prefix bits will not be shown.

	* adl2doc omits an instruction field's width; it only shows size,
	based upon SC request.  We might want to conditionalize this in
	the future.  It also now shows the 'shift' value as well.  This
	has also been added to dbgen.

	** ADL now explicitly requires Perl Getopt::Long 2.33 as a minimum
	version.  This ensures that negated options work properly.
	Earlier versions did not support the use of <b>--no-</b> as a
	negated option prefix.

2009-11-09  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** A new key has been added for instruction fields:
	<b>doc_title</b>.  This may be used to specify an alternate name
	for documentation and other human-readable uses.

	* Added doc/doc7.adl to test the above feature.

	** Plasma 0.8.47 is now required by ADL.

	* Change to requiring Plasma 0.8.47 in order to use the new method
	for specifying alternate temporary filenames and so that
	catch-block decls are properly added to the environment (added
	fe/inst120.adl to test this).

	* asm/GenAsm.C (adl): Modified getFieldsVal so that it sets a
	"skip" flag if we come across a reserved or missing table entry in
	an instruction-field.  This entry is then skipped so that we can
	allow such reserved or incompletely specified tables.  Modified
	mod45.adl to omit two entries in order to test this.

2009-11-05  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Added better error messages for when the assembler generator
	finds that not enough elements are found within an
	instruction-field table.  Previously it would just segfault.

	* For some reason, I was not allowing return statements in action
	code.  However, I think it's important to have this so that
	aspects, for example, an abort an instruction based upon a
	predicate check.  So, I changed it so that it's now allowed.

2009-11-04  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/adl-dat.el: Updated to work with the emacs 23.  xemacs
	support is now deprecated.

	* Fixed a problem with aspect expansion:  We weren't producing a
	correct block when expanding instruction pre/post aspects, so
	translation during model creation was not working properly.  Fixed
	this and modified iss/mod4.adl with in189.dat to test this feature.

2009-11-03  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* When creating a writer in the scripting interface, we weren't
	instantiating it from the root, but from the current node.  That
	meant that other nodes weren't known about, which could cause
	segfaults due to null pointers.  I also don't now insert any
	logger with a null, in order to also avoid this problem.

	** The ELF reader now supports function descriptors and
	automatically uses them for architectures it knows which use them.
	Currently this is just PowerPC64.  When enabled, the entry-point
	address and symbols have their values modified to the value of the
	function-descriptor target address, so that, for example, the
	value of the <b>main</b> symbol will point to the actual code,
	rather than to the function descriptor itself.  This can be
	overridden on the command-line by using the <b>--elf-use-fd</b>
	option, which may be negated.

2009-11-02  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Changed the implementation for stall-backwards pipeline stages
	from using stall functions (functions called on a stall which set
	pointers in previous pipeline stages) to simply breaking out of
	the evaluation loop if a stall is encountered on a stage which
	stalls backwards.  This simplifies things and addresses the
	problem whereby, in a dual-issue machine, the second instruction
	in a given stage should be stalled if the first instruction
	stalls.  However, it won't work in the general case of a
	multi-pipeline machine.  On the other hand, such a machine might
	not have rigid pipelines, so it might not be an issue.

	** ADL <i>aspects</i> have been enhanced so that expansion can be
	controlled by whether specified symbols are defined with respect
	to the insertion point.  For example, a user may check to see if
	an instruction field or exception exists.  Symbols to be checked
	are simply listed in the aspect's <b>if_defined</b> key.  Refer to
	<a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2009-10-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tests/uadl has been commented out for now, so that we can run
	the regressions from the root and not get errors.

	* The uADL parser uses a new feature in the ADL generator to
	modify the decode functions so that it returns an object created
	by the uadl class that's passed in.  Each instruction, as it's
	decoded, calls a dedicated function, whose return value is then
	returned by decode.  The idea is to eliminate the overhead of
	doing a second lookup of the appropriate instruction class object.

	* Renamed "managers" to "resources" to be a bit clearer to the
	average user.

	* Added a custom-resource class, which just stores a header name
	and a map of parameters.  This will be used to support
	user-defined resources in the future.

	* Merged source-masks into the operand definitions.  Operands may
	now only be single elements, but they can be repeated.  The new
	syntax is:

	  Operand = <register|register-file|register-file(element)>

	or

	  Operand = (<register|register-file|register-file(element)>,mask);

2009-10-29  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* tests/intbv/Makefile.am: The callTemplatizer

2009-10-28  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** The ADL annotation commands (info, warning, error) have been
	extended to allow the user to pass key/value data through the
	logging system, in addition to the message string.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	The signature for <code>LogBase::log_annotation</code> has changed
	in order to accommodate this extra information.

2009-10-27  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* scripts/make-release-notes: Added an option to let the user
	specify certain interface files to check.  If there are
	differences between the current and previous version, then an
	interface-change is considered to have occurred, which causes a
	banner stating as such to be inserted into the README notes.  The
	make-release-notes target in doc/Makefile.am lists what files are
	checked.

2009-10-22  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* Actions now require that all state code (to the right of the
	label) either be a block or an if-statement, in order to avoid
	any inadvertent dropped statements.

	* We now sort the stages and store them in uADL_IR.  The sorting
	is done by looking at the distance from the final state and then
	sorting them in order of ascending distance.  Thus, a simple
	pipeline will simply be evaluated in reverse order.  A more
	complex pipeline will be evaluated in a similar manner, where
	the order of parallel stages doesn't really matter.

	* Implicit checks are now added for space in a stage, if a check
	doesn't appear inthe outer-scope.  However, we do require that
	there are explicit state changes for all stages, since we don't
	have explicitly defined edges any more.

2009-10-21  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* We had a bug with handling prefix instruction fields: With only
	a single block, we weren't generating code correctly due to some
	conflicting condtions between multi-block handling and non-block
	handling.

2009-10-20  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	** ADL <i>aspects</i> have been enhanced so that aspects can be
	automatically inserted at the start and end of instruction action
	code, in addition to being inserted at specified code labels.
	This can be done via the aspect block keys
	<code>instr_pre_exec</code> and <code>instr_post_exec</code> which
	each take booleans.

	Overall expansion works as before:  For any given scope, parent
	scopes are searched for matching aspects.  Therefore, to limit
	instruction pre and post-exec aspects, simply place them in a
	defmod which lists only certain instructions.

	** The documentation generator has a new option:
	<b>--orig-instr-action</b>.  If true, the original instruction
	action code is displayed, before any processing, thus hiding any
	aspect expansion.  If false, the processed code, with all aspects
	expanded, is shown.  The default is false.

	* The DMI reset function didn't get called if the cache was
	disabled.  I changed this, since we only reset the cache at
	startup.  The lack of a proper reset meant that we could get stale
	data between tests in a standalone ISS.

2009-10-19  Brian Kahne  <bkahne@bkahne-ec1.am.freescale.net>

	* The set watchpoint/breakpoint routines add in a default value to
	payload in order to stay consistent with declarations in
	ModelInterface.h.

	* I've switched over to logging usage immediately, in order to
	avoid a weird segfault that occasionally happens, such as with
	Raptor..

2009-10-17  Kevin Grant  <keving@freescale.com>

	* Improved object-hiding in documentation: Until now, although there was
	a separate routine for checking if an object was specifically hidden, the
	implementation would bail and just check if anything with that name was
	marked as hidden.  This was potentially wrong; for instance, a user might
	mark a register file named "L" as hidden, but this shouldn't prevent a
	register *field* named "L" from appearing.  Now, when objects are hidden
	by pointer, that pointer is remembered and checked in most cases (except
	those few cases where the only information available is a name).  This
	affects "misc/docgen.C" and hideObject() and related routines and data.

	** Instruction documentation now includes links to any helper functions
	used in the "Action:" section.  These links also appear in the actual
	definitions of helper functions, if they call other helper functions.

	** Action arguments are now shown in documentation, in certain cases
	where they are useful, such as register on-read and on-write, and
	core-level hook functions.

	* Added helper-function links to code in documentation: As requested in
	#498, links to helper functions are now added after certain code blocks,
	such as the "Action:" sections in instruction documentation.  Since all
	helpers appear as an appendix, these links do not first verify that the
	link targets are valid (because they are not seen yet).  If the user has
	turned off the generation of the helper function section, the functions
	are still listed, but as plain text instead of links.  Changed the code
	in "misc/docgen.C" to add the links, and also to indent the code section
	in a separate literal block (so that the links are not treated literally).
	Several existing testcases now show these links.

	* As part of changes to the function print-out mechanism, added an option
	to printFunc() to not necessarily print only the body, but also the name
	and arguments.  This is now the default in some cases where it is useful,
	e.g. in core-level and register hook blocks.  But the change was required
	because get_func_body() (see "fe/Helpers.C") could return nothing for a
	helper function, whereas printing the entire value is always successful.

	* Fixed sub-field widths: As requested in #498, although base field tables
	make each cell width proportionate to the bits it uses, nested fields
	were left at a fixed size.  Now, nested fields also scale.  An example of
	this is in "tests/docs/doc5".  Code changes in "misc/docgen.C", to use
	the same scaling approach in writeSubFields() as is used in writeFields().

	* Changed register usage display in documentation: As requested in #498,
	when an instruction's sources or targets refer to nested fields, only the
	longest affected register field should be displayed in the usage table.
	As a side effect, used fields are now listed from smallest to largest.
	Affected code is in "misc/docgen.C".  Modified "tests/docs/doc5.adl" to
	show an example of this.

2009-10-16  Kevin Grant  <keving@freescale.com>

	** Enhanced generated documentation for registers and register files,
	primarily to make the field display more compact and in order of bit range.

	* Enhancements to register field documentation: As requested in #498, the
	field information is now also displayed in bit order.  The entire display
	has also been cleaned up, to use a table (for vertical compression), to
	put the description in a block, and to move the reset value closer to the
	bit range display.  Changed "misc/docgen.C"; existing "tests/docs/doc*.adl"
	tests cover the changes.

2009-10-15  Brian Kahne  <bkahne@freescale.com>

	* Instruction-class action code is now parsed and assigned to
	action objects associated with states.  The list of to-states is
	recorded for each action object.

	* Start of major uADL revamp.  The back-end doesn't do anything
	and has been commented out for now.  The front-end has the new
	machine and instruction-class processing, with initial support for
	operands, including cross-referencing them to instructions.  A
	basic regression exists in uadl-fe, but the uadl regression won't
	pass, since no model is yet generated.

2009-10-15  Kevin Grant  <keving@freescale.com>

	** The adl2doc script now passes through the --warn-redefine option, and
	the default behavior is now false.

	* Added --warn-redefine to adl2doc: This was already supported by make-doc,
	where it actually had a default value of false.  Added to the adl2doc run
	for tests/docs/doc2.

	* Fixed possible conflict with exception names in documentation: As found in
	elf_v5.adl (adlmodels), if an exception had the same name as an earlier
	heading that was targeted by a link, such as a register, then "prest" would
	generate an error.  This is resolved by adding "Exception" to each exception
	heading.  Normally duplicate names are OK, because heading names are
	tracked as they are defined, and subsequent links are automatically avoided.
	But exceptions are an appendix, which means in a single pass their name
	conflicts are not found in time.  Changed "misc/docgen.C" and added an
	example of this conflict in "tests/docs/doc5.adl".

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.7 (v1_6_7) on Linux (lc0101) on 10/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.7 (v1_6_7) on Linux (bkahne-ec1) on 10/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.7 (v1_6_7) on Linux (lc0101) on 10/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.7 (v1_6_7) on Linux (lc0100) on 10/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.7 (v1_6_7) on Linux (bkahne-ec1) on 10/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.7 (v1_6_7) on Linux (lc0100) on 10/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.7 (v1_6_7) on Linux (lc0100) on 10/13/2009 ==

2009-10-13  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with cycle-handlers: We weren't putting in a
	cycle-ratio increment if we only had a post-cycle handler.  Fixed
	this and modified mod23 (with in188.dat) to test this.

	** The external DMI interface has been reworked so that it is now
	part of the model and configurated at build time.  The
	command-line parameters to enable and configure this are:
	<dl>
	<dt>--extern-dmi</dt>
	<dd>
	Turn on the external DMI interface.  This may be used with
	internal or external memory, but only really makes sense for
	external memory; usage with internal memory is primarily just for testing.
	</dd>
	<dt>--extern-dmi-entry-size</dt>
	<dd>
	Size of each entry in the DMI cache, log(2) bytes, e.g. 7 = 128
	byte entries.
	</dd>
	<dt>--extern-dmi-size</dt>
	<dd>
	Number of entries in the DMI cache.
	</dd>
	</dl>		
	For a DMI cache with external memory, misses in the cache are sent
	to the usual <code>MemHandler</code> object.  Please refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-integration.html">the
	ADL integration guide</a> for more information.

	** MMU misaligned-write and misaligned-read hooks have been added
	to the documentation and database generators.

2009-10-12  Brian Kahne  <bkahne@freescale.com>

	** For uADL, <code>allocate()</code> and <code>inquire()</code>
	transactions for pipeline stages can now take a second argument,
	which represents a count value.  This allows the user to allocate
	multiple slots in the pipeline stage at once.  This is useful for
	modeling a dispatch-serialized instruction in a multiple-issue
	machine by allowing the instruction to completely allocate a
	pipeline stage, preventing other instructions from proceeding and
	preventing the serialized instruction from proceeding until all
	other instructions have committed.

	* To implement the above, stage tokens now include a count value
	along with the releaseable flag.
	
2009-10-09  Kevin Grant  <keving@freescale.com>

	** Nested instruction field documentation is now compacted.  The
	redundant or irrelevant information from nested fields is hidden.

	* Fixed instruction field permitted values: As noted in #498,
	nested instruction fields should not always report permitted
	values.  This is now resolved by "combining" nested fields much
	in the way nested instructions can be combined: if there is a
	nested instruction field with a table, it is considered the table
	of permitted values for the parent field.  Details such as width
	are now displayed only for the parent, not for any nested fields.
	Implemented with the help of a new "InstrFieldNestingInfo" class.

	* General instruction field documentation improvements: As part
	of merging (above), rearranged certain bits of field information
	to be clearer and more compact.

	* Improved "tests/docs/doc5.adl": Added a non-trivial register
	file, that is then referenced by a nested instruction field.
	This is a better example of the field display.

2009-10-07  Brian Kahne  <bkahne@freescale.com>

	** The uADL unlock() transaction can now take a delay parameter,
	which delays the unlock operation for that many cycles after the
	transaction executes.  For example:
	<pre>
	unlock(L1,1);
	unlock(Mem,1);
	</pre>
	means that the L1 cache and memory will not be available until the
	next cycle after the unlock() transaction executes.

	* Modified uadl/dlx_2M to test the above with lock1.dat.

2009-10-07  Kevin Grant  <keving@freescale.com>

	* Fixed documentation of register file entry syntax: As requested
	in #498, if a sparse register file entry has syntax specified, that
	syntax should appear in documentation.  Also took the opportunity
	to use pure reStructuredText instead of raw HTML for the sparse
	register file tables, since the HTML was not necessary.  Added an
	explicit syntax example to "tests/docs/doc5.adl".

	* Fixed hiding of registers in sparse register file documentation:
	The "doc_hidden" attribute should also have applied to entries that
	use a hidden register.  This can be seen in tests such as
	"tests/docs/doc1.adl".

	* Fixed field bit wrapping in documentation: As noted in #498, it
	was possible for certain browsers to lay out field tables in a way
	that would cramp bit fields and cause them to wrap.  The bits are
	now joined with raw HTML non-breaking spaces to prevent this.  To
	simplify things and shrink the generated HTML, removed the style
	classes embedded in fields (which were not used anyway).  See
	"tests/docs/doc5.rst.regress".

2009-10-06  Kevin Grant  <keving@freescale.com>

	** Documentation sorting and indexing improvements: Sections are
	now all sorted case-insensitively so that things are easier to find.
	Alphabetical indexes are also used in more places.

	* Fixed sort ordering in documentation: Expanded case-insensitive
	sort to cover sections such as Helpers and Instruction Fields.
	This is important for handling alphabetical indexes properly (#498),
	and is also easier to read.  Note that "misc/docgen.C" was changed,
	instead of the data model, and this is key: if the sorting were
	changed in the model, maps would incorrectly ignore case when
	deciding equivalence (R != r).  Covered by "tests/docs/zen0.adl"

	* Cleaned up object-hiding for alphabetical indexes: Now that a
	pre-sort is done in various sections, it is far easier to sanitize
	the list up front.  This revealed a few corner cases where objects
	were not properly skipped, causing the index to sometimes create
	letters that would point nowhere.  Most notable for instruction
	fields.  See "tests/docs/doc5.adl".

2009-10-06  Brian Kahne  <bkahne@freescale.com>

	* We had a bug in uADL, where we would use implicit_release (which
	ignores latencies if the stage token is explicitly held) even if the
	user had an add_latency transaction.  This was the same problem we
	had with exec(<latency>) and was fixed in the same way- by
	switching to a normal release() (rather than implicit) if we find
	either exec w/latency or add_latency.

	* uadl/Logger.C: uADL logging would display erroneous data values
	with iss-mem-mode because it would always supply request.buf as a
	data pointer, even when no data had been written into the buffer.
	I changed this behavior so that it was conditional on _withData.
	This way, with iss-mem-mode, no data value is supplied during
	logging.

2009-10-05  Brian Kahne  <bkahne@freescale.com>

	* iss/tracediff.C:  I changed the type of command that a UVP
	memory intermediate result uses from "D" to "M" to reflect how a
	DAT works- the D is incorrect b/c D in a DAT file means the memory
	operation from the core's perspective, whereas M reflects the
	real-address, aligned words accessed by the op.

	** New options have been added to tracediff:

	<b>--check-all-card=str</b>:  This enables the user to specify
	individual command-types which should be strictly checked, along
	the lines of what the <b>--check-all</b> option does.  The memory
	type <b>M</b> (which corresponds to UVP load and store
	intermediate results) is now always strictly checked.

	<b>--no-check-all-card=str</b>:  This removes a card/command type
	from the set to be strictly checked.

	* Fixed a bug with uADL reset: The cache wasn't calling
	Memory::reset(), so some memory requests could hang around,
	messing up subsequent execution b/c they were no longer valid.
	Fixed this and added a test with tests/scripts/driver6 to test it.

	** <b>adl2doc</b> now allows the user to specify a subtitle using
	the <b>--subtitle=str</b> command-line option.  While only one
	title may be given (via the <b>--title=str</b> option), multiple
	subtitles are allowed by simply repeating the option.

2009-10-01  Brian Kahne  <bkahne@freescale.com>

	** ADL's instruction encoder can now handle the situation where
	two instructions have identical encodings for their n words, and
	differ only on later words.  In this case, we skip forwards across
	the identical words, until we find a word in which the
	instructions differ.  If no differentiation is found, then we
	signal an encoding conflict.

2009-10-01  Kevin Grant  <keving@freescale.com>

	* Instruction field documentation now has an alphabetical index:
	Using the recent improvements to "misc/docgen.C", added an index
	for instruction fields as well.  Updated several documentation
	testcases accordingly.

	* Improved the code for alphabetical indexes: Created a class
	"AlphabetIndex" in "misc/docgen.C", and updated the Instructions
	documentation generator to use it.  This will make it easier to
	support an index in other sections, such as Registers and
	Instruction Fields.

	* Fixed register documentation to support "doc_hidden": This
	attribute was respected for entire registers, but not for fields
	individually.  Such fields are now hidden both in the description
	of the field, and in any instructions that would use the field.
	Covered by "tests/docs/doc2.adl".

	* Fixed instruction alphabet links: It was possible for conflicting
	names (typically, registers like "D" and "R") to be chosen by the
	link accidentally.  It turns out that reStructuredText just has no
	good way to produce links that wouldn't conflict, unless the title
	of each alphabet link was more than just a letter (and simply
	adding punctuation has no effect).  So "raw html" is now used for
	the alphabet links at the top of the Instructions documentation.
	The link targets are still generated with "pure" reStructuredText.

2009-09-30  Kevin Grant  <keving@freescale.com>

	* Fixed instruction titles copied from nested instructions: These
	did not contain the block name(s) of the instruction family, as
	other titles normally do.  This requiring splitting out the code
	that appends the block, so that arbitrary strings could be
	annotated with the blocks in a standard way.

	* Added more space between instruction titles and block names:
	This actually required creativity because reStructuredText and
	HTML both compress whitespace.  The fix was to recognize that the
	output is UTF-8 encoded, and to write a non-breaking space as raw
	bytes.  This makes it into the .rst file and the HTML, and is
	rendered by Firefox in the expected way.  Requested by #498.

	* Restored reStructuredText use in instruction docstrings: These
	had been changed into literal blocks, but are once again normal
	paragraphs that support formatting.  Fixed a number of regression
	tests that were affected by this change, primarily because the
	example had an embedded link, and those now have different names.

	* Changed instruction sorting algorithm: It was possible for
	instruction documentation to be printed in an odd order, after
	taking into account custom titles and inherited names.  So now,
	a list is explicitly constructed and sorted (again) based on the
	final titles.  The sort is also now case-insensitive. Update to
	"misc/docgen.C".

	* Fixed attributes in nested instruction documentation: Attributes
	were being shown for parent instructions but not aliases.  See #498.
	Simple change to writeAttributes() in "misc/docgen.C", reflected in
	"tests/docs/doc2.adl".

	* Clarified concatenated descriptions in documentation: Nested
	docstrings are concatenated (see #498), but now the parts that are
	specific to a nested instruction have that instruction's label.
	Simple change to writeAttributes() in "misc/docgen.C", reflected in
	"tests/docs/doc2.adl".

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.6 (v1_6_6) on Linux (bkahne-ec1) on 9/29/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.6 (v1_6_6) on Linux (lc0100) on 9/29/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.6 (v1_6_6) on Linux (lc4001) on 9/29/2009 ==

2009-09-29  Brian Kahne  <bkahne@freescale.com>

	* iss/GenMmu.C (adl): Got rid of an unnecessary getMmuInfo stub.

2009-09-28  Brian Kahne  <bkahne@freescale.com>

	* adlapi2simapi/src/Makefile.am (sc3400_arch.so): Looks like the
	usage-logging system might be interfering with RunSim and causing
	a segfault.  I've turned off usage-logging when building this
	shared object for runsim, for now.

	* There was a strange dmi-cache memory corruption issue on 64-bit
	optimized, when usage-logging was enabled.  I fixed it by changing
	the code so that usage-logging is done upon exit.  This has the
	advantage of also now properly logging the return-code and seems
	to have made the problem go away.  Not sure of the real cause,
	except that it happened on calls to system functions which
	modified static data, e.g. gethostbyname and getpwuid.

2009-09-28  Kevin Grant  <keving@freescale.com>

	* The "doc_hidden" attribute now works for instruction fields: As
	requested by #498.  This is in addition to existing support for
	hiding registers or register fields.  When hidden from documentation,
	a field's description is omitted; any links to its name are shown as
	plain text (to avoid "prest" errors).  An example is in the test
	"tests/docs/doc5.adl".

	** Instruction fields can now store attributes: The "attrs" key is
	now allowed in instrfield defines and defmods.

	* Instruction fields now support attributes: As required by #498.
	This required making InstrField inherit from Attrs instead of Base,
	and adding a call for attributes in the parser's instrfield handler.
	Also updated some of the "tests/fe/attr*.adl" tests to add and
	remove different kinds of attributes from instrfield blocks.

	* Fixed register usage headings in documentation: If the tables for
	instruction source or target registers end up empty, headings are
	no longer generated.

	** Generated documentation now includes "Instructions by Block" as
	an appendix, by default when more than one block is defined.  Shows
	every block associated with instructions, with links to the
	instructions.

	* New "Instructions by Block": In "misc/docgen.C", added a routine
	to build a cross-reference with every instruction using a given
	block.  Also added an appropriate command-line option to let the
	section be disabled (since all other sections can be disabled).
	To avoid possible broken links, any instructions that are not used
	by the core are omitted from the block cross-reference section.
	This is illustrated by "tests/docs/doc2.adl".

	* Fixed "Instructions by Attribute" sorting: Also affects the new
	"by Block"; instructions could end up in a "mostly alphabetical"
	order with a few odd ones at the end, but the appendix is now
	explicitly sorted.

	** The order of bit fields in documentation (registers, instruction
	fields) is now reversed, showing the highest bits on the left.

	* Reversed bit fields in documentation: As requested in #498, the
	order of fields is now reversed by default, so that the largest
	bits in registers and instruction fields appear on the left.
	Technically, both directions are implemented, however there is
	currently no option to choose between them.  Most of this was
	already implemented, but some minor quirks were fixed.  Also, to
	simplify, this is now handled by keeping data structures in "lowest
	first" order regardless of the display.  The data is reversed at
	the last possible moment, so that complex manipulations (like
	padding with reserved fields) do not have to be correct for two
	different orderings.

2009-09-27  Kevin Grant  <keving@freescale.com>

	* Fixed the "Permitted Values:" sections to use the actual prefix
	of a register file.  This can be seen in "tests/docs/doc2*".

	** Instruction documentation now starts with a list of links for
	relevant letters of the alphabet, if there are more than a few
	instructions.

	* Added letter links to instruction documentation: As requested in
	#498, it is now easy to jump to instructions whose names start
	with a certain letter.  This unfortunately seems to require a
	separate pass over instructions (as long as the links appear at
	the top, and not in an appendix).  Reflected in existing tests in
	"tests/docs/doc*.adl".

	* Further tweaked "doc_title" defaults: As requested in #498, the
	default title (syntax) for each nested instruction is inspected,
	ignoring the block; when all instructions have the same title,
	this title is chosen as the default for the family.  This ensures
	that customers only have to add "doc_title" annotations in
	ambiguous cases.  As with other title changes, this is tracked in
	the InstrFamilyInfo class ("misc/docgen.C"), so that anything
	requesting the family display name has the right value.  Covered
	by "tests/docs/doc2.adl".

	* Slightly improved operand tables in documentation: The block is
	displayed under "Applies To" when nested instructions come from
	more than one block, so that it's clear which is intended when
	they would otherwise have the same syntax.

2009-09-24  Brian Kahne  <bkahne@freescale.com>

	** A new option has been added to <b>adl2iss</b> and
	<b>uadl2model</b>:

	<dl>
	<dt>--log-usage=prog-name:version</dt>
	<dd>
	If set, then the model that is generated will log usage
	information to the Freescale usage-logging server (if built within
	Freescale).  The user may specifiy a program name and version
	number to be logged.  If not specified, the base-name of the input
	file and the current date (YYYY.MM.DD) will be used.  The option
	may be negated by using <b>--no-log-usage</b> or <b>--log-usage=false</b>
	</dd>
	</dl>		

	** A new MMU hook has been added: 

	<pre>
	misaligned_read = func(addr_t ea,addr_t ra) { }
	</pre>

	This is analogous to <code>misaligned_write</code>, except that it
	occurs for data reads.

2009-09-24  Kevin Grant  <keving@freescale.com>
 
	* Fixed instruction syntax in documentation: As requested in #498,
	instruction syntax should fully-expand the syntax of any nested
	instruction fields it refers to, e.g. instead of "xyz DaDb_Da_Db",
	use something like "xyz Da:Db".  Updated "misc/docgen.C", and
	added an example of this to "tests/docs/doc5.adl".

2009-09-23  Kevin Grant  <keving@freescale.com>

	** Instruction field documentation now displays every combination
	of permitted values, for fields that contain tables or refer to
	register files.

	* Enhanced instruction field documentation to include tables: As
	requested in #498, the documentation for instruction fields now
	includes the allowed values, if there is a table or register file
	reference.  When displaying a range of allowed values or registers
	from a table, an encoding is also displayed that is based on the
	width of the field and the table indices.  An example of a simple
	range is in "tests/docs/doc2.adl"; and "tests/docs/doc5.adl" shows
	an example of a table.

	* Various minor documentation tweaks: As requested in #498.  Some
	sections were renamed.  The "Pseudo" field has been removed from
	instruction field documentation.  Updated documentation testcases
	accordingly.

2009-09-22  Kevin Grant  <keving@freescale.com>

	** Nested instructions may now disagree on their "blk" values, as
	long as their common parent instruction lists the blocks that are
	used by the children.  This is specified with a new "blk = (list)"
	syntax that is valid for parent instructions.  This is currently
	used only to display different block names in documentation; any
	other part of ADL that seeks the "block" of a parent instruction
	will currently be given the first block in the list.  Children
	continue to have exactly one associated block.

	* Enhanced "blk" syntax: As requested in #498, it is desirable to
	allow nested instructions to belong to different blocks.  Errors
	have been tweaked to not require exact block value matches between
	child and parent; instead, the parent declares a list of all the
	blocks that are used, and the child must simply match one of those.
	A change was made to "tests/docs/doc2.adl" to demonstrate this new
	usage.  The documentation generator "misc/docgen.C" was slightly
	changed to show multiple blocks for parents, and is the only place
	outside the front-end where block iteration is done.  Most code
	continues to rely on the InstrBase::get_blk() API, since there is
	still at most one block per instruction.  But, several changes
	were made to front-end files to deal with the fact that blocks are
	now stored as a list and not as a string.

	** Documentation for a family of instructions now shows all
	descriptions (from documentation strings) in one section.

	* Enhanced instruction documentation: As requested in #498, the
	documentation strings for nested instructions are now handled in a
	special way.  The description at the family level is ignored when
	there is a single son, similar to how the title is derived.
	Otherwise, all descriptions appear at the family level, one after
	another.  One exception: since customers can generate their
	documentation strings automatically, the descriptions might all be
	identical within the family; so, identical copies are ignored.
	Covered by additions to "tests/docs/doc2.adl".

2009-09-22  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the DMI cache:  It was possible for a DMI-cache
	hit to modify a parameter, e.g. data-endianness, and then
	there could be a subsequent hit in the normal translation cache
	which, because it's a hit, doesn't modify the parameter, so it
	could, at that point, be out of synch.  Fixed this by having
	DMI-cache hits call checkDataPerms() so that subsequent
	translations will have to fully translate and thus set the
	permissions correctly.

	* Read-operand and commit functions for transactional ISSs now
	omit the switch statement if there is no source or target
	(respectively) in order to avoid warnings by compilers which don't
	like empty switch statements, e.g. MSVC.

2009-09-21  Brian Kahne  <bkahne@freescale.com>

	* adl2doc now allows the user to pass arguments to prest using the
	--prest-arg option.  It also defaults to generating an HTML
	document, so that it can be directly loaded into Word.  This
	basically just means that the XML version declaration is omitted.

	** The ELF reader is now supported under Microsoft Visual Studio
	C++.

	* In porting to RHEL 5.3, I discovered two issues:

	1.  The details of the setjmp/longjmp jump buffer are no longer
	published.  I've modified the coro.m4 macro to automatically
	detect the lack of such defines and switch to using
	makecontext/switchcontext functions.

	2.  For some reason, there seems to be a SIGIO even after I've
	masked it out.  This caused problems with the gdb interface
	because the extra signal would disable the cores, putting the
	interface into the debugger-slave-mode (only responding to
	actions).  I fixed this by adding an extra flag which is checked
	by the signal handler before inactivating the cores.

2009-09-20  Kevin Grant  <keving@freescale.com>

	** Several new section options in <b>adl2doc</b>: See the help or
	manual for details.  Basically, there is now an option to suppress
	each section individually; by default, all sections are enabled as
	long as the associated objects are defined.

	* New "adl2doc" options: As requested in #498, added options to
	allow suppression of certain sections.  This required updates to
	several redundant things (multiple documents, scripts, and C code;
	"doc/adl-language-reference.rst", "scripts/adl2doc.in", and
	"misc/docgen.C").  Also, the code that generates links had to become
	smarter, to avoid errors from linking to nonexistent targets.
	Added a "doc2-no-sections.rst.regress" test for the new options.

2009-09-19  Kevin Grant  <keving@freescale.com>

	* Documentation "doc_title" attribute reimplemented as a key: After
	discovering that attributes are automatically inherited by nested
	instructions, "doc_title" is now a top-level key for instructions
	and the attribute has been removed.
	Enhanced "tests/docs/doc1.adl" to specifically test "doc_title" on
	a nested instruction, to make sure that the title only works at the
	top level.
	This was implemented by adding the concept of a custom name to the
	Named class in the data model ("fe/Data.*"), which is assigned by
	the "doc_title" handler in the parser ("fe/Handlers.C").  A new
	docName() method is then used instead of the name() method, whenever
	the documentation generator wants to allow a custom name.

2009-09-17  Kevin Grant  <keving@freescale.com>

	** Documentation of instruction families with a single nested alias
	is now collapsed into a single instruction, copying the appropriate
	parts of the alias (such as syntax) into the parent.

	* Single-instruction-family documentation enhancements: As requested
	in #498, an instruction "family" containing exactly one alias is now
	documented as if it were one instruction, silently pulling appropriate
	details from the alias.  This includes the heading, which copies the
	alias syntax, and the operand table, which omits "Applies To" info.
	Changed "misc/docgen.C".  The "tests/docs/doc{1,2}.*" cases show how
	the documentation is different.  Notice that "doc1" has an instruction
	"mr" that is a single alias of another ("or"), but this is *not*
	coalesced, because one is not nested in the other.  Whereas, "doc2"
	now has an example of a single, nested alias that acts like just one
	instruction.

	* Took the opportunity to create an "InstrFamilyInfo" data type, used
	only in documentation, to keep family information in one structure.
	This also provided a convenient place to manage instruction renamings,
	because links (such as in an appendix) also need to be aware of
	instruction families that inherit a title from an alias (above).
	Modified genInstrs() and getInstructionTitle() in "misc/docgen.C" to
	use the new type.

2009-09-17  Brian Kahne  <bkahne@freescale.com>

	* I had to modify the tests/scripts/driver program to just use
	mod1.o, rather than mod1.so, due to the fact that on 64-bit
	systems, the JIT doesn't appear to work for shared objects.  The
	problem is that shared objects get loaded into the top of memory,
	which means > 4 Gb on x86_64.  However, the relocations are all
	32-bit, meaning that we end up with bad pointers in the code
	pages.  I don't know a good way to fix this yet.

2009-09-16  Kevin Grant  <keving@freescale.com>

	* Fixed documentation references to hidden registers: Whenever an
	object is hidden with the "doc_hidden" attribute, references to
	the hidden object should also be hidden (or at least, links should
	be disabled).  Minor change to "misc/docgen.C" to track the hidden
	names.  An example of this fix is in "tests/docs/doc2.*".

2009-09-16  Brian Kahne  <bkahne@freescale.com>

	** Watchpoints are now supported in JIT and trace-cache models.

	* To support the above, a DMI cache is now turned on even if there
	is no cache or MMU.  There is also now a concept of DMI-reserved
	memory; reads and writes are handled separately.  This is checked
	by the update functions; if they're reserved, then they're not
	added.  Watchpoints, when added, add an entry to the respective
	read or write reserved hashes.  These are set up as addr_t ->
	unsigned hashes, where the address is aligend to the start of the
	DMI page and where the value is a counter.  Each new
	reserved-entry adds to the counter; clearing an entry decrements
	the counter and removes the item if 0.

	Added in41.dat (checked against in41-dmi.dat) for mod1 in both JIT
	and trace-cache modes.

	** A new option for <b>adl2iss</b> has been added:  <b>--td-api</b>

	This feature adds support for the temporal-decoupling API now
	defined in <code>ModelInterface.h</code>.  This defines a 64-bit
	counter, increment value, and threshold on a per-core basis.  Each
	instruction executed increments the counter by the increment
	value.  When the counter is >= the threshold, the
	<code>IssNode::run()</code> loop will exit.  Note that clearing
	the threshold will result in the run-loop exiting immediately.

	This is true for interpreted, trace-cache, and JIT simulators.
	The use of this feature is intended for models integrated into
	platforms, in order to allow a model to execute instructions in
	larger blocks for increased run-time performance.

2009-09-16  Kevin Grant  <keving@freescale.com>

	** Documentation for operands is now shown as a single table for
	all instructions in a family.  An "Applies To" column shows the
	aliases that make use of each field/mapping pair, as well as the
	syntax of each alias.

	* Documentation of alias operand mappings has been compacted: As
	requested in #498, a single table is now presented to show all
	operand mappings for an instruction family, instead of having one
	per alias.  However, this required additional storage to ensure
	that no unique information per instruction was lost.  All changes
	are in "misc/docgen.C".  The main change was to keep track of each
	unique field and value combination, and to build a single table
	per family, instead of one table per instruction.
	Examples of the value of this change can be seen in "tests/docs/"
	in "doc{1,2}.*".  For example, in doc2, the "bc" instruction's
	operands are not always mapped in the same way for every alias in
	the family; so, the single table tries to be as compact as possible,
	but does not lose the unique mapping information.

2009-09-14  Brian Kahne  <bkahne@freescale.com>

	* In safe-mode, the unknown-instruction OSM is now implemented
	using its own class, with a set of simple traversal functions.

	* All tests exception Zen0_empty pass with the new graph-traversal
	algorithm.  Unknown-instruction handling still has to be
	implemented properly.

2009-09-11  Kevin Grant  <keving@freescale.com>

	** Documentation for instructions is now more compact if a family
	consists of a single alias.

	* Various minor documentation changes: As requested in #498, any
	constant operand mappings (e.g. opcodes) are no longer shown.
	When exactly one alias is present in a family, the alias subheading
	is hidden.  The instruction field table has been relocated, so that
	it appears in a consistent place regardless of whether or not there
	is an alias.  The table is also now hidden if it has no useful
	fields; otherwise, it appears in a new section "Instruction Format:".
	This required small code changes to genInstrFieldDescription() and
	genInstrs() in "misc/docgen.C", though it caused significant changes
	in regression tests (because of things being moved and reformatted).

2009-09-10  Brian Kahne  <bkahne@freescale.com>

	* Initial implementation of the new graph-traversal algorithm.
	The graph is now traversed by traversal functions which test each
	edge and then execute action code and make the appropriate state
	modification directly.  State actions (implemented as edge
	actions) change state, then automatically do a tail call to the
	next state traversal.  OSMBase::action() is now no longer virtual
	and can be inlined for improved performance.  Logging is handled
	in the change-state function.  dlx and dlx2 regressions now pass-
	more testing to follow.

	* All edge behavior is now divided up into inquire and action
	code, removing the duplication that was present in the action
	section.

2009-09-09  Brian Kahne  <bkahne@freescale.com>

	* Fixed a problem with OSMBase::distance: We can now have loops
	which aren't just self-loops due to the addition of the extra
	states for implementing state actions.  This means that we have to
	track which states have been visited in order to avoid infinite
	loops.  At this point, all regressions pass.

	* Departing actions have to be linked to the prime state so that
	the're called when an instruction leaves to the next real state.

	* OSMBase now initializes all edge inquires and actions to default
	values so that the generated instruction classes only have to
	override what's different, e.g. state actions modify the edge
	action entries but we don't need to modify the inquire entries
	because we just use the default (which just returns true).

2009-09-08  Brian Kahne  <bkahne@freescale.com>

	* All regressions now compile, but not all tests yet pass.  I
	removed dlx_parallel, since we no longer support parallel
	semantics.

	** The user may now specify a default state -> stage mapping in a
	machine description, which will be used by instruction classes
	which use that machine, unless overridden by a mapping in the
	instruction class itself.

	* The fetch-exception class was rewritten to use a custom machine,
	in order to eliminate the special state and edge inquire/action
	virtual functions.  All dlx and dlx2 regressions now pass.

2009-09-08  Kevin Grant  <keving@freescale.com>

	** Documentation of instruction source and target register fields
	has been improved: A table links to each register and lists the
	relevant fields by name, along with details on usage (such as,
	Partial or Conditional).

	* Improved instruction documentation on register usage: A table is
	now used to show in more detail the registers or parts of registers
	that influence or are modified by instructions.  (This covers the
	request in #498 to be able to show register field names instead of
	just masks.)  Since only a bit mask is normally available in usage
	information, and only bit ranges are normally available in register
	fields, new routines were required to allow these to be directly
	compared (see subtractMaskFromBitRanges() and bitRangesMatchMask()
	in "misc/docgen.C", as well as writeInstrRegUsageInfo()).  Examples
	of these tables can be seen in tests 1, 2 and 46 of "tests/docs".

	** Documentation of instruction fields now omits the sub-ranges of
	split fields.

	* Instruction field documentation omits sub-ranges: As requested in
	#498, field sub-ranges, e.g. [0,4], are no longer displayed, though
	they can be inferred.  The ranges might still be useful as an optional
	behavior in the future, so the code in "misc/docgen.C" is merely
	disabled.  In "tests/docs/", doc1, doc5 and zen0 show the effects.

	** Documentation supports a new attribute "doc_hidden", initially
	for registers and register files, to request that they not appear in
	documentation at all.  See the ADL language reference for details.

	* Documentation-hidden attribute: New "doc_hidden" attribute has been
	added (requested in #498).  Initially supported only by registers and
	register files.  Whereas "doc_no_code" hides only the source code,
	this option allows users to hide the entire register from generated
	documentation.  Straightforward code changes to "misc/docgen.C",
	reflected in "tests/docs/doc5.adl".  Also updated the ADL manual.

2009-09-04  Brian Kahne  <bkahne@freescale.com>

	* Initial re-write of the interrupt class to remove its use of
	virtual functions for state and edge actions.  Not all dlx2
	regressions pass yet.

	* More internal changes: I've eliminated the virtual functions for
	dispatching edge inquires, edge actions, departing actions, and
	stall actions.  Now, we just jump directly to the relevant
	functions.  For edge actions/inquires, we populate with dummy
	functions so that we don't have to check for the null case.  We
	still check for nulls for departing and stall actions.  All of
	this will go away as soon as we move to a staic, generated
	scheduling scheme.

2009-09-04  Kevin Grant  <keving@freescale.com>

	* Documentation attribute changes: Attributes that only have
	significance to the documentation generator ("doc_*" by convention)
	are now automatically excluded from generated documentation, e.g.
	in per-instruction lists and "attributes by instruction" lists.
	They act nonexistent; so, for instance, if the *only* attribute is a
	documentation attribute, the associated attribute section disappears
	(as if no attributes were defined) instead of becoming empty.

	** Documentation supports a new attribute "doc_title", initially
	for instructions, to override the title chosen for that instruction's
	heading and links.  See the ADL language reference for details.

	* Documentation title attribute: New "doc_title" attribute has been
	defined to allow users to override the generated title (which is
	also used for any links).  Currently only applies to instructions.
	This required updating "fe/Data.*" to not only mention the new
	attribute, but to have a way to pre-register attributes that take
	parameters.  Used in "misc/docgen.C", and covered by the test
	"tests/docs/doc2.adl".  Already documented in the language reference
	manual, which was accidentally committed early in the previous
	revision.

	** Documentation for instructions has been tweaked in a few ways.
	The syntax is now shown directly in the heading, and if there are
	more than a pair of enumerated values used for a parameter, the
	field name is displayed instead.  All instruction attributes have
	been moved to the end of the instruction's documentation.
 
	* Several minor changes to generated documentation: Continuing the
	enhancements for #498.  The attributes of an instruction are now
	listed at the end of its documentation.  Syntax is now displayed
	directly as the title of the instruction documentation.  Most
	enumerations are no longer spelled out, unless they contain pairs
	(e.g. "+/-"); the field name is preferred instead.
	Straightforward code changes to "misc/docgen.C", and the affected
	tests in "tests/docs/*.adl"; most changes are evident in doc1, doc2,
	doc5 or zen0.

2009-09-04  Brian Kahne  <bkahne@freescale.com>

	* Cleaned up the adl-config output by reducing duplication, fixing
	a few mistakes, and modifying tcl.m4 to only emit unique lib
	paths.

2009-08-31  Brian Kahne  <bkahne@freescale.com>

	* Internal change to uADL: I converted from using member function
	pointers (which have a significant performance disadvantage) to
	normal function pointers for state, edge, etc. functions.  These
	are actually static member functions which then just call the
	appropriate method.

2009-08-31  Brian Kahne  <bkahne@freescale.com>

	* Instruction attributes in MMU lookup hit functions are now also
	regarded as mmu attributes, and thus cached in the
	load/store/instr translation cache.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.5 (v1_6_5) on Linux (bkahne-ec1) on 8/26/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.5 (v1_6_5) on Linux (lc0100) on 8/26/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.5 (v1_6_5) on Linux (lc0089) on 8/26/2009 ==

2009-08-26  Brian Kahne  <bkahne@freescale.com>

	** Basic support for the MinGW Windows platform is now available.
	Only the back-end runtime libraries have been ported.  Users
	should configure with <code>--disable-frontend</code> on this
	platform.

	* Due to linking issues on MinGW, I modified the user routines for
	system-call handling, e.g. syscall_return_code, so that the
	routines are inlined if enabled or not enabled.  When enabled, the
	inlined routines call an internal routine.
	
2009-08-24  Kevin Grant  <keving@freescale.com>

	* Enhanced documentation of field mappings for instruction aliases:
	As requested by #498, operand usage is more clearly documented
	("misc/docgen.C").  Instruction fields have been converted into
	headers so that they can be easy link targets, and links are now
	generated in a table for each alias instruction.  This is visible
	in testcases such as "tests/docs/doc1.adl".

	* Fixed duplicate instruction field documentation: The names of
	instruction fields are now tracked, in case the same field appears
	more than once, so that duplicate documentation is not generated
	("misc/docgen.C").

	* Fixed constness: In InstrBase::Field, for isOpcodeImp() and
	isOpcode() ("fe/Data.h").

2009-08-21  Kevin Grant  <keving@freescale.com>

	** Instruction attributes now appear in generated documentation.
	Each instruction will list the attributes it has.  In addition, a
	new "Instructions by Attribute" section shows every attribute that
	is used by instructions, with links to the instructions that use
	each attribute.

	* Fixed #540: In "misc/docgen.C", added a routine to generate a
	list of attributes for an instruction, and a routine to build a
	cross-reference with every instruction using a given attribute.
	This is best illustrated by "tests/docs/doc2.adl".  It also had
	minor side effects on other documentation testcases.

	* To avoid confusion, the "Attribute" heading has been removed from
	the tables in instruction field documentation; tables of keys and
	values are now written by themselves, without headings.

	* Added header linking utility: An unfortunate problem with prest
	and reStructuredText is that anchors implicitly generated from
	headings (e.g. instruction and register names) cannot be used
	verbatim: they are transformed in such a way that ambiguity occurs
	when headers differ only by case.  The documentation generator now
	attempts to track the likely anchor names of headings as they are
	written.  This allows link-generating code to carefully avoid any
	target name that would lead to a prest error.  The main limitation
	right now is that documentation is generated in one pass, so links
	in an appendix are quite robust (since all headers have been seen)
	but links early in the document are still not robust.

2009-08-21  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the ElfParser: When looking for a symbol by
	address, we should have ignored sections without PROGBITS set.
	This has been fixed.

2009-08-20  Kevin Grant  <keving@freescale.com>
 
	* Fixed #526: For all instructions that have the same name, variants
	containing enumerated fields are now parsed first by the assembler.
	Syntaxes using multiple enumerated fields have even higher precedence.
	This prevents highly-generic regular expressions from "matching"
	syntaxes that would more appropriately match a specific enumeration
	from a different instruction variant.  This required an addition to
	the SortInstrInfo functor in "asm/GenAsm.C", and a template method
	InstrField::sizeFieldsWhose(pred).  See the new "tests/iss/asm23.*".

2009-08-20  Brian Kahne  <bkahne@freescale.com>

	* TLB-write intermediate results for UVPs have been modified so
	that they have the core's name prepended if the update core is
	different from the current core.  This is analogous to how
	broadcast register updates are handled.

	** The breakpoint/watchpoint API has changed slightly:

	<ul>
	<li>
	A new method has been added,
	<code>IssNode::setTmpBreakpoint</code> to allow the user to set a
	temporary breakpoint.  This is a breakpoint that is erased
	immediately after it has been triggered.
	</li>
	<li>
	The various breakpoint/watchpoint set routines now take an extra
	argument, <code>PtBase *payload</code>, which allows the user to
	associate arbitrary data with a particular watchpoint or breakpoint.
	</li>
	<li>
	The <code>LogBase::log_watchpoint</code> routine now takes an
	extra parameter, <code>bool pre</code> which specifies whether the
	watchpoint is occurring before or after the load or store has
	occurred.  This parameter has also been added to the
	scripting-interface watchpoint callback argument list.
	</li>
	</ul>

2009-08-19  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the MMU introspection data: We were assigning
	individual lookup records to indices in MmuInfo based upon ID, but
	we weren't sizing that array properly.  The problem is that IDs
	are allocated sequentially, including interface objects, so that
	the actual lookups in a design might have non-consecutive IDs.  I
	changed things so that the index of an entry does not necessarily
	correspond to its ID.  The UVP writer had to be modified
	accordingly because it was based upon this idea.

	* A check has been put in place to make sure that the number of
	instruction attributes queried within the MMU is <= the number of
	offset bits in the smallest MMU translation.  This way, we know
	for sure that we won't have problems when we store those in the
	translation cache in the simulator.

	* MMU logging in a multi-hit case has changed slightly: We call
	log_mmu_translation within a TLB translate function on the Nth
	match as well, just before we invoke the multi-hit handler.  This
	way, output files show the multiple translations for debug
	purposes.  Modified in179.dat to check this.

	* Instruction attributes queried within the MMU's tests are now
	stored in its own set within the Core object (in addition to the
	instruction-attributes set).  This data is used by the simulator
	generator to put these attributes in the lower-order bits.  Only
	these attributes are checked by the MMU-cache lookup logic.

2009-08-18  Brian Kahne  <bkahne@freescale.com>

	** The signature for the MMU multi-hit handler has changed:  The
	new signature is <code>func(TransType tt,addr_t ea,unsigned
	seq)</code>

	** The signature for the MMU instruction and data miss handlers
	have changed.  The new signature is: <code>func(addr_t ea,unsigned
	seq)</code>

2009-08-14  Brian Kahne  <bkahne@freescale.com>

	* Added a warning to the front-end to alert the user if an MMU
	hasp prioritized TLBs and a multi-hit handler.  In such a
	situation, the multi-hit handler will be ignored.  Modified
	fe/mmu16.adl to test this.

	* Fixed a bug with multi-hit MMUs: We were putting the MMU-scope
	miss handler in the wrong location, so that we would always call
	that miss handler, when in fact it should only be called if no
	matches were found in any of the TLBs.  Modified iss/mod56.adl
	with in 186.dat to test this.

	* Modified adlapi2simapi to support the ccssim_callback_wreg
	function, which allows writes to registers.

2009-08-12  Brian Kahne  <bkahne@freescale.com>

	* The --log-reg-unarch flag no longer affects registers with the
	indeterminate flag, just the unarchitected flag.

	* Merging in new autotools branch (with MINGW support) to the trunk.

2009-08-11  Kevin Grant  <keving@freescale.com>

	* Updated language reference manual, for doc. generation: Added a
	section on documentation-specific ADL attributes (there is just
	one so far), and made other minor improvements to the text.
	Removed a paragraph that was accidentally included redundantly in
	the documentation section.

2009-08-10  Kevin Grant  <keving@freescale.com>

	** Improved opcode field bits in documentation: Fields with preset
	value mappings (e.g. (bits(0),b1)) now show those values in the
	generated documentation, instead of using an unnamed field.

	** Fixed split instruction field documentation: The brackets that
	follow split field names, e.g. [0,3], are now displayed with the
	correct endianness.  Also, single-bit entries are now shown as one
	value and not a range, e.g. [1,1] is now just [1].

	* These documentation fixes are reflected in "tests/docs/doc5.adl"
	(with minor effects on other documentation testcases); code changes
	are in "misc/docgen.C".  The genInstrFieldDescription() method now
	accepts a core argument, so that bit string layout can respect the
	core's endianness.  RNumber is used to do the bit extraction work.
	NOTE: The ADL parser does not apparently support field values that
	are greater than 32 bits (e.g. in a (bits(M,N),0xffffffffef bind,
	8 bits are silently lost).  But, adjacent bits can still be bound
	together and result in a generated field that is greater than 32
	bits, so the documentation generator supports up to 64 bits.  An
	example of such an implicit large field is "tests/docs/doc5.adl".

2009-07-27  Kevin Grant  <keving@freescale.com>

	* More fixes to display of generated fields in documentation: If
	an instruction's field description (bit table) contained any
	generated fields, it would "blow up" into a large table with
	internal names (e.g. *_imp_bits_*).  Now, the target is found,
	so where it would say "AAA__imp_bits_..." it now says just "AAA".
	Modified "misc/docgen.C" and "tests/docs/doc5.adl".  Requested in
	#498.

	* Fixed "make distcheck": Recent TTFW2 changes (r2758) caused the
	"make distcheck" build to fail.  Changed "./Makefile.am" and
	"tests/Makefile.am" to check the new ttfw2 subdirectories, and
	only when TTE is actually configured.

	* Fixed display of generated instruction fields in documentation:
	Minor fix to build_impl(); it can construct two possible field
	variants, but was only setting the is_generated() flag in one of
	the cases.  This is related to #498, case 2b., and is the reason
	that fields such as StarCore's RRR had unwanted variants put into
	the documentation.

2009-07-24  Kevin Grant  <keving@freescale.com>

	* Instruction documentation header change: The block (if any) is
	now shown in parentheses as part of the instruction title.
	Changed "misc/docgen.C" and "tests/docs/doc5.adl".  Requested in
	#498.

	* Improved instruction field documentation: Addressing information
	is now explicitly stated in the table, in addition to being stated
	more subtly in the semantics line.  Relocation information is now
	stated as well.  Requested in #498.  Changed "misc/docgen.C" and
	"tests/docs/doc5.adl", with incidental changes to doc2.

2009-07-23  Kevin Grant  <keving@freescale.com>

	* Fixed subfield ranges: When the subfields of a parent subfield
	do not fill the entire range (e.g. bits 0-15 in the parent, and
	the last subfield uses bit 12), dummy subfields are now added to
	fill up the empty spaces.  This is changed in "misc/docgen.C" and
	"tests/docs/doc5.adl".  It also required a stylesheet change.

	* Fixes to instruction documentation: As requested in #498, there
	are new or changed headings for various instruction components.
	The Syntax is now labelled as such.  Instructions with aliases
	no longer show field descriptions themselves (but their aliases
	do).  The docstring is now the Description section, and any code
	is in an Action section.  Some headings have been renamed for
	clarity, including "Inputs" (now "Influential Registers") and
	"Outputs" (now "Modified Registers").  All changes are in
	"misc/docgen.C", covered by "tests/docs/doc5.adl".  Other test
	changes were only incidental, reflecting changes in the generated
	documentation format.

	* Fixed a minor reStructuredText bug for register resets: An
	additional new-line was needed after the reset values of registers.

2009-07-23  Brian Kahne  <bkahne@freescale.com>

	* Added code to clear the MMU cache on setReg, to make sure that
	if values are poked in, then the cache won't lead to erroneous
	translations.

2009-07-23  Kevin Grant  <keving@freescale.com>

	* Fixed "doc_no_code" attribute for sparse register files: Minor
	fix to "misc/docgen.C", expanded "tests/docs/doc5.adl" to include
	register files.

2009-07-22  Kevin Grant  <keving@freescale.com>

	* Added TTE trace support: The new "ttfw2" top-level contains a
	plug-in for generating TTE-format traces ("ttfw2/PluginTTE.C"),
	and a program ("ttfw2/ttedump.C") for dumping a simple text
	representation of this binary format.  The dumper is used by the
	regression tests ("tests/ttfw2/*").  The plug-in implements Writer
	and LoggingIface, to generate TTE files whose structures
	accurately represent each instruction (based on all its events).
	The dumper uses the TTE API to read files and print a very simple
	one-line-per-instruction text representation.

	* Added TT6 and TTE "configure" macros: This required the usual
	changes to "aclocal.m4" and "configure.ac" and the addition of new
	files in "macros/tt*.m4".  See "ttfw2/README" for details on the
	usage of these new environment variables.  Note that TT6 is only
	supported by "ttedump" and was useful for initial testing; it may
	be phased out later if it has no other value.

2009-07-22  Brian Kahne  <bkahne@freescale.com>

	* Created a new test using mod1-simple, which is mod1 w/o JIT.  We
	create the .cc file and then use adl2iss on it.  The point is that
	mod1-simple.cc will be checked in and distributed, so that we can
	run some regressions when only the back-end libraries are built
	(via --disable-frontend).

	* adl2iss and uadl2model will now detect that an input file is a
	.cc file and will switch off generation automatically, just
	compiling the file.

2009-07-21  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with tracediff: Comparison of Card objects didn't
	always work b/c we tried to convert an item to an integer first,
	and considered it a success if we were able to convert anything,
	rather than the entire thing.  So, a cache data card would convert
	the first integer, then compare just that, and not any of the
	other items in the data card.  Now, we detect a failure b/c the
	conversion does not convert the entire string; we then compare as
	two strings, which catches miscompares in the cache data.  Added
	trorig1.dat and tr11.dat to explicitly test the failure case with
	tracediff.

	* uADL safe-mode models with grouped transactions, e.g. stmw/lmw,
	had bad data in the transaction itself, which then polluted the
	cache.  Functionally, this didn't result in bad answers, but it's
	a problem since the UVP writer looks at the top of the memory
	hierarchy, resulting in potentially bad final results.

	Fixed this by, in safe mode, copying the data from the
	transactions to be skipped into the first transaction in the
	grouping.  Modified dlx_cache_split_safe to be non-iss-mem-mode
	and ran this on loadstore5.dat to demonstrate the problem.

	Note: I think there could still be a problem with non-safe-mode
	models if there are not an even number of transactions.  We should
	look into this at a later date.

2009-07-20  Brian Kahne  <bkahne@freescale.com>

	* We had a problem with UVP tlb comments- a newline wasn't added
	if it was the last item in the list.  Fixed this so that the code
	matches how log_annotation is handled.

2009-07-17  Brian Kahne  <bkahne@freescale.com>

	* Fixed an oversight with command-line options: --syscall-enabled
	was not defined for make-uadl or uadl2model and wasn't in the
	config-file parser.  Modified scripts/dlx2.so to have
	--no-syscall-enabled in order to make sure that this option works.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.4 (v1_6_4) on Linux (bkahne-ec1) on 7/16/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.4 (v1_6_4) on Linux (lc0100) on 7/16/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.4 (v1_6_4) on Linux (lc0089) on 7/16/2009 ==

2009-07-16  Brian Kahne  <bkahne@freescale.com>

	** Nested exception raising is now supported: An exception handler
	may now raise an exception, which will cause it to be immediately
	handled.

	** The UVP writer will now display TLB hit information as comments
	in the intermediate result section of an instruction.

	** The UVP writer has been enhanced so that register field data
	(fields names and their values) are printed as comments after
	initial and final register cards.

2009-07-15  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the UVP writer: We segfaulted when printing MP
	UVPs with shared memory because we were trying to read memory
	using CoreInfo::core(), which returned 0 if we were at the system
	level.  Changing this to node() fixes the problem.  Added mod29
	with in59.dat (generating a UVP) to test this.

	** A new generation option has been added to <b>adl2iss</b>:

	<dl>
	<dt>--log-reg-unarch</dt>
	<dd>
	<p>
	If true, then registers marked with the <b>unarchitected</b> and
	<b>indeterminate</b> attribute are logged.  If false, then such
	registers are not logged and unarchitected registers are not
	displayed in initial or final results.  The default is true.
	</p>
	<p>
	Note that even if this option is true, the UVP writer acts as if
	this option is set to false.  The DAT writer, however, displays
	all register logging events that are generated.
	</p>
	</dd>
	</dl>	

	** The <code>log_mmu_translation</code> logging event has changed
	slightly: It is now called whenever a translation hits in a TLB,
	even if the translation is not valid due to permission issues.

	* For the above, I'm not entirely happy with the implementation: I
	had to keep the original logging for when we have nested lookups
	b/c otherewise we don't have a valid ra when we log.  So, if we
	have no nested lookups, then we log within the translation item,
	otherwise we log when finished.

2009-07-14  Brian Kahne  <bkahne@freescale.com>

	* We were using the same member variable for both the
	disassemble() function and for the simulate() function, causing
	problems if the user tried to disassemble while in the middle of
	simulating.  The disassemble() function now uses a different
	variable name implemented by saving the value of _iname, using a
	different symbol, then swapping it back.

	* We had a bug in our aspect-code insertion logic:  We used a
	PtreeBrace to group statements, but that ended up always creating
	a brace-delimited block, even if we didn't provide brace tokens.
	Changed to using a new type, PtreeStmts, which doesn't have braces.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.3 (v1_6_3) on Linux (bkahne-ec1) on 7/10/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.3 (v1_6_3) on Linux (lc0100) on 7/10/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.3 (v1_6_3) on Linux (lc0089) on 7/10/2009 ==

2009-07-10  Brian Kahne  <bkahne@freescale.com>

	** A new system for aspect-oriented programming has been added.
	This allows users to inject code into existing code blocks based
	upon C labels.  For example, the following defines an instruction
	with a label called <i>Update</i>:
	<pre>
	define (instr=add1) {
          fields=(OPCD(12),RT,RA,SI);
          action = {
            var carry = Carry(GPR(RA),SI,0);
            Update:
            GPR(RT) = GPR(RA) + SI;
          };
        }
	</pre>
	The user can then define an aspect to insert code immediately
	after this label:
	<pre>
	defmod (instr=add1) {
          define (aspect=A) {
            labels = Update;
            action = { GPR(RA) = 0; };
          }
        }
	</pre>
	Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	The previous system of aspect oriented programming, including the
	<code>block</code> construct, has been removed.

	* The new aspect-oriented feature is now implemented entirely in
	the front-end, thus removing complexity from all of the back-ends.
	The expansion is done in VarWalker; expansion of aspects occurs,
	followed by translation, so that resources/variables in aspects
	are only checked after expansion.  This also means that users can
	use adl-dump to look at the expanded code.  Modified
	fe/{as1,as2,as3} and iss/mod4.adl to test this.

2009-07-08  Kevin Grant  <keving@freescale.com>

	** Helper functions defined in an ADL file are now listed in the
	final section of generated documentation.

	* Helper functions are now documented in an appendix: Requested in
	#498, "misc/docgen.C" now writes a final section that contains
	both a link to the ADL site's documentation on built-in routines,
	and the source code for each user routine (under sub-headings).
	This required the unindent_lines() utility function to become
	slightly more flexible; also took the opportunity to consolidate
	some redundant block-printing code.

	** Instruction documentation now includes sub-headings with the
	documentation on any aliases for that instruction, instead of
	including aliases in the main list of instructions.  There is
	also more information included for alias instructions.

	* Instruction aliases are now documented hierarchically: As
	requested in #498, alias instructions are now documented within
	their target instruction's heading, as sub-headings.  (This
	required a local 2nd pass over instructions in "misc/docgen.C",
	because there is not normally a simple mapping to reveal all the
	aliases that point to a given instruction.)  Also added more
	information under the sub-headings, such as syntax and field
	documentation, to look like ordinary instructions.  Covered by
	changes to "tests/docs/doc5.rst.regress".

	* Fixed whitespace issue after instruction docstrings: It was
	possible for no new-line to appear between a final docstring
	and a new heading (e.g. the "Exceptions" heading following the
	last instruction).  This was visible in "doc5.rst.regress" but
	not detected as an error.

	* Fixed syntax-related documentation for instructions and fields:
	Syntax for instruction fields is now included, and a glitch in the
	reStructuredText for instruction inputs/outputs was corrected.

2009-07-08  Brian Kahne  <bkahne@freescale.com>

	** The ADL UVP writer now prints out <b>tea</b>, <b>tra</b>, and
	<b>tta</b> (target effective address, target real address, and
	target translation attribute) annotations for each instruction
	card for which a data translation occurred.

	** New hooks have been added to ADL:
	<dl>
	<dt>invalid_entry_read = func(unsigned id,unsigned index) { ... }:</dt>
	<dd>	
	For sparse register files only.  If a read occurs and no entry
	exists for the specified index, then the default behavior is to
	abort.  This hook allows the user to specify an alternate
	behavior.  It should return a value that is the result of the read
	operation, raise an exception, etc.  This is a global default
	which will be applied, if it exists, to all sparse register files
	unless a per-register-file override exists.
	</dd>
	<dl>
	<dt>invalid_entry_write = func(unsigned id,unsigned index,bits&lt;width&gt; value) {... }</dt>
	<dd>	
	For sparse register files only.  If a write occurs and no entry
	exists for the specified index, then the default behavior is to
	abort.  This hook allows the user to specify an alternate
	behavior.  This is a global default which will be applied, if it
	exists, to all sparse register files unless a per-register-file
	override exists.
	</dd>
	</dl>

	** A new generation option has been added to <b>adl2iss</b>:

	<dl>
	<dt>--event-bus-send</dt>
	<dd>
	<p>
	If set, then event buses within models will broadcast their data to all
        other registered cores in the system.  If negated, then the event bus
        data is instead broadcast to a registered functor object.  Generally,
        this option will only be turned off when the user wishes to integrate a
        model into a platform model, or co-simulation environment, where the
        sending and receiving of event bus data must be handled by this external
        environment.  The default is TRUE.
        32-bit word.
	</p>
	<p>
	For information about the external event bus API refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-integration.html">the
	ADL integration guide</a>
	</dd>
	</dl>	

2009-07-08  Kevin Grant  <keving@freescale.com>

	* Fixed "doc/adldoc.css": Added "!important" left-alignment specification
	for literal blocks, to prevent them from being improperly rendered in
	some cases (e.g. so that source code isn't centered in register tables).

2009-07-07  Kevin Grant  <keving@freescale.com>

	* More instruction field documentation changes: As requested in #498,
	made the nesting of instruction fields clearer.  Also updated other
	references (e.g. to registers), to make it easier to link to headings
	later.  Shown in "tests/docs/doc{2,5}.rst.regress".

2009-07-06  Brian Kahne  <bkahne@freescale.com>

	** A new uadl transaction has been added:

	<dl>
	<dt>is_misaligned(&lt;unsigned&gt;):</dt>
	<dd>
	Returns true if the instruction is a misaligned load or store with respect to the
        argument.  The argument is used as a mask against the effective address of
        the memory operation, e.g. <code>is_misaligned(0x3)</code> returns true if the
        current instruction's memory operation is misaligned with respect to a
        32-bit word.
	</dd>
	</dl>

2009-07-02  Brian Kahne  <bkahne@freescale.com>

	* Wachpoints with the GDB integration were broken because we would
	immediately throw a SimInterrupt, thus canceling the instruction.
	The new approach is that, on a watchpoint, we add a breakpoint at
	the current NIA.  When that breakpoint hits, we clear it, and then
	signal that we had a watchpoint.  That way, the instruction
	causing the watchpoint completes.

2009-07-02  Kevin Grant  <keving@freescale.com>

	* Tweaked stylesheet "doc/adldoc.css": Bit range labels: added a
	yellow background color to the even ranges, and a subtle border
	around both even and odd ranges.  Also grouped related styles for
	"td.{single,left,right}*" to avoid copying settings between them.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.2 (v1_6_2) on Linux (lc0089) on 7/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.2 (v1_6_2) on Linux (lc0089) on 7/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.2 (v1_6_2) on Linux (lc0089) on 7/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.2 (v1_6_2) on Linux (lc0089) on 7/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.2 (v1_6_2) on Linux (lc0100) on 7/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.2 (v1_6_2) on Linux (lc0089) on 7/2/2009 ==

2009-07-01  Brian Kahne  <bkahne@freescale.com>

	** New hooks have been added to ADL:
	<dl>
	<dt>addr_check = func(addr_t ea,addr_t ra,TransType tt) { ... }:</dt>
	<dd>
	Called whenever an address is generated for a memory operation.
	This occurs even for hits within the same translation page.  Since
	this hook is called extremely frequently, it should contain a
	minimal amount of code in order to maintain performance.  It can
	be used, for example, to implement various kinds of debug exceptions.
	</dd>
	<dl>
	<dt>pre_exception = func(Exception e) { ... }:</dt>
	<dd>
	Called when an exception occurs, before the exception's handler code.
	</dd>
	<dt>post_exception = func(Exception e) { ... }:</dt>
	<dd>
	Called when an exception occurs, after the exception's handler code.
	</dd>
	</dl>

	* Modified mod3.adl to test the pre/post exception hooks.
	Modified mod11.adl and added in183.dat to test the addr_check
	hook.  Front-end tests were added as well.
	
2009-07-01  Kevin Grant  <keving@freescale.com>

	** Attribute <b>doc_no_code</b> can now be added to objects (initially
	registers and register files only), to exclude hook code from
	documentation.

	* New attribute to remove hook code from documentation: As
	requested in #498, added an attribute to let users tag the
	registers or register files that shouldn't have their hooks
	documented.  This was handled by defining an attribute string
	in "fe/Data.*" and then using that constant from "misc/docgen.C".
	Covered in "tests/docs/doc5.adl".

	** Improved the display of bit fields in generated documentation,
	including: corrections to bit numbering, better use of space, and
	a little more color.

	* Various improvements to field (table) HTML: As requested in
	#498, certain displays are difficult to read.  Modified the bit
	range display to use space more efficiently, and avoid potential
	browser problems (e.g. removed negative table cell widths).
	Fixed FieldInfo to ensure the smallest number is determined by
	math and not the caller.  All of those changes were in the file
	"misc/docgen.C" and are already covered by "tests/docs/doc5.adl"
	(though they affected the renderings of several other testcases).
	Also tweaked "doc/adldoc.css", to make adjacent bit labels easier
	to see, by using even/odd background colors; and, bit range
	labels now use a smaller, fixed-width font.

2009-06-30  Kevin Grant  <keving@freescale.com>

	** Instruction field documentation no longer includes fields
	that are automatically generated from split lists (which would
	give them names like <i>VarInstrOpcode_imp_bits_...</i>).

	** Documentation of alias fields now shows the target field name.

	* Instruction field documentation changes: As requested in #498,
	the various VarInstrOpcode_imp_bits_* generated fields are no
	longer included in documentation.  This was handled by adding an
	is_generated() method to the InstrField* classes in "fe/Data.*",
	and updating "misc/docgen.C" to use this for field filtering.
	Also, alias fields now specify their exact targets if possible,
	instead of just a flag (also in "misc/docgen.C").  Captured by
	the test "tests/docs/doc5.adl", and updated a couple of tests
	whose output was affected.

2009-06-29  Brian Kahne  <bkahne@freescale.com>

	* Various changes to get dynamically-sized caches to work with
	uADL.  The uADL cache objects now query the ADL caches for size
	information and the ADL per-cache-reset routine is now virtual.
	The uADL derived core class catches this reset signal and calls a
	resize routine for the uADL cache is we're re-allocating.  Also,
	performance caches are hooked up so that the main cache will
	resize the performance cache, so that the two are kept in sync.

	dlx_cache_split_safe tests this out using iss/in182.dat
	
2009-06-26  Brian Kahne  <bkahne@freescale.com>

	* Added support for dynamic TLB sizing.  This basically follows
	the same implementation as for dynamic caches.

	* Modified where config scripts are processed:  They're now
	processed in init(), before tests are read, so that resizing of
	dynamic resources will be handled first.

2009-06-25  Brian Kahne  <bkahne@freescale.com>

	* iss/GenMmu.C (adl): The reset routine in each core now clears
	then sets tracing, in order to avoid problems where tracing isn't
	expected, such as during an MMU update in the reset logic.

2009-06-24  Brian Kahne  <bkahne@freescale.com>

	** ADL models may now be built such that certain parameters
	(currently cache set-size, way-size, line-size and TLB set-size
	and way-size) may be set dynamically.  This must be enabled at
	build-time via a configuration file.  At run-time, a TCL script
	may be used to set these parameters.  A C++ API is also provided,
	for use with an integration model.

	* To accomplish the above, the cache code was modified so that
	various parameters could be set dynamically, if desired.  This was
	similar to existing multi-way, multi-set functionality, but more
	general, such as the fact that aspects of the cache are now
	allocated on the heap.  Get/set/list parm functions were also
	added.  The idea is that, as new parameters are added, they'll be
	tied into this system, which is accessible via IssNode methods or
	through the scripting interface (via these methods).
	
2009-06-22  Brian Kahne  <bkahne@freescale.com>

	* We didn't have implementations of logRegWriteMask and
	logRegfileWriteMask in the UvpWriter, so partial-register-write
	intermediate results were dropped when creating a UVP if the model
	was compiled with --log-reg-masks.  I added those methods, which
	just call the non-mask versions, since we don't log that data in a
	UVP.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.1 (v1_6_1) on Linux (lc0100) on 6/19/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.1 (v1_6_1) on Linux (lc0089) on 6/19/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.1 (v1_6_1) on Linux (bkahne-ec1) on 6/19/2009 ==

2009-06-19  Kevin Grant  <keving@freescale.com>

	** Improvements to instruction field documentation in HTML and
	reStructuredText.  Field attributes such as width, size, pseudo
	and prefix are now reported, and indentation of documentation
	strings from the ADL file is now more precise.

	* Enhanced reStructuredText (and HTML): "misc/docgen.C" now fills
	in more instruction field details, becoming a better mirror of
	the data that "misc/dbgen.C" already dumps correctly to XML.
	It also more correctly processes the docstring for instruction
	fields, guaranteeing that user indentation won't confuse "prest".
	Added a new style sheet class in "doc/adldoc.css" for this table.
	"Raw" HTML was avoided by adding a reStructuredText "list-table"
	that has style class information.  Several documentation regress
	files were affected due to the inclusion of new instruction field
	information.  NOTE: These .rst generation techniques (docstring
	handling, list-table class) produce "cleaner" .rst files, so they
	should be applied retroactively to other code in the future.

	* Enhanced helpers: Added indent_lines() and unindent_lines() in
	"helpers/CodeGen.{C,h}", which allow multi-line strings such as
	docstrings to be precisely reindented (vital to avoid errors in
	reStructuredText parsing, but nice for just pretty-printing too).
	Also added split() and join() templates to "helpers/StringUtils.h"
	for generic string tokenizing, along with test routines.

2009-06-18  Brian Kahne  <bkahne@freescale.com>

	** A new architecture-level hook function has been added to ADL:
	<dl>
	<dt>branch_taken = func() { ... }:</dt>
	<dd>
	Called when a write occurs to the next-instruction-address (nia) register other than implicit nia updates
	performed before each instruction is executed.  The nia register has already
	been updated when this is called, so the new address may be queried by
	reading the nia register. 
	</dd>
	</dl>

	** The <b>mem</b> and <b>memlist</b> scripting interface functions
	have been enhanced to provide the user more flexibility.  Refer to
	the <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-cli.html">
	ADL ISS scripting-interface manual</a> for more information.

	An example demonstrating these new features, and how it can be
	used to emulate a simple memory-mapped console peripheral may be
	found in <code>tests/cli/termio.cli</code> within the distribution
	or in the <a
	href="http://cad.freescale.net/adl/browser/trunk/tests/cli/termio.cli">source-code
	repository</a>.

2009-06-16  Brian Kahne  <bkahne@freescale.com>

	** A new hook parameter has been added to the MMU <b>lookup</b>
	definition:
	<dl>
	<dt>multi_hit = func(addr_t ea) { ... }:</dt>
	<dd>
	If this hook is defined, then a search
        will continue after an initial translation is found.  If another
        translation in the same way is also found, then this hook will be
        invoked.
	</dd>
	</dl>

	* Fixed a bug with MMUs:  The way-struct copy constructor was not
	setting the set and way to invalid values, resulting in bad data
	in T cards in an optimized model.

2009-06-15  Brian Kahne  <bkahne@freescale.com>

	** There has been a minor modification to the logging interface:
	<ol>
	<li>
	The new signature for <code>log_mmu_translation</code> is:
	<pre>
	void log_mmu_translation(TransType tt,int seq,int set,int way,addr_t ea,addr_t ra,const MmuBase *mb)
	</pre>
	The <b>ea</b> parameter is the effective address which initiated the
	translation and <b>ra</b> is the resulting real address.  Both are
	invalid (and will be 0) for <code>tt=WriteTrans</code>
	</li>
	<li>
	The <b>set</b> and <b>way</b> values are now valid for instruction
	and data load/store translations.
	</li>
	</ol>

2009-06-12  Brian Kahne  <bkahne@freescale.com>

	** The various ADL file readers (DAT, UVP, and ELF) may now be
	used with a bare-bones ISS.  Use the <b>adl-config</b> option
	<b>--readers</b> to specify the necesary extra libraries.  This
	option is only relevant when <b>--basic</b> is used, as otherwise,
	the libaries are included by default.

	** A new option has been added to <b>adl2iss</b> and
	<b>model2uadl</b>: <b>--src-prefix=path</b>.  This allows the user
	to specify the location of where the source files should be
	generated.  This is useful when executables or libraries will be
	installed for other users, as it allows a Makefile or script to
	place the source files into the install path so that they may be
	seen by a debugger.

	* We had a bug with the --disassembler option, where we would
	generate a table-select function even if only one table existed.
	If only one table exists, we don't define the table-select member
	variable, so we ended up with an invalid ternary operator, which
	compiled in gcc but not in MSVC.  Fixed this so that the
	table-select function is only created if we have multiple tables.

2009-06-11  Kevin Grant  <keving@freescale.com>

	* Fixed prest errors for missing literal blocks: Modified
	"misc/docgen.C" to indent anything that appears under a literal
	block, and to follow it with a blank line.  Both of those are
	requirements of reStructuredText.  Demonstrated by new test
	"tests/docs/doc5.rst.regress".

	* Fixed prest errors for "Lookup" headings with inconsistent
	indentation: Changed generator routine in "misc/docgen.C" to not
	pushlevel() and poplevel().  Fixed "tests/docs/doc2.rst.regress".

	* Fixed prest errors for list-table field "width": The actual name
	of this field is "widths".  Fixed "tests/docs/doc2.rst.regress"
	and "misc/docgen.C".

2009-06-11  Brian Kahne  <bkahne@freescale.com>

	* We had a problem with the UVP writer and final memory results.
	The problem is that the debug memory read system looked at the
	cache-enable predicate, which could be different at the end of the
	test, e.g. the last remaining access as to an inhibited page.  The
	result would be that the final memory results were incorrect
	because we would look directly at memory, rather than in the
	cache.

	I changed the cache-log-read/write routines to have a force-enable
	flag, which overrides the enable.  The normal logging process
	works as before (force-enable is off) but the debug data
	read/write routines force the enable to true, so that we always go
	through the cache.  Added iss/in180.dat to test this.

	* iss/tracediff.C (diff_ir): We were skipping the case where
	--check-all was set, but the found file was missing extra elements
	of a given type, e.g. didn't have some expected C cards, but it
	had one, so they weren't missing entirely.

2009-06-10  Brian Kahne  <bkahne@freescale.com>

	** The <b>adl2iss</b> and <b>uadl2model</b> scripts now support
	the <b>--gen</b> option (which is negatable,
	e.g. <b>--no-gen</b>).  This controls whether the respective code
	generation program is called before the compiler is invoked.  By
	using the <b>--no-gen</b> option, it is possible to just compile
	and link a model, without requiring the source .adl/.uadl file,
	which is useful when only generated C++ code is distributed.
	
	** In uADL, the pipeline-stage <code>release_test</code> function
	has been expanded to allow the user to pass in virtual-flag
	arguments.  These may then be tested in order to stall
	instructions.  For example:
	<pre>
	release_test = func(InstrQueue iq,VirtualFlag hid_stall) {
          if (!hid_stall.inquire()) {
            // Stall all instructions if this flag is set and we have a load or
            // store instruction.
            if (iq.instr_class(0) == loadClass || iq.instr_class(0) == storeClass ||
                iq.instr_class(1) == loadClass || iq.instr_class(1) == storeClass) {
              iq.set_releasable(false);
            }
          }
        };
	</pre>
	where <code>hid_stall</code> is a virtual flag in the model.

	The interface to the <code>InstrQueue</code> object
	has also been expanded:
	<ul>
	<li>
	If an index to <code>InstrQueue::instr_class</code> is
	out-of-range, <code>unknownClass</code> will be returned, so that
	explicit range checking in the release-test function can be minimized.
	</li>
	<li>
	<code>InstrQueue::set_releasable(bool></code> has been added,
	which marks all instructions in the stage's queue as either
	releasable or not.
	</li>
	</ul>

2009-06-09  Brian Kahne  <bkahne@freescale.com>

	* Without realizing it, we had broken the ability to set latencies
	in a uADL model compiled with --extern-mem-mode and
	--iss-mem-mode.  We were actually shutting off the external-memory
	switch, which meant that iss-mem-mode worked, but we never
	generated the code which propagated the latencies.  Fixed this
	and added uadl/loadstore4.dat to test this behavior.

2009-06-05  Brian Kahne  <bkahne@freescale.com>

	** The regression driver program now accepts command-line options
	via the <b>RegressOpts</b> environment variable.  This allows
	options to be passed globally, such as during a recursive make.

	For example, to use LSF for all tests during a "make check"
	operation:  <code>RegressOpts=--lsf proj make check</code>

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.0 (v1_6_0) on Linux (bkahne-ec1) on 6/4/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.0 (v1_6_0) on Linux (lc0100) on 6/4/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.0 (v1_6_0) on Linux (lc0089) on 6/4/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.0 (v1_6_0) on Linux (lc0100) on 6/4/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.6.0 (v1_6_0) on Linux (lc0100) on 6/4/2009 ==

2009-06-03  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with uADL's linefill_lock_on_valid:  We were never
	testing to see if the cache was previously valid, so if
	lock-on-valid was set, the lock never occurred.  Fixed the test
	and modified dlx_cache_unified, cache2.dat to test this.

2009-06-02  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with aliased instructions (e.g. nested) and
	instruction fields.  If the instruction field reference was an
	expression, e.g. nn.uint32(), then the resulting hybrid ISS had a
	code problem because we didn't convert the getter routine's result
	to a bits type, so that uint32() would be a valid method.  Fixed
	this by setting _add_sizing in IFSubstWalker for aliased
	instructions.  Modified mod48.adl (smdriver6) to test this.

	* Modified the generated cache code and memory interface so that
	the actual address (critical address) causing a cache operation is
	propagated down to the external interface.

	** The external memory interface has changed.  The
	<code>readpage</code> and <code>writepage</code> methods now take
	an extra parameter, <code>critical_addr</code>, which represents
	the address which caused the action to be taken.  Refer to
	<code>MemHandler.h</code> for details about the API.

2009-06-02  Kevin Grant  <keving@freescale.com>

	** The <code>adl2asm --big-mem</code> option is now implemented,
	choosing the longest instruction when a symbol is not yet defined;
	for example, when branching to a label that has not been seen yet.

	* Fixed #467: Updated binutils to enable the (mostly implemented)
	choose-longest-instruction behavior, mapping it to the --big-mem
	option.  Updated "gas" to report unresolved symbols in the same
	place that the DevTech assembler does.  This is currently tested
	separately (using the inputs from ticket #467), because the main
	"designs/sc3400_arch.adl" source does not apparently produce a
	valid assembler.

2009-06-01  Brian Kahne  <bkahne@freescale.com>

	* Updated to FIL's latest adlapi2simapi code.

	** A new uadl cache parameter has been added:

	<dl>
	<dt>linefill_lock_on_valid = bool:</dt>
	<dd>
	If true, then linefill lock cycles only occur if the previous
	contents of the linefill buffer were valid.  The default is <b>false</b>.
	</dd>
	</dl>
	
	** Each <code>IssCore</code> now stores a numerical id which may
	be retrieved via the function <code>getCoreId()</code>.  This may
	be called by, for example, register reset code.  In a standalone
	ISS, each core receives a monotonically increasing ID.  For a
	platform integration, the caller must supply an ID value.

	This new feature has changed the integration API in the following
	way:

	<ul>
	<li>
	The function <code>createTopLevelNode</code> now takes an
	unsigned reference for the core ID.  This will be incremented by
	each core that is initialized.
	</li>
	<li>
	The function <code>createArch</code> now takes an unsigned
	reference, as the second parameter, for the core ID.  This will be incremented by
	each core that is initialized.
	</li>
	</ul>

	* To test the above feature, mod9/in15.dat were modified so that
	mod9 has a PIR register which stores the core ID.
	
2009-05-29  Brian Kahne  <bkahne@freescale.com>

	* Basic breakpoint support has been added to uADL models.
	Currently, this only works well with safe-mode models.  Properly
	supporting non-safe mode models is a bit more complex, because
	it's harder to determine when the breakpoint should really be
	triggered.  Added uadl/brkpts.cli with dlx_bp_fetch_safe to test
	this.

2009-05-28  Brian Kahne  <bkahne@freescale.com>

	* Two new options have been added to
	<b>make-iss</b>/<b>adl2iss</b> to controll logging:

	<dl>
	<dt>--log-reg-reads</dt>
	<dd>
	If true, then the ISS will log register reads.  Register reads
	will be logged to <code>LogBase::log_reg_read</code> and
	register-file reads will be logged to <code>LogBase::log_regfile_read</code>.
	</dd>
	<dt>--log-reg-masks</dt>
	<dd>
	If true, then the ISS will log partial register read/write
	operations with a mask which specifies which portion of the
	register was accessed.  The new <code>LogBase</code> members are:
	<pre>
	virtual void log_reg_write_mask    (unsigned id,const char *name,REGTYPE value,REGTYPE mask);
        virtual void log_reg_read_mask     (unsigned id,const char *name,REGTYPE value,REGTYPE mask);
        virtual void log_regfile_write_mask(unsigned id,const char *name,uint32_t index,REGTYPE value,REGTYPE mask);
        virtual void log_regfile_read_mask (unsigned id,const char *name,uint32_t index,REGTYPE value,REGTYPE mask);	
	</pre>
	</dd>
	</dl>	

2009-05-26  Brian Kahne  <bkahne@freescale.com>

	* Added a simple adlapi2simapi regression.

	* Fixed a bug with aliases:  The alias was calling the target's
	wrapper, rather than the actual exec function, causing problems if
	an alias targeted an instruction which had instruction fields with
	added semantics, e.g. sign-extension.  Modified mod2.adl to test
	this with in177.adl

	** Added a new command-line option for the scripting interface:
	The user can now pass an argument to a TCL script using the
	<b>--script-arg=&lt;value&gt;</b> option.  This option may be
	repeated.  These arguments are inserted into the <b>argv</b> array
	available to the script.

	* Enhanced the runsim integration so that arguments which follow
	the exit-handler function name are now passed as arguments to the
	script.

2009-05-22  Brian Kahne  <bkahne@freescale.com>

	* Fixed ommissions in the ADL XML schema (adl.rnv).  Tested
	against sc3850, elfv5, various zen cores, and s12 and updated
	doc/doc5.adl to test for what was missing.

	* Updated dbgen.C to correctly output MMU test-sets.

	* The runsim wrapper (adlapi2simapi.C) is now built via automake.
	I haven't yet hooked up any regressions, but that'll be next.

	* Added ae new option to the scripting interface: startCliMode now
	takes a vector of strings which are inserted into the
	interpreter's argv array.  These can be set via the --script-arg
	command-line option.  The runsim integration now allows for extra
	arguments to be passed after the exit-handler function name.

2009-05-18  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug when generating field-id getter functions:  The
	FieldIdWalker class was translating the expression, and we were
	using that translated expression, but this didn't always make
	sense, since it would replace instruction fields with their IDs.
	So, we might get something like "442.uint32()" when the original
	expression was FOO.uint32().

	Now, we discard the translated expression and instead just write
	to a stream the id of the instruction field we find.  Modified
	mod49.adl to test this problem.

	* We had a bug with slot selection- we were looking up slots bythe
	index expression, but this didn't take into account any of the
	data flow analysis that we did, such as tracking the fact that a
	variable was initialized with a field value, then the variable was
	used to index into the register-file.  In that case, we would
	generate a non-slot access, which would break the transactional
	ISS.  To fix this, I added _rindex to RegAccess for storing the
	resource index (defaults to _index) otherwise.

	Modified mod49.adl to test this.  Added fe/reg40.adl to test the
	data-model directly.

	* Fixed a bug with register/reg-file read code:  We were
	incorrectly adding const-references, which broke some existing ADL
	code.  Modified mod3.adl slightly to test this.

2009-05-15  Brian Kahne  <bkahne@freescale.com>

	* Bug fix for lib-mode: We weren't generating register read-inhook
	functions correctly.

	** A new option has been added to <b>adl2iss</b> and <b>make-iss</b>:

	<dl>
	<dt>lib-mode</dt>
	<dd>
	If true, then the resulting ISS is a template, where the template
	parameter is a base class, where the base class implements all register
	storage.  The ISS is thus used soley to provide instruction semantics.
	</dd>
	</dl>

2009-05-14  Brian Kahne  <bkahne@freescale.com>

	** In this version of uADL, some header file names have changed.
	In general, any file starting with <b>uADL</b> now starts with
	<b>uadl</b>.

	* Renamed the uadl tests to dlx* from DLX* to make it easier to
	type their names.

	** A new uadl cache parameter has been added:

	<dl>
	<dt>linefill_lazy_writeback = bool:</dt>
	<dd>
	If true, then linefill writeback operations occur when a new
	linefill operation is requested and the existing linefill is
	valid.  Otherwise, the linefill writeback occurs upon completion
	of the linefill operation.  The default is <b>false</b>.
	</dd>
	</dl>

2009-05-13  Kevin Grant  <keving@freescale.com>

	* Added TTFW2_LIB_DIR and TTFW2_INCLUDE_DIR to "configure": Finds
	Tinker-Toy Framework 2 libraries and headers, to be used with
	future regression tests of that integration.  The include path
	can be derived from the library path.  The directories are sanity
	checked (an attempt is made to compile and link, and a minimum
	version is specified, similar to what is done for SystemC).  No
	makefiles currently use these new settings.

2009-05-12  Brian Kahne  <bkahne@freescale.com>

	* There were some problems with gcc 3.4.3 support with the
	trace-cache: Some explicit casts had to be added and fastcall
	support apparently doesn't work with gcc 3.4.3, so that had to be
	disabled.  Basically, it screws up this-pointer passing with
	fastcall, causing weird segfaults.

2009-05-11  Brian Kahne  <bkahne@freescale.com>

	* Fixed a problem with NIA writes in post_fetch hooks:  We weren't
	using the "simple" form (NIA_write_simple), which meant that
	branch logging was wrong.  Fixed this by adding an extra mode to
	InstrWalker that says to use the simple form if the mode is on.
	Then, during post_fetch expansion, we turn this mode on.  Modified
	mod2.adl to have a post_fetch handler in order to check this when
	run against in5.uvp.

2009-05-08  Brian Kahne  <bkahne@freescale.com>

	** A direct-memory-interface (DMI) cache is now available, which
	may be used with the external-memory interface.  It may be found
	in <code>iss/DmiMemHandler.h</code>.

	This class is derived from <code>MemHandler</code>.  It contains a
	simple direct-mapped cache for instruction reads, data reads, and
	data writes, where the entry size and number of entries in these
	caches are template parameters.  On a memory access, the cache is
	checked.  If it misses in the cache, the DmiMemHandler calls a
	template-parameter base class, which is supplied by the user and
	which should then handle the memory access.  The user's class may
	then update the DMI cache so that subsequent accesses will hit in
	the cache.

	The idea is that the user populates the DMI cache with memory
	accesses that target "simple" memory, i.e. memory which does not
	map to peripherals, memory-mapped registers, etc.  Cache entries
	may also be invalidated, if a device's configuration changes.

	** The ADL simulator generator now supports a new option:
	<b>--trace-cache</b>  This generates a model with a trace cache,
	which holds disassembled basic blocks of instructions.  Its
	operation is very similar to a JIT model, except that this is
	written in portable C++.

	** ADL simulators now support an internal software cache for
	improving memory-subsystem performance.  This is a direct-mapped
	cache for data accesses which map effective addresses to host
	memory pointers in the top-level memory, e.g. L1 if there is a
	cache.  This option is enabled if a JIT or trace-cache model is
	enabled.  It may be explicitly enabled or disabled via the
	<b>--dmi-cache</b> option.
	
2009-05-08  Kevin Grant  <keving@freescale.com>

	* Update for #481: In "misc/dbgen.C", InstrField::Field::TblIdx
	and InstrField::Field::RefIdx would produce incorrect Perl hashes.
	This caused problems when "scripts/ADLPerlDB/ExpandHelper.pm"
	tried to process that data (in routine field_bits()).  Now covered
	by "tests/docs/doc5.adl".  While this solves the basic problem in
	#481, the original testcase still fails with a different issue (a
	runaway format).

	* Regression change: Removed "tests/docs/doc3.adl", as it isn't
	required for the test that generates "doc3.pl" (confusing).
	Instead, created "doc5.adl".

	* Typo fix: In error reports of "scripts/ADLPerlDB/ADLPerlDB.pm".

2009-05-05  Brian Kahne  <bkahne@freescale.com>

	** A new uadl cache parameter has been added:

	<dl>
	<dt>linefill_lock_holdoff_cycle = int:</dt>
	<dd>
	Number of cycles from start of line-fill
	operation until the linefill lock is applied.  This allows the user to model
	situations such as where the critical-word forwarding means that the first
	access from a new linefill operation is available immediately, but that the
	next data may be delayed due to cache maintenance operations.

	The default is 1, meaning that if there is a lock cycle count, it is applied
	on the first cycle after the initiation of a linefill.
	</dd>
	</dl>

2009-05-01  Brian Kahne  <bkahne@freescale.com>

	* The DMI cache, w/o hardware cache, was not calculating pointers
	to the target memory blocks correctly because it was using EAs.
	Switched to using _lastRealAddr to get the last real address, in
	order to properly calculate the target pointer.  Added
	iss/in176.dat to test this.

	* We were not setting up misaligned accesses in the DMI cache
	correctly- we were mismatching the first ea with a pointer to the
	second memory block.  Added iss/in175.dat to check this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.6 (v1_5_6) on Linux (lc0100) on 5/1/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.6 (v1_5_6) on Linux (lc0089) on 5/1/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.6 (v1_5_6) on Linux (lc0089) on 5/1/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.6 (v1_5_6) on Linux (lc0089) on 5/1/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.6 (v1_5_6) on Linux (ld2059) on 5/1/2009 ==

2009-04-30  Brian Kahne  <bkahne@freescale.com>

	* Merge from trunk.

2009-04-29  Brian Kahne  <bkahne@freescale.com>

	** An ADL/uADL model may now be generated with a disassembler
	function, which allows an external program to disassemble
	arbitrary memory.  Instructions are read through the core's memory
	hierarchy (with optional address translation).  This function is a
	method of IssNode and has the following signature:
	<pre>
	// o:      Disassembly output stream
	// addr:   Source address.  This is an ea if tran=true, else an ra.
	// tran:   Whether to translate.
	// tindex: Index of instruction table to use, or -1 to use the current.
	unsigned disassemble(std::ostream &o,addr_t addr,bool tran,int tindex) const;
	</pre>

	** The IssNode interface has changed slightly.  In addition to the
	<code>disassemble</code> function, <code>debug_instr_read</code>
	and <code>debug_data_read</code> are now <code>const</code>
	methods.
	
	* adl-dump now uses the standard-parser setup function in
	BaseParser, so that it allows for command-line defines, etc.

2009-04-28  Kevin Grant  <keving@freescale.com>

	* Fixed "--instr-attr" to be "--instr-info": For consistency,
	with .ttc files such as "tests/iss/mod49-trans.ttc" that would
	refer to this as "gen_instr_info".

2009-04-27  Brian Kahne  <bkahne@freescale.com>

	* Further updates to the LSF feature for regress:  We now group
	individual tests into groups when submitting, in order to reduce
	bsub overhead wrt. useful work.

2009-04-24  Brian Kahne  <bkahne@freescale.com>

	* uadl/Cache.C: We had a bug, whereby the last memory request in a
	line-fill was not detected as being part of the line-fill because
	the line-fill was cleared.  This then led to some timing errors,
	because we weren't using the proper latency value.  Fixed this by
	delaying the clear until all requests were processed.

2009-04-23  Brian Kahne  <bkahne@freescale.com>

	* uADL:  We were not obeying explicit latencies with exec() calls
	in a stage, when a stage was explicitly allocated.  To fix this,
	when adding implicit inquires to edges, we check to see if the
	from-stage had an exec with a latency.  If so, then we add a
	"release" transaciton, rather than an "implicit_release" so that
	we do call releaseInquire on the stage.  Added cust-lat2.dat on
	Zen0 to check this.

2009-04-21  Brian Kahne  <bkahne@freescale.com>

	* We had an error in calculating our minimum MMU page sizes for
	the min_page_size() method.  Modified fe/mmu12.adl to demonstrate
	the problem.

	* For trace/jit models, we weren't handling cores which had
	translations smaller than 4k, because we had a fixed
	translation-page size of 4k.  The size is now based upon the
	minimum page size, or 4k if there is no MMU.
	
2009-04-21  Brian Kahne  <bkahne@freescale.com>

	** The regression now has basic support for LSF, via the
	<b>--lsf=group</b> option.  You can also use the
	<b>--check-pkg</b> option to make sure that the machine that a
	regression job lands on has a specified package in the /pkg
	environment.

	* Fixed a bug with the --uvp-res-value option:  The writer wasn't
	recognizing these values as valid halt commands, and thus not
	removing the instruction.  This meant that, if the RES location
	was at the end of a page, then the UVP writer would think that the
	RES card was on the next page, which if it couldn't be translated,
	would result in an error.  

	Fixed this by making the res value logic static and shared between
	the UVP reader(s) and writer(s).  The writer then looks to see if
	any such values exist and checks the final instruction against
	them, or against 0 if no values were specified.  Also, we were
	directly reading memory, which is redundant, since we already have
	the opcode value; we now just check against the opcode value.
	Added mod11/in173.uvp to test this.

2009-04-20  Brian Kahne  <bkahne@freescale.com>

	* Our DMI cache invalidation logic was incorrect:  We have to
	invalidate an entry, even if it doesn't match in the DMI cache, so
	that when a line in a hardware cache is replaced, we don't have a
	bogus entry in the DMI cache.  We don't have the ea available, so
	we make do by simply invalidating the entry of the new address
	that would go there, in case the entry doesn't end up getting
	updated.  Added in172.dat with mod18 to test this.

	* We now pass the ea into the cache read/write routines for DMI
	updating so that both parts of a split transaction are correctly
	updated.  This also handles the case where a split transaction
	doesn't update the DMI cache on the second portion, such as due to
	a locked cache way, thus creating a problem because
	_lastEffectiveAddr was updated to the second half of a split
	transaction by the read/write code.  Modified in169.dat to test
	this.

	* Virtualization of core parms has changed for the DMI cache:
	Instead of being passed as parms to the memory hook, the core's
	current parm value are updated.  This was necessitated by the fact
	that some models might refer to the parms outside of the memory
	hooks.  So, we have to update model state, rather than hiding that
	fact.

2009-04-17  Brian Kahne  <bkahne@freescale.com>

	* The DMI cache now virtualizes any core parms found in the
	read/write memory hooks, so that the DMI access can correctly
	modify memory, as needed, e.g. for little/big-endian accesses.
	The parameters are stored in the cache when the cache entry is
	made, then supplied as hidden parms to the hooks when they're
	called.  Added mod11 with iss/in171.dat to test this feature.

	* The DMI cache now has an enable, that's really just used for
	reset.  It's enabled by run_tc and run_jit and disabled when
	they're done.  That way, the cache doesn't need to be invalidated
	when using the interpreter.
	
2009-04-16  Brian Kahne  <bkahne@freescale.com>

	** uADL models now use statically determined partial read/write
	masks for tracking register resource usage.  This means that a
	read-after-write stall will not occur if two instructions access
	the same register, but use separate bits.

	* To implement the above, source masks from the front-end are now
	installed in the _instData structure, which now includes source
	and target masks.  User specified source_mask data will still
	override the data from the front-end.  DLX2/oprnd3.dat test this
	feature.
	
2009-04-15  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with partial-mask tracking: We weren't taking
	offsets into account, so the proper mask bits were not getting
	set.  Fixed this and added fe/inst116.adl to check it.

	* DefaultFetchUnit.h (decodeUpdate): Minor fix to cancel(): We
	were incorrectly flushing some of the entries due to how we were
	calculating the 'remain' value.  This has been fixed.

2009-04-14  Brian Kahne  <bkahne@freescale.com>

	** A new options have been added to tracediff:

	<b>--print-asm</b>: If set, error messages for intermediate
	results contain the assembly string for the relevant instruction
	in the expects file.  The default is true.  This option may be
	negated.

	** A new uadl transaction has been added:

	<dl>
	<dt>cancel_fetch([<bool can_cancel>]):</dt>
	<dd>
	This cancels outstanding fetch requests.  As with ``flush_fetch``,
	the ``can_cancel`` parameter allows the user to override the
	default value for the fetch-unit.  This does not flush existing
	data within the fetch unit.
	</dd>
	</dl>

2009-04-13  Brian Kahne  <bkahne@freescale.com>

	** Two new uadl transactions have been added:

	<dl>
	<dt>flush_fetch([<bool can_cancel>]):</dt>
	<dd>
	Flushes the fetch unit.  If a boolean parameter is supplied, then
	it overrides the default ``can_cancel`` fetch-unit parameter.  If
	true, then outstanding transactions will be canceled within the
	memory subsystem.
	</dd>
	<dt>force_lock(<name>):</dt>
	<dd>
	Locks the specified memory/cache.  This lock will occur even if
	outstanding transactions exist, and will inhibit any new
	transactions from occurring.
	</dd>
	</dl>

2009-04-02  Kevin Grant  <keving@freescale.com>

	* Fixed regression test iss/as-mod55 (bug #469): It was commented
	out because it would not build as-is; added missing function
	argument in code generator.

2009-04-02  Brian Kahne  <bkahne@freescale.com>

	* fe/InstrTable.C: The report_conflict function was issuing
	warnings in strict mode, even when a conflict wasn't really found.
	I changed this so that if we're in warning mode, and no
	conflicting pairs were found, no error was issued.  Basically, the
	test was just overly strict.  While there might be a conflict at a
	given point, we would then later expand the mask size, and thus
	eliminate the conflict.

	* We had a bug in InstrWalker regarding default parameters- we
	weren't able to extract the default parameter value and would
	instead assert.  Fixed this problem- if we come across an
	out-of-bounds parameter, we look up the parameter list for that
	helper and extract is default parm value.  Modified
	mod3.adl/in136.dat to test this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.5 (v1_5_5) on Linux (lc0101) on 4/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.5 (v1_5_5) on Linux (ld2059) on 4/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.5 (v1_5_5) on Linux (lc0089) on 4/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.5 (v1_5_5) on Linux (lc0101) on 4/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.5 (v1_5_5) on Linux (ld2059) on 4/2/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.5 (v1_5_5) on Linux (lc0089) on 4/2/2009 ==

2009-04-01  Brian Kahne  <bkahne@freescale.com>

	** Port definitions in uADL now support read and write latency
	parameters.  This allows the user to specify a latency which
	applies only to accesses made through that port.  Please refer to
	href="http://cad.freescale.net/adl/chrome/site/uadl-manual.html">the
	uADL reference manual</a> for more information.

	* To support the above, the memory read/write latency functions
	query the relevant port, if a port is present, to see if there's a
	latency.  I also fixed a bug, where a default port was being left
	in, rather than being removed.  Added loadstore3.dat to test this
	feature.
	
2009-03-31  Brian Kahne  <bkahne@freescale.com>

	* remote-test has been improved to load a local .sbox.options file
	to configure an environment.  Results are now sent to
	adldev@freescale.com.
	
	* asm/GenAsm.C (adl): Fixed a bug that was causing a crash in
	32-bit optimized builds.  The problem was that there was a bad
	itereator dereference in SortImmedInfo, because the sizes of the
	FInfoSet::_immeds weren't checked before they were iterated over.

	** The <b>--no-syscall-enabled</b> option may now be used with
	adl2iss without needing to also ifdef out cals to the system-call
	support functions.  Instead, those functions are now stubbed-out
	when system-call support is disabled.

	* To test the above feature, mod21.adl was modified to include a
	dummy sc instruction.

	** The front-end will now handle simple default parameter values
	when tracking resource source/target utilization.  For example:
	<pre>
	  void foo(unsigned rt,unsigned ra,unsigned rb = 0)
	  {
	    GPR(rt) = GPR(ra) + GPR(rb);
	  }
	  define (instr=add1) {
	    fields=(OPCD(31),RT,RA,RB,XO(266));
	    action = {
	      foo(RT,RA);
	    };
	  }
	</pre>
	In the example above, the call to <code>foo</code> with only two
	parameters means that <b>GPR(0)</b> will be counted as a source,
	since a default value of 0 is used as the value for <b>rb</b>.

2009-03-18  Brian Kahne  <bkahne@freescale.com>

	* iss/GenInstrPacket.C: We had a subtle mistake in
	instruction-packet slot assignments, where we were still directly
	including source and target registers from helpers, rather than
	relying on the front-end.  The problem was that this extra
	inclusion didn't take into account constant parameters which might
	affect source/target data.  I removed this and added
	uadl/issue3.dat, which checks that we can do a dual-issue with two
	instructions in DLX2 w/o a stall.

2009-03-17  Kevin Grant  <keving@freescale.com>

	** A count_ones() method was added to bits.

	* Testcase was added for population count, and method was renamed
	to count_ones(): Test is checkPopCounts() (intbv/NumberTest.C.in).

2009-03-17  Brian Kahne  <bkahne@freescale.com>

	** New UVP parsing options have been added to ADL and uADL models:

	<b>--uvp-res-value=&lt;value&gt;:</b> This option lets the user
	specify a value to be inserted at the location specified by the
	RES card in an input UVP.  The value may be either a simple
	integer constant or of the form
	<code>ta=value[,ta=value...]</code>.  In the latter case, the
	parser will attempt to find a matching ta and then apply the
	appropriate value.

	The size of the write to the RES card location is
	determined by the size of the value constant, e.g. a value of
	0xdeadbeef will be a 32-bit write, whereas a value of 0xdead will
	be a 16-bit write.

	<b>--uvp-ta-mask=&lt;value&gt;:</b> If specified, this mask is
	applied to the ta value of the RES card before searching for a
	matching ta in the list of ta/value RES card pairs.  This option
	allows the user to mask out unnecessary bits, so that, for
	example, only an endian-bit can be checked when writing the
	appropriate RES card value.

	* Multi-issue uADL models would crash when multiple exceptions
	occurred, especially fetch exceptions, because of two issues:

	1.  The same null class object was issued repeatedly because the
	test to avoid this, whether it had an instruction associated with
	it, was always false, since no instruction was ever associated
	with it, due to the fact that it was storing a fetch exception.

	2.  The ExHandle object was associated with multiple null objects,
	resulting in data sharing which it couldn't really handle.  The
	result was a double deletion.

	Issue #1 was fixed by adding an explicit allocate flag which is
	set by init and cleared by reture.

	Issue #2 was fixed by modifying ExItems to be reference counted.

	These problems are tested via uadl/DLX2, which now uses mod11.adl.
	uadl/issue2.dat tests the exception problem.

	* Modified the front-end so that memory access consistency is
	tested for instruction and data memory separately.  This allows a
	design to issue commands to data memory and instruction memory w/o
	errors from the uADL parser.  Added uadl-fe/p5.adl and
	uadl-fe/{in31,in32,in33}.uadl to test this.

2009-03-13  Brian Kahne  <bkahne@freescale.com>

	** A new option has been added to configure:

	<b>--enable-resolve-symlinks</b>: This attempts to fully resolve
	(canonicalize) paths to various libraries and programs used.  This
	is off by default, as it can cause subtle problems, such as
	hardcoding paths which are host-specific.  However, it may be
	necessary to use this option in some situations, such as when
	relative symlinks are present.

	** A new options have been added to tracediff:

	<b>--ignore-extra-tlbs</b>: This behaves in a similar fashion to
	the <b>--ignore-extra-mem</b> option: TLBs that exist in the
	expects-file but not in the found-file are ignored.

2009-03-12  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the MMU cache:  It was possible that an
	exception generated during a translation was leaving the MMU cache
	in a bad state, where it was still set as valid, but the EPN was
	updated w/o a valid translation occurring.  Normally, the cache is
	invalidated via the exception, but when an instruction squashes an
	exception, this doesn't occur.  Fixed this by invalidating the
	cache before calling translate.  Tested this via iss/in166.dat

2009-03-11  Brian Kahne  <bkahne@freescale.com>

	* Various fixes for the DMI cache:

	1.  We were only setting an effective address once, even for a
	split transaction, leading to an incorrect entry for the second
	half of the transaction.  Fixed this by having
	data[Read}Write]Translate set _lastEffectiveAddr.  Tested with
	iss/in169.dat.

	2.  We weren't invalidating DMI entries on cache
	evictions/invalidates, leading to stale data in the DMI cache.
	Tested with iss/in168.dat.

	3.  We were adding data to the DMI write-cache for write-through
	cache lines, which was bad, because this resulted in incorrect
	behavior, such as not correctly setting the dirty bit, etc.
	Tested with iss/in167.dat.

	* Fixed a bug with jit/trace-cache model execution:  If we
	translate a sequence of code and it runs across a page, we were
	allowing exceptions to propagate.  Fixed the problem by only
	allowing the exception to propagate if it's the first instruction
	translated, to simulate a branch-to-bad-location situation.
	Otherwise, we squash the exception and return, in the expectation
	that the situation will be dealt with via a branch, etc.  Added
	designs/in5.dat on generic32-cache to catch this situation.

2009-03-10  Brian Kahne  <bkahne@freescale.com>

	* The remove key did not work for an MMU define.  This has been
	fixed.  fe/mmu15.adl tests this.

2009-03-10  Brian Kahne  <bkahne@freescale.com>

	* There was a bug introduced in adl2asm that meant that the build
	option was off by default.  This was fixed.

	* GenAsm.C had some instances where hex constants were emitted w/o
	a prefix, causing compiler errors.

	There's still a bug with as-mod55.  That assembler has been
	commented out for now.

2009-03-10  Zigu Haras <R54472>  <zigu.haras@freescale.com>

	* Added support for selecting the instruction with longest immediate
	for unresovled symbols.

	* Added support for enumerated assembler fields which are split
	between prefix and fetch; and support for various assembler fields
	(differing in split,enumeration and number of bits) encoding the
	same information (conditional execution).
	Need to fully document these features.


2009-03-09  Brian Kahne  <bkahne@freescale.com>

	* Added a new option, --trace-cache-tracing, to turn on basic
	tracing for trace-cache models, to help with debugging.

	* Fixed a bug with the trace-cache:  We weren't passing 'offset'
	to set_instr for a branch fix-up, resulting in bad stuff happening
	when a branch was on a cache-line boundary.

	* Added a new option, --icache-touch, which allows the user to
	control whether the icache is touched for a JIT or trace-cache
	model.  The default is true.

	* CoreConfig objects are now always created for each GenCore, even
	if no ttc file is specified; a default object is created in that
	case.  This simplifies the code, since we no longer have to check
	for the presence of such an object and removes duplication, since
	we had to have a default if the object didn't exist.

	* The DMI cache is now off by default, since it turns out that it
	doesn't help a simple model that has no cache or MMU.

2009-03-06  Brian Kahne  <bkahne@freescale.com>

	* Added initial support for a direct-memory-interface (DMI) cache.
	This intercepts data reads/writes and attempts to speed up the
	access.  It only handles aligned accesses and it actually caches
	effective addresses, in order to avoid the translation overhead.
	The idea is that the cache is only populated with successful,
	aligned accesses, with no instruction attributes, in order to
	reduce the checking critera.  The cache consists of a read cache
	and a write cache, each of 2048 entries (by default), of 128 byte
	elements (or smaller if cache-lines are smaller).  The basic
	checking is that described by "Virtualization Without Direct
	Execution or Jitting: Designing a Portable Virtual Machine
	Infrastructure".  It's on by default for trace-cache and JIT
	memory accesses.

2009-03-05  Brian Kahne  <bkahne@freescale.com>

	* Fixed some member-variable ordering issues which were leading to
	warnings.  These mostly involved prefix variables.

	** The data returned by <b>InstrPacket::getResolvedOp(unsigned
	index)</b> in a transactional ISS has changed slightly:  A 0 is
	now returned in the second element of the pair if the result is a
	single register (nota register file).  This makes the results
	consistent with other aspects of the transactional ISS.

2009-03-03  Brian Kahne  <bkahne@freescale.com>

	* Added a functional interface for working with FieldData objects
	in order to make it easier to interface with SystemVerilog.

2009-03-02  Brian Kahne  <bkahne@freescale.com>

	* configure.ac: Minor change: We now support user-specified
	CXXFLAGS, which are now added to the final CXXFLAGS.  We were
	overriding it b/c we were getting optimization flags from
	autoconf.  This is now fixed by copying the initial environment
	variable before calling autoconf's default gcc macro.

	* Added support for profile-guided optimization.  To apply to the
	entire project, configure with --enable-pgo-1 to activate the
	first pass for PGO.  This will then generate .gcda files for each
	source file.  Then clean and reconfigure with --enable-pgo-2 to
	use those .gcda files to guide optimization.  Note: If using this
	with a model, do not re-generate the model's source, or else the
	PGO data will be useless b/c the function names will have changed
	(due to the use of unique symbol names).

	** Support has been added to <b>adl2iss</b> for profile-guided
	optimization (PGO).  This allows the user to create a model, run
	it against a workload or workloads, then re-compile the model
	using profiling data from those workloads.  Refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* Updated the trace-cache to the "final" variant of the
	Nostradamus Distributor, in which only the next-function pointer
	is returned; a member-variable holds a pointer to the data item
	and is updated on a return.  Surprisingly, this is quite a bit
	faster than the older variant.

2009-02-27  Brian Kahne  <bkahne@freescale.com>

	* Slight change to tracediff: UVP parsing was always print a
	"Parsing Test N", where N was 1 greater than the number of tests,
	due to how the parser signaled and end of test.  Fixed this by
	moving this debug message into the parsers themselves.

2009-02-26  Brian Kahne  <bkahne@freescale.com>

	** A new modifier has been added for register read/write
	operations in ADL:  A register access (read or write) may be
	surrounded by the <b>direct_access</b> function, which means that the
	register access should not be virtualized or tracked if used in a
	transactional or hybrid ISS.  For example:
	<pre>
	  GPR(RT) = GPR(RA);
	  direct_access(FOO) = direct_access(BAR);
	</pre>
	In this example, the <b>GPR</b> read and write operations would be
	treated in a normal fashion, but the read of <b>BAR</b> and the write
	to <b>FOO</b> would use architected state, without tracking either as
	a normal source or target.

2009-02-25  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with the register-alias resolver functions: We
	weren't printing a case label for the situation where a register
	file was aliased to another using an index mapping.  The result
	was that the alias was not resolved at all.  Fixed this, then
	added tdriver6/mod6 with in9.dat to test it.

2009-02-23  Brian Kahne  <bkahne@freescale.com>

	* macros/general.m4 (ADL_READLINK): Created a new macro to make
	sure that the readlink command works and that, if -m works, we use
	it.  This means that we no longer use Perl for readlink
	operations, which might cause portability issues, but at least we
	catch it in the beginning and can alert the user.  The user can
	then create or install a simple readlink program.  The -m option
	is used to canonicalize all paths so that sym links to relative
	paths won't cause problems later on.

	* Modified tests/iss/regress to use tcp for the infinite loop
	case, so that it will pass on RHEL3.  This appears to be a bug in
	RHEL3's UDP stack, but at least this gets around the problem.

	* Modified the model build link lines (tests/iss and designs) so
	that tcl appears after the major libraries, so that static linking
	of tcl works.
	
2009-02-20  Brian Kahne  <bkahne@freescale.com>

	* iss/GenInstrs.C: Changed the trace-cache dispatcher to use the
	Nostradamus Distributor
	(http://emulators.com/docs/nx25_nostradamus.htm), which unrolls
	the dispatch loop in order for the processor's branch predictor to
	be more efficient.

2009-02-18  Brian Kahne  <bkahne@freescale.com>

	* Added trace-cache support for instruction caches and for debug
	mode.  All JIT models now pass the equivalent trace-cache tests,
	including mod18 and generic32.

2009-02-17  Brian Kahne  <bkahne@freescale.com>

	* Further updates so that the trace cache will work with
	instructions where we can extract extra parameters at translation
	time, e.g. "se_add" in mod6.adl, where we can figure out that a
	certain instruction field used with a register-file is an alias to
	another register file.

	* All relevant mod11 and mod6 tests pass with the trace cache.

2009-02-13  Brian Kahne  <bkahne@freescale.com>

	* Fixed bugs in the trace-cache generation so that exceptions now
	work.  All mod3 jit tests pass the equivalent trace-cache tests.

	* Branches now work for the trace-cache.  All JIT tests on mod1
	now pass for the trace-cache version.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.4 (v1_5_4) on Linux (ld2061) on 2/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.4 (v1_5_4) on Linux (lc0089) on 2/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.4 (v1_5_4) on Linux (ld2061) on 2/13/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.4 (v1_5_4) on Linux (ld2059) on 2/13/2009 ==

2009-02-13  Brian Kahne  <bkahne@freescale.com>

	* uadl/DefaultFetchUnit.h (DefaultFetchUnit): The logger pointer
	was no being set to 0, resulting in possible segfaults.

2009-02-12  Brian Kahne  <bkahne@freescale.com>

	* First check-in of the trace-cache ISS feature.  The idea is that
	we do something similar to the JIT, except based upon function
	pointers and structures which hold the decoded arguments.  This is
	a very initial check-in:  in2.dat works, but I haven't tested any
	branching or anything else.

2009-02-11  Brian Kahne  <bkahne@freescale.com>

	** A new options have been added to tracediff:

	<b>--reg-mask=&lt;mask&gt;</b>: Apply the specified mask to all
	register values before performing a comparison.  This feature
	allows the user to specify that only a portion of a register
	should be compared, so that, for example, a 32-bit UVP can be
	compared against a 64-bit UVP, where the upper 32-bits of each
	register should be ignored.

	** There has been a minor modification to the logging interface:
	The <code>log_exception</code> event now has an extra parameter,
	<code>bool pre</code> to indicate if the event is occurring before
	or after the exception.  This allows an external user of the ISS
	to know when all side-effects related to an exception have
	occurred, by only acting when <code>pre</code> has a value of
	<code>false</code>.

2009-02-09  Brian Kahne  <bkahne@freescale.com>

	* We were not masking the RPN when performing a translation, so
	extra bits in the RPN which fell into the offset portion of a
	real-address were not cleared, and thus could affect the resulting
	address.  Added in164.dat with mod11 to test this.

	* The UVP writer was not reseting itself between tests, so that
	information carried over from one test to another.  Our regression
	to test this had a bad regression file, so this behavior was
	considered OK.  Modified in2.uvp to correct this mistake.  Added a
	reset routine to UvpWriter.C to reset the writer.

	* external/binutils-adl/src-release: We were leaving in cache
	files when creating the distribution, which potentially screws up
	users who download the distribution, since the cached values won't
	necessarily be correct for their system.  Fixed this by expanding
	the 'find' line do-proto-toplev to remove *.cache.

2009-02-06  Brian Kahne  <bkahne@freescale.com>

	* Re-worked logging for uADL.  uADLArch now inherits from
	LogControl, which controls logging.  Each type of logging is
	assigned a bit in a bit-flag value.  This means it's much more
	scalable.  I re-worked the constructors so that all of the logging
	flags have been removed.  

	Also, the basic idea of logging of various components has changed:
	When logging flags are modified (set or cleared), a call to a
	virtual function (update_trace) is made.  The generated model
	overloads this function and uses it to attach or detach loggers
	from the various components, such as the fetch unit, caches, etc.
	The idea is that rather than having to check an enable flag, the
	various components just check to see if the logger is non-null,
	and if so, they go ahead and log.  

	Also, the OSMLog class takes a reference to LogControl so that
	each instruction class refers to the central object for
	controlling logging.  This avoids the duplication of flags and
	should allow us to have run-time control over logging, such as via
	the scripting engine or monitor commands from the debugger.  This
	still has to be enabled, however.

	** Control over logging for uADL simulator objects has changed.
	Rather than the constructor (or <code>createArch</code> function)
	taking a series of flags, each <code>uADLArch</code> object now
	inherits from <code>LogControl</code>, declared in
	<code>OSM.h</code>.  This class contains methods for turning on or
	off various logging features.  This new design should allow for
	better scalability of logging features (no constructor changes
	will be necesssary in the future when new logging services are
	added) as well as allowing for run-time control over logging.

	Keep in mind that the constructor has changed.  Please refer to
	Please refer to <a
	href="http://cad.freescale.net/adl/chrome/site/uadl-manual.html">the
	uADL reference manual</a> for more information.

2009-02-04  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with grouped writes in uADL:  We weren't sending the
	size parm to the code generation for send_write_request, so it
	wasn't generating the correct code to group the write.

	** New options have been added to tracediff:

	<b>--ignore-itime</b>:  Ignore instruction issue times.
	
	<b>--ignore-ctime</b>:  Ignore instruction completion times.

	The <b>--ignore-timing</b> option is still valid and is equivalent
	to using both of the above options.

	** A new tracing event has been added to uADL:  <b>--trace-osm</b>

	This event traces the OSM state and edge transitions of each
	instruction in the pipeline.  This tracing event is activated with
	<b>--trace-all</b> as well.  Note that this changes the
	constructor and <code>createArch</code> functions:  A new boolean
	for this tracing event has been added.

	** On the command-line, all uADL tracing events may be
	individually turned off, even if <b>--trace-all</b> has been set.
	So, for example, to trace all events except OSM activity, simply
	use the options <code>--trace-all --no-trace-osm</code>

2009-02-03  Brian Kahne  <bkahne@freescale.com>

	* Minor fix so that empty expressions in uADL do not cause a
	segfault.  Added in some extra logging capability (a logMesg
	method in MemoryLogger) but this is currently not used; it's just
	available for debugging.

2009-02-02  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with uADL multi-file compilation: It didn't work if
	we had a custom release function, because we relied upon including
	PipelineStage.h externally, so the job files didn't see a
	declaration for uadl::InstrQueue.  Fixed this by adding an
	extra_includes string-list to ConfigDB; GenSim then includes the
	files listed there and miniAdlParser adds PipelineStage.h to this
	list.  In the long run, I think a better solution is to get rid of
	the aux-function concept and have those functions stay in uADL,
	but get modified to have all resources refer to the ISS's class.

	* uADL models failed an asssertion if run with the
	--max-instruction-count option.  The problem was that we checked
	for this condition in prefetch, and then had an assertion in the
	caller which specifically didn't allow for this condition.  I
	changed the transactional ISS so that the decode logic is what
	makes the check now, since that more accurately tracks
	instructions.  The caller then checks to see, when a null is
	returned, if the model is halted.  If so, it signals an
	abnormal-quit and then exits.  Added uadl/in4-short.dat to test
	this.

	* Safe-mode models were not properly handling grouped memory
	accesses (the feature described below) because with safe mode, all
	accesses are generated; the extra ones need to be skipped.  This
	is as opposed to normal mode, where the extra execution iteration
	acts to skip the extra transaction.  Modified the various memory
	counters to add in this skip.  Modified regress to check
	read/write requests for DLX_bp_fetch_safe.

2009-01-28  Zigu Haras  <zigu.haras@freescale.com>

	* Minor bug fix: The free_buffer() method was not called after assembler refactoring.

2009-01-27  Brian Kahne  <bkahne@freescale.com>

	** uADL now allows memory/cache read/write operations to be
	grouped together, so that, for example, even though the functional
	behavior of an instruction may describe 32-bit read/write
	operations, the micro-architectural behavior will perform 64-bit
	reads and writes.  For example, for PowerPC, the lmw and stmw
	instructions might be implemented such that 64-bits are read or
	written at once, even though the core is 32-bit.

	To support this functionality, the following changes have been
	made:
	<ol>
	<li>
	    <b>send_read_request</b> and <b>send_write_request</b> now
	take an optional second size argument (in bytes) which specifies
	the size of the memory operation, overriding the size generated by
	the ISS.
	</li>
	<li>
	    <b>exec_count(&lt;count&gt;)</b> is a new transaction, where
	the <b>count</b> parameter specifies the number of times that the
	ISS should be cycled.
	</li>
	<li>
	    <b>read_next_operand</b> may now be called multiple times in
	the same instruction class, allowing an instruction to fetch
	multiple operands, in a sequential-operand fetching situation.
	</li>
	</ol>

	* For the above, I modified Zen0.uadl and DLX_bp_fetch.uadl to
	test this behavior.  DLX_bp_fetch.uadl is used for DLX_bp and
	DLX_bp_fetch_safe, so we test both normal and safe-mode.  The
	inputs are loadstore1.dat (for Zen0) and loadstore2.dat (for
	DLX_bp and DLX_bp_fetch_safe).

	* To support the new behavior for read_next_operand, I had to
	re-architect the storage of the slot values.  Rather than a single
	value in the instruction OSM, a vector is used, where each
	read_next_operand in a stage is assigned an element (starting at
	0).  The init function for an instruction class re-sizes the array
	for the number of slots needed.

2009-01-27  Zigu Haras  <zigu.haras@freescale.com>

	* Minor bug fix: The dbg-shared flag was ineffective after assembler refactoring.
	
	* Minor bug fix: The init_line_assemble() method was not called after assembler
	refactoring.

2009-01-26  Zigu Haras  <zigu.haras@freescale.com>

	* Minor bug fix: Added 'ULL' to register write masks in assembler. It
	was a compilation error on 32-bit platform.

2009-01-25  Zigu Haras  <zigu.haras@freescale.com>

	** Support for assembler programming rules was added to ADL. Use <code>rule</code> define block
	to add instruction or packet validity rules to the ADL assembler section.
	Use <code>asm_rules</code> in the instruction block to associate instruction rules with an instruction. 
	Appropriate validity checks are invoked by the assembler after <code>post_asm</code> hook is executed.
	Packet programming rules can be defined for parallel architectures; they are invoked by the assembler 
	after the <code>post_packet_asm</code> hook. The packet rule action code takes 
	an <code>InstrBundle</code> argument that is used to access a packet of assembled instructions; 
	an instruction rule action code has no arguments.

	<code>InstrBundle</code> data structure interface consists of a <code>size()</code> method and the 
	subscripting interface to access its elements.

	Assembler rules action can use any of these help functions: <code>instrHasAttr</code>, <code>size</code>, 
	<code>instrBlk</code>, <code>get_dest</code>, <code>info</code> and <code>error</code>.

	Instruction fields are accessible by name. Packet rules invoke these methods (except the 
	<code>info</code>and<code>error</code>) using the dot '.' notation. Example:

	<pre>
        define(rule=InstrRule) {
        action = {
          if (RA > RB) {   // RA,RB are instruction fields
              error(1,"First argument larger than second");
          }
         };
	}

        define(rule=PacketRule{ 
        action = func(InstrBundle b) {
           int i;
           for(i=0; i < b.size(); ++i) {
             if (b[i].instrHasAttr(ordered_fields) && b[i].RA == 0) {
                error(1,"Packet rule violation.");
              }
            }
          };
        }
    	</pre>

	Packet rules can ensure mutually exclusive access to shared registers. 
	Use the	<code>RegWrites</code>	data structure to store information about target registers and corresponding 
	write-masks. The structure interface consists of <code>size</code> method and its elements are 
	accessed using the subscripting syntax. 

	The <code>RegWrites</code> element interface consists of the following: <code>reg</code> returns 
	a register or a registerfile; and, <code>mask(i)</code> with <code>i=0,1</code> returns write masks. 
	Two helper functions handle this structure: <code>get_dest(RegWrites &)</code> populates <code>RegWrites</code>
	with instruction target registers and their corresponding masks; the second mask in each pair is set to zero.
	The method <code>intersect_dest(const RegWrites &rw1,const RegWrites &rw2,RegWrites &rw3)</code> 
	populates <code>rw3</code>; by common target registers and the corresponding write masks.
	Example where SR is a register and SR.T is a register field:
	<pre>
	define(rule=ME) {
	action = func(InstrBundle b) {
         int i;
         RegWrites rw0;
         RegWrites rw1;
         RegWrites rw2;
         b[0].get_dest(rw0);
         b[1].get_dest(rw1);

         intersect_dest(rw0,rw1,rw2);
         for(i=0; i < rw2.size(); ++i) {
           if (rw[0].reg() != SR || rw[0].mask() != SR.T) {
             error(1,"Multiple writes to a register.");
           }
          }
        };
       }
       </pre>

	Assembler rules correctly resolve sparse register aliases, i.e., the <code>RegWrites</code> structure will
	contain the aliased register(s) information.

	** The <b>parm</b> key in instruction fields denotes a field which is used as argument in aliases and
	can not be either bit-mapped or occur in <b>syntax</b> expression.

	* Add support for Tcl scripting for StarCore's ADL-based PAC run with runsim 


2009-01-23  Brian Kahne  <bkahne@freescale.com>

	* iss/GenMmu.C: We had a bug with the address caching feature of
	ADL ISSs, where if an MMU had multiple test sets, we could get an
	erroneous hit in the cache due to an aliasing situation.  For
	example, an external-pid load hits in the cache, but shouldn't,
	because it should be going through the external-pid address
	translation mechanism.

	This is really only a problem for instruction attributes because
	otherwise, if registers are used to select different sets,
	register updates would cause a cache invalidation.  So, to fix
	this, if a design has multiple test sets and has instruction
	attributes, we OR in the current instruction's attributes into the
	low bits of the effective page number used by the cache.  This
	essentially adds an extra qualification to the cache mechanism,
	preventing erroneous hits, but keeping the utility of the cache
	w/o requiring any extra overhead.  Added iss/in163.dat to test
	this feature.

	Note: This does not affect instruction-read-translate, as I assume
	that we won't have discontiguous instruction accesses based soley
	on instruction attributes.

	* Fixed a minor bug:  The front-end didn't recognize
	checkDataPerms as a valid function.  Fixed this and modified
	fe/mem2.adl to test this.

2009-01-22  Brian Kahne  <bkahne@freescale.com>

	* Modified mod21.adl to add an example implementation of debug
	instruction-jamming.  Added in162.dat to test this.

2009-01-16  Brian Kahne  <bkahne@freescale.com>

	* tests/uadl/stall3.dat: Added a test to see if we can emulate a
	false WAW hazard using a virtual flag and a read-inquire on a
	register-file.  In this example, DLX_MMU has a stall for
	back-to-back loads which have the same target register.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.3 (v1_5_3) on Linux (lc0089) on 1/16/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.3 (v1_5_3) on Linux (ld2059) on 1/16/2009 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.3 (v1_5_3) on Linux (ld2061) on 1/16/2009 ==

2009-01-13  Brian Kahne  <bkahne@freescale.com>

	* iss/GenSim.C (adl): Changed how getRegIndex is implemented, so
	that it now uses a table to look up the register name.  If that
	doesn't match, then it checks to see if we can match against a
	register-file/index concatenated name.  This helps to avoid a
	problem with Visual C++ 2005, whereby a long list of
	if-then-else's exceed a compiler limit.

2009-01-09  Brian Kahne  <bkahne@freescale.com>

	** A user may now create a custom branch predictor for a uADL
	model.  To do this, specify the name of the custom object for the
	<b>algorithm</b> parameter of the <b>branch_predictor</b> manager.
	When the model is generated, an include directive will be inserted
	to include a header file with the same name as the algorithm and
	an object with the name of the algorithm will be instantiated and
	used as the predictor.  Please refer to <a
	href="http://cad.freescale.net/adl/chrome/site/uadl-manual.html">the
	uADL reference manual</a> for more information.

	* configure.ac: We need to add -fpic to binutil's CXXFLAGS, as
	well as CFLAGS, since AsmDriver.cc is a C++ file.  Otherwise,
	compilation fails under 64-bit.

2009-01-08  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with instruction attributes- we weren't clearing it before an
	instruction fetch, so an instruction fetch could have altered behavior due to
	the last instruction executed.  Modified in159.dat to cross a page, so that the
	cache would not be valid.  This caused the problem to be manifest.

	* Also fixed adl_config.pm.in, which had a wrong package name, so $jit_ok didn't
	have the proper value upon export.

	* Merged in assembler work.

2009-01-07  Brian Kahne  <bkahne@freescale.com>

	* Further improvements to the binutils build process.

	* adl2asm has a default architecture-prefix of "ppc" now, so the
	user doesn't have to specify it.

2009-01-06  Brian Kahne  <bkahne@freescale.com>

	* Significant changes have been made to how we build binutils for
	assembler support:  We now build all of binutils during the normal
	build process and this now creates libraries.  The adl2asm script
	uses these libraries as part of the --build-locally option, which
	is the default.  We no longer bother distributing a tarball of the
	release, since nobody uses that option anymore.  So, this should
	simplify the overall build process quite a bit, and it simplifies
	the creation of assemblers and disassemblers a lot.
	
2009-01-06  Zigu Haras  <zigu.haras@freescale.com>

	* Add mod55.adl which tests assembler rule checks to tests/iss regression.

	* Removed line number info rule-check errors from DevTec assembler.

	* Fixed a bug in InstrAttrWalker which ignored attribute queries in packet rules.

2009-01-04  Zigu Haras  <zigu.haras@freescale.com>

        * Modified the disassembler such that the shared object disassebles a full
	packet.

	** Renamed the 'target' entry in xml database to 'destination'.
	  
	* Fixed a bug in disassembler instruction alignment. The amount of
	alignment was determined the maximum of the names occuring in
	syntax or, if syntax not specified, the instruction name. This
	generated a very wide name field in the StarCore
	disassembler. Modified it such that if the instruction has no
	fields and no syntax, its name is ignored.

	** It is now possible to query if the current instruction has an
	attribute in the assembler, as well.  For example:
	<pre>
	hasInstrAttr(special_store);
	</pre>
	where <code>special_store</code> is a registered attribute.  The
	query function may be placed in any assembler hook or assembler
	rule. The query refers to the currently assembledg instruction. 
	The argument to the function must be a literal and must be a 
	valid attribute name.

	** It is now possible to query in assembler if the current instruction
	is associated with a block. For example:
	<pre>
	instrBlk(arith_blk);
	</pre>
	where <code>arith_blk</code> is a register block. 
	The query function may be placed in any assembler hook or assembler
	rule.

	** It is now possible to signal errors in the assembler using the error
	method. For example:
	<pre>
	error(1,"Multiple writes to a register in a packet");
	</pre>
	
	** The <code>post_packet_asm</code> hook takes now an argument of type
	<code>InstrBundle</code> which allows access to instructions assembled in
	current packet.	This structure has a <code>size()</code> function,
	its element are accessed using the subscripting notation. The 
	<code>InstrBundle</code> elements have the <code>size</code>,
	<code>instrHasAttr</code> and <code>instrBlk</code> methods. 
	The fields of the bundle instructions can be accessed by name.
	Example::
	<pre>
	post_packet_asm = func(InstrBundle b) {
	  int i;
	  for(i=0; i < b.size(); ++i) {
	     if (b[i].instrHasAttr(set_field)) {
	       b[i].RA = 1;
  	     }
   	  }
	}
	</pre>

2008-12-17  Brian Kahne  <bkahne@freescale.com>

	* Now, if an instruction or alias has a syntax expression, and no
	explicit disassembly syntax, and it contains fields which do not
	exist in the instruction (or alias target) encoding, then it's
	flagged as not disassemble-able, since we don't know how to
	recover those field values.  For example, in mod1.adl, beq+
	(two-operand form) is not disassemble-able b/c we cannot recover
	the CRn field, which is a pseudo field used for assembly only.
	Modified mod1.adl and powerpc.adl to remove the explicit
	disassemble=false from the two-operand form predicted branches in
	order to test this.

	* Changed the assembler syntax so that cia() is used instead of
	PC.  This adds consistency with the bit-manipulation functions
	that can be used in shortcuts and fixes the bug, whereby PC in
	shortcuts would work only on an architecture that had a register
	named PC.

2008-12-16  Brian Kahne  <bkahne@freescale.com>

	* Modified the assembler so that we can properly handle operands
	which are created from expressions based upon syntax operands or
	shortcuts.  The problem was that we were only setting these in the
	first pass, which didn't work if we had to handle fixups,
	e.g. bgt+ for PowerPC:  The "Y" bit is determined by the BD field,
	which is set in the second pass, if dealing with a fixup.

	To fix this, the fixup now contains extra data storing the
	operand, the opcode (ptr to all operands), operand-values
	(malloc'd memory), and the line-number (for the pc value).  The
	operand-values and opcode are only set if we have modifiers.
	Then, on the second pass, if we have modifiers, then we clear and
	re-set all fields which are set via modifier functions
	(expressions).  Added iss/asm21.s and designs/dhry_{1,2}.s to test
	this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.2 (v1_5_2) on Linux (lb32001) on 12/12/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.2 (v1_5_2) on Linux (lb32001) on 12/12/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.2 (v1_5_2) on Linux (ld2061) on 12/12/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.2 (v1_5_2) on Linux (lc4001) on 12/12/2008 ==

2008-12-10  Brian Kahne  <bkahne@freescale.com>

	* Updated adl.m4 to export ADL_CXX and to fix some bugs.

	* Bumped the version number for an upcoming release.

2008-12-09  Brian Kahne  <bkahne@freescale.com>

	** A new field has been added to a uADL pipeline stage's
	definition to allow users to describe custom policies for
	releasing instructions:
	<pre>
	release_test = func(InstrQueue instr_queue) { ... }
	</pre>
	If specified, this function is called before each time step.  The
	function may access the instructions in the queue for this stage,
	specifying which instructions may be released.  This information
	is combined with the <i>release_policy</i> for the stage in order
	to decide which instructions may be released.

	For example, an in-order, superscalar processor might have a
	restriction whereby two load or store instructions may not be
	issued in parallel.  Since the processor is in-order, the
	<i>release_policy</i> for the decode stage should be
	<i>fifo_order</i> to ensure that instructions maintain their
	order.  However, the policy of deciding which instructions may be
	issued in parallel would be placed into the <i>release_test</i>
	function.  Please refer to <a
	href="http://cad.freescale.net/adl/chrome/site/uadl-manual.html">the
	uADL reference manual</a> for more information.

	* To implement this, the release_test function is added to the ISS
	as an auxiliary function in the core.  Also, the instruction-class
	enum is now in the core, so that the release_test function can
	refer to these items.  A stage with a custom release_test function
	is implemented as a class which inherits from InstrQueue, which
	inherits from PipelineStage, and adds a beforeTimeStep function
	which calls the release_test function.  Modified DLX2.uadl to test
	this new fuctionality; added issue1.dat for the regression.
	
2008-12-08  Zigu Haras  <zigu.haras@freescale.com>

	* Assembler handled incorrectly instructions, i.e. mnemonics, 
	which had variants with and without arguments. 
	When processing the opcodes,  it correctly backtracked from an 
	instruction with operands to one without. However, 
	if the later failed, it did not backtrack correclty to 
	test next opcodes which had operands.  

	* Fixed a bug in assembler  handling of enumerated fields when
	intermediate pseudo instruction fields (i.e., fields used to
	save intermediate resutls), are used as well. 

	* Fixed a bug in assembler handling of instructions with encoding
	having prefix information. The shift values for the field setters
	in such instructions was computed incorrectly. Need to modify
	disassembler to handle such instructions,i.e., add support  for a 
	VLES disassembler. 

	** Enhanced Perl/XML database for instruction aliases. The
	database contains information about whether an alias field is
	associated with a source/destination register in the target
	instruction, or whether it is a general field, e.g., immediate
	field. Conditional source/destinations are tagged with this extra
	information.  The perlDB query interface correctly handles the new
	database format.

	* Modified the test/docs regressions for the new database scheme.
	perlDB tests were based on a modified old SC3400 Perldatabase. 
	The new SC3400 perl database was built from designs/sc3400_arch.adl.

2008-12-04  Brian Kahne  <bkahne@freescale.com>

	** The <b>adl-config</b> program has a new option: <b>--cxxprog</b> 

	This displays the path of the C++ compiler used by the
	installation.  The <b>adl.m4</b> autoconf macro has been updated
	to use this information; it now exports <b>ADL_CXX</b>, which is
	the path of the compiler used by the specified version of ADL.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.1 (v1_5_1) on Linux (lb32001) on 12/4/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.1 (v1_5_1) on Linux (lb32001) on 12/4/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.1 (v1_5_1) on Linux (ld2059) on 12/4/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.1 (v1_5_1) on Linux (ld2061) on 12/4/2008 ==

2008-12-03  Brian Kahne  <bkahne@freescale.com>

	* We now support an arbitrary number of operations for intbv's
	concat operation.  I modified InstrWalker so that genConcat looks
	at the number of operands and, if greater than 4, generates nested
	calls to concat.  Modified mod52.adl to test that this works.

	** Tracediff has been enhanced so that now, if the
	<code>--check-all</code> option is used, errors will be reported
	if extra register update intermediate results exist in the found
	file.  Also, better error checking is performed for register
	mismatches, so that missing register updates are clearly
	identified as such, rather than generating an erroneous error
	about a missing update of 0.

2008-12-01  Brian Kahne  <bkahne@freescale.com>

	* Added a check for bare integer fields in instruction field
	descriptions.  Added fe/inst110.adl to check this.

2008-11-25  Brian Kahne  <bkahne@freescale.com>

	* For compatibility purposes with Raptor, changed the UVP test
	writer so that "bt" fields are printed on interrupts, as well as
	branches.

	* Fixed a bug with uADLMemory: If max_requests was set to higher
	than the default of 1, then we would have problems.  The issue was
	that memory accesses could come back out of order, but we were
	always taking from the front of the queue, leading us to remove
	the wrong transaction.  This then later confused code which was
	looking for a specific transaction ID, leading to deadlock
	situations.  Modified DLX_cache_split.uadl to have max_requests =
	2 in order to test this; in2.dat fails on the original code with
	this change, but works with the fix.
  
2008-11-21  Brian Kahne  <bkahne@freescale.com>

	* Added a new uADL transaction:
	<code>request_queue_inactive(&lt;manager&gt;)</code>.  This
	returns true if a memory token-manager has been inactive for the
	whole cycle.  So, for example, if a memory was processing fetches
	at the start of a cycle, this would return false.

	* We had a number of places in uADL where we were calling
	NIA_write, rather than NIA_write_simple.  This ended up generating
	bogus log_branch_taken events, which affected bt cards in UVPs.

2008-11-20  Brian Kahne  <bkahne@freescale.com>

	** There has been a minor modification to the logging interface:
	The <code>log_mem_read</code> event now has an extra parameter, <code>bool
	pre</code> to indicate if the event is occurring before or after
	the read.  This makes it equivalent to the <code>log_mem_write</code>

	** Additional filtering capabilities have been added to the
	scripting interface:  You may now filter on specific register-file
	indices using the syntax:
	<pre>
	setlogcmd regfile_write <func> <register-file-name> <index>
	</pre>

	for example:
	<pre>
	setlogcmd regfile_write myfunc GPR 2
	</pre>

	You may also filter memory reads and writes based upon an address
	or range of addresses using the syntax:
	<pre>
	setlogcmd mem_write|mem_read <func> <memory-name> <address>|<address-start> <address-end>
	</pre>

	For example, the following will execute the handler <i>myfunc</i>
	on a load from addresses 0x1000-0x1fff:
	<pre>
	setlogcmd mem_read myfunc Mem 0x1000 0x1fff
	</pre>
	
	* Logging of memory reads has been changed so that it occurs
	*before* the read.  This allows the scripting language to poke a
	value in so that the core will see it.

	* Fixed a minor bug with write64: We had an extra pre-write
	logging event to ea2+4,ra2+4 on a word-aligned 64-bit access.
	Removed this.
	
2008-11-18  Brian Kahne  <bkahne@freescale.com>

	* We had a problem with MMU reporting, where intermediate results
	were wrong in UVPs if we had setfields.  This was because we
	called log_mmu_translation using a pointer to a way object, which
	thus didn't have any of the set fields.  The address hack in the
	UVP writer thus had wrong indices, since the set fields are
	reported first.  Plus, the set fields weren't being reported,
	which was annoying.

	Fixed this by modifying how we create the MMU objects so that we
	wrap the way object with a class which inherits it and adds a
	pointer to the set object.  The report method then calls the set's
	report as well, to get all fields.

2008-11-18  Zigu Haras  <zigu.haras@freescale.com>

	* Added adlapi2simapi to svn.

	* Fixed a bux in serial grouping support in ADL assembler.
	A prefix instruction is added to a VLES encoding only if 
	it is required. Added tests/iss/mod53.adl to test this feature.

	* Modified the shared object disassembler to decode VLESes.
	GenAsm.C was modified so that the disassembler generated for
	parallel architectures will keep a track on the data consumed
	by the disassembler. The info->application_data pointer is updated
	when data read was only partially disassembled, i.e., when
	instruction length is shorter than data read.

	* Fixed a bug in Scripting.C that caused regression segfault.
	In function logBreakpoint, end-of-vector iterator was not decremented
	when vector elements were erased, which resulted in an illegal iterator.
	
2008-11-17  Brian Kahne  <bkahne@freescale.com>

	* The uADL back-end now uses prefix-streams for code output, so we
	get automatic indentation.  This will probably need to be tweaked
	over time, since we still have some hardcoded whitespace in the
	back-end.

	* Converted the main uADL code-generation class over to the
	pattern used by the ISS: An internal class defined entirely in the
	implementation file, in order to reduce code redundancy and the
	need to pass parameters (many of the parameters are now member
	variables).
	
2008-11-13  Brian Kahne  <bkahne@freescale.com>

	** Added a new parameter to <b>tracediff</b>:
	<b>--ignore-extra-fields</b> This allows the user to ignore fields
	which are in the expects file but not in the found file.

	** A new option has been added to <b>adl2doc</b>:
	<b>--print-source-location</b> This will cause filename and
	line-number information to be inserted into generated
	documentation for all action code.  By default, full paths are
	used.  The option <b>--full-path</b> may be used to enable or
	disable this feature.  If disabled, only the base-name of the file
	is printed.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.0 (v1_5_0) on Linux (lb32001) on 11/13/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.0 (v1_5_0) on Linux (lb32001) on 11/13/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.5.0 (v1_5_0) on Linux (lc4001) on 11/13/2008 ==

2008-11-12  Brian Kahne  <bkahne@freescale.com>

	** It is now possible to query if the current instruction has an
	attribute.  For example:
	<pre>
	hasInstrAttr(special_store);
	</pre>
	where <code>special_store</code> is a registered attribute.  The
	query function may be placed in any hook and queries the state of
	the currently executing instruction.  The argument to the function
	must be a literal and must be a valid attribute name.

	** The MMU lookup has been extended to allow for more flexible
	matching criteria.  Groups of tests may now be placed within
	<b>tests</b> define blocks.  Each of these blocks may then be
	given an enable predicate and the user can then specify an order
	in which to test each test-set.  This allows, for example, an MMU
	to have a general lookup mechanism and then a special lookup
	mechanism for certain classes of instructions.  Please refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2008-11-10  Brian Kahne  <bkahne@freescale.com>

	* Merging the new logging API into the main trunk.

2008-11-07  Brian Kahne  <bkahne@freescale.com>

	** The user may now influence how UVPs should be loaded for a
	given type of model by using the <code>pageshift</code> key of an
	MMU lookup.  This modifies how the <b>EPN</b> and <b>RPN</b> field
	values are handled: Upon loading, they will be shifted right by
	this amount, and upon writing, they will be shifted left by this
	amount.

2008-11-05  Brian Kahne  <bkahne@freescale.com>

	* Further modifications to the assembler: The various walkers in
	GenAsm no longer inherit from VarWalker, since that class has lots
	of overhead that we don't need.  Also, the assembly syntax
	expressions are processed using SimpleVarWalker, a simple walker
	which just collects up the names of variables.  We still have a
	bug, though with handling "PC" in shorthands- it's currently
	hardcoded so that it really only works properly if the design has
	a register named "PC".  We need to fix this by replacing the
	special keyword of PC with cia(), then properly handle references,
	substituting in the design's cia.

2008-11-04  Brian Kahne  <bkahne@freescale.com>

	* Modified the skip-instruction implementation for
	hybrid/transactional ISSs: We weren't reseting the
	_skip_instruction_commit flag, so that one skip would throw off
	subsequent execution.  I also removed the redundant checks for the
	flag in each instruction handler, as this was unnecessary, since
	we were 0'ing the packet anyway.

	** A new method has been added to the instruction packet for
	hybrid and transactional ISSs:
	<pre>
	OpInfo InstrPacket::getResolvedOp(unsigned index) const;
	</pre>
	This returns an OpInfo object with the id and index of the
	operand, with any aliases resolved.  So, for example, if the
	original op data (retrieved via getOp()) were to indicate an
	element of a sparse register file, then this would return data
	about the actual target of that particular element of the sparse
	register file.

	* A new print function for instruction packets,
	printInstrPacketResolved, was added and tdriver.C was modified so that
	--log-instr uses this to print out the resolved elements of a
	packet.  tdriver1/in157.dat was added to test this.
	
2008-11-03  Brian Kahne  <bkahne@freescale.com>

	* Changed the functions listed below, so that a register result
	returns an index of -1, since the index is not relevant.

	** A new feature has been added to hybrid and transactional ISSs:
	The following two functions allow a user of the library to resolve
	register and register-file aliases:
	<pre>
	static std::pair<unsigned,unsigned> reg_read_alias_resolver(unsigned id,unsigned index);
	static std::pair<unsigned,unsigned> reg_write_alias_resolver(unsigned id,unsigned index);

	static std::pair<unsigned,unsigned> reg_read_alias_resolver(const OpInfo &opinfo);
	static std::pair<unsigned,unsigned> reg_write_alias_resolver(const OpInfo &opinfo);
	</pre>

	A user can call this function with a register ID and index and the
	function will return an id/index of the target of the alias, or
	target of the sparse register entry.
	
	* Modified instruction usage-tracking slightly, so that an alias
	that has instruction fields which imply resource utilization,
	e.g. an instruction field which is pc-relative, will add to that
	alias's usage information.  The alias will then directly include
	its targets usage info.  Added fe/inst109.adl to test this.

2008-11-03  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a bug in multi-ported memory implementation.  Now requets from
	one port will not block requests from another port.

2008-10-31  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with handling sub-instructions:  If a
	sub-instruction were included in an instruction's field list,
	followed by additional fields, we would always put the
	sub-instructions fields at the end.  Fixed this by re-doing how
	Instr::transfer_fields handles copying over fields:  We construct
	a temporary list with the proper ordering and then swap that with
	the original, rather than always appending.

	* Worked on front-end performance: Parsing of input files with
	lots of sub-instructions was slow because we were using VarWalker
	for lots of translation activities, even though it's very heavy
	weight, due to usage-tracking.  I removed the renaming features
	from VarWalker and modifying SubstWalker to have the same
	functionality.  I changed each of the walkers in SyntaxWalkers.h
	to inherit directly from Opencxx::Walker, thus reducing overhead.
	This lead to a nice speed improvement.  I also turn off the gc
	during parsing, since during this phase, we don't need to worry
	about cleaning up, since we're generally just generating new
	items.  It's then enabled afterwards, so that cleanup can occur.

2008-10-30  Brian Kahne  <bkahne@freescale.com>

	* I've merged in Zigu's changes that he didn't commit.  All
	regressions pass, so hopefully this won't break anything...

	** A new interface function, defined in SimInterface.h, has been
	added:
	<pre>
	std::string evalCliCommand(const std::string &cmd);
	</pre>
	This allows the user to execute a Tcl command directly.  This is
	mainly useful for driver programs which use models as shared
	objects, and allows for executing command before or after invoking
	the scripting interface via <code>startCliMode</code>.

	** Modified tests/scripts/driver.C to test the above
	functionality.
	
2008-10-29  Brian Kahne  <bkahne@freescale.com>

	* Modified clrfilter and setfilter so that, if no arguments are
	given, all events are set or cleared.

	* adl2asm: Fixed a bug, where the check for an architectural
	prefix was made before a check for the verison option, meaning
	that the user couldn't simply use the --version option by itself.

2008-10-17  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with tracediff:  If ignore-extra-mem was enabled,
	but we had no memory at all in the found-file, we'd flag an
	error.  I added a special case to handle this, and added
	trorig3.uvp/tr14.uvp to test this.

2008-10-14  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with finding slots for fixed register-file
	elements.  If the user supplied a simple instruction field,
	e.g. RA, but the register-file was indexed with an expression
	involving a type-conversion method, e.g. RA.uint32(), then the
	comparison would fail.  This was the case for when the user, in a
	uADL file, issued a write_target command.  

	Fixed this by modifying SlotAlloc::getSlot to call an intelligent
	comparison routine that, if the initial comparison failed, would
	see if the expression was such a call, and would then compare just
	the lhs of the dot expression.  Modified mod1:lwzu/DLX_forward to
	test this behavior.

	** Two new keys have been added for register files:
	<b>invalid_entry_read</b> and <b>invalid_entry_write</b>.  These
	are hooks which allow the user to specify actions to be taken when
	a read or write to an invalid entry in a sparse register-file are
	made.  Please refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.

2008-10-13  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new cache parameter 'touch_latency', which specifies the
	latency (in cycle) of a cache touch operation.  The default value is 0.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.5 (v1_4_5) on Linux (lb32001) on 10/13/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.5 (v1_4_5) on Linux (lb32001) on 10/10/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.5 (v1_4_5) on Linux (lb32001) on 10/9/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.5 (v1_4_5) on Linux (lc0089) on 10/9/2008 ==

2008-10-09  Brian Kahne  <bkahne@freescale.com>

	* Minor compilation changes to get the assembler to build locally
	on x86 and with separate build and source directories.

2008-10-08  Hangsheng Wang  <hangshen@freescale.com>

	** Added new inquire-type transaction wait_cache_command(cache).  This
	inquire stalls the instruction if it has issued a cache command to
	'cache', which has not been completed.

	* Modified DLX_L2.uadl to test wait_cache_command().

2008-10-08  Brian Kahne  <bkahne@freescale.com>

	* Updated the install process so that the files required for using
	the --build-locally option of adl2asm are copied into the
	destination share directory.

	** A shared-object version of a disassembler may now be created.
	This will occur when the <code>--shared</code> option is supplied
	to <b>adl2asm</b>.  The resulting shared object has a very simple
	interface, declared in <code>asm/disassembler.h</code>:
	<pre>
	int disassemble(char *output,unsigned memaddr,const char *input,int length,int bigendian,
                int print_addr,const char *sep);
	</pre>
	Binary data is read from <code>input</code>, disassembled, and
	the human-readable text is placed into <code>output</code>.

2008-10-07  Brian Kahne  <bkahne@freescale.com>

	** The tracediff option <code>--ignore-field</code> now applies
	both to fields directly within a UVP and to elements of TLB
	intermediate and final results stored in the "d" field.  For
	example, a user can use the option
	<code>--ignore-field=WIMG</code> to ignore the WIMG field of all
	TLB intermediate and final results.

	** The <code>IssNode</code> external translation functions,
	<code>extInstrReadTranslate, extDataReadTranslate,
	extDataWriteTranslate</code> have been modified so that they no
	longer cause side-effects.  They now return a <code>bool</code> to
	indicate whether a translation was successful or not.  No
	permission checking or hit/miss side-effects are performed.

2008-10-06  Brian Kahne  <bkahne@freescale.com>

	* iss/tracediff.C (struct UvpHandler): Fixed bug in init list: We
	didn't have a null terminator on a list of keys, so sometimes we'd
	get segfaults.

2008-10-03  Brian Kahne  <bkahne@freescale.com>

	** Helper functions may now have TLB lookup data structures as
	arguments, including base classes.  For example:
	<pre>
	  void populateMasRegFromEntry(const TlbBase_t &t)
	  {
	    MAS0.EPN  = t.EPN;
            ...
          }
	</pre>

	** An arbitrary number of MMU lookups may be chained together with
	single inheritence.  For example, a model may define a lookup
	called TlbBase, then have an interface lookup named TlbProduct
	which inherits from TlbBase, and then two implementation lookups
	which inherit from TlbProduct.
	
2008-10-02  Brian Kahne  <bkahne@freescale.com>

	** MMU lookup definitions which are marked as interfaces may now
	have hook functions.  For example, a PowerPC model might declare a
	lookup called TlbBase, which contains common functionality,
	including permission-checking hooks.  It might then have two
	non-interface lookups, TlbCam and Tlb4k, which inherit from
	TlbBase, and implement variable-sized and fixed-size pages.

2008-09-30  Hangsheng Wang  <hangshen@freescale.com>

	* Added partial support for multiple uadl memories.  The user can now
	define one memory on the adl side, and one data memory and one
	instruction memory on the uadl side.
	  Added new uadl model DLX_2M.uadl for regression.

2008-09-29  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a bug in instruction buffer size tracking that caused
	instruction buffer size to slowly grow over time.

	* Removed fetch unit parameter "can_preempt" from the front end as it is
	obsolete.
	
2008-09-29  Brian Kahne  <bkahne@freescale.com>

	* Regression fail fixes:

	1. Re-factored GenerateAssemblerInt::genInstrTables to avoid a
	segfault- pseudo instructions were querying the field_indices set,
	which didn't have the item it expected, thus returning end(),
	which was dereferenced, causing a segfault.

	2. Re-generated gas/config/tc-ppc.c, which had merge conflicts.

	3. Modified in154.dat, which was causing fails.  This needs to be
	examined to see if it's really a bug or not.

2008-09-28  Zigu Haras  <zigu.haras@freescale.com>

	* Write mask is not used when updating a concurrent registers.
	This is since, typically, the write-hook writes to all the register.

	** Added key 'reserved' to instruction fields. It indicates that
	a field should be ingored in decoding and in syntax string.

2008-09-26  Brian Kahne  <bkahne@freescale.com>

	* Modified the scripting interface slightly so that an easy-to-use
	helpe routine is defined in SimInterface.h, called startCliMode(),
	to start up the command-line interface, either interactively or
	with a script file.  Modified scripts/driver.C to test this.

2008-09-25  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with sub-instructions, where the same
	sub-instruction could not be used across multiple groups.
	Re-factored the code to support this feature.  The main things
	that changed were:

	When processing tmp fields in finalize_tmpfields, I was hashing on
	the field name and a pointer to the sub-instruction.  However, if
	the same sub-instruction were used multiple times, this would show
	up as multiple instances of the same field, causing the code to
	think that it had a split field, which then caused errors due to
	overlaps.  Fixed this by hashing on the name + sub-instruction
	*group* pointer.

	I then changed InstrBase::Field so that it had a pointer to the
	group, rather than the individual sub-instruction, so that name
	qualifying would use the group, which is unique, rather than the
	sub-instruction name, which is not unique.

	The other problem was figuring out what fields to add to each
	call.  I refactored how PtreeSubInstrCall worked- it now works
	like register accesses, in that it stores information about the
	sub-instruction and group it's associated with.  It then has a
	translate function in AdlTranslatingWalker to handle translation.

	Added fe/inst106.adl to test the front-end stuff and modified
	iss/mod51.adl to make sure that we can compile an example with
	repeated sub-instructions across groups.

2008-09-25  Hangsheng Wang  <hangshen@freescale.com>

	* Changed handle_memory_request() and handle_memory_latency() to include
	a memory id parameter.

2008-09-24  Brian Kahne  <bkahne@freescale.com>

	* Re-factored how an instruction's fields are processed.
	Previously, in Handlers.C:add_to_fields, the division was made
	about whether to add a field to _tmpfields or _all.  The problem
	is that this removes the implicit ordering, which we use to assign
	bits to pseudo fields when that's desired.

	Now, for normal instructions (not aliases), we add all fields to
	_init_all.  This stores both InstrBase::Field and
	InstrBase::TmpField objects.  This allows us to assign bit
	numbers, if needed, to pseudo fields.  Then, in
	InstrBase::check_for_pseudo_fields, we split up _init_all, moving
	TmpField objects to the TmpFields object.  Later, we distribute
	the remaining items in _init_all to _fields and _opcs within
	InstrBase::distr_fields.

	Added tests/fe/inst104.adl to test this

	* Fixed a bug with sub-instruction generation: If a
	sub-instruction has no operands, incorrect trailing commas were
	being added to sub-instruction action functions and calls.  Fixed
	this and modified mod51.adl to test this.

2008-09-22  Brian Kahne  <bkahne@freescale.com>

	* Fixed a problem with hybrid transactional ISS generation- for a
	register or register-file write, we were separating the slot-used
	call and the actual update with a semicolon, making them two
	different statements.  If the user had an if or else clause
	without braces, this caused problems.  Replaced the ; with a , in
	order to make a single expression.  Modified mod1.adl/addi to have
	an else clause with no braces, in order to test this.

	** Pseudo instruction fields may now be used directly within
	instruction field encodings.  If this is done, and no nested
	instructions are present, then ADL will then automatically assign
	bit numbers to each field, based upon whether big or little-endian
	numbering is being used.

	For example:
	<p>
	<code>
	  define (instrfield=OPCD) {
            pseudo = true;
            width = 8;
          }
	  define (instrfield=X) {
            pseudo = true;
	    width = 8;
	  }
	  define (instrfield=Y) {
            pseudo = true;
            width = 16;
          }
          define (instr=A) {
            fields = (OPCD(0x1e),X,Y);
            action = {};
          }
	</code>
	</p>
	In this case, <b>A</b> becomes a 32-bit instruction, where bit
	numbers are assigned to OPCD, X, and Y, starting at bit 0 on the
	left.  

	An instruction field may be used multiple times by different
	instructions, each with its own bit positions.  Sub-instructions
	may also use pseudo fields, in which case bit numbers will be
	assigned after the sub-instruction groups are expanded.
	The same pseudo-field may be used by multiple sub-instructions in
	the same instruction.

	* To implement the above, some re-factoring was required in the
	front-end: Basically, the expansion of sub-instructions had to be
	done first, followed by checking for pseudo fields, followed by
	finalization.  Also, since fields can be used multiple times,
	field names had to be qualified by their sub-instruction- these
	changes occurred in the ISS generator and the assembly generator.
	The main ISS test for these features is mod51.adl.  Front-end
	tests include inst99.adl, inst100.adl, and inst101.adl.
	
	** When using sub-instructions, the <b>names</b> field is now
	optional.  If it is ommitted, instruction names will be generated
	by concatenating the original instruction name with each
	sub-instruction name, separated by <b>_</b>.

2008-09-18  Brian Kahne  <bkahne@freescale.com>

	* Modified flex.m4 and bison.m4 so that they create files
	flex-version and bison-version, which store the version of their
	respective tools.  These are only updated if a version change is
	detected.  The relevant flex and bison rules in iss/Makefile.am
	are now dependent upon these files, so that a change in them
	should cause a re-generation of the generated files.  The idea
	here is that we want to be able to distribute the generated files
	so that a Windows build is possible without having the tools, but
	we also want to detect version changes, so that users don't get
	weird compile errors because their versions of flex or bison are
	slightly different from ours.

2008-09-16  Zigu Haras  <zigu.haras@freescale.com>

	* Fixed a bug: both empty_commit_queues() and packetPositionReset() were generated.
	Consequently, in parallel architectures with delayed write, the commitQueue was advanced
	by empty_commit_queues(), and the next time slot delayed writes were prematurely commited.
	
	* Fixed a bug: commit methods were not generated for non-sparse register files with
	a write hook.

	* Added startCliMode() method to ScriptingIface. This allows applications which do not 
	use the opions() command line parser to using Tcl scripting.
	
	** Added support for skip_instruction() in post_fetch hook, in parallel architectures.
	For such usages, the skipped instruction will be fetched, decoded, its instruction field
	accessed but no code will be executed. This feature is required to model StarCore's 
	prefix data dispatch to insructions. 
	

	** Added support for packet-base register update for parallel architectures. This allows
	for multiple register updates by instructions in the same execution packet. A write hook
	determines the value actually written based on all updates. The write hook for such registers
	takes a <b>ValueBundle</b> argument. A ValueBundle has an STL vector interface, and its elements
	have the interface:
	<pre>
	mask()  - the write mask associated with element.
	value() - the value written expanded to register width.
	addr()  - the address of the insturction issuing this write.
	index() - the register file element's index, zero for resigers.
	</pre>
	
	For example is:
	<pre>
	define(write) {
	  action = func(ValueBundle v) {
	     bits<32> val;
	     unsigned s = v.size();
	     for(unsigned i=0; i != s; ++i) {
	       if (v[i].mask().uint32() & 0x11) {
		val = val + (v[i].value().uint32() & 0x11);	
             } else {
		val = val + (v[i].value().uint32() & 0xFC); 
	     }	
	   }	
	   ThisReg = val;
	 }
	}
	</pre>
	
        This features is required to model SC3850 SR resgiser update.
	


2008-09-15  Brian Kahne  <bkahne@freescale.com>

	** Added a new routine to allow users to poke data into the
	instruction memory hierarchy: <code>debug_instr_write(bool
	trans,addr_t addr,uint32_t value,int size)</code>.  This routine,
	along with <code>debug_data_write(unsigned id,bool trans,addr_t
	addr,uint32_t value,int size)</code>, traverse the memory
	hierarchy, modifying cache lines only if the address is valid.

	* Modified log_current_instr:  The new routine now returns the old
	value of the instruction packet pointer.

	* Added driver8 to test debug_instr_write.  This acts in a similar
	manner to how a test generator woulds: It inserts an instruction,
	then cycles the model, in order to test that a model with cache
	can handle this type of usage.
	
2008-09-11  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a bug in the implementation of linefill lookup lock.  The lock
	should only start as the linefill itself starts.

2008-09-10  Hangsheng Wang  <hangshen@freescale.com>

	* Changed uADL's instruction class selection logic so that instruction
	classes with operand specialization are always lookuped up first.  This
	ensures that an instruction with operand specialization is assigned to
	the right class.

2008-09-10  Brian Kahne  <bkahne@freescale.com>

	* Fixed a weird compatibility issue with tar:  Older versions of
	gnu tar ( <= 1.14) would allow uid substitution for v7 format
	tarfiles (an older file format), while newer versions of tar only
	allow this substitution for gnu-format files.  The problem is that
	our uids come from our commerce IDs, which are larger than the
	size allowed for uids in the v7 format.  This used to just cause a
	warning and tar would substitute in UID_NOBODY.  With newer
	versions of tar, it issues an error.  Unfortunately, it still
	creates a distribution file, due to how pipes are used by the
	invocation of tar and gzip, but it's corrupt.

	Fixed this in configure.ac by looking for the version of tar.  If
	it's newer than 1.14, I change tar's invocation, which is normally
	tar chof -, to tar chf- --no-same-owner, which just uses the
	long-form of -o.  For some reason, for compatibility, use of the
	-o option kicks tar into v7 mode.  By making this change, it keeps
	it in GNU mode, which is the default mode, so that the
	substitution will be made.

	* Fixed a Perl incompatibility with Getopt::Long.  It turns out
	that an environment variable affects whether options can be
	re-ordered or not on the command-line.  In Parmer, the default is
	that they can be re-ordered, whereas in some places, they cannnot,
	by default.  This is set by the POSIXLY_CORRECT; if it's 1, then
	permute isn't allowed.

	Fixed this by invoking Getopt::Long with permute, so that this
	option is always allowed.

2008-09-09  Brian Kahne  <bkahne@freescale.com>

	* Further testing of the JIT:  Using block memory with generic32,
	with an optimized 64-bit build and no instruction counting:  112
	MHz.  With instruction counting:  110 MHz.

	* Added a command-line option to make-iss, --jit-instr-count, that
	allows you to toggle instruction counting on and off for the JIT.
	However, there isn't that much of a performance gain with turning
	it off.

	* I moved PPC elf and dhrystone compilation to
	tests/designs/Makefile.ppc-elf and added dhry.lds, a linker script
	that moves Dhrystone into the first 128k of memory, so that it can
	be used with a block memory.

	* Modified the tcl autoconf macro so that it runs tclsh directly
	from its real location.  This prevents erroneous paths from being
	added in, since tclsh changes its auto_path based upon its
	location.

2008-09-08  Brian Kahne  <bkahne@freescale.com>

	* Experimented with improving memory performance by eliminating
	byte swapping and storing everything in a little-endian format,
	but reversing accesses from top to bottom.  So, for example, a
	store of 0xdeadbeef to 0x100 would actually store to Top-0x103,
	where Top is page[size].  Surprisingly, this didn't really help
	performance.  What did, though, was using better byte swapping
	routines.  We may wan to revisit this in the future.

2008-09-05  Hangsheng Wang  <hangshen@freescale.com>

	* Added a new uadl regression test for cache commands.

	* Modified existing test for operand-based instruction assignment to
	explicitly check stalls that are direct results of mtspr class
	assignment.

2008-09-04  Hangsheng Wang  <hangshen@freescale.com>

	* Added zen650 specific lookup rule.  This rule cannot be abstracted
	with lookup lock cycle parameters, and will be moved to a custom model.

2008-09-03  Brian Kahne  <bkahne@freescale.com>

	** A new logging event has been added:
	<code>LogBase::log_branch_taken()</code>.  

	This is emitted whenever the NIA is updated by action code, and
	corresponds to a branch being taken.

	** The instruction logging event, <code>LogBase::log_instr</code>,
	has been updated.  It now takes an additional parameter,
	<code>uint32_t flags</code>, which is set to various bit flags
	defined by the <code>InstrFlags</code> enum type.

	** In order to test the branch-taken logging event, the UVP and
	DAT writers have been changed slightly.  For UVP files, the
	<b>bt</b> key is now set in instruction commands to <b>T</b> for a
	taken branch and <b>N</b> for a non-taken branch.  

	For DAT files, the <b>B</b> card has been added to specify branch
	information.  Currently, its only parameter is <b>taken=1</b> to
	indicate a taken branch.  A non-taken branch will not emit a
	<b>B</b> card.  Breakpoints and watchpoints have been changed to
	<b>BP</b> and <b>WP</b> respectively.

	** This release contains a new logging API.  Previously, logging
	events were emitted by the core by calling static functions,
	e.g. <code>log_mem_read</code>, <code>log_instr</code>, etc.
	However, this has proved to be unsufficient for handling complex,
	multi-core platform models.  The new interface requires that an
	object derived from <code>LogBase</code> be registered with a core
	by calling <code>IssNode::setLogger</code>.  All events are then
	sent to this object.  The events are basically the same between
	the two systems, except that calls which used to have an
	<code>IssCore</code> pointer as a parameter no longer have this
	parameter.  Instead, users should store a pointer in the logging
	object themselves.  Please refer to  <a
	href="http://cad.freescale.net/adl/chrome/site/adl-iss-integration.html">the
	ADL integration guide</a> for more information.
	
	* Fixed bugs in the Token comparison operations.  Basically, they
	were wrong: they weren't comparing strings correctly when the
	lengths were different, e.g. "bt" was considered greater than
	"d".  The problem is that the normal string comparison operators
	regard "bt" as less than "d", so we ended up with different
	sorting orders between Tokens and strings, resulting in problems
	when we sorted using one order, then tried to do a binary search
	using the other order.  Fixed this by using the standard sorting
	order of strings in C:  You compare a character at a time,
	returning the difference between characters at the point of a
	discrepency.  

	There's a bit of extra complexity wrt. the fact that Tokens are
	not null-terminated, so you don't get a natural discrepency when
	one string hits a null before the other.  However, since you know
	the lengths, you can compare the two strings according to the
	minimum length of each, then if they're equal, return the
	difference of their lengths.  This results in the correct answer.

2008-09-03  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a code generation bug to use user-provided port number instead
	of 0 in memory transactions.

	* Fixed a bug that erroneously makes a CacheFlush a NOP if the line is
	not dirty.

2008-09-02  Brian Kahne  <bkahne@freescale.com>

	** Instruction classes in uADL may now distinguish between
	instructions based upon operand values.  This allows the user, for
	example, to specify that a <b>mtspr</b> instruction with an
	<b>SPRN</b> value of 60, should be part of a special class, but
	that all other types of <b>mtspr</b> should belong to a different
	class.  Refer to the uADL reference manual for more information.

	* To implement the above, the InstClass object contains a list of
	InstItem elements, which specify information about instructions,
	including any operand constraints.  The code generator creates a
	default hasMember method for the InstOSM object, then additional
	hasMember methods for instruction classes if they have any members
	with operand constraints.  These override the default and check
	the special cases.
	
	* For coroutinee-based transactional ISSs, we were not handling
	the case where an instruction might require an execution coroutine
	stack and a commit coroutine stack.  This led to conflicts about
	the stack being allocated, leading to segfaults.

	Fixed this by having a separate coroutine stack variable for
	commits.  Modified mod18.adl so that the lock instruction also
	modifies the LCR register, thus requiring both stacks, and tested
	with in51.dat on tdriver1.

2008-08-29  Brian Kahne  <bkahne@freescale.com>

	* Tracing can now be controlled on a per-core basis.  The
	interface was moved from being functions in the ADL namespace to
	being methods in IssNode.  Two sets exist: One that affects only a
	single node, one another set that affects all children.

	* Initial check-in (in the new-logging-api branch) of the new
	logging API.  Now, all logging goes through the LogBase interface
	class.  Each core has a LogBase pointer, which is always valid- if
	the user doesn't set it, it's set to a dummy instance which just
	ignores everything.

	The logging managers have changed as well:  When you register a
	logger, you now pass in a LogParentIface object, which then has
	register_core called for each core in the hierarchy.  This
	function should return a LoggingIface object which will handle
	logging events from that particular core.

	The test writers have been re-writen to take this into account.
	The nice thing about this is that it means that we don't have to
	do a lookup of CoreInfo objects when there is a core change; each
	logging object for the test writer has pointers to the things it
	needs.  The one complication is that, for the UvpWriter, we need
	to look up CoreInfo objects if we're dealing with a threaded
	processor, since we map each thread to a CoreInfo object, but we
	don't have a logging-interface object for each thread, just for
	each core.

	IssNode has an interface for getting and setting logger objects:
	logger() and setLogger().  However, they're just dummies for
	IssNode to make the interface easier; only IssCore actually has
	logger objects.

2008-08-28  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new transaction: stall(), which simply stalls the
	instruction.  This transaction should usually be guarded by a predicate,
	otherwise it is very easy to create dead-locks.

	* Added DLX_stall.uadl to test stall().

2008-08-25  Brian Kahne  <bkahne@freescale.com>

	* Further tweaks to the regression to get it to pass cleanly with
	gcc 3.4.3: The command-line regressions now include some JIT
	tests, so those had to be bypassed.

	* Modifications for supporting gcc 3.4.3: JIT tests are now turned
	off.  This was implemented by adding scripts/adl_config.pm.in, an
	autoconf file which creates a Perl package for configuration
	purposes.  I also changed altair_r1_mt into a multi-file compiled
	model, in order to reduce memory overhead, which kills gcc 3.4.3
	when optimized.

	
2008-08-22  Brian Kahne  <bkahne@freescale.com>

	* Another JIT fix: The prior fix to exception handling had a bug
	with how the start-offset in the translation cache was calculated.

2008-08-22  Hangsheng Wang  <hangshen@freescale.com>

	** Added two new cache parameters.  'linefill_lock_cycle' specifies the
	number of cycles during which the cache cannot do lookup after a
	linefill is initiated.  'evict_lock_cycle' specifies the additional
	lookup-inhibited cycles if the linefill is accompanied by an eviction.
	  The two parameters both have a default value of 0.

2008-08-22  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the JIT: We were always adding on
	exception-handling info, even for branch fix-ups, thus resulting
	in growth of the exception-handling buffer, potentially leading to
	a buffer overflow.  The fix is that we only add exception-handling
	info in non-fix-up mode.

	* Changed the behavior of flush, store, and invalidate for
	transactional ISSs: We now issue a cache operation regardless of a
	hit in the cache.  If we don't hit in the cache, the operation has
	set and way set to -1; the begin() operation will then ignore the
	op, but this way, a timing model still knows that a cache
	operation is occurring, even if it won't be doing anything.

	* Modified printing of MemAccess to use the CacheAccess extractor
	defined in TypeIO.h, for more complete printing of cache
	operations.
	
2008-08-21  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with the JIT wrt. handling read-only data when
	building from multiple files.  The problem was two fold: Read-only
	section relocations were hashed in the global _externs hash using
	just an artificial name created from the section number.  If there
	were multiple files with multiple sections with the same number,
	aliasing could result, resulting in instruction code which pointed
	to the wrong read-only section, e.g. pointing to file 0's code,
	when it should be pointing to file 1's.  This was also the case
	for symbols which pointed into read-only sections.  The solution
	was to construct names which also included a parser's unique ID.
	This results in unambiguous names in the hash.

	The second problem was that the matching of relocations to
	external symbols did not take into account the specific file, just
	the section ID, resulting in possible mismatches.  This was solved
	by adding an additional parser ID (_p_id) to RoSection and then
	matching against that when matching relocations with read-only
	sections.

	The resulting changes allow the zen_z650 model to be built with 3
	jobs and to pass all regressions.

	adl2iss runtime for 3 jobs (4 compiles):  2:10.14
	adl2iss runtime for 2 job  (3 compiles):  2:07.65
	adl2iss runtime for 0 jobs (1 compile):   2:26.30

	So, it's not clear that it helps a lot, but at least it's
	available. :)
	
2008-08-21  Zigu Haras  <zigu.haras@freescale.com>

	* We had a bug with sparse register files in parallel architectures.
	These registers were updated immediately although not defined serial.
	The regname_internal_write_traced() method for such register files
	incorrectly called the low level immediate write in the target
	registers, thus bypassing the commit queue. Changed it to call the 
	regname_write() method which uses the queue.
	
2008-08-20  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with the transactional ISS- registers which
	modified resources, such as caches, in their write hooks would
	cause a segfault, since the resource modification, such as a
	cache-invalidate command, would end up trying to cause a coroutine
	swap, even though none were set up.

	Fixed this by scanning instruction usage information for registers
	with write-hooks which modify memory or caches.  In the case of
	register-files, we only care about sparse register files; we then
	scan the members of the sparse register file.  If we find anything
	that matches this, we add in an extra coroutine for commits.

	For an instruction with this kind of a commit, we set up a
	coroutine and then swap to that in order to implement the commit.
	I've changed the commit signature so that a MemAccess::OpType
	value is returned.

	I updated tdriver to handle this behavior on commits.  tdriver1
	with in89.dat tests this behavior.

2008-08-19  Hangsheng Wang  <hangshen@freescale.com>

	* Added a new predicate 'has_cache_command'.  This predicate is true if
	the next-to-be-sent memory request is a cache command.  So if the next
	request is a write, which is followed by a cache flush command, this
	predicate is false.

	* Refined timing of cache management instructions and other instructions
	that can also send cache commands using the 'has_cache_command'
	predictae.

	* For uADL safe mode, force serialization on instructions with cache
	commands.

2008-08-19  Brian Kahne  <bkahne@freescale.com>

	* Modified how ADL's JIT handles external symbols.  We used to use
	dlsym to look these symbols up, but that turns out to be
	unnecessary: We can just use the static linker to handle this.
	So, the external-symbols table is now just an array of void
	pointers; we create a list of static declarations for the symbols
	of interest and then assign the array entries.

2008-08-18  Brian Kahne  <bkahne@freescale.com>

	* JIT changes: We used to have a static variable that pointed to
	the core, but this was inefficient and didn't work well for
	multi-core simulations.  Now, we pass in a core pointer using a
	relocation.  Since the relocations are 32-bit, we overload
	operator new and delete on 64-bit systems to use the
	jit_alloc/jit_free routines.  The resulting instruction code is
	much simpler, since simple indexed loads can be used to load
	register values, rather than having to load the core pointer into
	a register and then using that value as an index register.

2008-08-17  Zigu Haras  <zigu.haras@freescale.com>

	*  For some StarCore branch instructions, the instruction packet had a
	 pointer to non-generated branch info methods. This was due to the fact that 
	_branch_type infromation was not set on the  alias instruction. Now this instruction
	is copied to the alias.	

	* ADL generated incorrect field accessors in transactional-iSS accessors for
	the _index entry in an instruction packet. This occured when the index was 
	computed using a slice of an instruction  field. bits<N> casting for the returned value
        as missing. Modified iss/mod49.adl to test this.

	* Added to adl2asm a flag '--dbg-shared' when used with '--shared' flag
	the assembler prints debug information. This is a temporary flag which will be
	removed once the integration if stable for long enough.

2008-08-15  Brian Kahne  <bkahne@freescale.com>

	* Added breakpoint support to the JIT.  This works in a fairly
	simple manner: If a breakpoint is added and we have translated
	that address already, or else we're translating the address and we
	see that there's a breakpoint, then we overwrite the translated
	address with a trampoline.  The trampoline returns us to the
	kernel, returning a value of JitBreakPtCode + <brkpt handle>.  We
	also set a flag, _breakpoint_mode, which indicates that the next
	time through, we should call simulate() once, in order to simulate
	the instruction at the breakpoint, then continue into the JIT.

	To remove the breakpoint, we remove it from our internal table,
	then we see if the instruction has been translated.  If it has,
	then we overwrite it again with a fresh translation, thus removing
	the trampoline.

	Added the "jit" command to the scripting interface, in order to
	test this.  This takes an argument of "1" to turn on the JIT and
	"0" to turn it off.  "go" will then run the simulation using the
	current JIT status.

	For GDB, you can turn the JIT on using the command-line flag
	--jit.
	
2008-08-14  Brian Kahne  <bkahne@freescale.com>

	* Cleaned up the usage logging m4 macro a bit.  The server
	configure arg can now take a port number.

	* Modified generic32-cache to add functionality for the
	cache-management operations.

2008-08-13  Hangsheng Wang  <hangshen@freescale.com>

	** Removed token manager FlagManager, which is superseded by
	VirtualFlag.

2008-08-13  Brian Kahne  <bkahne@freescale.com>

	* Added usage logging to ADL.  The main generators, plus any
	standalone-executable models, will log invocations, if usage
	logging is turned on.  This is on by default, but may be disabled
	via the configure switch --[enable|disable]-usage-logging.  The
	server defaults to 'usagelog.am.freescale.net', but may be changed
	with --with-usage-log-server=<hostname>.

2008-08-13  Brian Kahne  <bkahne@freescale.com>

	* iss/GenCache.C (adl): For safe-mode/hybrid-mode ISSs, fill
	operations now inform the performance model of the action.  Also,
	we had a bug with invalidate: The begin() operation, on an
	invalidate, did not set action to CacheNone, resulting in
	potentially bad behavior with optimized models.

2008-08-13  Zigu Haras  <zigu.haras@freescale.com>

	* Bug fix: ADL generated an incorrect (non-compilable)
	register/instruction-field mapping information when action code of
	an outer insruction used a slice of pseudo instruction field as
	register file index. The FieldIdWalker handled incorrectly
	instruction fields slices when the field was in the alias target.
	Modified mod49.adl to reflect this change.

	* The integration between DT assembler and ADL includes an
	initialization stage where an ADL function provide DT assembler a
	list of legal operands in the form REGn where REG is a register
	name and n is a number (e.g. d11). Operands can not be used as
	labels (for obvious ambiguity reasons). StarCore ADL model uses an
	un-architectural 'L' register file, modelling the L register field
	in D registes. Therefore, lables of the form 'l11' are illegal.
	The compiler extensively uses such lables. Therefore, there was a
	need to be able to filter out these registers.  Fixed by letting
	adl2asm filters the tc-archname.cc file when the --shared flag is
	used

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.4 (v1_4_4) on Linux (lb32001) on 8/12/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.4 (v1_4_4) on Linux (lb0170) on 8/12/2008 ==

2008-08-11  Hangsheng Wang  <hangshen@freescale.com>

	* Changed uadl cache behavior so that when parameter streaming_linefill
	is set, at most two reads can be streamd from an on-going linefill.
	  This is zen650-specific behavior, and will be moved into a separate 
	zen650 cache model.

2008-08-11  Brian Kahne  <bkahne@freescale.com>

	* Changed the safe-mode and hybrid-mode cache interface so that,
	in addition to performing cache operations, e.g. flush,
	invalidate, etc., it also calls the handle-memory hook so that the
	pipeline model can then process the cache ops for timing purposes.

	* The invalidate() cache callback now generates a memory-handler
	call for a transactional ISS; the cache-begin function then
	handles the actual invalidate.  This was done for consistency- we
	want all cache ops to behave in a similar manner.

	* Modified the JIT so that decode-misses are treated as ends of
	basic blocks.

	* Modified mod6 to use the JIT for testing variable-length
	instruction encodings.

2008-08-11  Zigu Haras  <zigu.haras@freescale.com>

	* Bug fix: StarCore coding style consists of defining an 
	outer instruction which describes the instruction's
	action with pseudo fields and no encoding and nested 
	instructions provide the assembler syntax and the 
	encoding. The nested instructions are aliases to the 
	outer instruction. When all nested instructions are
	removed, the remaining outer instruction is not. This
	results in failure due to (incorrect) encoding collision 
	Resovled by removing in such a case the outer instruction.

2008-08-08  Hangsheng Wang  <hangshen@freescale.com>

	* Partially fixed a code generation bug that may cause segfaults when
	the model has more than one level of caches.  Currently segfault is
	converted to a dead-lock, which a safe-mode model can work-around.

2008-08-08  Brian Kahne  <bkahne@freescale.com>

	* For the JIT, changed how exception-handling frames are
	registered by translate(): We now use an object, NewEhFrame, which
	employs an RAII strategy- the destructor calls
	CodeBuffer::finalize().  This way, if an exception passes through,
	the frame is still registered.

2008-08-07  Brian Kahne  <bkahne@freescale.com>

	* Added a new feature to the JIT infrastructure: We can now pass
	in extra parameters which are analyzed at translation time and
	used by the JIT-compiled instruction blocks.  This has been
	applied to handling register-file aliases with index mappings,
	e.g. VLE's se_GPRs.  We evaluate the mapping at run-time; the
	instruction is transformed so that the compiled code is directly
	accessing the GPR register file using the passed in index.  The
	added infrastructure, however, can be applied to anything that we
	want to evaluate at translation time.

2008-08-07  Hangsheng Wang  <hangshen@freescale.com>

	** Added two cache parameters: <b>lock_latency</b> and
	</b>unlock_latency</b>, which specify cache line lock latency and
	unlock latency respectively.  The cache parameter
	<b>flush_latency</b> has been removed.

	* Added support for cache management instructions.  Need testing.

2008-08-06  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with handling ternary conditions with
	translation-time condtionals: We weren't calling RtlWalker to
	translate the then and else clauses, so some necessary
	translation, such as equalizing sizing between the two clauses,
	was not being done, resulting in compile errors.

	* Fixed a bug with how we handle aliases which use expressions in
	their operand mapping.  We were not evaluating the expression
	using the same walker, e.g. IFSubstWalker and we were ignoring the
	resulting string.  The end result was that the model was not
	compilable.  Fixed this by passing in the appropriate walker to
	aliasFieldTarget and then by using the resulting string if the
	alias item wasn't a simple mapping to another field, but was a
	value or expression.  Added mod49.adl -> tdriver5 w/in151.adl to
	test this.

2008-08-06  Zigu Haras  <zigu.haras@freescale.com>

	* Bug Fix: For instructions which use intermediate pseudo fields
	for computations purposes, the list of operands and their
	corresponding enumerations are out of sync.  Specifically, this
	type of pseudo fields do not appear in the operands list, but have
	an entry in the list of enumerations.

2008-08-05  Hangsheng Wang  <hangshen@freescale.com>

	* Changed uADL's handling of cache store buffer enable status for safe
	mode.  Now like cache enable status, store buffer enable status is also
	recorded at instruction issue time and is later reused at lookup time.
	  I will add a regression test later.

	** Added a new cache parameter:	<b>write_to_next_level_request_latency</b> 

	This parameter specifies the latency from a store write to when
	the write request to the next-level memory is sent, if
	write-through.  Its default value is 0.

	* Modified DLX_all.uadl to test write_to_next_level_request_latency.

2008-08-05  Brian Kahne  <bkahne@freescale.com>

	** uADL now allows transactions to be used within conditionals,
	e.g.:
	<pre>
	S_ID: if (inquire(SomeFlag)) {
	        read_operands(AllReg);
	      }
	S_EX: exec();
	      allocate(SomeFlag)
	</pre>

	* In order to implement the above, the front-end was modified to
	allow the syntax.  Transactions which occur within conditionals
	are added to a dedicated list (Transaction::cond_part()).  Within
	the predicate expression, calls to the transaction are wrapped by
	a PtreeTransaction object, which contains a pointer to the
	transaction.  A walker which understands these objects,
	uAdlTranslatingWalker, exists to perform translation.  For
	example, GenCode.C:PredWalker derives from this object.  To test
	the front-end, uadl-fe/in26.uadl was added.

	For code generation, conditional-only transactions are extracted
	into their own list and gen_inquire_code is called in order to
	generate the inquire functions.  The predicates are evaluated
	first, and add place-holders to the inquireFuncs list;
	gen_inquire_code then updates the elements in that map with the
	actual code.

	I modified DLX to add a mul class to test this: It conditionalizes
	read-operands based upon a flag, so that back-to-back muls will
	actually fail.  flag1.dat tests this behavior.

2008-08-04  Brian Kahne  <bkahne@freescale.com>

	* I've modified uADL's code generator so that each inquire
	transaction is placed into its own function.  Each edge or state
	function then calls these individual functions.  This is a step
	towards supporting arbitrary transactions in conditionals.
	
2008-08-04  Hangsheng Wang  <hangshen@freescale.com>

	* Added a zen650-specific cache linefill behavior.  It is hard to
	abstract with a parameter or predicate, so I decide to move it to a
	zen650 cache model in the future and do not put a separate regression
	test now.

2008-08-04  Zigu Haras  <zigu.haras@freescale.com>

	* Bug fixed: The methods for building instructions' attribute list and
	accessing it were in incorrectly orderd in file.

	* Added templated slot_read() method to InstrPacket.

2008-08-01  Brian Kahne  <bkahne@freescale.com>

	* Modified uADL predicate generation to fix a bug with
	if-then-else handling:  We were only guarding else clauses by the
	negated immediate predicate, which ignored the situation where
	there was a series of nested predicates, e.g.:

	      if (pred1) {
                 code1
	      } else if (pred2) {
                 code2
	      } else {
                 code3
	      }

	We would guard code3, for example, by !pred2, which meant that if
	pred1 was true, pred2 would be false, and thuse code3 would
	evaluate, which is wrong.

	Now, Guard structs have pointers to their parents, e.g. pred2
	and !pred2 points to pred1.  When creating the guard for code3, we
	list a conjunction of all guards, e.g. now the code is:

	     if (!pred1 && !pred2) { code3 }

	Modified DLX.uadl to test this; changed regress's checker to check
	for extra pipeline flushes, so that the DLX, if the code is wrong,
	will flush the pipeline twice.

	* Changed the sizing of the exception-handling frame to be N/2,
	where N is the size of the translation buffer.  For small sizes,
	N/4 was too small.

	* Changed to using jit_alloc for allocating the exception handling
	frame buffer, because if we just used new, we could get a block in
	upper memory, which then couldn't reach the CIE due to the fact
	that the offset is limited to 32-bits.
	
2008-07-31  Brian Kahne  <bkahne@freescale.com>

	* Major changes to how the JIT does its translation: We now
	translate on a per-basic-block basis into a single large buffer.
	Rather than each CodePage having a block of memory for translated
	code, we have a single buffer, the CodeBuffer, which is allocated
	once.  We still have a page hash for indexing the starts of
	various instructions.  We now translate on a basic block basis,
	which means that we start translating at a specified address, and
	we end when we reach an unconditional branch: Either a halt, an
	rfi, an unconditional branch, etc.  Conditional branches do not
	cause translation to stop.  If we hit a high-water mark (where we
	would be exceeding the size of our buffer), we put in a trampoline
	which bounces us back to the kernel.

	This cuts down on uncessary translations and makes us much more
	memory efficient.  It also means that we can handle variable-sized
	instructions much more effectively.  Some changes were required to
	the basic translation system.  For example, a new page is fetched
	by translate_instr, since we can now cross pages.

	The size of the translation buffer defaults to 16MB and can be set
	via the --jit-buf-size command-line option.  Test in148.dat tests
	the fact that we can handle hitting the end of this buffer.

2008-07-31  Zigu Haras  <zigu.haras@freescale.com>

	* Bug fix: ADL handled incorrectly pseudo instruction fields which 
	are bit-mapped and have valid_masks entry. For such fields, ADL 
	generated checkers for the pseudo field and for its bit-mappings
	(implementations). The assembler used only the pseudo fields checkers
	and the compiler issued an error on unused functions. Fixed by not 
	generating checkes for fields implementations.

	* Using the "--jobs" flag with the "--instr-info" will partition 
	the  additional dumped data to several files.

	** Attributes are now inherited by nested instructions from the
	encapsulating instruction, i.e., they are added to the nested
	instructions.

	* Test fe/inst59 was modified to demonstrate this behavior.

	* Bug fixed: Some regiser/instruction-field mapping information
	was missing. 
	
2008-07-29  Brian Kahne  <bkahne@freescale.com>

	* I'm now sorting the various introspection arrays whose elements
	have _id members, so that a binary search can be used to quickly
	find the relevant items.  For single-core models, this means that
	registers can be looked up directly by indexing the ID, but this
	doesn't currently hold for multi_core.  A helper function,
	Introspection.h:find_info, is provided to make this lookup easier.

2008-07-29  Zigu Haras  <zigu.haras@freescale.com>

	* Bug fix: The asssmbler did not lowercase instructions' mnemonic
	from syntax string.

	* Bug fix:  In DT integration, the assembler incorrectly assumes 
	that  in instruction move.w (r4+r6),r3 the term in parentheses
	is an unresolved expression. This is due to two reasons: differrent
	expression handling in this flow and  the fact that for a given 
	mnemonic instructions with immediate fields are  taken by the assembler
	before instructions refering to registers. Reversed this bahavior when 
	explicit_regs flag is set in the ADL file.

	* Bug fix:  In DT assembler integration, the assembler incorrectly
	sets an immediate  instruction field's value even when the symbol is
	unresolved, provided the field has a value  modifier function defined.
        This stems a difference between DT assembler integration handling of
	 symbols compared to the gas flow. Fixed by checking the field 
	value is resolved prior to writing it.

2008-07-28  Brian Kahne  <bkahne@freescale.com>

	** Added a new command-line option, <b>--track-reads</b>
	(<b>track_reads</b> in the configuration file), which will add
	extra code to a hybrid ISS in order to track read information.
	Each slot has a read-mask, in addition to a write-mask.  The
	read-mask is updated whenever a partial or full read occurs.

	* To test the above, mod3sm-h.cc.h and mod11sm-h.cc.h (smdriver4
	and smdriver5) were modified to add read tracking.  smdriver.C was
	modified to include instruction logging; in2.dat and in11.dat are
	run against these models and their instruction-logging output is
	diff'd against a regress file.
	
2008-07-24  Zigu Haras  <zigu.haras@freescale.com>

	* Bug fix: The the ext-signed mode in assembler should use the absolute value
	for the operand for upper bound comparison. 

	* In aliases: mapping between registers and instruction fields is in term of 
	the target instruction's field.

	* Bug fix: in assembler - bounds on a field values were caclulated in terms of
	the field width rather then its size. Consider a single bit field
	which uses a table to map this bit to two larger numbers. The encoding is a single
	bit, but the value in the input might be large.

2008-07-24  Brian Kahne  <bkahne@freescale.com>

	* Changed the JIT so that we only store a single offset for each
	instruction.  Rather than worrying about the instruction offset
	vs. the start of coe offset (which might differ b/c of
	pre-instruction cache-touching code, for example), we store just
	the start of code; if we have to fix-up a branch, we re-insert the
	cache-touch code, then the fixed-up branch.

	* Bug fix: I wasn't calculating the eh page size correctly- I had
	forgotten to add in the size of the eh frame for the end-of-page
	trampoline.

2008-07-22  Hangsheng Wang  <hangshen@freescale.com>

	* Changed stall message for register (file) inquire() transaction to
	distinguish it from read_operand() transaction.

2008-07-22  Brian Kahne  <bkahne@freescale.com>

	* Changed the JIT so that, rather than using longjmp-based
	trampolines for things like fixing up branches, we just return an
	integer code.  The kernel looks at the return code and does the
	appropriate thing.  This simplifies the logic and probably
	improves performance slightly.

	To implement this, the JIT handlers now have integer return types.
	We ignore return statements for most instructions and add
	-Wno-return-type to disable warnings on compilation.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.3 (v1_4_3) on Linux (lb0170) on 7/22/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.3 (v1_4_3) on Linux (lb32001) on 7/22/2008 ==

2008-07-21  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a bug in uADL memory that erase a deque entry but continues
	using invalid iterators.

2008-07-21  Brian Kahne  <bkahne@freescale.com>

	** The uADL front-end will now warn (and ignore) instructions
	which are valid, but which are not used by the core, based upon
	what instruction tables are instantiated.  

	* Modified in8.adl with p4.adl in uadl-fe to test the above
	feature.
	
	** The <b>adl-dump</b> utility now reports if an instruction is
	not used by a core.

	* The feature below was implemented by adding a new macro
	AX_PREFIX_CONFIG_H.  Refer to macros/prefix.m4 for more
	information.

	** The configuration header file, <code>adl_config.h</code> now
	has all defines prefixed with <code>ADL_</code> in order to reduce
	naming conflicts.

2008-07-21  Zigu Haras  <zigu.haras@freescale.com>

	* Changed the _size data member in RegInfo from boolean to unsigned.
	Modified tests/iss regression tests 133,134,135 to reflect this change.

	** Fixed bug #372. ADL incorrectly reported that the nested field wasn't being
	handled by the syntax string. It suffices that the syntax handles the 
	encapsulating field.

	** ADL based assembler allows for a signed immediata fields to have
	positive values suited to fields defined as unsigned. 
	adl2asm flag <pre>--ext-signed</pre> generates this behavior. 

	 Test 29 in tess/iss demonstrates this behavior.
	
	** ADL supports 'valid_range' and 'valid_masks' keys for 
	pseudo instruction field  used in syntax stings. If such a field'd value
	does' nt match its constraints the assembler continues to look for
	possible instruction matches.
	
	Modified tests/designs 89,91 to reflect this behavior.
	
2008-07-18  Brian Kahne  <bkahne@freescale.com>

	* Modified the uADL SystemC example to use an external memory, to
	provide a better example of how to interface with SystemC.

2008-07-18  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new fetch unit parameter <b>min_fetch_entries</b>, which
	specifies an alternative minimal space the instruction buffer must have
	before it can initiate a new fetch.  By default, this parameter is 0 and
	the minimal required space is the greatest fetch size.

	* Changed DLX.uadl to test parameter min_fetch_entries and added a new
	regression test to test relevant fetch stall logging.

2008-07-16  Hangsheng Wang  <hangshen@freescale.com>

	** Added new memory/cache transactions lock() and unlock().  A locked
	memory/cache can only be accessed and unlocked by the instruction who
	locks it.  All other memory accesses are rejected, including loads,
	stores and fetches.  For an instruction to successfully lock a memory,
	the memory must have no outstanding requests, i.e., its request queue
	must be empty.

	* Changed DLX_all.uadl to test lock() and unlock().

2008-07-16  Brian Kahne  <bkahne@freescale.com>

	* JIT fix: If we get exceptions during fetches in the kernel, we
	must catch them and handle them appropriately.  Added code to do
	this.

	* JIT fix: If we get an exception when fixing up a branch, we
	catch it, execute the instruction via the interpeter, then return
	to the kernel so that the exception will be processed by the
	kernel.

	* We weren't handling instruction address wrap-around properly
	with end-of-page conditions.  We now translate the ea into an ra
	and do all instruction caching on ra's in order to handle various
	MMU issues in the JIT.
	
2008-07-15  Hangsheng Wang  <hangshen@freescale.com>

	** Added a delay parameter to VirtualFlag transaction release().  Its
	new synopsis is:
	<pre>
	  release(flag, delay);
	</pre>
	The delay parameter specifies the additional cycles the flag remains
	unavailable after the <code>release()</code> transaction.  If no delay is specified,
	the default delay is 0, which means the flag becomes available
	immediately after the <code>release()</code> transaction.

	* Changed Zen0.uadl to test delayed VirtualFlag release().

2008-07-14  Hangsheng Wang  <hangshen@freescale.com>

	* Added a new uadl test test_reuse_data.dat to test fetch unit parameter
	'reuse_data'.

	* Added tracing information on fetch stalls, and re-organized
	instruction buffer logging.  Changed DLX_all.uadl to test this.

2008-07-13  Zigu Haras  <zigu.haras@freescale.com>

	* Added as-dt.c to external/binutils/gas. Required for DevTech integration

2008-07-11  Brian Kahne  <bkahne@freescale.com>

	* iss/GenInstrs.C (adl): We weren't calculating the size of the
	exception-handling frame block correctly because we didn't include
	the size of the instruction-cache-touch code.  Added this in and
	modified the code to make sure that instructions with
	translation-time conditionals were handled correctly.

	* Fixed a bug with JIT exception handling: We weren't updating
	each instruction's FDE with the correct code size, so that some
	exceptions were not being handled because the FDE was not seen as
	covering the correct address range.  Fixed this by calling
	CodePage::add_eh_data with the instruction's data size, and using
	this value to set the FDE's size field.

	* Fixed a bug with multiple translation-time constants: We had the
	list of selectors reversed, so that we were choosing the wrong
	instruction code block to use.

2008-07-11  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new fetch unit parameter <b>reuse_data</b>.  It takes a
	boolean value.  When reuse_data is true, upon an instruction
	buffer flush caused by a change-of-flow, the fetch unit will see
	if the target address is already in the instruction buffer or is
	already covered by an outstanding fetch request, and will reuse
	existing data or request if such a 'hit' happens.  When reuse_data
	is false, the fetch unit always does a full flush and then
	re-fetch upon a change-of-flow.  The default value of
	<b>reuse_data</b> is false.

2008-07-10  Hangsheng Wang  <hangshen@freescale.com>

	* Revised instruction buffer flush behavior so that it can reuse not
	only data in the buffer, but also outstanding fetch requests.

	* Fixed a fetch unit bug that would cause the instruction buffer space
	to grow upon a misaligned branch that is predicted taken.

2008-07-09  Brian Kahne  <bkahne@freescale.com>

	** A new option has been added when using the UVP reader/writer:
	<code>--uvp-log-result-mem</code>.  When set, memory addresses in
	the result section (as well as the initial section) of a UVP file
	are logged as being initialized; the UVP writer will use this log
	when writing out final memory results.  This allows the UVP writer
	to be used with tracing disabled.
	
	* Modified the UVP reader and writer so that if memory tracing is
	not enabled, all memory addresses (initial and final) are logged
	to the init'd-address log, then the writer uses this log to print
	global D cards.

	* During JIT pre-phase, we don't generate JIT instruction
	functions or handlers for aliased instructions, since we'll handle
	the aliasing during translation time.

	* Modified the ElfScanner:

	1.  We now support multiple read-only sections.  During
	processing, we store a set of section indices, then append info
	about all of these sections to the InstrCoreSyms object.  During
	model build, we then write out arrays for all of the read-only
	sections.  To reduce section size, we turn off generation of
	various support/info functions, which were causing lots of strings
	to be emitted.

	2.  We support symbols which reference into read-only sections
	with an offset.  We look to see if the symbol's section points to
	a data section.  If so, we consider that to be a read-only data
	section.

	3.  Read-only sections are now handled across multiple
	compilations.  Each external symbol stores a pointer to its
	originating-parser so that we can query that parser for section
	information and data, etc.
	

2008-07-08  Brian Kahne  <bkahne@freescale.com>

	* For a JIT compile, if there are pre or post-cycle hooks, the pre
	and post exec code is placed into non-inlined functions.  This
	reduces code bloat in the individual instruction code sequences
	and fixes a problem with x86_64- the clock multiplier, which is a
	floating-point number, was being placed into a read-only section
	that we weren't handling, resulting in run-time link errors.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.2 (v1_4_2) on Linux (lb32001) on 7/8/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.2 (v1_4_2) on Linux (lb0170) on 7/8/2008 ==

2008-07-07  Hangsheng Wang  <hangshen@freescale.com>

	* Added uADL support of multiple latencies per ISS memory access for
	the latency-feedback memory.

2008-07-07  Brian Kahne  <bkahne@freescale.com>

	* Addd support to JIT models for pre-fetch, post-fetch, post-exec,
	pre-cycle, and post-cycle hooks.  Modified in6.dat to check for
	result values for these registers with mod3.

	* iss/InstrWalker.C: info/warning/error blocks are now squashed in
	jit mode.

	* Modified translation-time conditional handling so that it will
	shut this mode off within InstrWalker if it comes across
	conditionals that cannot be handled, or if it comes across loops
	or switch statements.

	* Modified JIT model building to be able to handle conditionals
	which can be evaluated at translation time.  This basically means
	any conditional which consists only of constants and instruction
	fields.  An instruction which contains one of these types of
	conditionals, during the jit pre-phase, has the conditional
	expression replaced with a symbol, and this information (the
	original conditional and the symbol) is added to a TransConds
	object, which stores this information.

	We then write out instruction handler functions for all
	permutations of these booleans (2^n, where n is the number of
	booleans).  These are then processed as any other instruction
	function.  They are stored as InstrSym objects within the
	_tc_entries member of an InstrSym.

	The translation function evaluates the actual conditionals,
	creating a value used within a switch statement to then select the
	proper function.  For something simple, like an addi, there are
	just two options: RA == 0 or not.  For something more complicated,
	such as a tw instruction, there might be 32 sub-instructions.  I
	modified mod11.adl to add a trap instruction in order to test a
	more complex example.

2008-07-03  Brian Kahne  <bkahne@freescale.com>

	* Minor changes so that standalone ADL and uADL models will work
	if the GC is disabled.

	* Minor changes to remove valgrind warnings/errors.

2008-07-03  Zigu Haras  <zigu.haras@freescale.com>

	** ADL supports linker relocation information. A named relocation can have
	an associated value and an optional width.If unspecified then relocation values 
	are set as per their order in the file. Width specifies the width of instructions 
	the relocation was associated. When a relocation is used in an instruction with
	a different width then this information can correct the offset data used 
	by the linker. This feature is applicable only if relocations are aligned 
	to instruction end.

	** adl2asm accepts '-shared' flag. With this flag, adl2asm will generate
	a shared library named 'adl_asm.so' which can be dynamically linked with
	DevTech assembler.

	** adl2iss accespts '--instr-info' flag. With this flag, adl2iss will
	add to the transactional-ISS model two types of information: instructions 
	attributes, and data that maps fields to instruction packet slots.

2008-07-02  Hangsheng Wang  <hangshen@freescale.com>

	** Extended the semantics of pipeline stage parameter 'issue'.  Now if
	a stage is defined as 'issue', it also means that before leaving this
	stage, the instruction data is still in the instruction buffer.  If no
	issue stage is defined, an instruction leaves instruction buffer as soon
	as it enters the first pipeline stage in the OSM.

2008-07-01  Brian Kahne  <bkahne@freescale.com>

	** The external memory interface for uADL has changed slightly: A
	single latency may still be set via
	<code>MemHandler::set_latency(unsigned l)</code>, but now,
	additional latencies may be set by calling
	<code>MemHandler::add_latency(unsigned l)</code>.  This is
	relevant when multiple latencies are required, such as for a
	cache-line operation.

2008-06-30  Hangsheng Wang  <hangshen@freescale.com>

	* Updated uadl manual on new external memory interface.

2008-06-30  Brian Kahne  <bkahne@freescale.com>

	* iss/tracediff.C: Fixed a bug with comparing T cards in UVP
	files.  These items are actually lists (UvpList), and thus not
	necessarily sorted.  However, we put them into a Pairs object,
	which requires that the fields be sorted in order to compare them.
	The copy_tlb_fields function was not finalizing the Pairs object,
	so if the original list of fields was not sorted, then comparisons
	could erroneously fail.  Fixed this by adding a finalize call in
	copy_tlb_fields and added tcard_test1 to test this.

2008-06-27  Brian Kahne  <bkahne@freescale.com>

	* uadl/uADLParser.C: We weren't catching bad statements within
	instruction-class action code that were parsed as declarations,
	leading to us silently ignoring the statements, rather than
	generating an error.  Added uadl-fe/in24.uadl to test this.

	* uadl/main.C (main): Added --adl-strict and --uadl-strict options
	so that the user can get strict parsing for just the ADL or uADL
	portion of the parsing.  This warns about removals and defmod
	operations.  Modified uadl-fe/in7.uadl to test this.

	** Warnings are now printed for all redefinitions which are
	encountered (a define which overwrites an already defined object)
	so that users are aware of what is going on.  These are not
	errors- this operation is perfectly valid, but sometimes can be
	caused by the user doing something that wasn't intended.

	The default is to print these warnings.  This may be turned off by
	using the <code>--no-warn-redefine</code> command-line option.

	* Fixed up strict-mode checking and added support for the warnings
	described above.  This required some modifications to the basic
	front-end parsing, including passing the message log around, so
	that warnings could be added without affecting normal parsing
	flow.  I also removed extra newlines from errors and warnings in
	order to make the resulting output more compact.

2008-06-25  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new transaction 'add_latency(unsigned)', which allows the
	user to add an arbitrary latency to whatever latency determined by all
	other transactions at the state.  For example, if a read_operand() will
	cause the instruction to be stalled for 2 cycles due to RAW hazard,
	then add_latency(2) at the same state will make the instruction stall
	for 4 cycles.
	  If multiple add_latency() are specified at the same state, their
	latencies are summed and applied.
	  add_latency() can only be used on states, not edges.

2008-06-24  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new memory/cache inquire transaction "request_queue_empty()".
	It returns true if the queried memory/cache has no active/pending
	requests, and returns false otherwise.

	** Changed fetch unit behavior so that upon a change of flow, if the
	target address hits the instruction buffer, the fetch unit does not
	refetch from that address and simply discards data before that address,
	and then issue from it.

2008-06-23  Hangsheng Wang  <hangshen@freescale.com>

	* Added indication to uADL's pipeline trace about unknown instructions
	and when they retire.

2008-06-23  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a dead-lock situation caused by a combination of explicit
	allocate(), exec() with latency, and stall_backwards on pipeline stages.
	  Added a regression test (DLX_bubble_hybrid on oprnd1.dat) to test it.

	* Improved streaming_linefill behavior to better match that of RTL.

2008-06-18  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new cache/memory parameter 'preemptive'.  If a cache/memory
	is preemptive, then a load/store request can preempt and override the
	last request if:
	  The last request is a fetch.
	  The last request has not been taken by the cache/memory.
	  The cache/memory cannot accept new requests if the last request is not
	removed.

	This new feature gives loads/stores higher priority over fetches.
	Two limitations on using it:
	  The cache/memory must be a unified cache/memory.
	  The cache/memory must be the first-level memory in the memory system,
	i.e., the closest to the pipeline.

2008-06-17  Brian Kahne  <bkahne@freescale.com>

	* Better JIT I-cache support: Added in a new function,
	instr_read32_nocache, which fetches instructions w/o using the
	cache.  This is used during translation.  We also create a new
	translated function, for touching the i-cache.  This is inserted
	at the start of each cache-line, during translation. The
	icache-touch code + the instruction code are all considered a
	single block, as far as instruction positions go; this required
	some enhancements to JitSupport.h, namely the addition of
	add_code, which adds a block of code but doesn't record a new
	instructin, and a change to add_instr, which uses the starting
	position set by add_code.

	During translation, translate_instr sees if the current address is
	at the start of a cache line and adds the icache-touch logic if it
	is.

	* I also modified the user-accessible translate instructions and
	the cache API so that they're set as no-inline during the
	pre-phase.  This helps to cut down on the size of some
	instructions.  I don't think that this will affect performance by
	too much, since those instructions tended to be infrequently used.

	* I added JIT compile flags of -fno-reorder-blocks
	-fno-reorder-blocks-and-partition to reduce some of the extra
	branching that can occur.  While these options enhance performance
	for normal functions, it just adds extra branches to our JIT
	blocks, because it can mean that the ends of both sides of an
	if-statement result in branches to the end of the block, rather
	than just one side of the conditional.

	* The above change caused a problem with how we recognized the
	ends of functions: Sometimes the compiler will insert NOPs for
	alignment purposes; we were getting confused, since that was our
	end pattern.  I changed the end pattern to "hlt;hlt;hlt;hlt;" (4
	halt instructions, or 0xf4,0xf4,0xf4,0xf4) in order to avoid the
	confusion.

2008-06-13  Brian Kahne  <bkahne@freescale.com>

	* Basic JIT support for caches now works.  The only major change
	that was required was to fix cache code generation so make sure
	that array sizes were printed in decimal.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.1 (v1_4_1) on Linux (lb0170) on 6/13/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.1 (v1_4_1) on Linux (lb32001) on 6/13/2008 ==

2008-06-13  Hangsheng Wang  <hangshen@freescale.com>

	** When uADL is working on --iss-mem-mode and with an external memory,
	it now uses latency information from the external memory for internal
	time counting.

2008-06-12  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with parallel JIT builds: We weren't segregating our
	FDEs (exception handling frame descriptors) by file, so when we
	did searches, we were getting matches on FDEs in other files,
	causing us to not properly record our used FDEs, and thus
	resulting in bad behavior.  We now set the starting point for the
	current file's FDEs using an iterator, and we only search from
	that iterator to the end.

	* Modified mod11.adl so that its halt instruction is a 32-bit
	instruction.  This fixed some weird behavior with mod11 as a JIT,
	where we were fetching lots of extra 1-byte halt instructions.

	* Added a parallel-build feature for creating JIT models.  This
	uses the basic multi-compile feature that already existed.  The
	number of jobs, and whether it's done serially or in parallel are
	controlled by --jit-jobs=N and --jit-par-build.

	* Fixed a bug with exception-handler frame processing: We were
	incorrectly assuming that the end of the FDE list could be handled
	by checking for a length of 0.  However, this wasn't always the
	case- there is no terminating FDE entry.  Instead, we compare the
	poiner to the nexrt FDE against the end of the section
	(calculated by section ptr + size) to see if we're past the end of
	the section, and use that to terminate our loop.

2008-06-11  Brian Kahne  <bkahne@freescale.com>

	* Fixed an issue with the JIT w/32-bit gcc: The compiler would
	optimize out any conditionals that compared an operand to 0,
	apparently because it believed that an address of a variable could
	never be 0.  However, this caused lots of functional problems,
	e.g. addi, which compares RA to 0.

	Fixed this by replacing 0 with "ConstantZero" in any comparisons
	in action code of an operand and 0, where ConstantZero is a
	special operand that's just ignored, resulting in a 0 immediate
	value.  This now allows all 32-bit tests to pass the regressions.

	* Added in some basic support for JIT tracing.  It's fairly
	primitive, but it allows for some debugging.  Right now, it's
	mainly limited to just register modifications.  To use this, you
	must build the model with the --jit-tracing option.
	
2008-06-10  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new cache parameter, linefill_writeback_latency, which
	specifies the latency from when the line is fully read from the
	next-level memory to when the data is ready to read from the data array.
	  The default value is 0.

	** Changed all memory-type token managers (memory, cache, write queue)
	to have separate address bandwidth and data bandwidth parameters.  The
	single "bandwidth" parameter is now replaced with "addr_bandwidth" and
	"data_bandwidth".  This change also applies to memory ports.

	* Changed uadl parser to reflect the bandwidth parameter change.  All
	relevant regression tests in tests/uadl and tests/uadl-fe are updated
	accordingly.

2008-06-10  Brian Kahne  <bkahne@freescale.com>

	* scripts/uadl2model.in: We were incorrectly calculating our base
	filename for multi-file compiles when an output name was
	specified; if we were just generating source files, and not
	compiling, then we didn't remove the .cc extension because we were
	expecting a .so extension.  Fixed this by generalizing the regular
	expression to handle any type of file extension.

	* Modified multi-file safe-mode ISS generation so that we don't
	generate a default parameter for decode() for the function
	implementation, which would cause a C++ compile error.  Modified
	scripts/DLX_LM_JOBS_SAFE to test this by having it generate a
	safe-mode model.

	* We didn't have a test of --iss-mem-mode for uADL with a cache
	and an external memory- added DLX_cache_split_ext_mem to test
	this.  We had a bug where writepage in SafeModeMemWrapper was
	calling handle_memory_latency with CacheEvict, which isn't a
	CacheAccess value; changed this to CacheFlush.

2008-06-09  Brian Kahne  <bkahne@freescale.com>

	* iss/tracediff.C: We were calculating our total time incorrectly
	if the user specifies an instruction offset: Our total time was
	the total time of the entire test, rather than just the time
	window associated with the instruction offset.  Fixed this and
	added time5.dat to test it.

2008-06-06  Hangsheng Wang  <hangshen@freescale.com>

	* Added a new cache parameter: streaming_linefill.  It currently
	implements zen650 specific linefill behavior and will be replaced by
	some user code hook.

	** All memory-type uadl models (memory, cache, write queue) now support
	two cancellation modes: deep cancellation and weak cancellation.  A deep
	cancellation physically removes the request and all its pending side
	effects that have not occurred (e.g., read/write from next-level memory)
	while a weak cancellation only tags the request as cancelled but does
	not remove the request so that the request is still processed and will
	be removed once it is completed.
	  A write access that is weakly cancelled cannot be really "completed",
	so it will only consume write cycles but not update data.

	** Added a new fetch unit parameter: can_cancel, which specifies whether
	the fetch unit does deep cancellation (true) or weak cancellation
	(false) to the first-level instruction memory upon instruction buffer
	flushing.  The default value is true.

	* Changed tests/uadl/DLX_cache_unified.uadl to test both
	streaming_linefill and can_cancel.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.0 (v1_4_0) on Linux (lb32001) on 6/6/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.4.0 (v1_4_0) on Linux (lb0170) on 6/6/2008 ==

2008-06-06  Brian Kahne  <bkahne@freescale.com>

	* iss/tracediff.C: Fixed an issue with how we reported timing
	errors:  We print the number of instructions since the last timing
	issue, e.g.   powerpc:  Instr 1050 (+0):  Incorrect
	completion-time:  Found 3166 (adjusted to 3274), expected 3272 (2)

	where (+0) is the count since the last issue.  However, we only
	had one counter for both issue and completion events, so the
	counts were wrong.  Fixed this by adding a second counter.

2008-06-05  Brian Kahne  <bkahne@freescale.com>

	* Updated macros/libtool.m4 so that it will work with the 64-bit
	compiler in /pkg.

	* Modified GenCode.C so that it initializes some safe-mode InstOSM
	members, such as _memAccess.  I also guard the first accesses to
	_memAccess, since in parallel architectures, we might not have a
	_memAccess yet, but _maxExecCount might be > 0.  This caused a
	segfault in DLX_parallel that slipped through because, for some
	reason, a non-zero, but still bad, pointer, was giving the
	appearance of working.

2008-06-04  Brian Kahne  <bkahne@freescale.com>

	** A new mode has been added to uADL for integration purposes:
	<b>--iss-mem-mode</b>.  This is only applicable for safe-mode
	models.  All memory accesses go through the ISS memory interface
	(derived from <i>MemHandler</i>).  In this mode, the performance
	model does not generate timed memory accesses.  

	In order to convey latency information to the model, an additional
	method, <code>MemHandler::set_latency</code> has been added.
	During an external memory access, the memory should call
	<code>set_latency</code> in order to set the latency for the
	current access.

2008-06-04  Hangsheng Wang  <hangshen@freescale.com>

	** Removed output stream parameter from uadl model creation interface
	createArch().  An alternate output stream other than std::cout can be
	set by calling member method setLogStream(std::ostream&).

	** Added a uADLArch method
	<code>setExtMemory(uADLMemoryIf&)</code> which can be used to set
	an external memory handler after the uadl model is created.  This
	alternate way of setting external memory handlers is useful if the
	external memory is not instantiated before uadl model creation.

	* Added a new test tests/uadl/test_ext_excp.dat to test continuous,
	back-to-back external exception behavior.

2008-06-02  Brian Kahne  <bkahne@freescale.com>

	* uADLParser now accepts a verbose parameter.  This is fed through
	to the ADL front-end and back-end.

	* adl2iss and uadl2model pass the verbosity, with a level
	parameter, to the respective ADL programs.

2008-05-30  Brian Kahne  <bkahne@freescale.com>

	* Misaligned instruction support was broken with iss-mem-mode
	because of two things, both of which have been fixed.  DLX_VLE is
	now built with --iss-mem-mode in order to test this.

	1.  The instr_read32 function was using the memory read32
	function, which handles split reads.  However, this was
	unnecessary, since we knew that the data was in a contiguous
	buffer (the buffer supplied by the caller).  In fact, when we got
	a misaligned read, it was causing us to produce bad data, because
	of the second read.  So, instr_read32 for iss-mem-mode has been
	replaced with just a simple byte_read32_unaligend call.

	2.  The uADL data buffer in sendFetchRequest was set to just the
	size of the fetch request, rather than the raw size of the
	prefetch call, meaning that the readpage() performed by the ISS
	was too large, and exceeded the bounds of the buffer, resulting in
	weird effects on other variables, such as the orig_ra variable.
	Fixed this by just setting the data buffer to 8 bytes, the maximum
	size of the prefetch call that we can make.

	* Fixed hybrid code generation for parallel micro-architectures,
	e.g. DLX_parallel.

2008-05-29  Hangsheng Wang  <hangshen@freescale.com>

	* uADL now calls prefetch() with the exact fetch size as its templated
	size parameter.

2008-05-29  Brian Kahne  <bkahne@freescale.com>

	* GenSim.C: Minor fix for safe-mode ISS generation: We need to
	generate generic instruction-field accessors for this, as well as
	for transactional ISSs.

2008-05-29  Hangsheng Wang  <hangshen@freescale.com>

	* Made necessary code generation changes to work with iss-mem-mode's 
	performance cache.

2008-05-29  Brian Kahne  <bkahne@freescale.com>

	* Minor fix to uvp2dat: Apparently, a T card can have an empty
	type if it's never used, e.g. t="".  Fixed the script so that it
	will accept this; we don't actually do anything with this
	information, so it's really just an issue of allowing it to be
	matched by the regular expression.

	* I've removed the MSVC2003 project/solution files, as we don't
	intend to support that compiler anymore.  I've also created an ADL
	minimal solution (adl-minimal.sln) to build the minimum set of
	libraries needed for platform creation.

2008-05-28  Brian Kahne  <bkahne@freescale.com>

	* Safe-mode fixes:

	1.  Performance caches now have transactional-iss cache
	operationsm e.g. cache_begin(), cache_end().

	2.  Added mask_ea(), mask_ra() functions so that a performance
	model can mask an address, e.g. the program counter, in order to
	handle wrap-around.

	3.  The safe-mode decode function updates cia to the supplied
	address.

	4.  Fixed a bug in the memory- half-word accesses were acting like
	transactional ISSs, in terms of alignment, which doesn't work with
	the non-transactional memory accessors used with safe-mode.  Added
	smdriver3/in18.dat to test this.

	* Added rollback support for hybrid transactional ISSs.  A new
	method is provided: get_rollback_data(), which returns a
	RestoreStack.  This can be saved off for later restoring purposes.

	* Fixed a bug with parallel architecture support:  We were doing
	delayed commits even with sparse register files, which was
	redundant, as the targets of the elements in the sparse register
	file were also delayed.  Now, sparse register files just work
	directly; it's up to the constituent registers to delay their writes.

2008-05-27  Hangsheng Wang  <hangshen@freescale.com>

	** Added an output stream argument to uADL's model creation interface.
	It now looks like:
	<pre>
	uadl::uADLArch *createArch(const std::string &name,
                                   uadl::uADLMemoryIf *memory = NULL,
                                   adl::ttime_t startTime = 0,
                                   bool lazyFetch = false,
                                   bool flushFetch = true,
                                   std::ostream &out = std::cout,
                                   bool logMemory = false,
                                   bool logPipeline = false,
                                   bool logStall = false,
                                   bool logOperand = false,
                                   bool logTarget = false,
                                   bool logWarnings = false);
	</pre>

	By passing an output stream argument, the user can control where the
	pipeline trace goes.

2008-05-23  Brian Kahne  <bkahne@freescale.com>

	* Start of work for implementing rollback in a normal or hybrid
	ISS.  The basic implementation is:

	Each real register/register-file makes a call to <name>_save(),
	which, if rollback is enabled, pushes an element onto the rollback
	stack (_rollbackStack).  This is done using the same classes as
	used for delayed writes and parallel execution: A series of
	objects which store values and application functors.

	For memory, savin is done by the logging class in the pre-write
	phase (pre == true).  We save memory based upon real addresses.
	Memory is read using the debug read operation used by the logger,
	so that it will not influence the cache.

	Note: I've re-written this so that the rollback stack and commit
	queue are no longer arrays.  Instead, they are now singly linked
	lists.  This meant that I could remove the max-delayed-writes
	parameter, as there is no longer a static size associated with the
	data structure.

	Rollback is controlled in two ways:  

	1.  The --rollback-mode option for make-iss enables code genereation.

	2.  The _enable_rollback boolean controls if items are saved.

	A simple API has been added to control this.  These are stubbed
	out if rollback is not enabled.  I don't know if we want to
	publish these, as I don't know yet how users might use rollback in
	real models- should this be part of the architectural model, or
	just used externally, e.g. by performance models, etc.?

	enable_rollback(bool e):  Toggle rollback on or off.

	commit_rollback():  Apply the items in the stack, removing them as
	we go.

	flush_rollback():  Discard all items from the stack.

	These have been allowed as global resources.  mod3.adl has been
	modified to add rollback, in order to test this; in138.dat tests
	the feature.

2008-05-22  Hangsheng Wang  <hangshen@freescale.com>

	** Added a <code>reset()</code> method to the u-arch model
	interface.  After the u-arch model is reset, it can restart
	execution from an address that is set by the test/environment.
	For model integration, <code>uarch.reset()</code> should replace
	<code>resetSimulation()</code> if the integrated model is moving
	from an ISS to a uADL model.

2008-05-22  Brian Kahne  <bkahne@freescale.com>

	* Start of the work for developing the ISS memory interface for
	safe-mode.  The idea is that, in this mode (--iss-mem-mode),
	a safe-mode uADL model will only interact with the outside world
	via the ISS memory interface.  For models with caches, two caches
	are actually present:  One is used by the ISS for functional
	behavior; the other is used strictly for performance reasons and
	does not contain any data, just tags.

	This marks the start of the work:  The ISS generator has been
	updated, and basic work on uADL has been done.

	Still to do:

	1.  Switch to using the performance caches in uADL.

	2.  Update instruction-buffer handling.

	3.  Overall verification/testing.

	* A new mode has been added for ISS generation: --safe-mode-iss.
	This generates a transactional ISS that uses the ISS memory
	interface.  Hybrid mode now always uses this interface as well.

	* Because hybrid mode uses the ISS memory interface, and that's
	not fully supported in uADL yet, hybrid mode has been turned off
	for uADL regressions.  It should be re-enabled when this work is
	complete.

2008-05-20  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new cache parameter: store_buffer_enable.  It is a boolean
	predicate that specifies whether the cache's store buffer is enabled or
	not.  For example, for a cache with no store buffer, you can specify
	<pre>
	  store_buffer_enable = func() { return false; };
	</pre>

	  The current default value is "always enabled", but will be changed to
	"always disabled" in a future release.

2008-05-16  Brian Kahne  <bkahne@freescale.com>

	* I manually regenerated the configure files in the various
	binutils modules so that they wouldn't complain about
	user-specified CFLAGS.  I also added -fpic to the binutils
	configure script so that the generated libraries can be used with
	shared objects.

	* Modified mod11.adl to have an external exception w/a guard, in
	order to test external exceptions.  Previously, we were using
	program exceptions, but with changes to uADL, this caused an
	infinite loop b/c the exception did not have a guard.

	* Modified BranchPredictor.h so to remove the use of "Var", since
	MSVC has problems with the construct.

	* Modified tests/uadl/test_ext_mem_excp.C so that it queries the
	model for exception indices.  This way, it will always generate a
	ProtectionFault, even if we change mod11's exceptions.
	
       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.6 (v1_3_6) on Linux (lb32001) on 5/15/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.6 (v1_3_6) on Linux (lb0170) on 5/15/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.6 (v1_3_6) on Linux (lb32001) on 5/15/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.6 (v1_3_6) on Linux (lb0170) on 5/15/2008 ==

2008-05-15  Brian Kahne  <bkahne@freescale.com>

	* Changed pipeline flush behavior to automatically determine next fetch
	address based on whether the instruction is a taken branch.

	* Changed retire() to cancel outstanding WriteQueue requests.

2008-05-13  Brian Kahne  <bkahne@freescale.com>

	** Added a new key to the uADL branch predictor manager section:
	<pre>
	reg_compares = &lt;ident|ident.ident|list(ident|ident.ident)&gt;
	</pre>

	This allows the user to specify additional criteria to match
	against when searching a branch predictor's entries.  The value
	may be either a single entry or a list of entries, where each
	entry is either a register name or a register-name.field-name
	pair.  For example:
	<pre>
	reg_compares = (MSR.IR,PID);
	</pre>

2008-05-13  Hangsheng Wang  <hangshen@freescale.com>

	* Added more tracing information about disabled branch predictor.

	* Changed cache's critical-word-first linefill behavior to match that of
	Zen650.

2008-05-12  Hangsheng Wang  <hangshen@freescale.com>

	* Changed handling of branch prediction enablement predicate.  The
	predicate is now implemented as a public member function of the branch
	predictor class.  Instead of using guard logic on predict() and update()
	transactions, this logic is now internal to the branch predictor itself.
	  This enables the fetch unit to use the branch predictor without having
	to worry about if the branch predictor is enabled or not.

	* Add support to genFunc and AuxFunc.  They now have an additional
	parameter/member which indicates if the function should be const.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.5 (v1_3_5) on Linux (lb32001) on 5/12/2008 ==

2008-05-08  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new prediate is_misaligned, which is true for a misaligned
	load or store.

	* Changed _hasError handling.  Now under safe mode, if an instruction
	has _hasError = true, it will always follow the first edge leading to a
	different pipeline stage regardless of predicates and transactions on
	that edge, in an attempt to retire as soon as possible.

2008-05-08  Brian Kahne  <bkahne@freescale.com>

	* Initial work to get delay slots into uADL.  I've created a
	model, DLX_delay, which uses mod16, that has a single delay slot.
	However, the functionality is not yet correct.  So, this tests
	that it builds, but doesn't really do anything yet.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.5 (v1_3_5) on Linux (lb32001) on 5/8/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.5 (v1_3_5) on Linux (lb0170) on 5/8/2008 ==

2008-05-07  Brian Kahne  <bkahne@freescale.com>

	* Added support for nested conditionals.  This was done by
	extending the existing mechanism:  We simply guard predicate
	evaluations, just as we guard transaction evaluation.  All
	predicate variables are now declared at the top of each edge or
	state function so that they can be seen throughout the function;
	they're also all init'd to false.  After that, everything pretty
	much falls through:

	For a nested conditional, e.g. 

	    if (x) {
	       if (y) {
		  foo();
	       }
	    }

	then the code produced will be something like:

	bool sym1 = false, sym2 = false;

	sym1 = <condition x>;

	if (sym1) {
	  sym2 = <condition y>;
	}

	if (sym2) {
	  <transaction foo>;
	}

2008-05-06  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a bug in handling memory requests that are regarded misaligned
	by ADL, but are not really misaligned in RTL.

2008-05-06  Brian Kahne  <bkahne@freescale.com>

	** When compiling a uADL model with the multi-file option
	(<b>--jobs=N</b>), the decode function is now placed into the
	first implementation file, in order to try and reduce compilation
	times.  It seems as though some compilers get bogged down trying
	to inline this huge function; by moving it into an ISS
	implementation file, it cannot be inlined into the uADL
	implementation file.

	** The model generation scripts (<b>adl2iss</b> and
	<b>uadl2model</b>) have been modified so that their temporary
	files use the base-name of the output file, rather than the input
	file.  This allows for multiple builds of different models, which
	use the same source files, to be done in parallel.  

	The <b>--tmpnam</b> option has been removed, since it is now
	unnecessary.

	* uadl/RegisterFile.C: Minor performance improvement: Rather than
	re-initing the static regIds register, we create it with a single
	element and just re-assign that single element.  This seems to
	increase performance rather significantly with DLX
	wrt. read_operand(SPR).

2008-05-06  Hangsheng Wang  <hangshen@freescale.com>

	* Improved recovery capability against bad branch prediction at fetch
	time for safe mode.

2008-05-06  Brian Kahne  <bkahne@freescale.com>

	** Else-clauses are now allowed within uADL instruction-class
	action blocks.  For example:
	<pre>
	if (predicted_taken) {
	  ... transaction;
	} else {
          ... another transaction;
	  ... another transaction;
	}
	</pre>

	If-then-else blocks may be nested within other if-then-else
	blocks.

	* The above was implemented as follows:

	For the front-end, a transaction no longer has a predicate
	attached to it.  Rather, a predicate is an entry in a Transactions
	and may have a then-part and an else-part.  Transactions are added
	to these, as necessary, resulting in a tree-like structure (though
	we don't support nested if-blocks yet).

	For the back-end, all predicates (pure and non-pure) are grouped
	into the predicate pool and then their code is generated, but
	stored in a map, associating symbols with strings.  Another map
	associated transactions with their predicates' symbols.

	We first generate all transactions, then we go back and emit code
	only for the predicates which were used.  Predicate code is now an
	expression which assigns to a unique boolean symbol (using
	PtreeUtil::GenSym).  The transactions which are guarded by such
	predicates are guarded by this boolean, or the negated boolean if
	in an else-portion.
	
2008-05-06  Hangsheng Wang  <hangshen@freescale.com>

	* Improved send_read/write_request_queue_inquire() so that they also
	check if prior loads/stores still have unsent memory requests, and if
	they do, the transaction fails.  This additional checking ensures that
	if the transaction returns true, the instruction is guaranteed to be
	able to send a new request in the next cycle.
	  This checking is only done under safe mode because we do not have a
	reliable way to do so under normal mode.

2008-05-05  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a inquire() bug which causes an assertion failure when inquiring
	a forwarding path.

2008-05-01  Hangsheng Wang  <hangshen@freescale.com>

	** Added two new predicates:
	<pre>
	  all_mem_requests_sent: whether an instruction has sent its all memory
	  requests.
	</pre>
	  all_mem_accesses_done: whether an instruction has completed its all
	  memory accesses.
	<pre>
	</pre>

2008-04-30  Hangsheng Wang  <hangshen@freescale.com>

	** Removed 'extern "C"' model interface support.

	* Remved support for non-blocking memory under safe mode.  Now safe
	mode always uses blocking memory model.

2008-04-29  Brian Kahne  <bkahne@freescale.com>

	* Changed attribute handling slightly: Attributes are now
	intercepted by ArchHandler::add_key in order to guarantee that
	they're added to the common pool (in Data) before any child items
	have their attributes handled (which must exist in the pool in
	order to be valid).

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.4 (v1_3_4) on Linux (lb32001) on 4/29/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.4 (v1_3_4) on Linux (lb0170) on 4/29/2008 ==

2008-04-29  Hangsheng Wang  <hangshen@freescale.com>

	** Added exception support to the external memory interface.  Now
	fetchMemoryData(), readMemoryData(), writeMemorydata(),
	sendFetchRequest(), sendReadRequest() and sendWriteRequest() can return
	an exception flag to the core model.
	  An external memory model should use "|" operator instead of "=" to 
	set exception flags because the flag may contain other exceptions.

	* Added a new test (DLX_bp_safe_ext_mem, ext_mem_excp.dat) to test
	external memory exception.

	* Fixed a few places where sendWriteRequest() does not carry data under
	safe mode.

2008-04-28  Hangsheng Wang  <hangshen@freescale.com>

	* Added departing action to retire().  Otherwise an instruction that is
	retired due to dead/live-lock may hold a forwarding path resource
	permanently.

	* Added stall action to retire().  Otherwise an instruction that is
	retired due to dead/live-lock may keep backwards pipeline stages to
	remain stalled, creating a series of dead locks.

2008-04-28  Brian Kahne  <bkahne@freescale.com>

	* I have significantly changed code generation for register
	reads/writes.  Previously, the front-end just did some checking
	and the back-end had to re-parse the AST to figure out what was a
	register access, the type, etc.

	The new mechanism keeps the checking in the front-end and extends
	it to some extent.  It also replaces the relevant expression with
	a PtreeRegRead or PtreeRegWrite object, whose Car points to the
	original expression, but also contains a RegAccess object which
	contains the broken-out data for the access, e.g. a pointer to the
	register or register-file object, a pointer to the field, if
	relevant, pointers to the slice expressions, if relevant, etc.

	Translation methods exist in AdlTranslatingWalker, which derives
	from Opencxx::Walker, for these two types.  This means that the
	InstrWalker simply overloads these functions, then produces the
	relevant code, without havin to do any pattern matching on its
	own.  This cuts down on a lot off code complexity, as the two
	systems were getting kinda hacked up and ugly, especially when
	delayed-writes were added.

	* Modified how remove commands are processed for
	architectures/cores.  Previously, we weren't handling them at all.
	Now, in CoreHandler::process_keys, we built up a handler list
	consisting of the relevant architectures and then the core's
	architecture, process any remove keys, then process all keys.  We
	have to copy the architectures because they might be shared
	between different cores, but a remove key in one core shouldn't
	influence the architectures in another core.  We're smart about
	this, however, only duplicating architectures if the core has a
	remove list.

2008-04-28  Brian Kahne  <bkahne@freescale.com>

	** ADL/uADL models now support optional callbacks on exceptions.
	The exceptions which support callbacks are set at model-build time
	using a config file.  For example:
	<pre>
	define(core=P) {
	  define (config) {
	      exception_callbacks = (Program);
	  }
	}
	</pre>
	In the example above, a callback will be created for the <b>Program</b> exception.

	The default callback does nothing.  User callbacks may be
	installed by calling <code>IssNode::setExceptCallback</code>.  Two
	versions of this function exist:  One in which the except is
	specified using a string; one in which the except is specified
	using an integer handle.  Both return false if a callback could
	not be installed.

	Please refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.
	
	** When <b>tracediff</b> detects a time mismatch, the format of
	the warning/error is now:

	<p>
	<b>
	&lt;core&gt;:  Instr X (+ Y):  Incorrect &lt;type&gt;-time:  Found T<sub>1</sub> (adjusted to T<sub>2</sub>), expected T<sub>3</sub> (D)
        </b>
	</p>

	where:

	<dl>
	<dt>X</dt>
	<dd>
	The instruction count that has the error.
	</dd>	
	<dt>Y</dt>
	<dd>
	The number of instructions since the last time mismatch.
	</dd>	
	<dt>T<sub>1</sub></dt>
	<dd>
	Actual time value found for the instruction.
	</dd>	
	<dt>T<sub>2</sub></dt>
	<dd>
	Adjusted time, taking into account prior error.
	</dd>	
	<dt>T<sub>3</sub></dt>
	<dd>
	The expected time.
	</dd>	
	<dt>D</dt>
	<dd>
	The difference between the adjusted and the expected time.
	</dd>	
	</dl>
	
2008-04-26  Hangsheng Wang  <hangshen@freescale.com>

	* Changed dead/live-lock handling.  The base class, which is a
	normal-mode model, cannot recover from a dead/live-lock, hence
	fail_on_deadlock parameter is ignored.

	* Changed forwarding path being full error report from RError to cerr,
	as this is not a fatal error.

2008-04-24  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new cache parameter: taken_to_write_latency, which specifies
	the minimum cycle count from a store request being taken by the cache to
	its data write phase.  The default value is 0.

	* Reverted memory and cache to in-order request handling.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.3 (v1_3_3) on Linux (lb32001) on 4/23/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.3 (v1_3_3) on Linux (lb0170) on 4/23/2008 ==

2008-04-23  Hangsheng Wang  <hangshen@freescale.com>

	* Adjusted dead lock timeout handling.  Now the default value (1000) is
	only defined in the base uADLArch class, not in the parser.

	* Fixed a problem in safe-mode exception tracking that caused dead locks
	in random testing.

2008-04-23  Brian Kahne  <bkahne@freescale.com>

	* uadl/GenCode.C: Fixed a bug with code generation.  The has_field
	predicate was adding a semicolon, making it generate bad code if
	it was used in conjunction with other predicates.

	* Fixed a bug in InstrWalker: The Ptree::Make call for conditional
	transactional register-field writes was wrong, with mismatched
	variables to control codes, so a segfault resulted when we tried
	to generate the relevant code string.  Fixed this and modified
	mod11.adl to reproduce this issue.

2008-04-22  Hangsheng Wang  <hangshen@freescale.com>

	** Now send_write_request() carries data contents as well under safe
	mode.  This is mainly for the external memory to double-check data 
	written by previous writeMemoryData().

2008-04-18  Brian Kahne  <bkahne@freescale.com>

	* Initial progress towards getting delayed-writes implemented:

	The front-end is done (added delay1.adl and delay2.adl to test).

	The back-end plain-ISS generator now contains the code.  The basic
	implementation is a static array of commit queues, where the size
	of the static array is fixed and settable by the config file.  The
	default is 3, meaning two delay slots are allowed.  The array
	works as a circular queue, where anything in the current queue is
	committed at the end of the cycle.  Thus, for a single-cycle
	delay, items to be committed are added to the current+1 queue
	element.  mod3.adl was updated to test out various types of
	register/register-file writes.

	Note:  This does not yet work for transactional ISSs.
	
2008-04-17  Hangsheng Wang  <hangshen@freescale.com>

	* Add tracing information for send_read/write_request_queue_inquire(). 
	Change DLX_cache_unified.uadl to test the new transactions.

	* Add a new memory/cache model parameter, bool allow_bus_wait.  If
	allow_bus_wait is true, a request to the memory/cache can wait on the
	"bus" when the memory/cache request queue is full.  The default value is
	true.
	Add a new test for DLX_cache_unified.uadl to test this parameter.

2008-04-16  Hangsheng Wang  <hangshen@freescale.com>

	** Added two new cache/memory inquire transactions:
	send_read_request_queue_inquire(name) and
	send_write_request_queue_inquire(name).
	  send_read_request_queue_inquire(name) returns true if the specified
	cache or memory can accept more read requests, i.e., having more queue
	space for reads, and returns false otherwise.
	  send_write_request_queue_inquire(name) returns true if the specified
	cache or memory can accept more write requests, i.e., having more queue
	space for writes, and returns false otherwise.

2008-04-16  Brian Kahne  <bkahne@freescale.com>

	** All ADL programs now take an include directive as a
	command-line option:
	<pre>
	--include=&lt;path&gt; or -I=&lt;path&gt;
	</pre>

	* The above was implemented by modifying standardParserSetup() in
	BaseParser.C.  I also added standardParserOptionSetup() to
	consolidate the setup of these various options.  I then modified
	all of the main() functions in the various programs we create to
	use both routines.  I also modified all of the scripts to support
	the include directive.

	* Modified the *-uadl.adl files in tests/uadl so that they do not
	include relative paths.  Instead, an include directive is used.
	This fixes a problem, where we were distributing mod1-uadl.adl for
	customer regressions, but it included a relative path which didn't
	match the directory structure found in the install tree.

2008-04-15  Brian Kahne  <bkahne@freescale.com>

	* Fixed a minor bug with source/target tracking: For little-endian
	cores, we weren't setting bits in a usage mask correctly because
	we were calling the big-endian oriented RNumber set-field routine
	with little-endian bits, thus resulting in nothing being done.
	Fixed this by checking the endianness of the core and swapping the
	bits as necessary.  Added fe/inst95.adl to test this.

2008-04-14  Brian Kahne  <bkahne@freescale.com>

	** Users may now use instruction-fields directly within uADL
	action-code predicates in order to change instruction behavior.
	For example:
	<pre>
        if (has_field(RT) && (RT == 0)) { 
	  flush_pipeline(); 
	}
	</pre>
	This allows the behavior of an instruction class to depend upon
	specific operand values of an instruction.

2008-04-11  Brian Kahne  <bkahne@freescale.com>

	* Changed the transactional-ISS interface slightly so that the
	version of decode used by uADL takes an address parameter, which
	is used to update the CIA.  This fixes some of the hacks that were
	needed to synchronize this on uADL's side.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.2 (v1_3_2) on Linux (lb0170) on 4/11/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.2 (v1_3_2) on Linux (lb32001) on 4/11/2008 ==

2008-04-10  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with caches: The addition of support for handling
	out-of-order requests broke the z650 because Cache::read and
	Cache::write weren't removing the proper enries from the _requests
	queue.  Fixed this.  However, I don't know how to create a
	regression to test this, so that's still an outstanding to-do
	item.

	* Fixed a bug with forwarding path code: If we had a single item
	which was an exclusive filter, e.g. !GPR.RS, we were accidentally
	treating that as a single-item inclusive filter and calling a
	slot-query function, which would fail.  Fixed this by adding an
	extra guard in the code generation for forwarding paths.  Modified
	DLX_forward2.uadl to have a dummy guard, to catch this issue.

2008-04-10  Zigu Haras  <zigu.haras@freescale.com>

	* Fixed a bug in cache/memory which assumed that a request to be
	served is the first in the requsts queue. Instead, the request
	with the correct requestId is searched for.  In StarCode
	send_read_request and send_write_request are issued in the same
	stage; but the read transaction takes place a few stages before
	the write transaction.

2008-04-09  Brian Kahne  <bkahne@freescale.com>

	** The uADL pipeline trace has been updated so that cache requests
	include the type of request, e.g. ifetch, read, etc.

	* Modified uADL cache-event logging to use iss/TypeIO.h, which
	handles printing of the CacheAccess type.  Applied this to
	requests as well as receives.

2008-04-09  Hangsheng Wang  <hangshen@freescale.com>

	* Fix a bug in cache/memory queue handling.  Queue_full status is now
	updated now each time a new request is accepted.

	* Improved emulation of zen650's misprediction-penalty-mitigation
	speculation.  This is currently done by a hack, and should be removed
	to a custom fetch unit once the fetch unit interface is done.

2008-04-09  Brian Kahne  <bkahne@freescale.com>

	** ADL/uADL models now support optional callbacks on register
	updates.  The registers which support callbacks are set at
	model-build time using a config file.  For example:
	<pre>
	define(core=P) {
	  define (config) {
	      reg_callbacks = (HID0,HID1);
	  }
	}
	</pre>
	In the example above, callbacks will be enabled for HID0 and HID1.

	The default callback does nothing.  User callbacks may be
	installed by calling <code>IssNode::setRegCallback</code>.  Two
	versions of this function exist:  One in which the register is
	specified using a string; one in which the register is specified
	using an integer handle.  Both return false if a callback could
	not be installed.

	Please refer to <a
	href="http://cad.freescale.net/adl/chrome/site/adl-language-reference.html">the
	ADL reference manual</a> for more information.
	
	* Implemented register callbacks for use by a platform model.
	These are set in a config file during model-build time using the
	reg_callbacks key in a config define within a core define.  During
	model-build time, we create calls to elements of a callback array,
	if relevant, then create a setRegCallback function to allow the
	user to register a callback.  A callback is just a functor derived
	from RegCallback, declared in ModelInterface.h.

	Modified scripts/driver.C to install callbacks into mod1.so and
	then added scripts/in4.dat to test this.

2008-04-08  Brian Kahne  <bkahne@freescale.com>

	* iss/tracediff.C: We weren't converting "intr" intermediate
	results in UVPs over to E cards in the data model, so we didn't
	catch when exception names differed.

2008-04-08  Hangsheng Wang  <hangshen@freescale.com>

	* The fetch unit now does BTB lookup using the right step size, which
	is the greatest common divisor of all instruction sizes.

	* Remove unnecessary log_instr_read() and remove_duplicates() calls.

2008-04-07  Hangsheng Wang  <hangshen@freescale.com>

	* Add more branch prediction trace information.

	* Remove readMemoryData() and fetchMemoryData() from WriteQueue.[hC]
	because they are identical with the default implementation in the base
	class.

2008-04-07  Brian Kahne  <bkahne@freescale.com>

	* Re-worked how instruction-fetch logging works for uADL.
	Previously, this was done by the prefetch() routine generated for
	a transactional ISS.  However, we run into problems due to the
	highly disconnected way in which uADL can fetch instruction data.

	The new method occurs if ConfigDB::_log_instr_reads = false.  If
	set to false (which uADL now does), then a log_instr_read() method
	is generated for the ISS and now calls are made to log_instr_read
	by the ISS itself; it's up to the performance model to make the
	calls.

	Currently, for each instruction-buffer entry, a call to
	log_instr_read() is made, then decode is called.  This seems to
	fix the problems we were seeing wrt. the new branch-fetch work
	just done.
	
       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.1 (v1_3_1) on Linux (lb32001) on 4/7/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.1 (v1_3_1) on Linux (lb0170) on 4/7/2008 ==

2008-04-06  Hangsheng Wang  <hangshen@freescale.com>

	** uADL now supports branch prediction at fetch time.  A new fetch unit
	parameter "branch_predictor" is added.  If this parameter is set and 
	refers to a defined branch predictor, then that branch predictor will
	be consulted by the fetch unit at fetch time for branch prediction.
	    If the fetch unit is configured to do branch prediction, you can no
	longer explicitly do branch prediction in your instruction class's
	action code.

2008-04-06  Zigu Haras  <zigu.haras@freescale.com>

	** uADL memory elements can feature ports. Ports differentiate
	access to Memory, Cache, or Write Queue memory elements. Port
	definitions are nested in the definition of the memory element.
	<pre>
            define(memory Mem) {
	
	      define(port I) {
	         bandwidth = 2;
	      }
	
	    }
	</pre>
	Named ports contain only bandwith information; their default is 1.
	Port bandwith cannot exceed its owner's bandwdiths.
	The connectivity of an element with ports must explicitly refer
	to both a given port and the element. Memory transactions must
	obey the same rule. Ports are denoted using the `.` notation.
	For Example:
	<pre>
	   define(fetchunit fetcher) {
	     fetch_memory = Mem.I;  
	   }
	</pre>
	and for transactions:
	<b>send_read_request(Mem.I);</b>		
	
2008-04-04  Brian Kahne  <bkahne@freescale.com>

	* Updated the uADL manual to include some diagrams describing the
	protocol between a safe-mode model and a platform model.  These
	diagrams were done in OpenOffice Draw.

2008-04-03  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with forwardinrg paths: Depart code wasn't being
	created for force_write_target, so a forwarding path which used
	that transaction was being filled up, resulting in assertions.
	Fixed this by modifying CodeGen::writeDepart().  I modified
	DLX_forward2.uadl to use force_write_target and modified fwd2.dat
	to test this.  I also changed the assertion to an RError so that
	the user will get a friendlier message if a forwarding path does
	fill up.

	* Refactored the cache-status code so that we pass around a
	pointer to a CacheStatus object, since the original remains in the
	MemoryAccess object in the InstOSM which originated the
	transaction.  I also created a second set of
	sendReadRequest/sendWriteRequest functions which have a pointer to
	a CacheStatus object.  This is only used by Caches, but exists as
	virtual functions for completeness.

	** In uADL, if a <b>has_field</b> predicate is used to test for
	the existance of an instruction field, then that field may be used
	in transactions guarded by the predicate, even if they do not
	exist for all instructions in the class, without the need to set
	<b>allow_missing_fields</b> to true.

	For example, given a class which contains the PowerPC add and addi
	instructions, this code:
	<pre>
	if (has_field(RB)) read_operand(GPR,RB);
	</pre>
	is legal with <b>allow_missing_fields = false;</b> (the default
	setting).  This is because the access to <b>RB</b> is guarded by
	<b>has_field</b>.
	
2008-04-03  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a bug in scoreboard implementation that causes wrong
	distance results for a stage with no actions associated.

	* Augmented uADL memory interface to include cacheEnabled status
	for each untimed access: fetch, read, write.

	* Changed Memory/Cache request queue behavior so that the completion of
	a request does not increase available queue size until the next cycle.
	Changed all DLX-based uadl models to work with this update
 
2008-04-03  Sergey Khristo  <b08077@freescale.com>

	* Fixed bug in database generator, the actual code of helper was
	not output.

2008-04-02  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug related to cache state in safe-mode models.  ADL
	handles translation-related cache behavior by setting various
	architectural parameters during translation; these are then
	queried by the appropriate cache-control functions.  However,
	safe-mode separates the executable access, which performs the
	translation, from the timed-access, which actually manipulates the
	cache, meaning that subsequent translations may affect the
	behavior of the timed accesses.

	For example, consider two loads, one to a cached location and then
	one to a cache-inhibited location.  The first will set the status
	parms to enable the cache, the second will disable the cache for
	that access.  However, by the time that the first timed access is
	performed, the second untimed access has already been performed,
	resulting in the first timed access incorrectly thinking that the
	access is inhibited.

	To fix this, I created a new class in ModelInterface called
	CacheStatus.  Ideally, this class would be generated for each ISS,
	but this is not possible for the current implementation of uADL
	b/c non-generated code needs to manipulate the object.  So, I just
	made it able to handle three levels of cache.  We can fix this
	later if it becomes an issue.  A generated function,
	update_cache_status, can grab cache state.  Currently, it grabs
	enable and miss_allocate for each data cache.  This status object
	is then passed into the MemoryRequest object and then passed to
	the <cache>_begin function.  The <cache>_begin function uses it if
	it's valid in order to determine cache state.

	Added uadl/cache1.dat to test this and modified
	DLX_cache_split_safe to use mod21.adl, which contains an MMU and a
	cache.

2008-04-02  Sergey Khristo  <b08077@freescale.com>

	* Fixed a bug for nested aliases in transcational ISS: we assumed
	that only references to fields can happen in alias definition and
	did not handle fixed values.

2008-04-01  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with pipeline flushes: The additions for StarCore
	caused a problem whereby an instruction that wasn't a branch, on a
	pipeline flush, would clear the _branch_target_id member variable,
	thus causing a bad _nextFetchAddr value to be loaded.  Fixed this
	by initializing _branch_target_id to -1 for non-branches and
	checking for this on a flush; if the instruction has a value of -1
	for _branch_target_id, then we just read from the NIA.

	This should be further enhanced so that this extra logic is not
	included if there's only a single branch target register,
	e.g. PowerPC only ever updates NIA.

	** Additional error checking has been added to the uADL front-end
	to check to make sure that instruction fields referenced within
	instruction-class action blocks are valid for all instructions in
	that class.  This means, for example, that for PowerPC, if you
	reference <b>RB</b> in a class which contains <b>addi</b>, you
	will get a compile-time error.

	To override this, set
	<pre>
	allow_missing_fields = true;
	</pre>
	within an instruction class define block.

	The user can test to see whether a field exists for the current
	instruction using the <i>has_field(&lt;field-name&gt;)</i>
	predicate.  For example:
	<pre>
	action = {
	       ...
	       S_ID: if (has_field(RB)) read_operand(GPR,RB);
	       ...
	       };
	</pre>

	* In order to support the has_field predicate and to more
	efficiently map instruction fields to slots, for handling
	read_operand and write_target, I added the FieldQueries class.
	This records queries for fields and then generates functions
	which, given a packet, return slot indices (or true/false for
	has_field queries) to map fields to slot values.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.0 (v1_3_0) on Linux (lb0170) on 3/31/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.0 (v1_3_0) on Linux (lb32001) on 3/31/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.3.0 (v1_3_0) on Linux (lb32001) on 3/31/2008 ==

2008-03-31  Sergey Khristo  <b08077@freescale.com>

	* Fixed bug in uADL for instructions larger than 32 bit.  If
	decode need to read the next 32 bit of decode buffer we need
	somehow to change offset of the memory request.  For now I did it
	before instruction read, may be this code should be changed in the
	future.  Changed DLX_parallel the test that. Also fixed minor bug
	in instruction and instructoin opernads logging in transactional
	iss for long instructions.
	

2008-03-30  Sergey Khristo  <b08077@freescale.com>
	
	* Fixed branches in uADL in parallel execution.

	* Added support for implicit branches in uADL (for which the
	program counter is not modified in the action of instruction). The
	user must specify "branch_target" attribute for the register that
	is supposed to hold the branch target value. For the delayed
	branches user must specify some positive parameter for pipeline
	flush transaction.  All this tested only in the safe mode, the
	usual mode should be tested too.
	
	
	* Fixed minor bug in assembler - clear function was not generated
	correctly for large encodigs.


2008-03-30  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new pipeline interlock mechanism to allow using a forwarding 
	path as a scoreboard.  It supports the following transactions:
	<dl>
	<dt><code>write_scoreboard(name);</code></dt>
	<dd>
	Store target operand information at scoreboard <b>name</b>.  Only target
	operands that will be updated (become dirty) should be stored.  This
	means that these transactions should only be used under safe mode.
	</dd>
	<dt><code>clear_scoreboard(name);</code></dt>
	<dd>
	Remove target operand information from scoreboard <b>name</b>.
	</dd>
	<dt><code>inquire_stall(name, stall_func[, unsigned parameter list]);</code></dt>
	<dd>
	Consult scoreboard <b>name</b> to determine the number of cycles for which
	the instruction should be stalled at the current stage.  This is done
	with the help of a user function `stall_func` in the following form:
	<pre>
	  unsigned stall_func(unsigned distance[, unsigned parameter list]);
	</pre>
	where distance is the least pipeline stage distance from the current
	instruction to prior instructions that have a RAW hazard with the
	current instruction.  When stall_func() is called, distance is already
	calculated and provided by inquire_stall(), and the optional parameter
	list is literally copied from the uADL action code.  stall_func() should
	then calculate and return the number of cycles for which the instruction
	should be stalled at its current stage.  If the number of stall cycles
	is not zero, inquire_stall() returns false, which will cause the
	instruction to be stalled.
	</dd>
	</dl>

	These three transactions enable the user to use a table-based interlock
	mechanism.  Specifically, write_scoreboard() should be called at the
	stage where instructions are decoded.  clear_scoreboard() should be
	called at the stage where instruction targets are available for read
	from registers.  This means that if there is a register
	write-to-available latency, clear_scoreboard() should be called later
	than write_target().  inquire_stall() should be called at the stage
	where RAW interlocks are analyzed and numbers of stall cycles are
	determined, and it should precede read_operand().

	There are some restrictions on using this interlock mechanism:

	<ol>
	<li>A forwarding path used as a scoreboard cannot be used as a normal
	forwarding path.
	</li>
	<li>This mechanism adopts a pure scoreboarding approach, thus it should
	be the only mechanism to introduce RAW stalls in the model, i.e.,
	effects of forwarding paths should be taken into account by
	stall_func.
	</li>
	<li>This mechanism can only be used under safe mode.
	</li>
	</ol>

2008-03-27  Brian Kahne  <bkahne@freescale.com>

	* Added the stall_backwards attribute to the pipestage manager
	object.  This allows the user to control the stalling behavior of
	individual pipeline stages:  If set to true, then if the stage
	stalls, then any stages leading to that stage also stalls.

	This is implemented by generating a stall-action function which
	stalls or unstalls previous stages.  On a stall (self-loop or a
	true stall), this function is called with true, otherwise it's
	called with a false.  The function is generated by doing a reverse
	traversal of the graph, and continuing this traversal if other
	stages are encountered with the stall_backwards attribute set.

	Created DLX_bubble.uadl (produces DLX_bubble_hybrid) and
	stall1.dat.

2008-03-26  Hangsheng Wang  <hangshen@freescale.com>

	* Changed forwarding path write behavior so that if the same forwarding
	path is written more than once by the same instruction, then one target
	only occupies one entry instead of multiple duplicated entries.
	  This is a bug and is not discovered since the scenario never happens.

	** Added a new forwarding path transaction
	<pre>
	  force_write_target(Fwd[,pattern])
	</pre>
	that writes all target operands, which have been updated at the momemt
	or will be updated by the instruction, to forwarding path Fwd.  If a
	pattern is specified, then only targets that match the pattern will be
	written.
	  The difference between this transaction and the normal 
	write_target(Fwd[,pattern]) is that the latter will not write target
	operands that have not been updated yet.
	  This transaction provides a way to model some optimized forwarding
	behavior that requires re-ordering of the instruction's action code.
	Use it with caution.
	  As this transaction needs to know the value of a target operand that
	has not been updated yet, it can only be used for safe mode.

2008-03-26  Zigu Haras  <zigu.haras@freescale.com>

	* Fixed a bug that in RAW hazard detection. Instructions from the 
	same packet and read and write from the same register, since reads
	is guaranteed, by VLES semantics, to be performed before writes.

	* Fixed a bug which allowed two VLESes in the same stage.
	
2008-03-25  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed target dirtiness checking under safe mode.  Modified
	Zen0_empty.uadl to test this.

	* Fixed a bug in forwarding path token manager.  An instruction
	should only invalidate entries written by itself.

	* Changed forwarding path implementation.  As data in a forwarding
	path are now non-volatile and need to be invalidated.  They no
	longer form an ascending sequence in terms of instruction issue
	ids.  Some method implementations relied on that fact and are now
	changed.  This resulted in a non-optiomal data structure.  We may
	need to change a data structure that has better search/sort
	performance.

	* Fixed a bug in forwarding path read transction.  The buggy code
	will fail to return the right data if the forwarding path contains
	updates of a register from multiple writers and they do not fully
	overlap.

2008-03-24  Brian Kahne  <bkahne@freescale.com>

	* We now check for the existance of SystemC using
	macros/systemc.m4.  This will look for two environment variables:
	SYTEMC_INCLUDE_DIR and SYSTEMC_LIB_DIR, which should point to the
	relevant inclue and lib directories, respectfully.  These can be
	entered on the command-line using option syntax, e.g.:

	./configure SYSTEMC_INCLUDE_DIR=... SYSTEMC_LIB_DIR=...

	or can be exported from a dot file.

	Note that if these values change, you will have to remove your
	cache file (config.cache) or do a "make distclean", though the
	former is much quicker.

2008-03-23  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a bug in partial reads/writes handling.  The previous
	implementation solely relies on forwarding paths to re-construct a 
	register's use/valid masks.  Hence a pipeline with no forwarding paths
	cannot resolve data dependency from partial writes to partial reads.
	The new implementation also records use/valid information in the
	register itself to solve this problem.
	  This problem is only partially solved for safe mode now, as it needs
	partial mask information, which is not available before execution.

2008-03-23  Sergey Khristo  <b08077@freescale.com>

	** Added support for helper functions in the second parameter of the <b>read_operand</b> transaction:
	<pre>
	  read_operand(GPR,Foo(F1,F2));
	</pre>
	The helper function must take one or two unsigned integers as input.

	* Added starcore btb for internal use in "designs" folder.
	
2008-03-21  Brian Kahne  <bkahne@freescale.com>

	* Fixed an issue with forwarding paths:  Previously, forwarding
	path data was completely volatile- it only lasted for the current
	cycle.  This could be a problem if a forwarding path was written
	at one cycle, but an instruction was stalled, but another
	instruction behind it then tried to read from that forwarding
	path- this would fail because the data was no longer considered
	valid.

	To fix this, forwarding path data has three states: Always valid,
	valid-now, and invalid.  Writes within a stage (a state action)
	are writen as always-valid, while edge-writes are considered as
	valid-now (only valid for this cycle).  An additional set of
	actions, departing-actions, was created and are now linked to when
	an instruction leaves a state (stage).  Forwarding paths create a
	departing action which moves data from the always-valid to the
	valid-now state.

	Added DLX_forward2.uadl to test this.  It creates
	DLX_fwd_hybrid2.  The test is tests/uadl/fwd2.dat.

	* Fixed a bug with read_operand with reading specific operands:
	We would get an assertion failure if an instruction didn't have
	the specified operand type, e.g. read_operand(GPR|FwdEX|FwdMM,RA)
	for a halt instruction.  This has been temporarily fixed by simply
	skipping the logic if it doesn't exist, rather than halting.

	TODO: Catch this in the front-end.  We should check all
	instruction-field references to make sure that all instructions
	have these fields.

	* Modified the parser so that defmod operations on stages do not
	affect ordering.  This allows a defmod of a pipeline stage to
	occur, without any effect on the order of stages for logging
	purposes.
	
2008-03-20  Zigu Haras  <zigu.haras@freescale.com>

	** Custom predicates of zero to two arguments can be defined
	in uADL and used in pipeline description. The arguments can
	be instruction fields or unsigned integers.

	* Modified the implementation of branch predcition at fetch unit.
	

2008-03-19  Sergey Khristo  <b08077@freescale.com>

	* Changed a representation of nested instructions in perl database:
	Now it is an alias with opcode.
	
2008-03-17  Brian Kahne  <bkahne@freescale.com>

	* Initial work for the hybrid ISS has been added.  This is a mode
	in which the ISS that's used for a performance model (with uADL)
	is basically a normal ISS, where writes take effect immediately.
	However, an instruction packet is still used in order to track
	what registers are dirty.  Thus, there are no read_operand or
	commit operations, just an exec.

	This appears to work, and I've added several regressions to test
	it.  A few things had to be changed:

	1.  Operand values written to forwarding paths cannot be logged,
	as we don't have any values in the instruction packet.

	2.  The implementation of custom latency functions had to be
	changed.  When using a hybrid ISS, the custom latency function is
	executed immediately before execution of the instruction.  This
	latency is then stored in the instruction packet and then used
	when the exec transaction is invoked.

	However, we cannot deploy this yet, as there may be issues with
	speculative execution: A speculative translation that causes an
	exception will update architectural state; we have to figure out
	how we want to deal with this.  It might just be the case that the
	user will have to write their model so that, in such situations,
	the exception data is stored into an exception data structure,
	rather than having exceptions take effect immediately.
	
2008-03-16  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new form of register (file) write_target transaction

	<pre>
	write_target(reg, id)
	</pre>

	which will write back reg[id] if reg[id] is a dirty target register.
	<b>id</b> must be either a valid instruction field or a positive
	integer.  This form allows the user to do fine control of the write-back
	of particular target registers.

	* This new form is testd with DLX.uadl.  I still need to add a new
	regression for it.

2008-03-16  Sergey Khristo  <b08077@freescale.com>

	** Added option <b>--lsf=str</b> to <b>adl2iss</b> and <b>uadl2model</b> which enables the use
	of lsf. String is optional, the default value is <b>"bsub -Ip -P adl"</b>.

	* Fixed "cleanup" option for uadl2model, I did not work correctly for parallel builds.

	
2008-03-13  Sergey Khristo  <b08077@freescale.com>

	** Added support for write queue token manager.

	* Added DLX_parallel model for testing simple parallel execution (every two instructions are considered as
	an instruction group).    

2008-03-12  Hangsheng Wang  <hangshen@freescale.com>

	* Updated pipeline transaction and register (file) transaction
	syntax in the uadl manual.

2008-03-11  Hangsheng Wang  <hangshen@freescale.com>

	* Updated uadl manual to document the implicit call of exec() by
	send_read/write_request() when EA is not calculated.

2008-03-11  Brian Kahne  <bkahne@freescale.com>

	* Fixed a code generation bug for selective forwarding logic; the
	call to the instruction-field getter was malformed.  Modified
	uadl/DLX_forward to have a selective forward for the EA register
	for load-with-update form instructions and added uadl/fwd1.dat to
	test this.

	* Intermediate change: The ISS type (transactional, normal,
	hybrid) is now set via an enum.  The hybrid ISS will be a new type
	which has an instruction packet, but executes instructions
	immediately.  This will be used with safe-mode ISSs.

	** For Windows builds, the Boost library location is now specified
	using an environment variable: <b>BOOST_ROOT</b>.  This must now
	be set by the user and must point to a valid Boost installation.

2008-03-10  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new transaction:

	<pre>
        inquire(name[\|<fwd-path>...], id[, mask])
	</pre>
	
        <b>inquire()</b> returns true if <b>register-name[id]</b> can be
	successfully read from the register (file) itself and an optional
	list of forwarding paths, and false otherwise.  If a mask is
	given, then only the masked bits of <b>name[id]</b> are queried
	for availability.  <b>id</b> must be either a positive integer or
	a valid instruction field.  <b>mask</b> must be either a positive
	integer or a valid register field.

	* Updated tests/uadl/DLX.uadl to test inquire().

	* Updated uADLArchSystemC.h and uADLArchSystemCIf.h to support new
	option logWarnings.

2008-03-10  Brian Kahne  <bkahne@freescale.com>

	* We now track implicit conversions of bits objects for helper
	function calls, to see if this means that only a portion of a
	register is actually read.  In other words, if the user writes
	Foo(GPR(RA)), but Foo's argument is only 16-bits wide (and the
	register is 32-bits), means that only half of GPR(RA) is actually
	read.  Added fe/helpers20.adl to test this.

2008-03-10  Zigu Haras  <zigu.haras@freescale.com>

	** flush_pipeline() takes an optional unsigned  argument, which
	defaults to zero. Its effect is to flush the pipeline execpt
	the specified number of previous stages. It uses for modeling 
	delay slots.

	** Instruction can be added to an instruction class using
	the <b> attrs </b> with a single attribute. All instructions 
	with the specified attribute are added to the class.

	** The uAL pipeline behavior of an instructoin can be dependent
	on a user-defined predicate which may take zero to one arguments.
	The unsigned argument, if specified, must be an instruction field
	name. The predicate may accesses registers defined in the architecture.

	** Removed the <b> equal() </b> predicate from uADL language.

	* Minor fix: read_operand can be conditional on predicate.

2008-03-07  Brian Kahne  <bkahne@freescale.com>

	* Minorfix:  write_target(<reg>) should be allowed in uADL.

	* Fixed a bug with the post_cycle handler: The code was generated
	outside of the exception try block, so raising an exception caused
	an abort due to an unhandled exception.  Moved the code and added
	in137.dat on mod3 to test this.

	* Improved error handling for uADL transactions.  I think that
	there's still more work to be done, but at least the foundation is
	in place.  Basically, from now on, if you get an assert or
	exception from the back-end, you should edit the front-end to add
	an appropriate check and add a regression to uadl-fe to test for
	this case.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.7 (v1_2_7) on Linux (lb32001) on 3/6/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.7 (v1_2_7) on Linux (lb0170) on 3/6/2008 ==

2008-03-06  Brian Kahne  <bkahne@freescale.com>

	* scripts/make-release-notes: Fixed a bug with XML parsing.  We
	had auto-escape-entities on, so it was escaping &, even though it
	had already been escaped as part of the original XML data.  So,
	any sort of defect title with, e.g. quotes, was garbled in the
	release notes.  Turned auto-escaping off to fix this.

	* Added a show-release-notes target which generates the release
	notes and then invokes a browser to display it (default is
	"firefox").

	* Fixed a bug with the transactional ISS: If we took a slice of an
	instruction field and then passed that to a helper, which then
	used that value to index into a register file, then we weren't
	setting up the helper function call correctly.  We were getting
	confused b/c the parameters had already been translated, whereas
	the parameter call data in the SlotAlloc object referred to
	pre-translated data.  Fixed this and added iss/in136.dat on
	tdriver2 to test this.

2008-03-06  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new command-line option "--time-out", which takes a positive integer
	argument, to the standalone uadl model executable.  This parameter specifies
	the timeout value (in cycles) for a dead/live-lock situation for safe mode.
	It is ignored under non-safe mode.  Note that setting this option to a too
	small value may lead to some false dead/live-lock situations.

	** Added a new key "dead_lock_timeout" to the core section of the uadl
	language.  It should be assigned a positive integer value and specifies the
	timeout value (in cycles) for a dead/live-lock situation for safe mode.
	This key is ignored under non-safe mode.  The value set through this key can
	be overridden by the command-line option "--time-out".
	
2008-03-05  Sergey Khristo  <b08077@freescale.com>

	* Minor bug in Data.C - string duplication led to data lost with
	32-bit compiler.

2008-03-04  Brian Kahne  <bkahne@freescale.com>

	** The syntax for uADL custom latency functions has changed: The
	custom latency function is now simply a helper function.  The
	calling convention is the same: The <b>exec</b> transaction takes
	the name of the function, followed by a series of parameters.
	Each parameter may be either a <b>regfile.instr-field</b> pair, a
	register name, or an instruction field.

	The helper function must return an integer value, which is the
	latency (in cycles) for the execution of the instruction.

	For example:

	<pre>
	unsigned Zen0IntMulSigned(bits<32> x,bits<32> y,bits<5> extra)
        {
          return (x == 0 || y == 0) ? 1 : 10;
        }
	...
	exec(Zen0IntMulSigned, GPR.RA, GPR.RB, RA);
	</pre>

	Refer to the <a
	href="http://cad.freescale.net/adl/chrome/site/uadl-manual.html">uADL
	manual</a> for further documentation.

	* For the above feature, parameter checking is handled in the
	front-end, so I modified uadl-fe/in14.uadl to test this and added
	uadl-fe/in15.uadl to check error handling.  I added
	uadl/cust-lat1.dat to test that the feature actually works.

	* I conditionalized execution (in both tdriver and in uADL) of an
	instruction (the exec method) so that no execution occurs if an
	exception exists.  The problem was that an exception could happen
	during read_operand, but we'd still execute the instruction,
	causing targets to become dirty, which would cause erroneous data
	to be committed.  Modified in135.dat to test this; this is now
	also run on DLX_bp_safe to test this situation.

2008-03-03  Brian Kahne  <bkahne@freescale.com>

	* The read_operand method in the instruction packet is now guarded
	by a try/catch block in order to catch exceptions caused by
	read-hooks.  Added iss/in135.dat on mod3 and tdriver2 to test
	this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.6 (v1_2_6) on Linux (lb32001) on 3/3/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.6 (v1_2_6) on Linux (lb0170) on 3/3/2008 ==

2008-02-29  Brian Kahne  <bkahne@freescale.com>

	** uADL deadlock messages are now only reported when the user
	enables tracing of warnings with the <b>--trace-warnings</b>
	option.  The <b>--fail-on-deadlock</b> option may be used to cause
	the simulation to terminate if a deadlock is detected.  Otherwise,
	the deadlock will be ignored and simulation will continue.

	** The uADL branch predictor may now be enabled/disabled through
	the use of a user-defined predicate via the <b>enable</b> key.
	This predicate may access registers defined by the architecture.
	
	* Added in support for an enable predict for the branch
	predictor.  This is handled using an AuxFunc, which is then added
	to the ADL data model.  Addd uadl/bp_enable.dat to test this.

	* Added support for user code in uADL.  This includes outer-most
	scope helpers, core-level scope helpers, and support for
	predicates.  Helpers are added to the transactional ISS and are
	transformed to access architectural elements as usual.  Predicates
	are supported using AuxFunc objects, which may be added to a core
	via Core::add_aux_func().  An AuxFunc is just a Ptree*, with a
	generated name (also a Ptree*), a specified return type, and a
	comment.  All AuxFuncs are checked, as usual, then inserted into
	the ISS along with the helpers.  The uADL model may then refer to
	the function by referencing the name member.  This usage is
	documented on the wiki:
	http://cad.freescale.net/trac/adl/wiki/UadlUserCode
	
2008-02-28  Sergey Khristo  <b08077@freescale.com>
	
	* Defect #268: make-db leaving out fields in aliased instruction.
	Actually it was done intentionally, but while investigating that I found
	that there are aliases that should have "fields" in database: the ones that
	change opcode. This alias cannot be thought as a shorthand so the fields should
	be written in the database.

2008-02-27  Sergey Khristo  <b08077@freescale.com>

	* Defect #281: make-doc problem on Z0.
	An entry of a sparse register file that had only read and write hook
	produced segmentation fault because we tried to access the name of its register (which
	did not exist). Also added to output hooks of register file enries.	    

	
2008-02-26  Brian Kahne  <bkahne@freescale.com>

	** Standalone uADL models now report performance data upon
	simulation completed (instructions/sec and cycles/sec).

2008-02-26  Sergey Khristo  <b08077@freescale.com>

	* Now nested instruction are checked for remove flag before finalize,
	allowing to remove instructions (with defmod) that were not fully defined.

2008-02-25  Brian Kahne  <bkahne@freescale.com>

	* Modified skribe.m4 so that whether latex is good or not (has the
	hyperref package) is cached.  This check seemed to be slow
	sometimes- probably because Latex accesses a lot of small files
	and _TOOLS_ can sometimes be really slow.

	* Updated the uADL syntax again.  I realized that there was an
	ambiguity when specifying token manager arguments for
	transactions: We couldn't simply assume that if the first argument
	was a forwarding path, then this meant to update from all
	registers first.  Therefore, the new syntax is more like the old:
	Managers are specified in the first argument and are separated by
	"|".  Instead of just a leading "|", the keyword AllReg may be
	used to specify an all-register update first.

	Updated regressions appropriately.

2008-02-22  Brian Kahne  <bkahne@freescale.com>

	* Fixed a uadl parser bug: We weren't allowing the || operator.
	Also, removed the old parser files and fixed a mistake in
	uadl2model: We weren't passing in defines properly.

2008-02-21  Brian Kahne  <bkahne@freescale.com>

	** uADL now uses a different syntax based upon the ADL language.
	The documentation has been updated to reflect this and may be
	accessed <a
	href="http://cad.freescale.net/adl/chrome/site/uadl-manual.html">here</a>.
	This change sets the stage for future improvements, such as better
	error checking, the ability to handle incremental modifications to
	micro-architectures which are based upon prior designs, and custom
	user code.

	* The uADL parser has been modified to use the ADL parser, so the
	syntax has changed to use the define/defmod type of syntax used
	with ADL files.  The documentation and regressons have been
	updated.  The uADL manual was rewritten to use ReStructuredText
	and is now named doc/uadl-manual.rst.

	A new regression suite, tests/uadl-fe, exists to test the
	front-end of the uADL parser. Please add new tests when adding new
	syntax.

	The existing uadl models have been updated to reflect the new
	syntax.
	
	* Modified autogen.sh and configure.ac so that the main configure
	uses a cache file and the binutils package uses a separate cache
	file, in order to increase overall configure-time performance.  I
	no longer uses AC_CONFIG_SUBDIR because it passes along the main
	cache file, which isn't valid, since we're specifying an alternate
	target (ppc-elf) for the binutils package.

2008-02-18  Zigu Haras  <zigu.haras@freescale.com>

	**  The uADL pipeline behavior of an instruction class can be dependent on 
	an  instruction field value. The predicate  <pre>equal(Fld,Val)</pre> where
	<pre>Fld, Val</pre> are an instruction field and an integer value, respectively,
	was added to the uADL syntax.

	** The branch predictor can be directly associated with the fetch unit, by setting
	the fetch unit argument <pre>branch_preditor = BPName</pre>. By default, when
	this argument is not set, the brach predictor is associated with the pipeline. 
	In this new configuration, the fetch unit uses the branch predictor prior to every
	instruction set fetch and the <pre>predict</pre> operation can not be used in
	the pipeline.

	** Added an optional <pre>packets</pre> argument to the pipeline stage token manager.
	This argument which can be used only at the issue stage of parallel architectures
	indicates the number of execution sets that can be issued in parallel. The default,
	for issue stage in parallel architectures, is one.
	
2008-02-17  Sergey Khristo  <b08077@freescale.com>

	** Added support for multi-file compilation in
	<i>uadl2model</i>. The interface is similar to that of
	<i>adl2iss</i>.

2008-02-13  Sergey Khristo  <b08077@freescale.com>

	* Fixed defmod for nested instructions and subinstructions.
	
	* Added support for instruction families of instructions of
	different width (nested instructions).
	
	** Added support for a group containing every already defined element of a given type:
	<pre>
	  define (group=all) { 
	    items = "*";
	    type = instr;
	  }
	</pre>
		
	* Added warnings about defmod in strict mode.
	
2008-02-12  Brian Kahne  <bkahne@freescale.com>

	* Moved uadl's main() into its own main.C in order to prepare for
	a new parser.

	* Added -ldl to the basic libraries listed in adl-config, because
	this is needed if you do a non-optimized build with shared
	objects.  Our nightly regressions passed because we do an
	optimized build, so the use of dlsym was ignored b/c it's in an
	inline function.
	
	* Added scripts/dyntest and scripts/dyntest_wrapper.so as a test
	of loading a uADL library as a shared object, but with the "thick"
	infrastructure such as the various readers and writers.

	** The uADL external memory access interface has been updated:  

	The <b>--extern-mem</b> flag to <i>uadl2model</i> now
	correctly generates a completely external memory interface for
	both the uADL model and the underlying ISS.  In order to use this,
	the <code>setIssMemHandler</code> method must be called on the
	uADL model in order to set up a pointer to a memory handler
	object.

	The <b>--extern-mem-hybrid</b> option is now supported by
	<i>uadl2model</i> and creates a hybrid system, in which the
	standard global memory is used by the ISS but the uADL model uses
	an external memory interface so that address traffic may be
	handled by a platform model.

	** The ISS external memory interface changed slightly: Addresses
	are no longer masked by their respective access sizes.
	
       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.5 (v1_2_5) on Linux (lb32001) on 2/11/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.5 (v1_2_5) on Linux (lb0170) on 2/11/2008 ==

2008-02-11  Brian Kahne  <bkahne@freescale.com>

	* Fixed a minor bug with uADL logging: The opcode was printed as a
	5-byte number because the instruction size was being checked as a
	size in words, rather than in bytes.

2008-02-08  Brian Kahne  <bkahne@freescale.com>

	** The uADL external memory interface has been modified.  For
	safe-mode, execution-related memory accesses are now made through
	the <code>uADLMemoryIf::[read|write|fetch]MemoryData</code>
	routines.  The <code>uADLMemoryIf::[get|set]MemoryData</code>
	routines are now only used for debug.  The default implementation
	of the execution-related memory access functions, however, simply
	calls the debug routines.

	The point of this change is to allow a system integrator to be
	able to easily distinguish between debug and execution accesses in
	order to route the requests appropriately.

	* scripts/adl-config.in: The --so-target option, within combined
	with --uadl, does not include the uADLmain library, since that
	library makes a call to uadl::createArch, which doesn't exist if
	the user has created an extern-C interface.

2008-02-07  Sergey Khristo  <b08077@freescale.com>
	
	* Added more informative message for instruction encoding conflicts:
	In case of illegal group if instructions we try to find a pair of instructions 
	that are in conflict.
	
2008-02-06  Brian Kahne  <bkahne@freescale.com>

	* The scripting interface now works with uADL models.  This was
	accomplished by abstracting out a run-control interface for the
	scripting module, called RunControl, declared in ScriptingIface.h.
	ExecSupport.C defines a default version for ISS models, while
	uADLMain.C defines one for uADL.  Currently, this just defines how
	to run and step the model and trigger an exception.

	Added cli/c38.cli to test this.  This runs on mod11 and
	DLX_bp_safe and tests generating an external exception.  Note that
	there's currently a difference in SRR0 values because, with ADL,
	the exception is taken to occur before the next instruction, while
	with the uADL model, it occurs right after the second.  We
	probably want to investigate this further at a later time.

2008-02-06  Zigu Haras  <zigu.haras@freescale.com>

	* Minor bug fixes in uADL.

2008-02-05  Brian Kahne  <bkahne@freescale.com>

	** The uADL command-line interface for standalone models has
	changed so that it matches that of ADL.  This allows you to do
	everything you can do with ADL models:  Supply multiple input and
	output files, configure the various readers, etc.

	The only incompatible change is that the shorthand option for
	ADL's tracing, <b>-t</b>, is no longer supported.  Instead, use
	<b>-ti</b> or the full name, <b>-trace</b>.

	** The uADL interface for non-basic models has changed slightly:
	There are no longer <code>init()</code> and <code>close()</code>
	methods.  Instead, these are provided by the same functions as
	used by ADL, declared in <code>SimInterface.h</code>.

	* uadl/GenCode.C: Hack!  I modified the call to readInput in the
	uADL models' init functions to set use-file-entry-point to true.
	This should be handled by command-line options, but I don't want
	to duplicate all of the code.  We need to refactor uADL startup
	code to use the existing initialization logic from ADL.

	* Removed directory checks for the web-dir and rel-dir, since
	there are cases where the user doesn't care about releasing- they
	just want to build.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.4 (v1_2_4) on Linux (lb0172) on 2/4/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.4 (v1_2_4) on Linux (lb32001) on 2/4/2008 ==

2008-02-04  Brian Kahne  <bkahne@freescale.com>

	** uADL's memory interface function <code>getMemoryData()</code>
	is no longer a const function.

2008-02-04  Zigu Haras  <zigoh@lnxdt62>

	** The hook <i>decode_retry</i> is called when an instruction does not decode.
	It takes two arguments: the address of the instruction and the instruction and
	returns a <i>boolean</i>. If it returns <i>true</i> decoding is retried, else
	the decode_miss handler is called.

	** Added VLES support in uADL. An variable size instructions execution set
	advances in the pipeline as a group. The size of the set is determined by
	the fetch unit, and its maximal size is defined in ADL.

	** Added support in uADL for a register aliasing to more then one register.

	** Added support in uADL for pseudo instruction fields, i.e, for accessing
	such fields which have a single abstarct definition and multiple, 
	instruction-dependent implementions.

	** Added support in uADL for for instruction fields encoding more than one
	register.
	
2008-02-01  Hangsheng Wang  <hangshen@freescale.com>

	** Added a commit id to each instruction in uADL's pipeline trace
	under safe mode.  Now each instruction in the trace has two id's:
	issue id (<b>iid</b>) and commit id (<b>cid</b>).  For safe mode,
	a speculative instruction, which is later discarded, always has
	<b>cid</b> 0.  For normal (non-safe) mode, <b>cid</b> is always 0.

	** Now each memory activiy in uADL's pipeline trace is associated
	with the commit id (<b>cid</b>) of the instruction that initiates
	or causes this memory activity.  If an instruction causes a series
	of memory system activities across the memory hierarchy, each
	activity is associated with its commit id.  The original memory
	request id of each memory activity in the trace is now <b>mid</b>.

	** Data read activities and fetch activities are now
	differentiated by <b>read</b> or <b>fetch</b> in the trace
	message.  Fetch activities also have no associated commit id.

	* Added uADL support for blocking memory interface.  It is enabled by
        option "--blocking-mem" to uADLParser or uadl2model.

	** When creating a barebone shared uADL model object, the ISS
	namespace is <b>uadl model namespace + <i>_ISS</i></b>.  This
	enables multiple models to be integrated into one large system
	without namespace conflicts.

2008-01-31  Brian Kahne  <bkahne@freescale.com>

	* Added the no-define option to AM_INIT_AUTOMAKE so that VERSION
	and PACKAGE are not defined.  This was done at the request of
	ASTC, which said that it interfered with platform integration,
	since the defines are so commonyl used.  The version number is now
	defined using PACKAGE_VERSION.

	* Updated make-release-notes so that it can handle querying Trac
	as well as DDTS.

	* Updated the infrastructure so that we can install to Trac.
	We're not doing this yet, but it'll be easy to switch.

	* Modified document generation so that the header isn't required
	as an include in each file: It's handled by the prest invocation.
	Also, prest has an option to map file extensions for figures, so
	the extra perl filtering is not required.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.3 (v1_2_3) on Linux (lb0170) on 1/30/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.3 (v1_2_3) on Linux (lb32001) on 1/30/2008 ==

2008-01-30  Sergey Khristo  <b08077@freescale.com>
	
	* Minor fix in assembler: we check for expression starting with
	"<" or ">" and do to try to parse them, waiting for instruction
	that have this symbols in its syntax definition.


2008-01-29  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new option "flush fetch" to the uADL model creation
	interface.  The new <code>createArch()</code> signature is:

	<pre>
          uadl::uADLArch (or uADLArchSystemC) *createArch(
            const string &name, uADLMemoryIf *memory = NULL,
            ttime_t startTime = 0, bool lazyFetch = false,
            bool flushFetch = true, bool logMemory = false,
            bool logPipeline = false, bool logStall = false,
            bool logOperand = false, bool logTarget = false
          );
	</pre>
	
        When "flush fetch" is true, a pipeline flush (including
	instruction buffer flush) will always initiate a new instruction
	fetch attempt in the same cycle.  This is also the default
	behavior.  For models created with the default uADL
	<code>main()</code> function, this option is reflected as the
	model command line option <b>--fetch-flush</b> and
	<b>--no-fetch-flush</b>.

2008-01-29  Brian Kahne  <bkahne@freescale.com>

	* iss/GenInstrs.C (adl): The prefetch and prefetch_translate
	functions weren't clearing the _instr_packet member, resulting in
	the possibility of using a stale pointer.  They now clear it.

	* Fixed a bug with transactional ISS generation: We weren't
	obeying the _conditional_slot_access flag in InstrWalker when
	generating register (file) field acceesses.  This meant that, in
	some situations, the MMU might try and access a packet which
	didn't yet exist.  Fixed this by adding extra logic to the
	relevant code generation functions to add ternary-expression
	tests.  Modified iss/mod11.adl so that lwarx modified the MSR
	register, thereby making it an "mmu control" register.  This
	causes a segfault on the first instruction translation if the
	conditional expressions are not in place.

	* We weren't properly adding sub-instruction usage information to
	the generated instructiosn which called the sub-instruction code.
	To fix this, I modified the rename feature of VarWalker to use a
	PMap (string->Ptree*).  Then, in Instr::gen_instruction, I create
	PtreeSubInstrCall objects, which contain a leaf (the name of the
	sub-instruction call to make) plus a reference to the UsageInfo
	for that sub-instruction.  During translation, if we come across
	that item, it gets added to the top-of-stack usage info, so that
	it's properly recorded.  Fixed up fe/inst48.adl to reflect these
	updates.

	* Fixed a problem with the front-end for tracking resources.  If a
	helper called another helper, which then used a parameter to index
	into a register file, then we would drop the fact that a parameter
	was being used when processing the call of the second helper in
	the first helper.  Fixed this by modifying VarWalker::update_regs
	so that, if we encounter a parm, we check to see if the call
	itself uses a parm, and if it does, record which parameter it is.
	If this isn't done, then the code generated for a transactional
	ISS ends up being broken.

	Added fe/helpers19.adl to test this.

2008-01-29  Sergey Khristo  <b08077@freescale.com>

	** Added option <b>--low-mem</b> to <b>adl2iss</b>. When
	specified, the generator arranges code in such a way that a
	compiler needs less memory in order to build the model.  This
	option can be used in conjunction with <b>--jobs=n</b>.

	* The above is implemented as follows: the code that is generated
	for every instruciton in the leaf node of "simulate" decode tree
	is placed into separate function which is not inline
	(ATTRIBUTE_NOINLINE), instruction action is made inline.  In case
	of parallel builds, implementation of such functions is placed in
	the implementation files.

2008-01-28  Brian Kahne  <bkahne@freescale.com>
	
	* Fixed a minor issue with resource tracking: Resources which were
	conditional targets (or sources), but which were then used
	definitively maintained their conditonal status.  Fixed this by
	always clearing the conditional flag when a new resource is
	inserted, if it already exists.  The conditional status is then
	added back when the translate-if function ends.  Added
	fe/inst93.adl to test this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.2 (v1_2_2) on Linux (lb0170) on 1/28/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.2 (v1_2_2) on Linux (lb32001) on 1/28/2008 ==

2008-01-27  Hangsheng Wang  <hangshen@freescale.com>

	** Changed uADL's model creation interface so that it now has only
	one external function <code>createArch()</code>.
	<code>createArch()</code> no longer initializes the ISS within the
	model.  The user should either do it by calling the
	<code>init()</code> method or write his own ISS initialization
	code.  External function <code>closeArch()</code> is replaced with
	model method <code>close()</code>.

2008-01-27  Sergey Khristo  <b08077@freescale.com>

	* Now assembler action is inherited by an alias with the restrition is that 
	this code is not using of operands.

2008-01-25  Brian Kahne  <bkahne@freescale.com>

	* Various modifications to uadl2model in order to implement a
	basic shared object, equivalent to the ADL version.

	* Moved ADL-related options out of miniADLParser b/c it was
	overwritting the options which had already been set due to
	command-line processing.

	* Added a new generation option to the ISS generator:  For a
	transactional ISS, the memory interface may be either blocking or
	non-blocking.  If blocking, then memory requests are handled via a
	virtual function:

	<pre>
	virtual void ModelType::handle_memory_request(const MemAccess &ma) = 0;
	</pre>

	This must be implemented by a derived class defined by the
	performance model.

	To turn this on, call ConfigDB::set_blocking_mem_if(true).

	The default is to use the original, non-blocking interface, which
	uses coroutines.  If using a blocking interface, then no
	coroutines are used.

	The main idea here is that, for safe-mode models, we don't need
	the overhead of coroutines b/c the instruction is executed all at
	once.

	I modified mod3.cc.h/tdriver2 to test this new interface.  With
	tdriver.C, you just compile it with -DBLOCKINGMEM in order to use
	it.

2008-01-24  Hangsheng Wang  <hangshen@freescale.com>

	* uADL: write_target() transaction now can take an optional register
	(file) parameter, e.g., write_target(GPR) will only update targets
	that belong to GPR.  This new form is required to implement branch
	target prefetching.

2008-01-24  Brian Kahne  <bkahne@freescale.com>

	* Minor uADL code generation update: Removed ModelInterface.h as
	an include in the uADL header b/c it was redundant and didn't take
	into account some defines that were defined in the ISS header/impl
	file.  Also, moved the SystemC header after the ISS header b/c the
	SystemC header was defining some things that it shouldn't have,
	e.g. min(), which screwed up compilation of the model.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.1 (v1_2_1) on Linux (lb0170) on 1/23/2008 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.1 (v1_2_1) on Linux (lb32001) on 1/23/2008 ==

2008-01-23  Brian Kahne  <bkahne@freescale.com>

	** ADL can now divide up a large ISS compilation into multiple
	compile jobs, which it can then execute in parallel.  To use this
	feature, specify the <b>--jobs=n</b> option to <i>adl2iss</i>,
	where <b>n</b> is the number of implementation files desired.  For
	example, a value of 3 means that one main file plus 3
	implementation files will be generated.

	By default, the compile jobs are done in parallel.  To disable
	this feature, specify <b>--no-parallel-build</b>.
	
	* Fixed the front-end and adl2iss so that all temporary file are
	cleaned up.

	* Attempt two for multi-file compiles: If the multi-job option is
	selected, then we emit implementation files for the instructions,
	disassembler, and instruction-logger to auxiliary files named
	base-<i>.cc, where <i> is 0..(n-1), where n is the number of jobs
	selected.

	To implement this, the assembler/disassembler code was modified so
	that it no longer contains a stream as a class member- this is now
	passed in.  I also created a class, PfxFileArray, that contains an
	array of output streams with prefix streams.  These represent the
	implementation files.  The instruction generation code then
	selects the appropriate file and directs all output to those files
	for doing the implementation.  It actually does its job twice:
	Once for the declarations and once for implementation.

2008-01-23  Sergey Khristo  <b08077@freescale.com>

	* Bugs in assembler: When immediate was defined with expression,
	it was not checked not to be a register name, expresion in alias did not 
	worked with pseudo fields.

	* Added helper script "translate_directives" that translates StarCore directives
	into similar GAS's analogs.

2008-01-22  Hangsheng Wang  <hangshen@freescale.com>

	* Improved uADL's predicate syntax.  Now multiple predicates can be 
	combined with logic '!' '&&' '||' operators.  The precedence is the same
	as that of C++.  Note that due to some legacy limitation of the uADL
	parser, '&&' and '||' must be used with spaces on both sides and '!'
	must be used with no space on its right side.
	These limitations shall be removed by a future update.

	** Two new transactions have been added to uADL:

	<dl>
	<dt>force_fetch():</dt>
	<dd>
	Forces the core to make a fetch attempt even
	if the instruction buffer has no space for more instructions.
	</dd>
	<dt>pause_fetch():</dt>
	<dd>
	Prevents the core from doing an instruction fetch in
	the current cycle even if the instruction buffer has spaces.
	</dd>
	</dl>
	
	* These two new transactions are necessary to model zen6's branch target
	prefetching behavior.

2008-01-22  Brian Kahne  <bkahne@freescale.com>

	* I made an initial attempt at being able to break up a large ISS
	compilation into multiple compilations, each of which can be done
	in parallel.  This is done by using the preprocessor- each
	instruction handler, disassembler, and instruction logger (if
	present), has some cpp stuff around it which will turn it into a
	declaration if JOBNUM does not have the correct integer value,
	otherwise it includes the body of the function.  This way, you can
	compile the same source file several times, each with different
	job numbers.  

	The limitation is that you have to compile with
	-fkeep-inline-functions, or else otherwise the link will fail.
	This results in much larger models.  So, this probably isn't a
	good long term solution.  It also exercises a weird
	linker/compiler bug when doing this with the StarCore model with
	optimization.  So, it should be regarded as a first-attempt only.

	* Changed uADL code generation again.  Compiling the ISS and the
	pipeline model separately resulted in much larger models because
	-fkeep-inline-functions had to be used.  So, I reverted back to
	only requiring a single compilation.  One difference is that the
	ISS is now generated as a .cc.h file so that it's obvious that
	it's to be used as a header.  Also, you can include the uADL
	header now w/o defining ADL_HEADER due to some preprocessor stuff
	that I put in.

2008-01-21  Brian Kahne  <bkahne@freescale.com>

	* Minor changes to uADL code generation: The uADL generated header
	now includes the ISS but also defines ADL_HEADER, so that the ISS
	is properly used as a header and anybody who includes the uADL
	header doesn't have to worry about defining ADL_HEADER.  Also, the
	transactional ISS ifdef's out the bulk of the decode logic and all
	instruction-related functions if used as a header.  This should
	significantly cut down on compilation time when compiling the uADL
	source file.  The advantage is that now, the ISS and uADL file can
	be compiled in parallel.  I've modified tests/uadl to be able to
	do this, but not uadl2model yet.

2008-01-18  Brian Kahne  <bkahne@freescale.com>

	* Simplified the tests/uadl Makefile.  It now uses a common
	template for building all models.

	* Modified uadl/GenCode.C so that the header file is included with
	ADL_HEADERS.  The ISS file is then linked in by uadl2model and by
	the Makefile rules in tests/uadl.

2008-01-17  Hangsheng Wang  <hangshen@freescale.com>

	* Added trace information about branch prediction, branch outcome and
	pipeline flush to uADL's pipeline trace.

	* Fixed a bug that prevents a taken branch prediction from flushing the
	pipeline properly.

2008-01-16  Brian Kahne  <bkahne@freescale.com>

	* Removed the min/max functions from uADLCommon.h due to a
	conflict in Windows.  Modified code generation to cast both
	parameters in min/max calls to the same type in order to avoid
	compiler errors.

	** A new configuration parameter (specified in a .ttc file) has
	been added: <b>clock_cycle_ratio</b>.  This parameter lets the
	user specify a ratio of cycle-events to instructions for an ADL
	ISS.  This currently affects the execution of the <i>pre_cycle</i>
	and <i>post_cycle</i> hooks.  The parameter's value is a decimal
	number.

	For example, a value of 1.2 means that, for a given simulation,
	the number of cycle-events should be approximately a factor of 1.2
	times the number of instructions in the simulation.  This feature
	allows users to better approximate the behavior of, for example,
	real-time counters, in a pure ISS.

	* For the above feature, mod3 was modified to have a value of 1.2
	for clock_cycle_ratio and in133.dat checks that in4.dat produces
	the correct value.
	
2008-01-15  Brian Kahne  <bkahne@freescale.com>

	* For if-then-else conditionals, common resources in both blocks,
	if both blocks are processed (meaning that we couldn't evaluate
	the expression, or no longer marked as conditional, since they
	will be sourced or targeted by one or the other side.  Also, items
	are only marked as conditional if they're processed, so an item in
	a conditional, where the expression is evaluated, and thus only
	one side is taken, are not marked as conditional.

	This processing has not yet been extended to switch statements.

	Added fe/inst92.adl to test this.

2008-01-14  Brian Kahne  <bkahne@freescale.com>

	** Two new hook functions have been added to the architecture
	definition: <b>pre_cycle()</b> and <b>post_cycle()</b>.  For a
	basic ADL ISS, these are called before pre_fetch() and after
	post_exec(), respectively.  In a uADL model, they are called
	before and after each clock cycle.

	** The type <b>byte</b> has been renamed to <b>byte_t</b>.  This
	affects a few functions in ModelInterface.h and so is only
	relevant to users who are integrating ADL models into platform
	models.  The change was made in order to avoid a name conflict in
	Windows.

2008-01-14  Sergey Khristo  <b08077@freescale.com>
	
	* Temporarily disabled relocation check in
	external/binutils-adl/gas/config/ppc-support.c for unknown
	absolute labels. This will be resolved in the near future.

	* Fixed "step" function in ADL API for parallel architecture
	without prefix bits.

2008-01-11  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with transactional-ISS generation.  If we had a
	helper function called (eventually) by instruction action code and
	also called by non-instruction action code, then we would get a
	compile error because the helper function's arguments were
	modified to contain slot prefixes.

	Fixed this by modifying GenInstrs::generateHelpers to generate a
	second version of the helper, one with no slot args, if the
	function is used both by instructions and by non-instructions.

	In order to know whether something is *not* used by instructions,
	I modified the front-end so that CheckCode records helper usage
	information into instruction-helper and non-instruction-helper
	string sets stored in the Core.  The instruction-finalize routine
	sets a flag in CheckCode to indicate that it's processing
	instruction action code.  This change (the side-effect on the
	Core) meant that a lot of const Core references had to be changed
	to non-const.

2008-01-10  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with incorrect issue times.  The problem was that a
	safe-mode model which defined issue times as being recorded when
	an instruction leaves a state (such as decode) might have another
	instruction execute before the issue time was logged.  Because the
	issue time was being logged without a call to log_current_instr,
	the issue time might go to the wrong instruction packet, resulting
	in a garbled DAT file.

	The log_instr_issue_time wrapper was moved to the transactional
	ISS for consistency and a call to log_current_instr was added.
	Added in2.dat with DLX_bp_safe to test this- it's checked against
	in2-time-check.dat, which just checks to make sure that the time
	values are correct.

2008-01-09  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with partial writes: We weren't properly expanding
	partial-write masks within UsedReg to the size of the associated
	register, so masks were not correctly calculated.  I made
	UsedReg::_reg private so that UsedReg::setreg() must be called,
	which wil update the mask as well.

	Also, we weren't removing the partial-write flag if a mask was
	fully set.  Thus, a series of partial writes which fully covered a
	register, followed by the use of that register, would still record
	the register as a source, when in fact it really wasn't.  Now, in
	UsedReg::update_mask, if the resulting mask is fully set, we clear
	it and clear the _partial flag.

	Added fe/helpers18.adl to test this.

	** The data structure for storing cache information for reporting
	purposes is now called <b>CacheLineData</b> in order to avoid a
	conflict with Windows/VisualC++.

2008-01-08  Sergey Khristo  <b08077@freescale.com>
	
	* Fixed one more bug in assembler: labels were not resolved
	correctly in case of prefix encodings.

2008-01-08  Brian Kahne  <bkahne@freescale.com>

	* Refactored the ISS generator slightly so that instruction slot
	allocation information is available from GenDriver and GenSim.
	Both classes take a SysInstrSlotAllocs class, which is a hash
	mapping path-names => instruction-slot-allocations, where
	instruction-slot-allocations is a mapping of instruction names to
	slot allocation data.

2008-01-08  Sergey Khristo  <b08077@freescale.com>
	
	* Minor bug in assembler: when processing nested instruction fields referencing 
	to a sparse register file we did not check that the specific entry exists. 

2008-01-02  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a cache bug so that when ADL reports a cache access as miss, 
	while it actually hits the linefill buffer, the set/way/offset fields
	of that request are updated with those of the linefill buffer
	immediately.  The old behavior is that those fields are updated when the
	linefill buffer is written back to the data array.  This opens the
	possibility that if the request is served before the linefill buffer is
	written back, it could set the valid flag of the cache line that ADL has
	chosen for allocation, which is not really allocated on the uADL side.
	    As a long-term solution, we should make ADL be aware of
	"in-progress" cache line status so that this kind of inconsistency never
	occurs.

2007-12-21  Hangsheng Wang  <hangshen@freescale.com>

	** uADL now supports user-defined issue times.  The user can
	define a pipeline stage as the issue stage, i.e., the
	instruction's issue time is the time when the instruction leaves
	that stage.  Currently only one issue stage is allowed.  If no
	issue stage is defined, then an instruction's issue time is the
	time when it leaves the instruction buffer.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.0 (v1_2_0) on Linux (lb32001) on 12/19/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.0 (v1_2_0) on Linux (lb0172) on 12/19/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.0 (v1_2_0) on Linux (lb0172) on 12/19/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.2.0 (v1_2_0) on Linux (lb32001) on 12/19/2007 ==

2007-12-19  Sergey Khristo  <b08077@freescale.com>

	* Added script adl-db, which allows to query ADL perl database in a convinient form.

2007-12-18  Brian Kahne  <bkahne@freescale.com>

	* Various bug fixes for getting distcheck to work.  This mainly
	concerned adl2asm: In order for the --build-locally option to work
	with distcheck, it needs to point to both the binutils source
	directory and the build directory.  This is now done by using the
	--bsprefix for the source tree, if it differs.  --bprefix is used
	to point to the build tree.

2007-12-18  Hangsheng Wang  <hangshen@freescale.com>

	** uADL external interrupt functions are now called genExceptions() and
	cancelExceptions(), to be more consistent with their ADL counterparts.

2007-12-17  Brian Kahne  <bkahne@freescale.com>

	* Added in breakpoint support for transactional ISSs.  This is
	currently tied to the free-packet function; we'll have to see if
	this works all the time.  Added tdriver1/in41.dat to test this.

2007-12-14  Brian Kahne  <bkahne@freescale.com>

	** Exceptions have been extended in order to describe edge and
	level-sensitive behavior for externally generated interrupts.  If
	a level-sensitive exception is generated and the exception is not
	enabled, then it will remain pending until it is enabled or it is
	canceled.  

	Refer to <a
	href="http://compass.freescale.net/go/adlsite/adl-language-reference.html">the
	ADL reference manual</a> for more information.

	* The front-end parser now no longer skips finalization if errors
	are found in the process-keys phase of parsing.  This lets more
	erros show up in the error log, so that the user can correct more
	things at a time.  However, this means that parsing errors must
	leave the model in a consistent state.

	* Option processing for the regression framework has been
	modified slightly.  It now allows for test-constraints to be
	specified as arguments, in addition to values attached to options.
	This allows it to be compatible with the use of <b>xargs</i>.

	For example, you can now do something like this:

	<pre>
	grep -il foo *.dat | xargs ./regress -s 
	</pre>

	Only tests containing "foo" will be executed.
	
2007-12-14  Hangsheng Wang  <hangshen@freescale.com>

	** uADL now distinguishes explicit pipeline stage allocate/release from
	implicit allocate/release.  A pipeline stage token that is allocated by
	an explicit allocate() transaction can only be released by an
	explicit release() transaction.  It cannot be released by an implicit
	release() transaction that is added by the uADL parser.  This change
	allows an instruction to allocate and hold a pipeline stage, thus
	preventing subsequent instructions from entering that stage even if this
	instruction has left that stage.  This kind of "hold" behavior is useful
	in modeling various serialization situations. 

2007-12-13  Brian Kahne  <bkahne@freescale.com>

	* Modified uADLMain.C so that exceptions are caught at the
	top-level and displayed, rather than being allowed to propagate
	and terminating the program with an abort.

	* A uADL model will now create a default output file if one is not
	specified, rather than issuing an error.  This brings its
	interface more into line with ADL's behavior.

2007-12-12  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed uADL safe mode branch target EA alias problem.  Now a pipeline
	flush event must occur before the next non-sleculative instruction is
	issued.  Added a new regression test bt_alias.dat.

2007-12-12  Brian Kahne  <bkahne@freescale.com>

	* Added an is_branch() predicate to InstrBase.  This returns a
	BranchType enum, which describes if something is a branch, and if
	so, if it's conditional or unconditional.  This is done simply by
	seeing if an instruction targets the next-instruction-address
	register and if so, if the update is conditional.

	* Initial support for partial read support has been added.  What
	this means is that we now track masks for what portions of
	registers/register-files are read or written, if these can be
	statically determined.  This means accesses to slices and fields,
	including indexed fields.  If we can statically determine the bits
	involved, then we set the appropriate bits in the mask that's part
	of the UsedReg structure.  This information now appears in
	adl-dump's output.  No changes have yet been made to the ISS
	generator.

	The basic idea behind updating the mask is that we only use it if
	a statically-determinable partial access is made.  Thus, the mask
	is cleared if we get an access to the entire register, or a
	portion which can't be statically determined, e.g. a slice
	involving non-constant expressions or an indexed register field
	access with a non-constant expression.
	
2007-12-12  Zigu Haras  <zigu.haras@freescale.com>

	* Fixed minor bugs in ascii flow.

2007-12-11  Hangsheng Wang  <hangshen@freescale.com>

	* Fixed a uADL safe mode branch prediction EA alias bug.  This bug
	caused zen650 randon test N38406 to fail.  Added a new regression test
	bp_alias.dat.  Note that this bug still exists for non-safe mode.

	* Fixed a uADL safe mode instruction fetch bug.  Now uADL always fetches
	directly from main memory under safe mode.  This bug caused zen650 
	random test F10475 to fail.  Added a new regression test
	safe_mode_fetch.dat.

2007-12-11  Brian Kahne  <bkahne@freescale.com>

	* Fixed a uADL/transactional ISS bug:  When flushing the pending
	queue, we also needed to flush the instruction-fetch list.  Not
	doing so meant that there were situations where old data could be
	used in a log.  For example, if there were ea aliasing between an
	exception handler page and a user-mode page, then prefetching on
	the rfi would result in extra stuff in the instruction-fetch
	list.  This would then be used, erroneously, once the rfi had
	executed.  We now flush this list, so that the new ea will be
	used.  Added in 132.dat to test this.

2007-12-10  Zigu Haras  <zigu.haras@freescale.com>

	* Rewritten the ADL commit mechanism for parallel_execution architectures to use
	a static memory pool instead of the old new/delete

	* uADL now support a register aliasing to several registers. This feature is supported
	for registers and sparse register-files, but not for regular register files.

2007-12-07  Brian Kahne  <bkahne@freescale.com>

	* I had to add -fno-inline to get the sc3400_arch model to compile
	with -O3 on 64-bit.  Therefore, if your'e doing performance
	testing on this model, re-compile using adl2iss on a machine with
	*lots* of memory.

2007-12-06  Sergey Khristo  <b08077@freescale.com>

	* Assembler: now we reject expressions having regnames when validating operands.
	The reason is that StarCore hase syntaxes of the form *(%f+%f)* that can be accidentally recognized
	as and expression. Only expressions of the form *regname +/- smth* or *smth +/+ regname* are rejected.

	* Bug in assembler: we did not do bounds check on register instruction fields.

2007-12-06  Sergey Khristo  <b08077@freescale.com>

	* Instruction operands logging is now off by default. In order to enable it the option 
	*--log-instr-args* should be used in *make-iss* and *adl2iss*.	

2007-12-06  Sergey Khristo  <b08077@freescale.com>

	* Fixed two minor bugs in assembler: removed alphamumerical characters from operand delimter
	in regex, this allows to use any charactare the in format string. Added plus sign to the 
	excludes of operands referencing to a register file.
	
	* Fixed bug in instruction table generator, sometimes I did not checked contention of instructions
	that and got segfault.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.1.0 (v1_1_0) on Linux (lb32001) on 12/5/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.1.0 (v1_1_0) on Linux (lb0172) on 12/5/2007 ==

2007-12-04  Brian Kahne  <bkahne@freescale.com>

	** The ADL front-end now propagates constant parameters and
	evaluates conditionals where it can, in order to better determine
	source and target resources for instructions.  This means that an
	if-statement within a helper function, which depends upon a
	parameters value, will be evaluated if the helper is called with a
	constant argumeent.

	* The above required an implementation change for helper function
	processing.  Helpers are now processed recursively by
	instructions, without saving any of their data, since each such
	processing is dependent upon the particular call.  We set
	arguments into VarWalker at the time of the call, then evaluate.
	Thus, there's no concept of storing the fact that something is a
	'parm' now (when processing within an instruction).  Instead, we
	propagate forward the values, then evaluate conditionals within
	the various translation functions.

	Switch processing is somewhat tricky because of how flexible the
	syntax is.  Refer to the comments within VarWalker.C for more
	information about that.
	
2007-12-03  Brian Kahne  <bkahne@freescale.com>

	** Helper functions are now automatically generated for getting
	and setting bits in <b>bits</b> objects which correspond to fields
	in registers defined within a core.

	The prototypes for non-indexed register and register-file fields are::

	<pre>
	// Extract bits corresponding to <field> from x and return the value.
	bits<field-width> getfield_<name>_<field>( const bits<reg-width> &x );

	// Set the bits corresponding to <field> in x and return this new value.
	bits<reg-width> setfield_<name>_<field>( bits<reg-width> x, const bits<field-width &y);
	</pre>

	The prototypes for indexed register and register-file fields are::

	<pre>
	// Extract bits corresponding to <field> from x and return the value.
	bits<field-width> getfield_<name>_<field>( const bits<reg-width> &x, unsigned index );

	// Set the bits corresponding to <field> in x and return this new value.
	bits<reg-width> setfield_<name>_<field>( bits<reg-width> x,unsigned index, const bits<field-width &y);
	</pre>

	So, for example, given a register definition such as:

	<pre>
	define (reg=FOO) {
          define (field=A) { bits = (0,15); };
          define (field=B) { bits = (16,32); };
        }	
	</pre>

	One could then manipulate write code such as:

	<pre>
	action = {
          ...
	  bits<32> x = ... ;
	  ...
	  var y = getfield_FOO_A(x);

	  y = setfield_FOO_B(x,0x1234);
	  ...
	};
	</pre>

	** Added a new attribute for register:  <b>no_mmu_control</b>

	This may be used in order to signal to the simulator generator
	that a given register should not be considered a control register
	for the functioning of the MMU, and thus a change in value should
	not invalidate the internal translation cache.  This is only
	relevant for systems which have an MMU and which have one or more
	registers which are used to convey information to the MMU, but
	where the value does not actually affect the translation process.
	For example, a register which conveys <i>how</i> an exception should be
	raised, but does not affect <i>whether</i> the exception should be
	raised.

2007-12-03  Sergey Khristo  <b08077@freescale.com>

	* Updated StarCore model in designs.

2007-11-29  Brian Kahne  <bkahne@freescale.com>

	* Instructions and helpers which call a translation function are
	now regarded as accessing memory, since they're using the memory
	hierarchy.  Added fe/inst89.adl to check this.  This is an issue
	when there are memory communication registers, since an exception
	might be thrown during the translation, which might need to look
	at these communication registers.

2007-11-28  Brian Kahne  <bkahne@freescale.com>

	* We now detect registers which act as communication links between
	instructions and the memory hierarchy and we virtualize these in a
	transactional ISS.  So, for example, if an instruction sets a
	register X, then a permission checking function in an MMU lookup
	tests the value of X, it will read this value from the current
	instruction's packet, rather than architected state.  Otherwise,
	the value would be wrong, since the instruction has not yet
	committed its values.

	To accomplish the above, the following was done:

	1.  MMU functions are stored using HelperInfo objects and their
	sources and targets are tracked by the front-end.

	2.  We scan all MMU functions for registers used as sources.  We
	then scan all memory instructions for target registers and look at
	the intersection.  Anything in that intersection is considered a
	communication register.

	3.  The MMU helper functions, during translation, have these comm
	registers translated to use the instruction packet.  All others
	use architected state.

	4.  Slots are assigned to these comm registers in a consistent
	manner for all memory instructions.  If a register is not used as
	a target by an instruction, then it is set to be a source, so that
	a value will be read from the architecture.

	5.  The exec function of an instruction packet first sets a member
	variable in the core to point to the packet, then calls the
	instruction exec function.  We no longer pass the packet
	everywhere as a local variable.
	
2007-11-26  Brian Kahne  <bkahne@freescale.com>

	* Fixed an issue with tracediff --instr-timing-offset option.  We
	were ignoring timing up to the specified point, but we weren't
	synchronizing when we got to that point.  Fixed this, then
	modified the regressions to test this.

2007-11-26  Zigu Haras  <zigu.haras@freescale.com>

	* Fixed bug in uADL - do not allow read-after-write latency larger then 1 for registers

	* Fixed bug in assembler - letters should not appear in regexp exclude expression ([^  ]).

	* Fixed bug in ascii flow - sometimes a field's necessary width was miscalculated.

	* Fixed bug in prefetch buffer implementation.
	

2007-11-26  Sergey Khristo  <b08077@freescale.com>

	* Fixed bugs in disassembler: for multilple instruction tables that were configured to be used together, 
	sometimes we write decode miss not only for the last table.

2007-11-20  Zigu Haras  <zigu.haras@freescale.com>

	* Add optional read after write latency to register files. Default is 0.

2007-11-20  Sergey Khristo  <b08077@freescale.com>

	* Fixed bug in assembler: during write_insn, pointer to the source
	code was changed by gas, hence we could not check correctly that a packet was 
	was closed and that led to misterous errors.

	* Assembler: changed the way how priority of instructions with the same name is
        computed: instructions with longer format strings are considered better. It 
	prevents assembler from creating unneeded undefined symbols when format string
	contained elements that gas understands as relocations: syntax = ("add sp,%f",FFF").
        
	* Assembler always produces prefix for prefix encodings.
	
	* Updated database generator alogn with adl.rnc.

2007-11-16  Brian Kahne  <bkahne@freescale.com>

	* Fixed another transactional-ISS logging bug: The prior fix
	didn't work for when an instruction itself wrapped around memory.
	It turned out to be simpler to go back to the old mechanism of
	directly removing items from the instruction-fetch list, and then
	just hack in an exception that allows a wrap to occur once, if the
	ea is 0.

2007-11-15  Brian Kahne  <bkahne@freescale.com>

	* Fixed another transactional-ISS logging bug: In the last bug, we
	changed from deleting consecutive duplicates to deleting
	consecutive instruction-reads whose EAs were <= the current ea.
	This, however, doesn't work when you wrap around the top of
	memory.  So, the new system doesn't delete the items, but puts
	them into a discard list, then puts the discard list back into the
	instruction-read queue.  They'll be deleted the next-time around
	when we delete items at the beginning of the list which are out of
	range.

2007-11-14  Brian Kahne  <bkahne@freescale.com>

	** A flag has been added to the trace comparison tool
	<b>tracediff</b>: <i>--instr-timing-offset=&lt int &gt</i>

	This allows the user to specify an instruction id at which to
	start comparing time values.  All timing information before this
	value is ignored.

	* Fixed another transactional-ISS logging bug: Rather than just
	deleting consecutive duplicates when grabbing instruction-read
	data, we have to delete items which are possibly less than the
	current ea.
	
	* Fixed a bug with uADL/transactional-ISS logging.  uADL will try
	to decode and dispatch instructions when it can, sometimes before
	it has a full 4-bytes of data, e.g. a VLE instruction, where it
	has two bytes left in its buffer.  Previously, uADL would try and
	decode, then see if the decode succeeded, and if the size of the
	returned instruction was equal to the number of bytes it had.

	However, this messes up the logging, as an attempted decode can
	use up instruction-read information, which then won't be available
	for the real decode.  To fix this, the core's decode function now
	takes a size parameter, supplied by uADL.  If the size of a
	decoded instruction is > than the size supplied, we treat this as
	a decode problem and return 0.

	Add in127.dat to test this: The srw instruction can be decoded to
	a cmp instruction if only the first two bytes are examined.
	
2007-11-13  Sergey Khristo  <b08077@freescale.com>
		
	* Added option '-d' to the generated assembler which turns on
	messages about undefined symbols. This can be used for debugging
	syntax definitions.
	
2007-11-13  Zigu Haras  <zigu.haras@freescale.com>
	
	* Fixed a minor bug in instruction operands logging.
	
2007-11-12  Hangsheng Wang  <hangshen@freescale.com>

	* Implemented a new predicate to allow an instruction to query
	whether certain classes of instructions are at certain pipeline
	stages.

	* Changed FlagManager from using an assignment interface to using
	a resource allocate/release interface.

2007-11-09  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with transactional-ISS logging: If we over-fetched
	for instruction memory reads, then we were putting back the first
	object read, rather than the last, which confused the next logging
	operation, since it didn't line up with the last fetch.  Fixed
	this by storing a pointer to the last item.  Added
	run_DLX_VLE/in5.dat to tests/uadl to test this.

	* Modified the exception handling logic so that, for a
	transactional ISS, exception data is stored within an ExData
	object.  A performance model can get exception data by calling
	getExceptionData, then call GenException to process it.  Note that
	ExHandle needs to have destroy() called to deallocate its stuff,
	since it's no tied to a destructor b/c I wanted to be able to pass
	it by value to other functions.

	** Exception definitions have been expanded to allow users to be
	able to pass data from the point at which an exception is raised
	to where it is handled.  This allows the user to avoid having to
	modify registers before the exception is raised, which can be
	problematic when using an ADL description in a pipeline model with
	uADL, since exceptions might be squashed if they are associated
	with a speculative operation.  Please refer to the <a
	href="http://compass.freescale.net/go/adlsite/adl-language-reference.html">the
	ADL reference manual</a> for more details.

	* The exception message passing feature was added by adding a
	GenericField-derived object hash to Exception in the data model,
	so all of that was pretty simple to add.  On the back-end, we
	simply create the appropriate structs in the same way that we
	create the event-bus structs, then add them as member variables.
	For a normal ISS, only one exception data element exists, so
	multiple exceptions of the same type overwrite each other until an
	exception is handled.

	For a transactional ISS, the instruction packet now has an extra
	pointer which contains exception information.  This class,
	ExItems, contains an array of pointers to ExBase objects.  Each of
	the exception data structures is derived from this class.  Two
	version of GenException exist: The static one, which uses the data
	structures in the core class, and one which takes an ExItems
	pointer.  The array of objects in ExItems is indexed by the
	exception enum.  This object is allocated only when an exception
	is taken (if necessary), then the appropriate exception-specific
	data structure is allocated only if necessary.  The ExItems object
	is deallocated when the packet is freed.
	
2007-11-07  Brian Kahne  <bkahne@freescale.com>

	* iss/GenExceptions.C:  I split out the exception handling code
	into its own function, as GenInstrs.C has gotten pretty big.

	* I renamed adl-notes.rst to adl-language-reference.rst so that
	people looking in the doc directory will have a better idea of
	what to look for for an overview of the language.

	** The user may now remove an arbitrary key from a <b>define</b>
	or <b>defmod</b> block using the remove command:

	<pre>
	define (...) {
	  remove &lt key-name &gt;
	}
	</pre>

	For example, suppose a register is defined with an offset:

	<pre>
	define(reg=foo) {
	   ...
	   offset=32;
	   ...
	}
	</pre>

	This can be removed using a <b>defmod</b>:

	<pre>
	defmod(reg=foo) {
	  remove offset;
	}
	</pre>

	* The above feature was implemented by catching a special
	declaration for 'remove' in AdlWalker, and adding these keys to a
	hash-set in each Handler.  In Handlers.C, process_named_handlers,
	process_instr_handlers, and process_unnamed_handlers all call
	check_for_remove_keys, which iterates backwards through the given
	list, checking for removes.  The backwards iteration is so that a
	remove only affects that item and any prior.

	When a non-empty remove set is found, we then iterate backwards
	through the remaining list, calling handle_removes() on each
	Handler, which then goes through its list of keys and removes any
	that match.  This is technically O(N^2) in the worst case, but I
	don't think that there will be a lot of remove keys, so I don't
	think that performance will be an issue.  The advantage of this
	approach is that the keys are removed before any processing is
	done, so that each class in the data model doesn't need to worry
	about how to remove an item- it just never sees the item in the
	first place.
	
2007-11-07  Sergey Khristo  <b08077@freescale.com>
	
	** Added support for instruction field aliases. This allows the
	user to define different syntax strings for the same instruction
	field. For now, this can only be used in instruction syntax
	definitions.

	** Added the <b>symbol_chars</b> key to the assembler
	configuration block (equivalent of <b>tc_symbol_chars</b> in
	<i>GAS</i>). This is the list of characters that may appear in
	operands in addition to the alphanumeric characters.  This affects
	the way in which the assembler removes whitespace before such
	characters.

	* Fixed bug for instruction aliases in little-endian bit
	ordering. Opcode mask and opcode itself were not computed correct.
	
2007-11-06  Brian Kahne  <bkahne@freescale.com>

	** The ADL source/target tracking has now been extended to be able
	to process basic loops, in order to understand when a range of
	elements in a register-file is being accessed.  So, for example, a
	PowerPC lmw instruction is now recognized as accessing GPRs RA
	through 31.  This should allow a uADL model to avoid unnecessary
	stalls, since it now has a better idea of what the true operands
	are, rather than thinking that the complete set of GPRs is a
	source or target.

2007-11-04  Zigu Haras  <zigu.haras@freescale.com>

	* Add a log_instr_args() function to the logging API, currently impleneted
	in the tcl scripting interface. It prints the sourses and targets of the
	instruction along its name anad opcode.

2007-11-01  Brian Kahne  <bkahne@freescale.com>

	* Added a log_flush_pending() function to the logging API, for use
	by transactional ISSs to flush any pending logging data.  This is
	wrapped by a transactional ISS with a function of the same name,
	which guards the call based upon whether tracing is enabled.
	Thus, a performance model should call <node>::log_flush_pending().

	* Renamed booke.adl to power.adl and removed various confidential
	stuff so that we can publicly release generic32.adl and a new
	model, generic32-cache.adl, which just adds a simple
	split-L1/unified-L2 cache to the 32-bit processor.
	
2007-10-29  Brian Kahne  <bkahne@freescale.com>

	** Added the <i>exclude_targets</i> key to the <b>instr</b> define
	block.  This is equivalen to <i>exclude_sources</i>, except that
	it applies to target resources.

	** Both <i>exclude_sources</i> and <i>exclude_targets</i> may now
	refer to resources found in helper functions.

2007-10-29  Sergey Khristo  <b08077@freescale.com>

	* Added option "--build-locally" to adl2asm, that allow user to build assebler without having
	binutils source code. For some reason if used in tests/iss/Makefile.am it breaks distcheck, 
	have to be resolved in the future. Also added option "--archsuffix=string" to configure, needed for
	CAD installation.

	** Added option <b>--strict</b> to <i>adl2asm</i>, <i>adl2iss</i>
	and <i>adl-dump</i> that turns on strict warning output.  For now,
	these are only warnings about suspicious instruction encoding.

2007-10-28  Sergey Khristo  <b08077@freescale.com>

	** Added flag "explicit_regs" to the assembler configuration block. When set one have to write explicitly 
	register file prefix in assembly programs. Default is false (PowerPC). This feature is useful when instruction 
	can be recognized only by its operands, example: StarCore instructions 'move.l #$1,r0' and 'move.l #$1,d0".

	* Added character '#' to symbol_chars in assembler, allowing to use this character in syntax.

2007-10-26  Brian Kahne  <bkahne@freescale.com>

	** Updated source/target tracking in order to handle the situation
	where a register-file access in a helper function uses a
	parameter as an index.  We track the value of that parameter so
	that if an instruction calls the helper with a parameter whose
	value is constant or is an instruction field, we can still treat
	the access as a single, known register.

	For example:

	<pre>
	    define (instr=x) {
	      action = {
	      	    ...
		    foo(RT)
		    ...
              }
	    }


	    void foo(int x) {
              GPR(x) = ... ;
	    }
	</pre>

	In the example above, assuming that <i>RT</i> is an instruction
	field, then <i>foo's</i> access of the GPR register file will be
	tied to the value of RT, rather than being treated as unknown, and
	thus requiring the entire register file to be copied.

	* Helper functions in a transactional ISS no longer have a fixed
	slot assignment.  Rather, indices for slots are passed in as extra
	parameters after the instruction packet.

	For example, a function such as:

	<pre>
	void foo(int x) {
	  GPR(x) = ...;
	}
	</pre>

	is transformed into something like:

	<pre>
	void foo(InstrPacket *instr, int _sym123, int x) {
	  instr->slot(_sym123) = ...;
	}
	</pre>

	if we can determine that the usage is fixed, i.e. the caller's use
	of the register can be matched to a constant value or an
	instruction field.

2007-10-26  Hangsheng Wang  <hangshen@freescale.com>
	* Implemented a more efficient branch resolution algorithm for the safe
	mode, so the timing of safe mode is closer to that of real mode.

	* Bug fixed: an instruction that triggers exceptions now releases
	resources at right stages.

2007-10-24  Sergey Khristo  <b08077@freescale.com>

        * Fixed bug in disassembler: instruction field larger then 32 bit had a shift larger
          then type width.

        * In assembler: when many instructions have the same mnemonic priority sorting is first
        done according to the instrucion width, giving priority to short instructions.

2007-10-22  Hangsheng Wang  <hangshen@freescale.com>
	* Added support for unknown instructions/decode misses.  Added a
	forceCommitted option to properly retire an unknown instruction in safe
	mode.

2007-10-19  Hangsheng Wang  <hangshen@freescale.com>
	* uADL now imports all ADL register (file)s.  Register (file)
	definitions are no longer necessary in the .uadl file.

	* Bug fixed: in uADL safe mode, the last-level memory should always be
	read-only.

2007-10-18  Zigu Haras  <zigu.haras@freescale.com>

	* Fixed bug in nested fields getters. The encapsulating field getter is called when a constrained nested field exists.

	* Fixed bug in prefix field setters.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.2 (v1_0_2) on Linux (lb32001) on 10/17/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.2 (v1_0_2) on Linux (lb32001) on 10/17/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.2 (v1_0_2) on Linux (lb0170) on 10/17/2007 ==

2007-10-17  Hangsheng Wang  <hangshen@freescale.com>

	* uADL now honors ADL write_through predicates for caches.

2007-10-16  Brian Kahne  <bkahne@freescale.com>

	** The <b>tracediff</b> time comparison algorithm is now slightly
	different: We compare issue and completion times independently,
	assuming that they exist in the expects file and the user has not
	specified that they should be ignored (<i>--ignore-timing</i>).

	Each expected-file time is compared against the corresponding
	found-file time.  If there is an error, then this error is carried
	through to the next instruction as a time adjustment.  Thus, if
	one instruction is one cycle off, this one-cycle adjustment will
	propagate forwards, so that lots of erroneous errors will not be
	reported.

	The user may also specify an error threshold
	(<i>--max-delta=percentage</i>).  If the percent difference of the
	cumulative error of each instruction comparison against the total
	time of the test exceeds this threshold, then the test will fail.
	Otherwise, a warning will be issued.

	The user may specify a minimum time-difference below which, on a
	failing test, errors will not be reported
	(<i>--min-time-error=cycles</i>).  For example, on a failing test,
	if a value of 2 is specified, then any instructions which differ
	by only a single clock cycle will not be reported.

2007-10-16  Sergey Khristo  <b08077@freescale.com>

	* Added warning message for possible instruction encoding contention.

2007-10-14  Zigu Haras  <zigu.haras@freescale.com>

	* Fixed a bug in PrefetchBuffer of incorrect start  address update.

	* Fixed a bug in endianness handling in ascii flow.

	** Added <b>parm</b> to assembler configuration block. Defines
	assembler parameters, integer or label types, used to modify the
	assembler behaviour by setting and queurying their vlaue in the
	assembler code. Label parameters can store targets of change of
	flow instrutions or the current label, denoted by '*'.

	** Added <b>post_packet_asm</b> hook is used in parallel_execution
	architecture.  This hook is invoked after all packet instrcution
	are recognized by the assembler but before any instruction
	encoding is written to the assembler. The hook can access prefix
	variables and assembler parameters.

	** Added support for <b>assembler</b> code to instruction. The
	code is executed by the assembler after an instruction was
	recognized. It can access the instructions fields by their names,
	prefix variables and assembler parameters.

2007-10-12  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the transactional ISS: On writes, we weren't
	properly logging effective addresses because we were setting the
	ea value in the translation functor.  For misaligned writes, the
	functor is called before any actual writes, so the first ea was
	getting clobbered.  Fixed this by adding 'ea' as a parameter for
	the cache functor API.  Added tdriver1/in2 with mem-logging to
	test this.

	* Re-did how we handle info about sources and targets.  For
	register files, we now just have a Ptree* to store an expression.
	This expression can only contain constants and/or instruction
	fields (possibly with method calls, e.g. type conversions).  This
	way, we can now handle something like GPR(RT+8) as a single slot.
	Added fe/inst80.adl to test this.
	
2007-10-10  Brian Kahne  <bkahne@freescale.com>

	* Fixed a tdriver bug: With just an L1, evictions didn't work
	correctly: Rather than evicting a line, we were reading from
	memory and thus never moving dirty data back to memory.

	* Transactional ISS bug: When processing targets, we weren't
	propagating mutable values such as partial-write.  So, if we came
	across a target that was a full write, then came across the same
	target as a partial-write, we were ignoring that entry.  Updated
	UsageInfo::update to do an update-mutables pass.  Added
	fe/inst81.adl to test this.

	* Transactional ISS bug:  The slot_used() function only set the
	mask to 1 if used, which meant that if we had a partial write
	combined with a complete write, when we went to update the value
	(if a complete write was done), then the mask was wrong.  Fixed
	this by having slot_used() completely set the mask.

2007-10-09  Brian Kahne  <bkahne@freescale.com>

	* Fixed a UVP logging bug with transactional ISSs: We weren't
	interleaving MMU translations with instruction fetches, so that ta
	cards for misaligned instructions were not correct.  Fixed this by
	properly interleaving the translations in TransLoggingMgr.C.

	* Fixed another transactional-ISS bug: When tracking
	conditionally-updated registers, we called slot_used() in order to
	return a reference to the register item to update.  However, this
	immediately set the used flag, while the update might not occur
	if, for example, the update is coming from memory and memory
	generated an exception.  Also, we have to mark any instruction
	that accesses memory (assuming the model has exceptions) as having
	conditional updates, since it's a good guess that the memory may
	generate exceptions.  Added in28.dat/tdriver4 to test this.

	* Fixed a bug in the transactional ISS: An exception which ocurred
	during a commit, such as something thrown by a register write
	hook, was not being processed, causing the simulation to abort.
	Added a try/catch block around commit to handle this.  Added
	in85/tdriver2 to check this.  Note: Currently there's a subtle
	difference between transactional and normal ISS.  On a normal ISS,
	an exception thrown on a register-write will cause the post-exec
	hook to be skipped.  On a transactional ISS, the post-exec still
	occurs.  I don't know how significant this difference will be in
	practice- it might be something that we'll have to revisit in the
	future.

	* Fixed a bug in the transactional logging:  We weren't properly
	clearing the pending queue (the tail wasn't being cleared), so
	when committing from the pending queue, e.g. an instruction
	storage interrupt was generated, so no instruction packet was
	created), we weren't properly handling the next instruction- it
	ended up being merged with the prior data.

	* Fixed a bug in tdriver: We weren't committing exceptions
	properly which were generated on an instruction fetch- we didn't
	handle the prException return type from prefetch().  We now handle
	that by calling commit_exceptions(), a new function in the
	transactional ISS which handles an exception w/o an instruction
	packet and then commits any logging data.  Added in94.uvp to
	tdriver4 to test this.

2007-10-08  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug in tdriver: We weren't committing registers before
	handling exceptions, so a situation where an instruction updates a
	register and then an exception handler uses that value would not
	work.  Fixed this and then modified mod3.adl to update ESR using a
	temporary register named tmpESR, in order to test this.

2007-10-05  Hangsheng Wang  <hangshen@freescale.com>

	** Added a new mandatory parameter <b>data_width</b> to uADL Memory and
	Cache model.  This parameters specifies the data bus bit width of
	the model and is used to determine if a memory access should be
	split.  It currently can only take two values: 32 or 64.

2007-10-05  Brian Kahne  <bkahne@freescale.com>

	** Added support for a new key in the <b>instr</b> define block,
	<b>exclude_sources</b>, which allows the user to explicitly
	exclude register or register-file elements from being considered
	as a source.  This is primarily useful when generating a
	transactional ISS: The ADL parser will automatically determine
	source and target resources, but may be overly conservative.
	Refer to the ADL reference manual for more information about this
	key.

2007-10-04  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the transactional-ISS: If we had a
	partial-write target, which was then used as a source, we need to
	convert that to a source.  Normally, a source after a target means
	we don't make it a source, since it would have a new value.  In
	this case, we might update only a portion of the register, whereas
	we might then use the entire value, so it must be regarded as a
	source.  Added fe/inst77.adl to test this.

2007-10-03  Brian Kahne  <bkahne@freescale.com>

	* The transactional-ISS memory interface is now slightly
	different: set_memory_result and the version of decode which takes
	an explicit page/offset pointer now take a read_offset value which
	describes, for a split transaction, how much data is in the first
	read.  For example, a misaligned load of a word at address 0x1002
	would normally take a read-offset value os 2 (2 bytes of data in
	the first word, 2 bytes in the second).  For some uses, though,
	such as a pipeline model, data may be re-ordered such that the
	first transaction returns no data and the second returns all of
	the data.  In that case, a read_offset of 0 would be used.

	* Fixed a bug with 16-bit stores.  If using a cache, we were still
	using the byte_writeN routines, which required aligned addresses,
	so a 16-bit store that crossed a word boundary didn't write the
	first byte to memory.  Fixed this by having the cache use the
	_unaligned routines just as memory did.  Created in122.dat on
	mod18 to test this.

2007-10-01  Brian Kahne  <bkahne@freescale.com>

	** A new system-call interface has been added.  Rather than being
	based upon a special memory address, this uses a function-based
	API which must be triggered by user action code.  This change was
	implemented in order to optimize the memory hierarchy for the
	common case.  Please refer to <a
	href="http://compass.freescale.net/go/adlsite/adl-notes.html">the
	ADL reference manual</a> for details about the new interface.

	As a result, the <b>--porthole-address</b> option is no longer
	supported and the enable flag is now <b>--syscall-enabled</b>.
	The enable option works for both turning on or off support during
	generation (via <i>adl2iss</i>) and when running the simulator.

	* Added an 'annotate' system call which allows target code to add
	a trace message (in a DAT, this shows up as an A card).  The
	arguments for the system call are:

		  int annotate(int level,const char *buf);

	Refer to designs/syscall4.c for example usage.
	
2007-09-30  Sergey Khristo  <b08077@freescale.com>

	* Fixed label resolution in assembler when queue_size is larger when one.

2007-09-28  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with source/target tracking: Currently, if we
	encounter a source that's already a target, then we ignore it as a
	source, since we consider that its value will be new and thus
	doesn't need to be read as an operand.  However, if we come across
	a case where we have a conditional, then each branch must be
	scanned independently, since if in the 'if' side, a register is a
	target, then if we scan the 'else' side and it's a source, we must
	record it as such; the 'if' side must be ignored at that point.

	Fixed this by making usage-info a stack in VarWalker:  When we
	translate an if, we push on a new item for each side, then merge
	them back when done.  Added fe/inst76.dat to test this.

	Added DLX_vle.uadl/mod2.adl to test this using an actual uADL
	model.

	* Found a bug with tracing:  As we remove instruction-read items
	from the queue of instruction-fetch items, we might have to clone
	and then push back an item if we overgrab.  DLX_vle.uadl/mod2.adl
	tests this.

	* Fixed a bug with how we track translations in a transactional
	ISS: We can't rely upon a translation per instruction, since we
	might be fetching a number of instructions up-front.  Instead, we
	ignore instruction-fetch translations when they occur, then
	perform a translation for each instruction-read on a
	per-instruction basis.
	
2007-09-26  Brian Kahne  <bkahne@freescale.com>

	* We had a bug with slice writes in a transactional ISS: If the
	slice-write used bit indices which implied an offset, e.g. writing
	to bit 52 with a 32-bit offset, then we wouldn't set the mask
	correctly, resulting in an incorrect result.  Fixed this by
	mod'ing the bit indices and then just directly setting the slot
	value and slot mask.  Added in120.dat with tdriver2 to test this.

	* The ta value or a RES card in a UVP produced by a transactional
	ISS was incorrect because the logging of the MMU translation was
	being queued up and then never used.  Fixed this by adding the
	log_direct() function, which, if appropriate, turns of queueing of
	logging elements.  This is only applicable for the transactional
	ISS, but is stubbed in the non-transactional logging manager for
	compatibility.  In this mode, the add_event() function just
	directly broadcasts the log event.  Added in78.uvp with tdriver4
	to test this.

2007-09-24  Sergey Khristo  <b08077@freescale.com>

	* Implemented new algorithm for the decoding tree construction. It works as follows:
	For every list of instructions we try to find common opcode bits. These bits
	define the mask of the current node. Then we group instructions according to 
	the values of the opcode on this mask and repeat it recursively for each new group
       	until only one instruction is left.
	
	* Added new regressions for SC3400.

	* CDCpp58692: Simple (not nested) tabled pseudo instruction fields did not work. 
	Modified mod40.adl to test it.

	* Added md_cleanup hook to adl-asm-impl.c. It flushes assembler queue when the file is completely
	read.
	
       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.1 (v1_0_1) on Linux (lb32001) on 9/23/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.1 (v1_0_1) on Linux (lb0170) on 9/23/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.1 (v1_0_1) on Linux (lb32001) on 9/23/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.1 (v1_0_1) on Linux (lb0170) on 9/23/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.1 (v1_0_1) on Linux (lb0170) on 9/23/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.1 (v1_0_1) on Linux (lb32001) on 9/23/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.1 (v1_0_1) on Linux (lb32001) on 9/23/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.1 (v1_0_1) on Linux (lb0170) on 9/23/2007 ==

2007-09-23  Zigu Haras  <zigu.haras@freescale.com>

		** Added support for syntax in instruction fields. This feature
	allows the handling of  instruction fields that are encoded by several 
	assembler terms. The result is a two-layer syntax - instruction
	syntax indicating the field terms and the instruction field syntax
	for interpreting it.For example ::

	<pre>
	define(instr = move) {

          sytnax = ("%i %f,%f",RA,RT);		
	}

	define(instrfield=RA) {
	  define(instrfield=R1) {
	     fields=(...);
	  }
	  define(instrfield=R2) {
	     fields=(...);	
	  }
	  define(instrfield=R3) {
	     fields=(...);
	  }
	  define(instrfield=R4) {
	     fields=(...);
	  }
	  syntax = ("%f:%f:%f:%f",R1,R2,R3,R4);
	}
	</pre>

        Neested instruction fields in  the syntax have their 'fields' key set,i.e., 
	these are'output' fields. The syntax ::

	syntax = ("%i reverse(%f),%f",RA,RT);

	denotes all quadtuples R1:R2:R3:R4 such that R4:R3:R2:R1 are encoded by RA.
	The syntax ::

	syntax = ("%i symmetric(%f),%f",RA,RT);

	denotes  quadtuple encoded by RA or by reversed RA.

	
	** Added support for ADL internally generated encoding. This feature  allows instruction
	definition  without encoding for ISA exploration. The ISS based on this encoding,
	together with with assembler generated bu the same encoding, allow the 
	writing of programs before any encoding is defined. 
	This feature is particularly useful in architectures with highly complex encoding, 
        such as StarCore. Setting one instruction width to 'variable' indicates that 
	any and well all other instruction encodings should be ignored 
	and that ADL should generate encoding internally.

	** Packet size is not tested against parallel execution in prefix architecture.
	
2007-09-19  Brian Kahne  <bkahne@freescale.com>

	* The transactional ISS now queries for memory results using a
	virtual function called getMemoryData32().  A default
	implementation exists which queries the architected memory
	hierarchy, but uADL derives from the ISS and implements a version
	which queries the micro-architectural memory hierarchy.

	The regression has not yet been changed b/c there are still some
	function issues with this new mechanism.

2007-09-18  Brian Kahne  <bkahne@freescale.com>

	** The ELF reader now supports address translation via the program
	headers.  This option may be enabled by using the <b>--use-pa</b>
	option.  If enabled, the logical addresses contained within the
	sections are translated to physical addresses using the segment
	information contained within the program headers.

	* The above feature is tested with in118.dat/in118.c/in118.elf
	which uses mod11.  The ElfReader class was refactored to
	centralize address translation.  If using program headers to do
	address translation, the program header information is stored
	within a sorted vector so that a binary search can be used to look
	up the address.  Right now, we do a translation for each address,
	but this could be sped up by translating only once for a given
	segment.  However, performance doesn't seem to be too big of an
	issue right now.

2007-09-17  Brian Kahne  <bkahne@freescale.com>

	* The JIT now properly handles C++ exceptions.  Exception handling
	in gcc is handled using DWARF code that resides in the .eh_frame
	section.  Each function in the program has a corresponding FDE
	(Frame Descriptor Entry) which describes how the stack frame
	should be fixed up as an exception unwinds the stack.  Without
	this information, the gcc runtime will not allow an exception to
	pass through the stack.  Note that in addition to an FDE per
	function, there is a CIE (Common Information Entry) stored at the
	start of the .eh_frame section.  This stores information common to
	all FDEs, such as data encoding, etc.  For example, x86_64 uses
	32-bit pointers in the .eh_frame section since we're using the
	small memory model and thus code pointers are always 32-bit.

	To handle exceptions, ElfScanner first reads the .eh_frame section
	and applies any relocations, in order to get proper start/range
	addresses for each FDE.  It then associates each instruction
	handler with its FDE and then extracts the used, unique FDEs for
	later use.

	When creating the JIT model, we write out the eh-frame section as
	a static array.  Each instruction translation function contains
	data to point to the proper FDE in this section.  When a page of
	target code is translated, in addition to the existing process of
	copying over host code to the code page, we now copy over the FDE
	to a block of memory pointed to by CodePage::_eh, and fix it up
	with the start address of the corresponding host code just
	translated.  When the entire page has been translated, the
	CodePage::finalize method calls __register_frame, which registers
	the unwind information with GCC's runtime.  The result is that
	exceptions may now pass through the JIT page.

	Added in6.dat as a JIT test to test this.

2007-09-16  Sergey Khristo  <b08077@freescale.com>

	* Bug fix: split register fields for little endian bit order did not
	work.

	* Temporary fix for instruction table encoding problems that
	allows to build StarCore simulator -- will be replaced by the
	another algorithm soon.

2007-09-11  Hangsheng Wang  <hangshen@freescale.com>

	* uADL now supports disabled cache.  A disabled cache is regarded
	as a cache for which every read or write is a miss.

	* uADL cache now supports read/write-miss no-allocation properly.

2007-09-10  Brian Kahne  <bkahne@freescale.com>

	* Various JIT bug fixes and enhancements:

	1.  We were immediately returning true for a conditional branch
	when the NIA was updated, which meant that any logic after the NIA
	update, such as a link register update, was skipped.  We now
	simply set a flag to true and then return the value of that flag
	at the end of the instruction handler.

	2.  We weren't properly handling out-of-page branches.  During the
	fix-up process, the untaken side of the branch was being pointed
	to the next instruction, which was using _end as its offset.
	However, this isn't correct, because _end will point to the end of
	the page.  So, instead, we calculate the current index of the
	instruction in the _starts array, then add 1 and use that offset
	as the next-instruction target.  Added in117.dat to test this.

	3.  Added support for exceptions.  We had various minor issues
	with properly supporting exceptions, which were fixed.

	4.  Added support for invalid opcodes.  We now insert a handler
	which executes the user-specified decode-miss code.  Added
	in116.dat to test this behavior, as well as program interrupts.

	The five PowerStone benchmarks now pass, running on the JIT.
	Added these regressions to the designs regression suite.
	
2007-09-06  Brian Kahne  <bkahne@freescale.com>

	* Minor changes to BookE so that generic32 will run fast using the
	JIT.  It now runs sieve2.dat at almost the same speed as mod1.
	The main changes were:

	1.  Adding instruction field semantic information.
	
	2.  Simplifying the setCrField function.
	
	3.  For generic32, the mode() function simply returns a constant
	of 32, so that the compiler can fold out a lot of conditionals.

2007-09-05  Brian Kahne  <bkahne@freescale.com>

	* Modified how InstrTable works: Previously, we wouldn't re-encode
	instructions at the root level, so if a second instruction was
	added that had no commonality with a first instruction at the
	start, then we would fail.  Now, we'll re-encode.  Added
	fe/inst71.adl to test this.

2007-08-31  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with groups: Simply referencing a group to include
	it in another group didn't work because the homogeneity check was
	not working correctly.  Fixed this by removing the _first_item
	variable and simply using whatever's was pointed to by begin() as
	the initial type of the group.  Modified fe/groups1.adl to test
	this.

	* Fixed a bug with instruction encodings: We weren't detecting
	collisions properly if we were at the end of the list of opcode
	fields.  Fixed this by setting the initial value of 'okay' to
	false in InstrTable::add_to_next_node.  Various regressions were
	changed in order to support this modification, since there were
	lots of regressions that had collisions.  Added fe/inst70.adl to
	test this.

2007-08-30  Brian Kahne  <bkahne@freescale.com>

	* Modified SparseMemory so that it uses a 1024-entry direct mapped
	cache to cache frequently used pages.  This, combined with
	switching over to using the _unaligned versions of the write
	routines, allows sieve2.c to run on mod1 at >100 MHz (about 103
	MHz) using the sparse memory.  The block memory is still faster,
	but this means that we get good speed with the flexibility of a
	sparse memory.

2007-08-29  Sergey Khristo  <b08077@freescale.com>

	* Added support for assembler only instructions, these are instruction that
	can only access prefix fields and cannot have encoding, they only have meaning
	in ascii programs. In case this instruction change prefix field's value appropriate
	prefix will be put at the begining of the VLES.

2007-08-28  Brian Kahne  <bkahne@freescale.com>

	* Added support for page crossing to the JIT.  We handle this just
	like out-of-page branches: We put a trampoline at the end of a
	page which does a longjmp with a code of 2.  This is caught in the
	same location as where we handle out-of-page branches.  We then
	look up the next page and translate it if necessary, then
	overwrite the trampoline with a jump to the new page.  The jump is
	created using a function which just contains a tail call; this
	gets compiled to a jmpq instruction, so we don't have to mess
	around with assembly.

	Added in115.dat to test this feature.

2007-08-27  Brian Kahne  <bkahne@freescale.com>

	* Modified how scripting-events are triggered.  We used to just
	hash a Target, but that didn't allow us to set up an event that
	would trigger on any context within a core.  

	Now, events are stored in a hash by IssNode*, but then
	context-specific events are stored in a 2-d array, indexed by
	context id and context number.  When matching events, we first
	look for non-context-specific events, then we look to see if any
	context-specific events match against the state of the core.

	Added cli/c35.cli to test this feature.

	* Added support for pre-fetch, post-fetch, decode-miss,
	instruction-table watch and active watch functions to the
	documentation and database generation programs.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.0 (v1_0_0) on Linux (lb32001) on 8/27/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.0 (v1_0_0) on Linux (lb0170) on 8/27/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.0 (v1_0_0) on Linux (lb32001) on 8/27/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 1.0.0 (v1_0_0) on Linux (lb0170) on 8/27/2007 ==

2007-08-26  SERGEY KHRISTO  <b08077@freescale.com>

	* Added simple prefix assembler encodings, works as follows:
	post-asm hook changes prefix fields, as the instuction group is
	finished we look for prefix fields which values is different to
	default and try to find prefix instruction which can encode this
	fields.
	
2007-08-24  Brian Kahne  <bkahne@freescale.com>

	** ADL ISSs now support a simple plug-in interface which allows
	users to specify, at run-time, additional libraries to be loaded,
	which may implement additional types of readers, writers, and
	system-call handlers.  For more information about this facility,
	refer to the <a
	href="http://compass.freescale.net/go/adlsite/adl-iss-plugins.html">document
	describing the interface</a>.

	* Added a simple plugin interface to ADL.  This allows a user to
	create a shared object which will be loaded at runtime and can
	implement new types of readers, writers or system call handlers.
	The interface is documented in adl-iss-plugins.rst.

	ExecSupport.C was modified to load these plugins.  The default
	file handling is now implemented as a default service-provider
	class (derived from the same interface as used by plugins).

	The system-call implementation has also changed.  All
	functionality is now in Porthole.C.  The basic handler class,
	Porthole, gets the system call code and then iterates over any
	installed handler classes, stopping once a handler has handled the
	call.

	A simple plugin example was added to tests/iss.  The source file
	is CountInstrs.C and it simply implements a histogram of
	instructions encountered during a simulation.

	Note that we now use libltdl, provided by the Plasma distribution,
	for handling shared objects.  This should allow us to easily port
	this to Windows, though for right now, Windows support is not
	enabled.

	** uADL now contains a safe-mode, specified using the
	<i>--safe-mode</i> option when invoking <b>uadl2model</b>.  When
	the safe-mode is used, each instruction is immediately executed
	and committed by the ISS; the pipeline model just tracks timing.
	This means that errors in the micro-architecture description will
	not cause functional errors.  This mode is useful for when the
	importance of functional correctness is paramount and timing
	correctness is secondary, such as in a customer model which is
	being incrementally developed.
	
2007-08-23  Brian Kahne  <bkahne@freescale.com>

	* Transactional ISSs now track time via a pointer to an external
	ttime_t value.  This pointer can be init'd via the constructor or
	via a call to set_time.

	uADL models were changed so that they no longer bother with
	AccumTime but simply point the ISS to their own Timer variable.

2007-08-22  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with writing TLB intermediate results (DAT and UVP):
	We weren't using decimal when writing sets and ways, as we should
	have, but were using hex w/o a radix identifier, so the resulting
	files were not valid if we accessed a high way or set.

	* Transactional ISS logging has been changed in order to support a
	greater disconnect between fetching and decoding.  The
	log_instr_prefetch function is now called by decode so that
	fetch() can be called more than once by the pipeline model to
	model a part more closely.  Instruction memory reads are added to
	a separate queue and then removed by log_instr.  The log_instr
	function removes as many memory reads as necessary to satisfy that
	instruction, e.g. a misaligned 32-bit instruction would remove 1
	object and then duplicate the second.

2007-08-21  Brian Kahne  <bkahne@freescale.com>

	* For gcc, I now use strfmon for formatting the instructions per
	second value, so that the value is a bit more readable, since
	there will be commas separating the number, e.g. "10,000,000".

	* Added support for branches which cross pages using the JIT.
	This is accomplished by, during translation, figuring out if the
	target of a branch crosses a page.  If it does, then a trampoline
	is inserted instead.  The trampoline is extracted and stored by
	the ElfScanner just like any other function, and it simply calls a
	special method of the core which executes a longjmp back to the
	run_jit function.    

	The run_jit function now has an outer loop which calls setjmp and
	checks its return code.  0 means to continue, 1 means to process a
	branch.  If the longjmp returns with a 1, then the branch is
	translated again and overwrites the trampoline.  We then proceed
	to the inner loop, which continues execution.

	The inner loop exists so that escapes, e.g. calculated branches,
	don't need to worry about the overhead of setjmp.

	Added in112.dat to test this behavior.
	
2007-08-21  Sergey Khristo  <b08077@freescale.com>

	** Added the option "--entry-point=symbol", which allows the user
	to specify the entry point when an elf file is used as input to
	simulator.

	* When elf file is used as input now data memory is also read.	

	* Added post_asm hook. This hook can access only prefix fields and is executed
	after instruction assembling.

2007-08-17  Brian Kahne  <bkahne@freescale.com>

	* Added in111.dat to test calculated branches in a JIT model.

	* Enhanced makedat so that it supports C code compilation.  Refer
	to makedat's documentation for more information.

2007-08-16  Brian Kahne  <bkahne@freescale.com>

	* Miscellaneous performance improvements for the JIT:

	1.  Various intbv improvements, including removing the mod
	operators used by setField, which allowed for inlining of the
	functions.

	2.  Added a simple_mask set of functions which don't wrap if start
	> stop.  This is used by signExtend and a few other functions.

	3.  The memory hierarchy is now generated for the JIT w/o any
	tracing support.  This same hierarchy is also generated in the
	second phase of the JIT.  We record memory access information and
	then create a dummy function which instantiates these accesses in
	order to get the compiler to instantiate the necessary functions.

	4.  I now inline the branch functions, since it appears that they
	work.  There might be future problems with a condtional branch's
	tail call- we'll have to check on that later.

	* Cleaned up the Makefiles- we now build mod1 with JIT.

	* Added JIT regressions, including a jit_model_test function which
	runs the test w/JIT enabled and IR checking off.

	* Performance note: If mod1 is modified to split up instructions
	w/conditionals, e.g. addi is split into addi0 (which handles RA ==
	0) and addi, then JIT performance is ~100MHz.
	
2007-08-14  Sergey Khristo  <b08077@freescale.com>

	* Added possibility to access prefix fields values in helpers.
	Indexed fields can be  accessed using functional call with  one 
	parameter representing index.

2007-08-13  Sergey Khristo  <b08077@freescale.com>
	* Extended assembler support for instructions larger than 64 bits.

	* Initial support for grouping in assembler. Every set of instructions that is separated by
	packet separators (defined by assembler block) will be written at once at the end of packet.

	** Added support for assembler configuration, which is specified
	by the <i>assembler</i> define block. It allows the user to
	specify comment strings, line comment strings, line separator
	characters and packet grouping characters. For example ::
	
	<pre>
	define (assembler) {
	  comments = (";");
	  line_comments = ("#rem");
	  line_separators = ("\n");
	  packet_grouping = (("[","]","\n"));
	}	
	</pre>

2007-08-10  Brian Kahne  <bkahne@freescale.com>

	* Branch (foward and backward) functionality for JITs has been
	added.  The JIT can now run in4.dat (the sieve program).

	Immediate branches require the use of instruction-field semantics
	in order for us to know the target of a branch.

	In order to handle some complex block re-ordering done by GCC, and
	to handle the fact that tail-calls aren't always handled correctly
	if helper functions are called, we now do the following:

	Each function ends with a special no-op sequence.  The scanner
	detects this sequence, and the return, and moves any epilogue code
	up to the start of the no-op sequence, then places a
	jump-to-next-instruction after it.  This final sequence (the jump)
	can be skipped if it's at the end of an instruction.

	This allows us to handle the situation where we have a return in
	the middle of a function:  This becomes a jump to the next
	instruction block.  This also prevents GCC from putting a
	tail-call in to a helper function.

	Branches are still not inlined because we have to figure out a way
	to handle both sides of a conditional branch (since we can't
	guarantee that we'll get a tail call).

2007-08-07  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the transactional ISS generator:  aliased
	instructions did not have any slots allocated.  Modified the
	InstrBase and Instr classes so that usageinfo() is virtual.
	Instr::usageinfo() returns the target usage info if an alias.

	Modified GenInstr so that the read-operand and commit functions
	take into account aliased instruction fields.  For example, if the
	target of the alias has an RT instruction field and the alias maps
	RX to RT, then the read-operand function will use RX on the opcode
	to get the value to place into the slot for storing RT.  The slots
	for this instruction are the same as the target of the alias,
	since the execution function is just going to call the alias
	target's execution function.

	Modified tdriver3 so that it uses mod2.adl rather than mod27.adl.
	This was because mod2.adl implements se_add as an alias of add,
	thus allowing us to test this feature.
	
2007-08-06  Brian Kahne  <bkahne@freescale.com>

	* Initial JIT functionality has been added to ADL.  Generating a
	JIT model consists of several phases:

	1.  We create the model with no decode tree and generate C extern
	functions which call the various instruction handlers, where
	operands are specified as dereferenced external pointers.

	2.  We compile this file to an object file.

	3.  We scan this object file, extracting the instruction handlers
	and examining relocations to find out where the operand values
	should be placed.  We then generate a new model which contains the
	normal simulate() function as well as a translate function() which
	has the job of scanning a range of addresses, decoding each
	instruction, and copying the corresponding machine code to a
	host-code page.

	The basic run-time kernel for the JIT has also been added.  We do
	not yet handle branches.

	The object-file scanning code is in ElfScanner.C, hidden behind an
	interface class declared in Scanner.h.  The idea is that, if we
	port to other architectures, such as Windows, we'll create new
	scanners as needed.

	The top-level simulation generation code has been moved to
	GenDriver.  This code orchestrates the various generation phases
	by calling the GenSim class.  A data structure, InstrCoreSyms,
	stores information about generation functions and stuff between
	the phases.

2007-08-02  Brian Kahne  <bkahne@freescale.com>

	* The AnyOption class now lets the user set a default value to use
	when a value is optional.  If the option is specified as just a
	flag on the command line, this default value is used.  This can be
	set via AnyOption::setOptionalValue().

2007-08-02  Brian Kahne  <bkahne@freescale.com>

 	* For a transactional ISS, the operand-type information is now
	specified as bit flags.

	* For a transactional ISS, unused operands are now set to a type
	of opNone so that they can be distinguished from valid operands.
	Also, the decode miss handler was incorrectly skipping all helper
	slots, if those existed.  It now works the same as any
	instruction.

	* When generating the transactional ISS, we were dropping the
	partial-write flag from a target that was also a source, due to
	how we were processing sources and targets: In allocateSlots, we
	inserted sources, then inserted targets into the set.  So, if
	something was already a source, the target was not inserted.  We
	now update target info after the insert using
	UsageInfo::update_mutable.

2007-08-01  Brian Kahne  <bkahne@freescale.com>

	* Fixed a corner case with source/target tracking in the
	front-end.  For some types of assignment statements, the parser
	incorrectly identifies them as definitions.  We handle this as a
	special case, but we were processing the lhs before the rhs.  The
	problem is that if we find a source that's already a target, we
	don't count it as a source (in order to avoid a false dependency).
	Since we were processing the lhs first, if there was a valid
	source in the rhs, we were skipping that.  Added fe/inst69.adl to
	test this.  This fixes an error which caused uadl/compress.dat to
	fail.

2007-07-31  Sergey Khristo  <b08077@freescale.com>

	* Instruction field that refers to a sparse register file is now
	handled in assembler like an enumerated field, enumeration entries
	are built like in disassembler.
	
	* Support for instructions with width up to 64 bit in assembler
	generator.
	
	* Support for multiple instructions on a single line in assembly
	programs.
	
2007-07-31  Brian Kahne  <bkahne@freescale.com>

	* The static compiler assertions for when BROKEN_TEMPLATEs is
	activated can now be turned on or off.  These come in two sets:
	One set for arithmetic operations and one for comparison
	operations.  Comparison assertions may be turned of with
	-DNO_CMP_ARG_CHECK and arithmetic assertions may be turned off
	with -DNO_ARITH_ARG_CHECK.

2007-07-27  Brian Kahne  <bkahne@freescale.com>

	* Added a compile-time assertion to check to make sure that the
	lhs's width is >= the rhs's width for binary intbv operations if
	BROKEN_TEMPLATES is enabled.  This is accomplished using Boost's
	static-assert header, which has been added to the helper's directory.

	* Modified how source and targets are calculated by the
	front-end.  We no longer consider a partial-write to be a source
	and a target.  Instead, it's just considered a target and we note
	the fact that it's a partial write.

	* A transactional ISS now tracks partial writes using a mask.
	Rather than a bit-vector for tracking dirty registers, a
	full-write is denoted as being dirty if its mask entry is
	non-zero.  For a partial write, the mask actually records what
	bits were modified.  On a commit, only the masked bits are
	updated.  This is accomplished using a new register/register-file
	method called <name>_mask_set.  Added in109.dat to test to make
	sure that pipelined CR updates work as expected.
	
2007-07-26  Sergey Khristo  <b08077@freescale.com>

	* In dissassmbler of instruction field that refers to to a sparse register file now
       	we print the name of the register in the entry.
	
	** Entry of a sparse register file may now can have an optional
	dissasembler string, specified by the key <i>syntax</i>.  It is a
	string that defines the output of the dissassembler.  It is useful
	when only hooks are defined for the current entry and there is no
	possibility to infer the name of the register.
	
	* Added support for nested fields in instruction syntax.


       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.41 (v0_3_41) on Linux (lb0170) on 7/25/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.41 (v0_3_41) on Linux (lb32001) on 7/25/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.41 (v0_3_41) on Linux (lb0169) on 7/25/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.41 (v0_3_41) on Linux (lb32001) on 7/25/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.41 (v0_3_41) on Linux (lb0170) on 7/25/2007 ==

2007-07-25  Brian Kahne  <bkahne@freescale.com>

	** ADL now compiles on Microsoft Visual Studio 2003.  However, due
	to bugs in that version of the compiler, the full functionality
	of the underlying number class is not available.  The difference
	is that normally, the width of the result of a binary operation of
	two <i>bits</i> objects is the max of the widths of the two
	operands.  On MSVC2003, however, the result width is always the
	width of the left operand.  This may result is subtle functional
	differences if compiling on this platform.

	To test this on other platforms, you may define
	<b>BROKEN_TEMPLATES</b>.  For example, as an argument to
	<i>adl2iss</i>, use the option <b>-D=BROKEN_TEMPLATES</b>

	* The above modification occurs in intbv.h and is just a simple
	conditional define for the MAX define.

2007-07-25  Zigu Haras  <zigu.haras@freescale.com>

	* Fixed starcore's regressions. Regressions 1-9 of tests/designs

	* Accesses to pre_fetch memory are not traced.

2007-07-24  Zigu Haras  <zigu.haras@freescale.com>

        * VLIW support was documented in ADL notes.
	
	** Added support for enumerations in registers and register files.
	The key <i>enumerated</i> specifies that a register or register
	file is enumerated.  Enumerations map strings to values, starting
	with 0. The list is a series of identifiers specifying enumerated
	values. The identifier <i>reserved</i> may be used to indicate a
	gap in the sequence.  Enumerated and corresponding numerical
	values are interchangeable- numbers may be used for values which
	are not enumerated.  

	An enumeration string can be used in the register scope; other
	scopes require that it be quantified with a register name. For
	example::

	<pre>
        define(reg=R) {
          width = 32;
          enumerated = ("Normal","DelaySlot");
	  reset = Normal;
        }

        post_fetch = func(unsigned s) {
	 if (R == R::DelaySlot) {
           R = R::Normal;
         }
        }
	</pre>

        The <i>dat</i> file format supports enumeration. The value of
	enumerated registers or register files are reported with their
	enumerated value, it such exists.
	
2007-07-19  Brian Kahne  <bkahne@freescale.com>

	** Added the autoconf macro file <i>adl.m4</i> so that users can
	use this file (plus <i>general.m4</i>) to easily test for the
	presence of ADL in their configure scripts.  We now distribute all
	.m4 files and install adl.m4 and general.m4.

	* Modified the transactional ISS again- we now offer another form
	of decode:

	   InstrPacket *decode(byte *buf,unsigned offset);


	which is just a convenience form for when the user has a separate
	buffer form which instructions are fetched.

	** Added an optional block-based memory model as an alternative to
	the sparse memory model.  This can be selected by compiling with
	<i>-DUseBlockMemory</i> or using the </i>--block-memory</i> option
	in <b>adl2iss</b>.

	This is a simple, contiguous memory model with a run-time
	selectable size.  The size defaults to 64k and may be set using
	the <i>--memory-size</i> or <i>-ms</i> option when running a
	model.
	
2007-07-18  Brian Kahne  <bkahne@freescale.com>

	* Removed the existing gcc-based JIT code, in anticipation of
	adding the new, precompiled version.

	* The interface to the transactional ISS has changed slightly in
	order to allow for more detailed modeling of a processor's fetch
	operation.  The new interface is as follows:


	
	template <size_t NB> PrefetchReturnType prefetch();
    
        template <size_t NB> PrefetchReturnType prefetch(addr_t addr);
	
	These are essentially the same as before, except that they're
	templated so that fetches of different sizes may be performed.
	This initiates the instruction fetch operation and places memory
	requests into the memory-request object.  The second form, which
	takes an address, allows the user to fetch at a different location
	than the current NIA.



	InstrPacket *decode();	
	
	InstrPacket *decode(addr_t addr);	

	This is basically the same as the prior fetch() function.  It
	reads from the memory-request results and returns an instruction
	packet corresponding to what was read.  An address may be
	specified in case the fetch does not correspond exactly with the
	current CIA.  So, for example, if a separate fetch buffer is being
	used, then an address can be provided.  This really just affects
	how the instruction word is read from the supplied buffer.  For
	example, if the address is misaligned, then the results from the
	two different buffers will be combined together to form the final
	instruction word.  Thus, if a separate fetch buffer is being used,
	where there is no need to combine results from two differernt
	fetches, then a value of 0 can be used as the address.

2007-07-18  Sergey Khristo  <b08077@freescale.com>

	* Minor bug: for pseudo instruction fields InstrWalker did not
	convert slice access to a "get<>()" access.

2007-07-17  Brian Kahne  <bkahne@freescale.com>

	* Added a query function to ElfParser so that a user can figure
	out of the ELF file's relocations use addends or not.  The
	character pointer -> number functions are also now public.

2007-07-17  Sergey Khristo  <b08077@freescale.com>

	* For parallel architectures functions "step" (functions step() and stepn())  now refers to 
	the execution of the whole execution set, tested by c33.cli and c34.cli.

	* Action code of indexed field is required to take exactly one parameter, which represents 
	 index.

	* Modified designs/qe.adl to include full syntax information. Tests for
	assembly moved from test/iss to tests/designs, removed mod33.adl from tests/iss.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.40 (v0_3_40) on Linux (lb32001) on 7/16/2007 ==

2007-07-12  Sergey Khristo  <b08077@freescale.com>

	* Code cleanup :
	  Changed implementation for field getters for little endian bit
	ordering. Instead of templates we generate getter for every possible
	instruction width.
	  In BitPair class, endianness parameter made static.

2007-07-11  Hangsheng Wang  <hangshen@freescale.com>

	* uADL now supports external functions as exec() latency function.


       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.39 (v0_3_39) on Linux (lb32001) on 7/9/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.39 (v0_3_39) on Linux (lb32001) on 7/9/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.39 (v0_3_39) on Linux (lb0170) on 7/9/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.39 (v0_3_39) on Linux (lb32001) on 7/9/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.39 (v0_3_39) on Linux (lb0170) on 7/9/2007 ==

2007-07-06  Brian Kahne  <bkahne@freescale.com>

	** A new option has been added to <i>adl-config</i>:

	<dl>

	<dt>--logging</dt>
	<dd>
	Adds on necessary libraries for using the logging manager-based
	logging facilities.  This only applies if the <i>--basic</i>
	option is also used.
	</dd>

	</dl>	

	<b>Note:</b> There was a minor error in <i>adl2iss</i> that has
	now been fixed.  Previously, when generating a basic ISS library,
	RNumber support was off by default.  It is now on by default, but
	may be turned off by using the <i>--no-rnumber</i> option.

2007-07-05  Brian Kahne  <bkahne@freescale.com>

	** Two new options have been added to <i>tracediff</i>:

	<dl>

	<dt>--ignore-ir</dt>
	<dd>
	Turn off intermediate-result checking.
	</dd>

	<dt>--check-all</dt>
	<dd>
	Check all command/card types, even if they do not exist in the
	found file.  In that case, an error is issued.  By default, if a
	found file does not contain a certain type of command, e.g. a
	cache (<i>C</i>) command, then checking of that type of command
	will be skipped.  If <i>--check-all</i> is set, then the absence
	of such commands would generate an error.
	</dd>
	</dl>

	* Breakpoints now check the exact address specified, so they'll
	work with misaligned instructions.  Modified in5.dat to check
	this.

2007-07-03  Hangsheng Wang  <hangshen@freescale.com>

	** Added exception support for uADL.

2007-07-03  Zigu Haras  <zigu.haras@freescale.com>

	** Added support for instructions pre-fetch buffer, specified by
	the boolean key <i>prefetch_mem</i> in memory. The key is optional
	and defualts to false. The prefetch memory is updated from the
	instruction memory at the pre-fetch phase, before the pre_fetch
	hook is invoked.  The buffer is filled starting at the
	current-instruction-address.  Only one is allowd per-core. This
	memory can not have read/write hooks, parent memory or addr_unit
	defined. Accesses to pre-fetch memory are not logged and
	modifications are not written back. This feature allows the user
	to write a pre_fetch hook which is instruction dependent, saving
	multiple accesses to instruction memory.

	** Support for little-endian bit ordering, specified by the architecture key
	<i>bit_endianness</i> which takes <i>little</i> and <i>big</i>
	values. In <i>big</i> bit-endianess bit <i>0</i> is the most significant bit,
	while in <i>little</i> it is the least significant.
	
	** ADL fully supports StarCore encoding and VLES grouping. 
	It handles both serial grouping and prefix based grouping.
        Prefix-based encoding is correctly modelled in ADL.
	The ISS generated from ADL was validated on a benchmark 
	set of instructions selected by StarCore team. 
	
	* Modified implementation of commit hooks in parallel architectures 
	to the more efficient  template member functions.
	
2007-07-02  Brian Kahne  <bkahne@freescale.com>

	* The main ELF parsing logic has been broken out of ElfReader and
	moved into a separate class called ElfParser.  This class is not
	dependent upon any ISS code and is now part of the parsing
	library, so it can be used by other programs which need to
	manipulate ELF files.

	* Added an instruction-size value to the instruction packet in a
	transactional ISS.

2007-07-02  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the transactional ISS: We weren't handling
	misaligned 16-bit reads which fell within a word correctly.  Fixed
	this by modifying byte_read16_unaligned so that if a misaligned
	access came in which falls within a word, it will read 2 bytes
	worth of data.  Modified in18.dat to test these lhz situations and
	added a test which runs in18.dat on tdriver1.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.38 (v0_3_38) on Linux (lb32001) on 7/2/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.38 (v0_3_38) on Linux (lb0170) on 7/2/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.38 (v0_3_38) on Linux (lb32001) on 7/2/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.38 (v0_3_38) on Linux (lb0170) on 7/2/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.38 (v0_3_38) on Linux (lb0170) on 7/2/2007 ==

2007-07-02  Todd Dukes-TDUKES  <tdukes@freescale.com>

	* dbgen.C - Added range tag around bit ranges in bit fields.

2007-07-02  Sergey Khristo  <b08077@freescale.com>

	* For prefix encodings instruction width is different to the number of
	bits by which it is actually represented in the memory, so in front-end
	new member variable was added to instructions:  _fetch_width. 
	It is equal to encoding width minus number of prefix bits of the 
	encoding. We check that fetch width is a multiple of 8. 
	Changed writers to log correctly instructions that have prefix bits,
	mod41.adl was added to test this feature and some of parallel 
	execution features (post_packet, decode_miss, post_exec handlers 
	and simple prefix instruction).

2007-07-02  Sergey Khristo  <b08077@freescale.com>

	* For prefix encodings instruction width is different to the number of
	bits by which it is actually represented in the memory, so in front-end
	new member variable was added to instructions:  _fetch_width. 
	It is equal to encoding width minus number of prefix bits of the 
	encoding. We check that fetch width is a multiple of 8. 
	Changed writers to log correctly instructions that have prefix bits,
	mod41.adl was added to test this feature and some of parallel 
	execution features (post_packet, decode_miss, post_exec handlers
	and simple prefix instruction).

	* Added StarCore regressions for high register.

2007-06-29  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the GDB server.  After a monitor command, we
	didn't update our internal state of what threads were active,
	leading us to get confused by subsequent GDB commands such as
	"next" and "step".  Fixed this by adding a call to
	updateActiveNode() in RemoteGdbServer::remoteHandleCommand().
	Added gdbtest10.dat to check this.

	* Exceptions thrown by execution functions, in a transactional
	ISS, which use a coroutine were not being caught correctly because
	the try/catch block was in the main coroutine and not in the
	instruction's coroutine.  Fixed this by adding an additional
	try/catch block in the coroutine driver for instructions which
	have coroutines.  Added tdriver4, which uses mod11.adl, and
	in27.dat, to test this.

	** The <i>tracediff</i> program will now check all intermediate
	results in a UVP, even if errors are found in an earlier
	core/thread.  Note that the format of error messages has changed
	slightly.

2007-06-28  Brian Kahne  <bkahne@freescale.com>

	* The DatWriter was incorrectly writing cache cards when the
	cache-action was of type "CacheNone".  It produced "a=" with no
	value.  Fixed this by checking for the CacheNone value.  I also
	modified DatParser so that it will produce an error on an empty
	value.  This bug occurred because of the shift to using operator<<
	for most enums (defined in TypeIO.h).

	* Fixed a bug with the GDB server:  The --no-gdb-halt feature was
	broken in that we would go into the select statement and thus halt
	until we got the first packet.  After that, we would continue to
	execute.  Our regression didn't catch this because it only checked
	for monotonically increasing values and didn't check that the
	first value was non-zero, indicating that some progress was made
	before the first packet was received.

	Fixed the problem by having _continue_mode set to true if not
	starting in a halted state.  Getting a packet is gated by this
	flag.  Fixed the regression to make sure that some progress is
	made by checking to make sure that the first data value for
	gdbtest5 is non-zero.

	* Fixed a bug: For non-indexed register fields, we weren't
	generating a context-specific write function correctly if no
	write-hooks existed.  Rather than generating a write to the field,
	we were generating a complete register update.  Fixed this and
	modified mod3.adl to test this.  There is also a test for this in
	designs- mt3.dat tests this.

2007-06-27  Sergey Khristo  <b08077@freescale.com>

	* Optimized instruction tables. We find nodes that
	satisfy all of the following conditions:
	1. This node does not have instruction.
	2. All the children have the same mask that is non-zero in the same word as parent's.	
	3. Children do not have instructions (to handle aliases etc.). 
	These nodes are redundant so we merge them with their children.

2007-06-26 Sergey Khristo  <b08077@freescale.com>

	* CDCpp58434: The following code resulted in a compilation error:
	
	<pre>
	sbits<32> tmp;
    	tmp (0,28) = frac(24,52);	
	</pre>
	
	because operator() returns constant. RtlWalker should translate
	such an assignement to tmp.set(...,...), so it was fixed, also
	modified mod38 and mod39 to test that.
	
	* CDCpp58432: "sintbv: would like comparison operators with integer". 
	This did not always work correctly with usual intbv because of lack of the appropriate functions.
	For example *bits<16> x(0)* would be equal to *0xffff0000* because integer would be convert to
	16-bit number equal zero, so added I new fuctions to handle integers in comparisons, also added tests
	in tests/intbv/NumberTest.C.


2007-06-25  Michele Reese  <michele.reese@freescale.com>

	* designs/altair_r1_mt.adl: 
	Updated snapshot in designs directory of models from ADL_models
	(includes booke, altair and all apus)

2007-06-20  Brian Kahne  <bkahne@freescale.com>

	** Added a StarCore model which supports serial grouping and
	prefix information encoding for ten specially chosen instruction.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.37 (v0_3_37) on Linux (lb32001) on 6/20/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.37 (v0_3_37) on Linux (lb32001) on 6/20/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.37 (v0_3_37) on Linux (lb0170) on 6/20/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.37 (v0_3_37) on Linux (lb32001) on 6/20/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.37 (v0_3_37) on Linux (lb0170) on 6/20/2007 ==

2007-06-20  SERGEY KHRISTO  <b08077@freescale.com>

	* Fixed intbv for 64-bit build . Added interface for "long long int" 
	and "long long unsigned int".

2007-06-19  Todd Dukes-TDUKES  <tdukes@freescale.com>

	** Changed the format of the xml output from make-db to have more
	semantic content in the tags. Added a description file,
	<i>adl.rnc</i> that can be used to validate xml files using the
	<i>rnv</i> validator program available from <a
	href="http://www.davidashen.net/rnv.html">here</a>.

2007-06-19  Brian Kahne  <bkahne@freescale.com>

	** A number of new scripting commands have been added to allow TCL
	functions to be called on specific logging events or when a
	breakpoint or watchpoint is hit.  Please refer to the ADL CLI
	reference document for more information.

	* To enable the callback feature, the ScriptLoggerImpl (with
	ScriptLogger as the interface) class was added, which inherits
	from LoggingIFace.  It stores functions to be called, indexed by
	target node and event type.  Some events support an optional
	filter, such as registers; a callback can be set up to only be
	called when a particular register is written.

	** Logging reads for instruction fetches are now distinguished
	from logging reads for data accesses.  The CacheAccess value for
	this kind of operation is called <b>CacheILogRead</b>.

2007-06-19  Sergey Khristo  <b08077@freescale.com>

	* Merge of changes from local repository in FIL.
	* Fixed bugs in register field and memory write commit.
	* Add support for multiple accessors to prefix field data. 

2007-06-18  Brian Kahne  <bkahne@freescale.com>

	* The transactional ISS prefetch() method now returns
	PrefetchReturnType to distinguish between different possible
	situations it encounters, e.g. the ISS is inactive, an exception
	occurred, etc.

	* Slices of instruction fields now return a properly sized bits
	object.  This was fixed by converting instruction-field variables
	over to typed bits-objects in InstrWalker.

	* Reads from a sparse register file now return 0 for an invalid
	index.  This way, we're consistent between transactional and
	simple ISSs.  Previously, a read of an invalid index from a sparse
	register file for a transactional ISS would abort the simulation
	because the check was done by the user in the exec function, which
	occurs after the call to read_operand, which actually did the
	fetch.  Added in106.dat on mod3/tdriver2 to test this.
	
	* The tdriver.C program (testbench for a transactional ISS) now
	supports a unified L1.  You activate it by defining EnableL1 and
	then you specify the name of the L1 instruction cache via the
	L1InstrName define and the data cache via the L1DateName define.
	The defaults are L1i and L1d.

2007-06-14  Brian Kahne  <bkahne@freescale.com>

	** The <b>adl2doc</b> program is now installed for generating
	documentation from an ADL file.  If the <i>reStructured Text</i>
	processing program <b>prest</b> is installed, it will generate
	HTML documentation.

	** Read/write hooks are now called by context-specific register
	accesses, including field accesses.

	* To accomplish the above, the context read/write routines were
	modified to call the appropriate routines which access the
	read/write hooks.  In the case of fields, I handle this like a
	normal field access, in that if there are hooks, I switch to a
	read/modify/write paradigm.  If there are no fields, then we just
	do a direct modification.  mod3.adl/in11.dat were modified in
	order to test this.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.36 (v0_3_36) on Linux (lb32001) on 6/13/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.36 (v0_3_36) on Linux (lb0170) on 6/13/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.36 (v0_3_36) on Linux (lb32001) on 6/13/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.36 (v0_3_36) on Linux (lb0170) on 6/13/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.36 (v0_3_36) on Linux (lb32001) on 6/13/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.36 (v0_3_36) on Linux (lb0170) on 6/13/2007 ==

2007-06-13  Brian Kahne  <bkahne@freescale.com>

	** A new cache parameter has been added:  

	<pre>
	hit_pred = func(CacheAccess ca,unsigned set,unsigned way) {}
	</pre>

	This function, if it exists, is called when searching for a valid
	way in a set.  It is only called if the way is valid and the tag
	matches.  If it returns false, then the way is skipped, otherwise
	the way is used.  This may be used to disable a way due to
	user-specified criteria.

	* Modified mod23.adl and added in105.dat to test the hit_pred
	function.
	
	** Added <i>IssNode::genExceptionImm(unsigned)</i> as a method for
	immediately generating an exception externally while in the midst
	of executing an instruction.  This may be used to abort a load or
	a store, for example, from within a MemHandler method.

	* Added to driver2 to test IssNode::genExceptionImm.

2007-06-12  Brian Kahne  <bkahne@freescale.com>

	* Added the writeReg methods to IssNode, which act like setReg,
	except trigger write hooks.  Added the <i>writereg</i> function to
	the scripting interface which uses this method and thus triggers
	write-hook side effects.

2007-06-11  Brian Kahne  <bkahne@freescale.com>

	* I've changed the GDB monitor command protocol again: I decided
	that it's best to always end with an OK and just send the normal
	response data via console messages only.  I realized that I was
	having some occassional failures with gdbclient b/c it was
	expecting an OK and never received it, so it would just timeout.
	This would usually work, but would occassionally result in weird
	behavior.

	* Changed the cli triggerexcpt function to make it more similar to
	other functions.  The new format is "triggerexcpt [path:]exception

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.35 (v0_3_35) on Linux (lb32001) on 6/11/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.35 (v0_3_35) on Linux (lb0170) on 6/11/2007 ==

2007-06-11  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the GDB interface: We were inactivating
	contexts as well as cores, so there was a duplication of target
	elements.  If the core was inactivated first, then everything
	worked, which was the case for 64-bit, but on 32-bit, the context
	was inactivated first, which meant that no progress was made.
	Fixed this by tracking what's a core vs. a context and only
	inactivating cores.

2007-06-08  Brian Kahne  <bkahne@freescale.com>

	* The slice-set register and register-file functions for the
	transactional ISS copy the data to a temporary before doing the
	set so that we can make use of the modulo-capabilities of the
	intbv set routine.  This is needed in order to handle the offsets
	that some registers have, e.g. BookE GPRs for 32-bit, where the
	offset is 32.

	* Fixed a bug with linking together multiple ISSs:  Some of the
	porthole variables were non-const but declared in the generated
	file, causing duplicate linker errors.  Fixed this by moving the
	run-time enable and address values into ModelSupport.C

	* The read/write 16-bit functions were using a 32-bit read/write
	if the access fell within a word.  However, this causes problems
	when integrating with a system model, since the bus access type is
	important.  To fix this, we now issue a 16-bit request that may be
	misaligned within a word.

	** Memory reads for logging purposes are now tagged with a value
	of CacheLogRead so that they can be differentiated from normal
	memory accesses performed by the core.
	
       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.34 (v0_3_34) on Linux (lb0169) on 6/1/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.34 (v0_3_34) on Linux (lb32001) on 6/1/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.34 (v0_3_34) on Linux (lb32001) on 6/1/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.34 (v0_3_34) on Linux (lb0169) on 6/1/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.34 (v0_3_34) on Linux (lb32001) on 5/31/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.34 (v0_3_34) on Linux (lb0169) on 5/31/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.34 (v0_3_34) on Linux (lb32001) on 5/31/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.34 (v0_3_34) on Linux (lb0169) on 5/31/2007 ==

2007-05-31  Brian Kahne  <bkahne@freescale.com>

	** Calls to the external memory interface now have all addresses
	aligned according to the width of the request.  So, for example,
	all instruction reads are word aligned.

	** The external memory interface (MemHandler class) has changed
	slightly: The read routines now take a CacheAccess value as a
	first parameter, in order to indicate if the read is for
	instruction or data.

2007-05-29  Brian Kahne  <bkahne@freescale.com>

	** Updates to the next-instruction-address register are now logged
	just like any other register.  To disable this within UVPs, the
	user may mark the register with the <b>unarchitected</b>
	attribute.  The current-instruction-address register is still not
	logged, as its information is redundant wrt. the nia.

	* We weren't catching the condition where a user has a sparse
	register-file entry with just a read or a write hook and it's not
	associated with a register or register file.  The front-end should
	produce an error, but it slipped through and caused an assertion
	fail in make-iss.  Fixed this by changing a check in
	RegEntry::finalize.  Added fe/reg31.adl to test this.

	** Several new TCL commands have been added:

	<b>excptlist</b>:  List all valid exceptions for a core.

	<b>filterlist</b>:  List the currently allowed tracing events.

	<b>symbol</b>:  Lookup a symbol in the current reader's symbol
	table and return the corresponding memory address.
	
	Refer to the CLI reference manual for more information.

	* The above functions are checked in c27.cli.
	
	** The standard C++ namespace of "std" is no longer included by
	default within a model in order to reduce the chance of
	interference between aspects of the model and items in the
	standard namespace.  This shouldn't affect most users, but there
	is a chance that some user code is relying upon elements of the
	standard-library.  In that case, <i>std::</i> must be prefixed to
	those items.

2007-05-29  Hangsheng Wang  <hangshen@freescale.com>

	** The uADL pipeline trace now supports the displaying of stall
	conditions.  It can analyze causes of stalls such as: operand
	unavailable, next pipeline stage unavailable, execution latency
	not expired yet, waiting for memory response, etc..  This feature
	can be enabled with the "--verbose" option.  "--trace-pipeline"
	option must also be set.

2007-05-25  Brian Kahne  <bkahne@freescale.com>

	* The transactional-iss now uses a set of
	byte_(read|write)[size]_unaligned functions that read/write just
	the bytes in question, rather than aligning the address and
	accessing all bytes for that access size.  Eventually, we probably
	want to just make this the default for everything, but for now,
	it's just used by the transactional ISS.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.33 (v0_3_33) on Linux (lb32001) on 5/22/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.33 (v0_3_33) on Linux (lb0169) on 5/22/2007 ==

2007-05-22  Brian Kahne  <bkahne@freescale.com>

	** This release adds various minor modifications in order to build
	on gcc 3.4.4 built without support for shared objects.  This is
	the compiler shipped with CoWare Platform Architect V2006.1.0.
	
	* Various minor tweaks to get things working on gcc 3.4.4.  There
	are still some issues with the little-endian versions of intbv, so
	those tests are disabled for GCC 3.x.

	* Fixed a bug in the front-end syntax-string handling: We were
	calling Ptree::Make which uses an internal 4k static buffer.  This
	was overflowing, causing weird segfaults.  Fixed this by adding
	strdup to Helpers.h, which directly duplicates a string.  Also
	added strconst, which just points to a constant string.

2007-05-21  Brian Kahne  <bkahne@freescale.com>

	* Build tweaks to get ADL to compile against a version of GCC
	built with --disable-shared (in this case, 3.4.4).

	* Disabled signed and le intbv tests if using GCC 3.x, since they
	currently cause ambiguous-template errors.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.32 (v0_3_32) on Linux (lb32001) on 5/18/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.32 (v0_3_32) on Linux (lb0169) on 5/18/2007 ==

2007-05-17  Brian Kahne  <bkahne@freescale.com>

	* In order to work around some deficiencies in OpenC++, I now trap
	any exceptions thrown when trying to convert a template argument
	to a Ptree, when trying to figure out if a bits-type has a fixed
	size.  If it's a template-based expression, we can't really figure
	out its size- that requires a more sophisticated analysis than
	what we can do.  However, it used to throw an exception- we now
	trap that and continue.  You still get an annoying warning
	message, however.  Modified mod3.adl to have a template helper
	function to test this.

	* Fixed a minor bug with the scripting interface: On exit, we were
	only stopping logging, and thus properly dumping trace files, if
	they had been opened by the scripting interface.  Anything
	specified on the command-line was ignored.  I changed this so that
	all writers are removed, regardless of where they're opened.
	Added cli/c26.cli to test this.

	** A new configure option, <i>--enable-minimal</i>, has been added
	which allows the user to build a minimal portion of the ADL
	codebase.  This just contains the libraries required for linking
	against a base-level generated ISS (one created using the adl2iss
	option <i>--target=base-so</i>).
	
	This is off by default, i.e. <i>--disable-minimal</i> is set by
	default.

	** The generated ADL simulators are now placed into their own
	namespace.  By default, the namespace is named "adliss".  However,
	for the case when multiple simulators will be combined together
	into a single application, such as a systems model, separate
	namespaces may be specified.  This can be done by using the
	adl2iss option of <i>--iss-namespace=name</i>.  The necessary
	declarations to then instantiate the models may be obtained by
	defining <i>ISS_NAMESPACE</i> to the relevant name before
	including ModelInterface.h.  This may be done multiple times, once
	for each namespace.  If using the default namespace, this is not
	necessary.

	For example, to generate two models, each with their own
	namespace:

	<pre>
	adl2iss foo.adl --iss-namespace=foo --extern-mem --target=base-so
	adl2iss bar.adl --iss-namespace=bar --extern-mem --target=base-so
	</pre>

	The includes would look like:

	<pre>
	#define ISS_NAMESPACE foo
	#include "ModelInterface.h"
	#undef ISS_NAMESPACE
	#define ISS_NAMESPACE bar
	#include "ModelInterface.h"
	</pre>

	The instantiation of the models would look like:

	<pre>
	IssNode *m1 = foo::createTopLevelNode();
	IssNode *m2 = bar::createTopLevelNode();
	</pre>

	<b>Note:</b> The <i>--iss-namespace</i> option may only be used
	for bare-bones shared objects (<i>--target=base-so</i>) and not for
	standalone executables or "thick" shared objects.  This is because
	there is code in the support libraries that assumes the use of the
	default <i>adliss</i> namespace.
	
2007-05-15  Brian Kahne  <bkahne@freescale.com>

	** An ADL ISS now supports multiple GDB connections so that an MP
	system can be debugged, where a different debugger is attached to
	each core.  This is currently supported using the TCP and UDP
	protocols, where a unique port is assigned to each core/debugger.

	To use this feature, the user must provide a mapping from cores,
	using a path, to either ports or port-files.  The syntax for the
	port command is:

	<pre>
	     --port=path=port[,path=port...]
	</pre>

	Similarly, for port files, the syntax is:

	<pre>
	    --port-file=path=file[,path=file...]
	</pre>

	In both cases, the path is a colon-delimited path name,
	e.g. <i>sys:core0</i>.  Currently, a debugger may only be mapped
	to a core and not to a system or a thread implemented as a
	context.

	As before, if no port is specified, an available port will be
	selected.  Therefore, the user may omit the port specifier and
	simply provide a mapping via the port-file option; unique ports
	will be assigned and written to each file.

	The new format is backwards compatible, so for a uni-processor
	simulator, a port may be specified as just a single number and the
	port-file option may specify a single file.
	
2007-05-08  Brian Kahne  <bkahne@freescale.com>

	** The tracediff program now allows the user to ignore UVP and DAT
	cards of any given type using the <i>--ignore-card=name</i>
	option.  This option may be repeated.
	
	* iss/tracediff.C: Fixed a bug.  I was using a std::set of Tokens,
	which caused a gc bug, since the gc couldn't see the tokens which
	had gc'd memory.  Changed to using a gc_set.

2007-05-08  Zigu Haras  <zigu.haras@freescale.com>

	** The method <i>getCurrentInstrTable </i> returns the current instruction 
	table and allows to define instruction table dependent handlers. 

	** The <i>retryDecode</i> method can be called from the decode-miss handler,
	to fix decode misses, e.g., after setting changing instrcution table.

	<pre>
	decode_miss = func() {
	   ....
	   if (getCurrentInstrTable() == prefix) {
	      setCurrentInstTable(other);
	      retryDecode();
	   }	
	   ...
	}
	</pre>
	
	** Added  <i>post_packet</i> hook, for parallel architectures. It is called
	just after a parallel execution set of instruction terminates. The default
	behavior is to reset prefix data, if exists.

	** The methods <i>getPacketPosition</i> and <i>setPacketPosition(int)</i>
	retrieve and set the position of the current instruction in the packet. Setting
	packet position to zero, terminates the packet and <i>post_packet</i> handler
	is called.

	** The methods <i>lastInstrFetched</i> returns the a pointer to the last 
	fetched insturction along with its length. It was required to support
	StarCore's way for encoding the size of an execution set.

	** Prefix field not associated with blocks, can be accessed by handlers'
	action code.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.31 (v0_3_31) on Linux (lb32001) on 5/7/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.31 (v0_3_31) on Linux (lb0169) on 5/7/2007 ==

2007-05-07  Brian Kahne  <bkahne@freescale.com>

	* The DAT and UVP writers now list the simulation's command-line
	options at the top of the file.

	** The tracediff program now supports the ability to ignore user
	specified field names.  These field names may occur in either the
	final result data or the intermediate results.  This is specified
	using the <b>--ignore-field</b> command-line option.  For example:

	<pre>
	tracediff ... --ignore-field=ta
	</pre>

	This will cause all <i>ta</i> fields to be ignored.

	This feature is accessible within the regression framework by
	supplying a string of the form "field:<name>" to the ignore list
	for either the <b>model_test</b> or <b>ext_model_test</b>
	functions.  For example:

	<pre>
	ext_model_test {
	  ...
	  ignores => [ FOO field:ta ]
	}
	</pre>

	This will cause <i>tracediff</i> to ignore the register named
	<b>FOO</b> and the field named <b>ta</b>.

2007-05-04  Brian Kahne  <bkahne@freescale.com>

	** The external memory interface used by the ISS has been changed.
	Now, an ISS generated using the <b>--extern-mem</b> option
	interfaces with memory via the <i>MemHandler</i> interface class.
	An application, such as a system model, must derive a class from
	<i>MemHandler</i> and supply a pointer to an instance of this
	class to each core.  Please refer to the ADL ISS Integration
	Document for more information.

2007-05-03  Sergey Khristo  <b08077@lnxdt53.fil.ea.freescale.net>

	* Support for little-endian bit ordering, specified by the key
	"bit_endianness". Nested fields are not yet supported in the
	backend.  For little-endian simulator, getter function is a
	template function with one parameter -- width of the decoded
	instruction. This is because the bit position depends of the
	instruction width, e.g. bit number 15 in a 16-bit instruction is
	the leftmost bit and for 32-bit instruction it is in the
	middle. For every instruction compiler will remove unnecessary
	code so this change will not affect performance.

2007-05-02  Brian Kahne  <bkahne@freescale.com>

	** New TCL scripting commands have been added:

	<i>simreset</i>: Reset the simulation.  This is just a call to
	resetSimulation (declared in SimInterface.h).

	<i>inputlist</i>: Return a list of all of the files read for this
	simulation.  With C++, this list can be retrieved using
	readerInfo() in SimInterface.h.  This list is reset by
	resetSimulation().

	<b>Note</b>:  inputlist and tracelist now return data as a two-column
	list which can be read directly into a TCL dict.

	<i>straceon [fmt]</i>: Start stream tracing using the specified format
	(dat or uvp).  This creates a writer which writes to an in-memory
	stream.

	<i>straceget</i>:  Return the current stream contents.  This resets the
	stream so that the next straceget will only return the next set of
	data that was created.

	<i>straceoff</i>:  Turn off stream tracing.
	
	** The debugger interface for setting data using the binary
	protocol has been implemented.  This allows the user to use the
	"set var" command to modify a variable in the program.  

	* Added iss/gdbtest10.dat to test the gdb binary memory protocol.

	* Fixed a bug with the debugger register mapping: We weren't
	correctly handling the case where we had a register that was too
	large and we had to shrink it to a smaller size.  Added
	tests/designs/gdbtest9.dat to test this.

2007-05-02  Sergey Khristo  <b08077@lnxdt53.fil.ea.freescale.net>

	* Added support for split opcode fields.

	== file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.30 (v0_3_30) on Linux (lb0169) on 5/1/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.30 (v0_3_30) on Linux (lb0170) on 5/1/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.30 (v0_3_30) on Linux (lb0169) on 5/1/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.30 (v0_3_30) on Linux (lb0170) on 5/1/2007 ==

2007-04-30  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug in the transactional ISS generator: Template helper
	functions were not having their bodies scanned, so used resources
	were not being recorded.  Modified fe/helpers12.adl to test this
	and modified mod3.adl so that it has a couple of child helper
	functions.

	* Fixed a bug in the transactional ISS generator: A helper
	function which took a parameter of "void" needed to have the
	"void" discarded when the instruction packet was added to the
	argument list.  Modified mod3.adl to test this.

2007-04-30  Sergey Khristo  <b08077@freescale.com>

	** Added support for signed bit vectors.  The type to use within
	user-action code is <b>sbits</b>.  This type behaves just like a
	<b>bits</b> object, except that signed-operations are performed
	for comparison and relevant arithmetic operations.

2007-04-27  Brian Kahne  <bkahne@freescale.com>

	** A new command-line option, <b>--config=file</b> was added to
	the ISS.  This executes a configuration script before normal
	operation of the simulator, i.e. execute a script, enter the
	interactive command-line mode, execute a simulation, or start up
	the debugger interface.
	
	** A new command-line option, <b>--eval=str</b> was added to the
	ISS.  The argument is evaluated by the interpreter before any
	other scripts are executed.  This makes it possible to modify the
	behavior of scripts from the command-line.  This option may be
	repeated.

	For example, to set a variable <i>dbgtype</i> to a value of 32 so that a
	configuration file may query it:

	<pre>
	./model --eval="set dbgtype 32" ...
	</pre>
	
	** The method by which register mappings are set up for
	interfacing with a debugger such as gdb has changed.  Previously,
	this information was set via a compile-time configuration file
	(.ttc) using the <i>registers</i> key.  This is no longer
	supported.  Instead, the mapping is set up via a runtime
	configuration file (the <i>--config</i> option).

	This is a TCL file.  The command to install a new register mapping
	is <b>setregmap</b>.  The syntax is:

	<pre>
	setregmap core-path reg-item...
	core-path:  Path to a core.  ":" is used as a delimiter.
	reg-item:  Either register-name, register-name:width, or width
	           (for a placeholder).
	</pre>

	For eample, the following code fragment sets up a 32-bit GDB
	register mapping:

	<pre>
	set regs ""
	for {set i 0} {$i < 32} {incr i} {
	    lappend regs "GPR$i:32";
	}
	for {set i 0} {$i < 32} {incr i} {
	    lappend regs 64;
	}
	lappend regs NIA:32 MSR:32 CR:32 LR:32 CTR:32 XER:32 32
	eval setregmap P $regs
	</pre>

	To then use this file:

	<pre>
	./model input.elf --config=gdbsetup.tcl -g --port-file=.gdb.remote
	</pre>

	This change was made so that register mappings could be changed by
	the user as needed.  For example, it may be necessary to set up a
	32-bit register mapping for a 64-bit part if a 32-bit application
	is being used.

	<b>Note:</b> This change means that you will need to remove the
	<i>registers</i> key from any <i>.ttc</i> files you may have.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.29 (v0_3_29) on Linux (lb0169) on 4/27/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.29 (v0_3_29) on Linux (lb0170) on 4/27/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.29 (v0_3_29) on Linux (lb0169) on 4/27/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.29 (v0_3_29) on Linux (lb0170) on 4/27/2007 ==

2007-04-27  Hangsheng Wang  <hangshen@freescale.com>

	** Added a front-end script uadl2model that reads one ADL description
	file and one uADL description file and creates the executable model.

	* Added uadl2model tests in tests/scripts.

2007-04-26  Brian Kahne  <bkahne@freescale.com>

	* When using the --script option, the error message is now printed
	if a problem occurs during execution of the script.  Added
	c23.cli/c23.regress to test this.

2007-04-25  Brian Kahne  <bkahne@freescale.com>

	** UVPs produced by ADL now include the global count (<b>gc</b>) key which
	counts instruction in their execution order.  This key is not
	normally compared by <i>tracediff</i> but may be checked by using
	the <b>--compare-global-count</b> (or <b>--cgc</b>) option.
	
2007-04-24  Brian Kahne  <bkahne@freescale.com>

	* Modified signed multiply and divide in order to avoid what
	appears to be a compiler aliasing bug when compiling for 64-bit
	with optimization.  The symptoms are that, for signedMultiply and
	signedDivide, a result value in checkOperator in NumberTest is
	then used as the source for the next operation.

2007-04-23  Brian Kahne  <bkahne@freescale.com>

	* The scripting interface is now much better integrated with TCL.
	The cli directory is gone: The functionality has been moved into
	the iss directory.  The interface file is now called
	ScriptingIface.h and is the only file that should be included by
	anything else.  All functionality is now in Scripting.C.  The top
	comment block describes how to go about adding additional tcl
	commands.

	** The ADL scripting interface has been modified so that it is
	better integerated with TCL

	<ul>

	<li>
	The interactive command-line no longer uses readline itself.
	Instead, the standard TCL main event loop is used.  In order to
	get readline command-line editing features, use the tclreadline
	package instead.  For example, the following <i>.tclshrc</i> file,
	placed in your home directory, will load this package:

	<pre>
	if {$tcl_interactive} {
	  # If tcl is on an x86 32-bit or 64-bit system, then use the relevant
	  # tclreadline package explicitly.  Otherwise, use plat.  This means that if
	  # you're on a 64-bit system, but you invoke a 32-bit version of tcl, the
	  # proper library will still be loaded.
	  if { [regexp {(i686-[^/]+)|(x86_64-[^/]+)} [info library] match] } {
	    lappend ::auto_path /_TOOLS_/dist/tclreadline-2.1.0/$match/lib
	  } else {
	    lappend ::auto_path /_TOOLS_/plat/tclreadline-2.1.0/lib
	  }
	  package require tclreadline
	  # For now, disable custom completers, since installed commands might not
	  # have a custom completer and thus you'll get weird behavior.
	  ::tclreadline::readline customcompleter ""
	  namespace eval tclreadline {
	    # Optional, but the default prompt is kinda verbose, in my opinion.
	    proc prompt1 {} {
	      return "% "
	    }
	  }
	  ::tclreadline::Loop
	}	
	</pre>
	</li>

	<li>
	ADL scripting commands now return their result to the TCL
	interpreter.  This means that when using the interactive
	interface, the result of a command will be printed, but when
	executed as a non-interactive script, the result is not printed.
	To print the result, use a TCL output command such as <b>puts</b>.
	</li>

	<li>
	The <b>reg</b> command now returns just the numeric value of the
	register, rather than a <i>name=value</i>
	pair.
	</li>

	<li>
	A new command, <b>memlist</b>, returns a list of memory values in
	a format directly usable as a TCL list.
	</li>

	<li>
	The <b>quit</b> or <b>exit</b> command may be used to exit an ADL
	script.  Both will properly shut down the interpreter, stop all
	logging, and flush all files.
	</li>
	
	</ul>

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.28 (v0_3_28) on Linux (lb0170) on 4/23/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.28 (v0_3_28) on Linux (lb0169) on 4/23/2007 ==


2007-04-23  Brian Kahne  <bkahne@freescale.com>

	* Fixed some bugs with the number tests so that they'll compile on
	64-bit systems.

	** A new function is now available for action code:
	<b>checkInstrPerms()</b>.

	This function may be used to force the checking of various
	instruction-related permissions, such as the <b>exec_perm</b> hook
	specified within the MMU.

	Generally, these permissions are checked automatically, but the
	check may be omitted when it would generally be assumed to pass.
	For example, a branch to a target on the same page does not invoke
	the check, since it is assumed that the target is executable,
	since a previous instruction on that page (the branch) was
	executed.

	However, in some cases, this assumption is not valid.  For
	example, if it is possible for a branch to generate a misaligned
	target, and the <b>exec_perm</b> hook is used to check for
	misaligned addresses, then the branch should call
	<b>checkInstrPerms</b> in order to make sure that all permission
	checking will be performed.

	* Modified mod11.adl and added in101.dat to test the addition of
	checkInstrPerms().  Mod11.adl redeclares bclr so that it doesn't
	clear the lower 2-bits of the LR.
	
2007-04-23  Sergey Khristo  <b08077@freescale.com>

	* Changed behavior for intbv's multiplication: now
	size of result is maximum of inputs' sizes. Fixed
	signed multiplication. The file booke.adl is changed
	according to the new intbv definition.

2007-04-18  Zigu Haras  <zigu.haras@freescale.com>

	* Add support for new instruction field handler in
	ISS generation.

2007-04-16  Brian Kahne  <bkahne@freescale.com>

	* Extended the transactional ISS memory interface to support
	misaligned instructions.  The memory_request and set_memory_result
	methods now take an initial index argument.  This is only relevant
	for instructions and can have a value of 0 or 1.  On a fetch,
	index 0 should always be processed, then index 1 should be checked
	to see if a request exists.  Added tdriver3, which uses mod27.adl,
	to test this.

	* Added support for direct cache operations to the transactional
	ISS.  This uses the coroutine interface, so the front-end was
	modified to track caches that are used within action code and the
	transactional ISS generates coroutine-based instruction handlers
	for these instructions.  Currently, only the cache operations
	which involve data movement, such as touch, store, allocate, and
	fill actually use the coroutines; invalidate does not.

	The MemAccess object was changed slightly to add an operation
	field which specifies whether no-operation, a memory operation, or
	a cache operation is pending.  tdriver.C was modified to use this
	new interface and it's tested with in43.dat.

2007-04-12  Brian Kahne  <bkahne@freescale.com>

	** Writes to registers in specific context instances are now
	displayed slightly differently in DAT files in order to be more
	consistent with the format used to identify updates to other cores.
	Instead of separate <b>CTX</b> cards, extra tags are used.  For
	example, an update might look like this:

	<pre>
	    R n=FOO d=0xdeadbeef ctx=foobar ctxi=0
	</pre>

	The <b>ctx</b> tag identifies the fact that this update is
	directed at the context named <i>foobar</i>.  The <b>ctxi</b> tag
	specifies the context element; in this case 0.

2007-04-11  Zigu Haras  <zigu.haras@freescale.com>

	** Enhance ADL sytnax to support StarCore prefix usage and encoding.
	Enhancements include: 

	The <b>blks</b> key denotes an architecture logical block.  The <b>blk</b>
	key in instruction and instruction field which associate an
	instruction or field with a block.
	
	The <b>prefix</b> key for instructions and instruction fields to
	denote prefixes and their fields.
	
	<b>pseudo</b> key denotes a template instruction which describes
	insturctions encoding composition from prefix fields and from the
	instruction's fields.
	
	<b>type</b> key associates an instruction with a pseudo
	instruction.  Instructions can have one-level nested instruction
	definitions within them. This can be used to group an instruction
	and its aliases in one place. Nested instruction names have
	architecture scope and must be unique.The "fields" key in
	instructions was enhanced to support bit-mapped encoding, e.g.,

	<pre>
	   fields = ((bits(0,1),Da),(bits(2,5),Db(0,1)),(bits(6,9),0xE),(bits(10),reserved);
	</pre>
	
	where <b>Da</b> and <b>Db</b> are instruction fields and the last entry is 
	associated with the variable length opcode field. The keyword
	reserved indicates that this bit does not take part in encoding. 

	The <b>fields</b> key was added to instruction fields to describe
	the value returned by the field. Typically, in StarCore
	architecture, it is a combination of prefix bits and instruction
	bits.  A field may use <b>action</b> code as an alternative way to
	specify returned value.  In this case, the value returned should
	be assigned the ThisField variable.
	
	The <b>size</b> key was added to instructions for the width in
	bits of the value retuned by the instruction field.
	
	The <b>width</b> key can have a value of <b>reserved</b>, denoting
	a variable width field used to encode opcodes. Only one such field
	is allowed per instruction.
	
	A default value, denoted <b>value</b>, can be defined for
	non-enumerated fields as well.
	
	A <b>pseudo</b> instruction field can now be used in action code,
	it denotes a field that is not associated with bits.
	
	The <b>ref</b> key in a prefix field points to the pseudo prefix field 
	the instruction points to.
	
	The key <b>indexed = k</b> in a prefix field denotes the fact that
	the field can be viewed as an array of k-bits subfields.
	
	An instruction field may have one level of nested instruction
	fields. The "bits" of such a field are relative to the
	encapsulating field. A nested instruction field can be addressed
	in the encapsulating field by its name, and in global scope using
	the "." dot operator. Thus, if field A constains field B, B can be
	accessed in an instruction using A.B notation

2007-04-10  Brian Kahne  <bkahne@freescale.com>

	* Various fixes to get "make distcheck" to work, both for an
	internal and external release.

	* I removed all references to BookE, Zen, and PowerPC from the
	externally-available regressions, e.g. tests/iss, tests/fe, etc.
	From now on, internal names should not be used in these public
	directories.

2007-04-09  Brian Kahne  <bkahne@freescale.com>

	* Initial implementation of the cache API for transactional ISSs.
	Refer to tdriver.C for an example of how to use it.  Basically,
	the idea is that you initiate a cache operation by calling
	<cache-name>_begin and finish with <cache-name>_end.  Depending
	upon the action returned by the begin operation, it's up to the
	driver to do any necessasry data movement such as loading a line,
	evicting a line, etc.  This represnets an initial version for
	handling instruction loads and stores.  Various other operations
	such as fill, invalidate, etc., have not yet been implemented.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.26 (v0_3_26) on Linux (lb32001) on 4/9/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.26 (v0_3_26) on Linux (lb0169) on 4/9/2007 ==

2007-04-09  Brian Kahne  <bkahne@freescale.com>

	* I've cleaned up the external-release so that it does not include
	BookE.  However, the uadl tests still need to be updated- we need
	some non-BookE tests for uadl.  Also, I moved proprietary
	documentation to doc/internal-doc and I moved all of the GDB tests
	that depended upon models in designs into tests/designs, which is
	where they should have been in the first place.

2007-04-06  Hangsheng Wang  <hangshen@freescale.com>
	** uADL now supports register aliasing in both register file token 
	manager and forwarding path token manager.

	* uADL now does not report bogus discarded memory requests caused by
	pipeline flush.

2007-04-05  Brian Kahne  <bkahne@freescale.com>

	** Any preamble information (specified using the adl2iss
	command-line option <i>--preamble</i>) is now also included in the
	comment block at the top of the generated ISS C++ code.  This can
	be used, for example, for a copyright notice.

	** Writes to registers in specific context instances are now
	logged.  For DAT files, the update is surrounded by CTX cards.
	For example, an update to a register FOO would look like this:

	<pre>
	    CTX n=foobar cn=0 u=update
	    R n=FOO d=0xdeadbeef
	    CTX n=foobar cn=2 u=done
	</pre>

	The <b>CTX</b> cards, for intermediate results, specify whether
	this is the start of an update (<b>u=update</b>) or whether the
	update is complete (<b>u=done</b>).
	
	In the UVP file the register name is prepended with the
	context's path.  For example:

	<pre>
	    [ t=>"reg", rn=>"t1::FOO", d=>0x00000002],
	</pre>

	* The log_ctx_change function now takes a type parameter which
	describes the type of update:  A switch, a temporary update, or a
	finish to a temporary update.  The type describing this is CtxType
	in BasicTypes.h.  Register updates to specific context instances
	are surrounded by calls to log_ctx_change.  Tracediff was updated
	to understand inline context updates.

2007-04-04  Brian Kahne  <bkahne@freescale.com>

	* CDCpp57844:  The actual thread-switch occurs at the bottom of
	the simulation loop, where we see if a context-switch event has
	occurred.  This is done so that context switching appears to be
	atomic- it doesn't happen in the middle of instruction execution.
	However, since the context switch was initiated by another core,
	the next time we swapped over to the core that was just changed,
	it hadn't yet evaluated the context-update logic, since that
	occurs at the bottom of the simulation loop.

	The context-updating logic now also occurs in bus event handlers,
	if contexts exist.  Modified mod29.adl w/in100.dat to test this.
	
	* CDCpp57861: We weren't ignoring affix instructions (type 'A') in
	tracediff, resulting in miscompares for a Raptor testcase that had
	an interrupt handler.

	* CDCpp57855: We were always inserting LRU-reset logic for
	handling multiple ways, even if the LRU algorithm had been
	replaced with a custom algorithm.  Fixed this and modified
	mod23.adl to have multiple ways in order to test this (the
	way-count is fixed to always be 8).

	* CDCpp57858: Added a regression to test for bad line-number
	counting.  The problem is a Plasma bug and is fixed in 0.8.34.
	The issue is that the line-number counting algorithm could get
	confused if something that looked like a line-number directive was
	contained within a string.  Modifed fe/inst4.adl to test this.
	
2007-04-03  Brian Kahne  <bkahne@freescale.com>

	* The ADL parser now uses a temporary name for the preprocessor
	result file so that parallel runs won't interfere with each other.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.25 (v0_3_25) on Linux (lb0169) on 4/2/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.25 (v0_3_25) on Linux (lb32001) on 4/2/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.25 (v0_3_25) on Linux (lb0169) on 4/2/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.25 (v0_3_25) on Linux (lb32001) on 4/2/2007 ==

2007-04-02  Brian Kahne  <bkahne@freescale.com>

	* Printing of the ta (WIMG) field in UVPs is now conditional,
	based upon whether or not an MMU is defined.

2007-03-30  Brian Kahne  <bkahne@freescale.com>

	* I now build g32_tdriver, a transactional ISS based upon
	generic32_0.  This is run on a few PowerStone benchmarks in order
	to test the transactional ISS on something big.
	
	* Added .vcproj and .sln files to the distribution.
	
	* Removed the write_allocate hook, as it was too specialized.
	Replaced it with the miss_enable hook.  Modified mod18.adl and
	mod21.adl to reflect this change, plus added in99.dat to test a
	situation where a fully-locked set causes the next access to skip
	the cache.

	** A new cache parameter, miss_enable, has been added to allow the
	user to specify a predicate which controls whether, on a miss, the
	cache should be considered enabled, and thus a line should be
	allocated or replaced, or whether the cache should be considered
	disabled and the access should skip to the next level of the
	memory hierarchy.  This may be used to implement behavior such as
	allocation policies on writes, or to model what happens when a set
	is fully locked.

	Please refer to the language reference for more information.

2007-03-30  Hangsheng Wang <hangshen@freescale.com>

	** uADL now supports lmw and stmw instructions.

	* uADL passes all five powerstone benchmarks: adpcm, compress, des, fir
	and ucbqsort.

2007-03-30  Brian Kahne  <bkahne@freescale.com>

	** A new MMU hook has been added: 

	<pre>
	aligned_write = func(addr_t ea,addr_t ra) { }
	</pre>

	This is called immediately before a write to memory.  The
	misaligned_write hook was modified so that it also takes an ea and
	an ra as parameters.  Together, these functions can be used to
	record information about writes, such as for broadcasting
	addresses when implementing coherency protocols.

	<b>Note:</b> If you use the <b>misaligned_write</b> hook, you will
	need to modify your definition to match the new signature:

	<pre>
	  misaligned_write = func(addr_t ea,addr_t ra) { }
	</pre>

2007-03-29  Brian Kahne  <bkahne@freescale.com>

	* CDCpp57664: When parsing a path, we were trying to find an
	active node to get the current context.  However, we weren't
	handling the case where the findActiveNode function might return
	0.  That function now takes an optional boolean flag to specify
	whether it should throw an exception if no active node is found.
	The caller already had a try-block to handle the situation where
	there were no contexts, so it catches this exception and proceeds.
	Added cli/c22.cli to test this situation.

	** Several options have been added to the trace-diff program:

	- The --delta-time flag may be used to switch between absolute
	time comparisons (ITIME and CTIME cards are compared directly) and
	delta-time comparisons, in which the differences between the issue
	and completion times are compared.

	- The --fail-count flag may be used to specify the maximum number
	of fails to display.  The default is 10.  This option may be
	switched off by either setting the value to 0 or negating it,
	e.g. --no-fail-count.

	- The --ignore-timing flag may be used to switch off time
	comparisons.  Only functional differences will be checked.

2007-03-28  Brian Kahne  <bkahne@freescale.com>

	* A new cache parameter, write_allocate, has been added to allow
	the user to specify a predicate which controls whether, on a
	write, if a miss will cause a line allocation.  Please refer to
	the reference manual for further documentation.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.24 (v0_3_24) on Linux (lb0169) on 3/28/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.24 (v0_3_24) on Linux (lb32001) on 3/28/2007 ==

2007-03-27  Brian Kahne  <bkahne@freescale.com>

	* Version bump.

	** The ADL/uADL runtime components are now supported on Windows XP
	using Visual Studio 2005.  VS Project files are included with the
	distribution.  Please refer to the README for information on how
	to build.
	
	** In addition to the info() function, two new functions are
	available: warning and error.  These take the same arguments as
	info but behave slightly differently: warnings always show up in
	output files, even if tracing is turned off.  Errors also always
	show up, but also halt the simulation.

	* The log_annnotation function was modified so that it takes a
	core pointer and a message type as the first two arguments.  The
	UvpWriter was modified so that annotations show up as comments and
	both writers were modified so that warnings and errors are
	displayed even if tracing is turned off.  mod3.adl was modified to
	have info and warning calls.  Tests were added that make sure that
	the expected messages either do or do not show up, as expected.
	
2007-03-23  Brian Kahne  <bkahne@freescale.com>

	** ADL now supports template helper functions.  For example:

	<pre>
	    define (arch=Foo) {
	      template <typename T> void bar(T x,T y) { ... }
	    }
	</pre>

	This feature requires Plasma 0.8.31.

	* Added support for templated helper functions which required
	adding support for this to the Plasma parser, plus modifying
	AdlWalker to support templates.  RtlWalker had to be modified to
	properly translate the bodies of template functions because the
	Walker base class wasn't handling this properly.  mod3.adl was
	modified to have a template helper function and fe/helpers12.adl
	as added to test the ability to overload/replace template
	functions.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.23 (v0_3_23) on Linux (lb32001) on 3/23/2007 ==

2007-03-22  Brian Kahne  <bkahne@freescale.com>

	* Re-did how the UVP writer handles instructions which cross
	word-boundaries. We had a static array and simply looked to see if
	the RA was non-zero to see if the element was valid.  Well, that
	doesn't work b/c it turns out that it's not too uncommon to map to
	a 0 page.  So, I changed InstrEntry to use a vector for storing
	this information.  Added in97.uvp (on mod2) to test this.

	* Major re-write of how we handle aliases to specific instances of
	context registers, e.g. NIA0 maps context 0's NIA register.
	Previously, we would create code which would switch to the
	relevant context, e.g. 1 for NIA1, then execute the relevant code,
	such as a write hook.  However, the problem was that the code
	executing in the write hook then saw the environment wrt. this
	temporary context, which was incorrect.

	The new system propagates a context index to read and write hooks;
	the hook code then uses this index when reading or writing the
	register.  Modifies mod31.adl and in96.dat to test this.

2007-03-21  Sergey Khristo  <b08077@freescale.com>

	** Added support for split (non-contiguous) register fields.  For
	example, the following declares a split register field:

	<pre>

	define(reg=R) {
	  define(Field=Foo) {
	    bits = (1,(11,15),(16,20));
	  }
	}
	
	</pre>

	This field consists of bits 1, 11 through 15, and 16 through 20.

2007-03-20  Brian Kahne  <bkahne@freescale.com>

	** ADL now recognizes UVP E:F cards.  These represent attempts at
	an instruction fetch which were unable to complete for some
	reason, such as due to an instruction storage interrupt.

	An example is:

	<pre>
	
	    E : F {ea=0x0000000067678000; c=2;
		     ir={[ t=>"intr", msg=>"itlb", vector=>0x0000000000006b90 ],
			 [ t=>"reg", rn=>"SRR0", d=>0x0000000067678000 ],
                         [ t=>"reg", rn=>"SRR1", d=>0x2002aa12 ],
                         [ t=>"reg", rn=>"MSR", d=>0x00020202 ],
                         [ t=>"reg", rn=>"EDBSR0", d=>0x02000000 ],
                         [ t=>"reg", rn=>"SBSR0", d=>0x88000000 ],};};

	</pre>

	Support was added to the UVP reader, writer, and tracediff.

	* To test the above E:F card, in94.uvp was added.  in94.dat is the
	source for the UVP, but isn't itself used by the regression.
	
2007-03-16  Hangsheng Wang <hangshen@freescale.com>
	* Add a specialized PipelineStage class: BranchUnit, which supports
	variable taken latency and non-taken latency.

	* Remove instruction packet pointer from base OSMMachine class.  Hence
	remove lots of unnecessary type conversion.

2007-03-15  Brian Kahne  <bkahne@freescale.com>

	* A number of fixes were made to the transactional-ISS generator:

	1.  We were incorrectly using a simple, monotonically increasing
	counter for operand indices for the read-op and commit functions,
	rather than having them correspond to the slots and reflect the
	actual number of operands present.

	2.  We weren't properly allocating slots for helper functions:  We
	weren't taking into account inter-helper function allocations.
	So, for example, one helper might use slot 0 for CR and another
	might use slot 0 for XER.  If both of those helper functions were
	used by an instruction, there would be a conflict.

	mod1.adl was modified to have a helper function which modifies the
	XER register.  The addic. instruction calls helpers for updating
	it and the CR register in order to test this stuff.

2007-03-15  Sergey Khristo  <b08077@freescale.com>

	* CDCpp57446: Intermediate results counter counts instruction and exceptions.

	* CDCpp57566: Introduced global counter. For UVP files global and local counters are reported, 
	for DAT - only global. Changed regression, also added tracediff tests for lengthcheck.
	
	
       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.23 (v0_3_23) on Linux (lb32001) on 3/14/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.23 (v0_3_23) on Linux (lb32001) on 3/14/2007 ==

2007-03-14  Brian Kahne  <bkahne@freescale.com>

	* CDCpp57595:  We weren't flushing the MMU cache on a write to a
	translation array, which means that if the write affected a
	translation that was currently cached, it might not reflect the
	change.  Added a call to clear_mmu_cache() in the proxy object to
	take this into account.  Added iss/in91.dat to test this.

	* If multiple instruction tables are present, then the
	default/reset-state value is the first item in the list of
	instruction tables.  Modified fe/inst19 to test this.

	* Added the itable_watch function, which can be used to watch
	for the current instruction table.  It's analogous to the 'active'
	function and should be used if the current instruction table is
	selected via a register, so that the system will be consistent
	when a testcase is loaded.  Modified iss/mod8 to test this.

	* Added syntax to allow the user to remove a function: The
	constant "0" is used to signify this, e.g. "active = 0;".
	Modified fe/inst19 to test this.
	
2007-03-14  Sergey Khristo  <b08077@freescale.com>

	* Added support for arbitrary width instruction encodings.
        
	Changes:
	fe/: Field width is up to 64 bits. Opcodes and masks 
	are now RNumbers.  Added error message for failour in construction 
	of the decode tree due to inconsistent encoding. If opcode field 
	crosses word boundaries  (for example: bits=(29,34)) then we cut it 
	into two (or more) fields at word boundary -- for simulator it is 
	faster to work always on one word independently of others.
        
	asm/: Disassembler recieves pointer to uint32_t instead of uint32_t.
	Getters and clearers may take multible parameters.         

	iss/:Back end changes: Data read from instruction memory is kept in
	array of appropriate size. Additional words are read only when
	needed. Writers,readers and tracediff  were modified in order to 
	handle large opcodes. In uvp files "d"-list maximum size set to 5.
	
2007-03-13  Brian Kahne  <bkahne@freescale.com>

	* Minor modifications made to the include directives in generated
	uADL models in order to accommodate Windows.
	
	* Moved main() out of ExecSupport.C and into Main.C so that for
	the Windows port, it can be in its own library.  This is
	necesssary because I can't figure out anyway to mark main() as a
	weak symbol on Windows.

	* Minor fix for transactional ISS generation:  We had a bug which
	caused a segfault when generating commit handlers:  We weren't
	handling fixed register-file fields correctly.  Modified
	mod3.adl/tdriver2 to test this.

2007-03-12  Brian Kahne  <bkahne@freescale.com>

	* Minor Windows porting fix: Removed unnecessary use of "template"
	keyword in MemoryInterface.h: GCC ignored it but Visual was
	barfing on it.

2007-03-12  Brian Kahne  <bkahne@freescale.com>

	* Recovery from bad merge/commit.

2007-03-12  Zigu Haras  <zigu.haras@freescale.com>

	* Enhanced ADL syntax to support StarCore prefix usage
	and encoding style. The enhancments were introduced only
	in the front end.
	These enhancements include: 
	"blks" key denoting architecture logical block; and "blk"
	key in instruction and instruction field which associate
	an instruction or field with a block.
	"prefix" key for instructions and instruction fields to 
	denote prefixes and their fields.
	"pseudo" - instruction denotes a template instruction which
	describes insturctions encoding composition from prefix fields 
	and from the instruction's fields. 
	A "type" key associates an instruction with a pseudo instruction.
	Instructions can have one-level nested instruction definitions 
	within 	them. This can be used to group an instruction and 
	its aliases in one place. Nested instruction names have 
	architecture scope and must be unique.The "fields" key in 
	instructions was enhanced to support bit-mapped encoding,
	e.g., 
	   fields = ((bits(0,1),Da),(bits(2,5),Db(0,1)),(bits(6,9),0xE),(bits(10),reserved);
	where Da,Db are instruction fields and the last entry is 
	associated with the variable length opcode field. The keyword
	reserved indicates that this bit does not take part in encoding. 
	"fields" key was added to instruction fields to describe
	the value returned by the field. Typically, in StarCore 
	architecture, it is a combination of prefix bits and instruction bits.
	A field may use "action" code as an alternative way to specify returned value.
	In this case, the value returned should be  assigned the ThisField variable.
	"size" key was added to instruction for the width in bits of the 
	value retuned by the instruction field.
	"width" key can have "reserved" value, denoting a variable 
	width field used to encode opcodes. Only one such field is
	allowed per instruction.
	A default value, denoted "value", can be defined for non-enumerated fields,as well.
	A "pseudo" instruction field can now be used in action code, it denotes a field
	that is not associated with bits. 
	The "ref" key in a prefix field points to the pseudo prefix field 
	the instruction points to.
	The key "indexed = k" in a prefix field denotes the field can be viewed as 
	an array of k-bits subfields.
	An instruction field may have one-level of nested instruction fields. The "bits"
	of such a field are relative to the encapsulating field. A nested instruction field
	can be addressed in the encapsulating field by its name, and in global scope using
	the "." dot operator. Thus, if field A constains field B, B can be accessed 
	in an instruction using A.B notation. 
	The above stuff was tested by fe/inst53 - fe/inst60 tests. 
	
2007-03-09  Brian Kahne  <bkahne@freescale.com>

	** The reset sequence has been changed so that registers and
	register files without explicit reset values are still reset to a
	default value of 0 for a power-on-reset condition, i.e. the
	beginning of a test or a call to IssNode::reset(), but an internal
	reset, i.e. one generated by a call to resetCore() within action
	code, leaves them unchanged.  This means that it is now simpler to
	model, for example, a watchdog-timer reset which explicitly leaves
	a whole series of registers unchanged.

	* The above reset stuff is tested by mod11/in81.dat, which was
	modified to test this behavior.

	* Minor change to transactional ISS for the Windows port:  You
	can't forward declare a class twice, or else it confuses Visual
	C++.  Weird, huh?  So I had to remove a redundant forward
	declaration of InstrPacket.

2007-03-08  Brian Kahne  <bkahne@freescale.com>

	* CDCpp57448: Logging of the first write of a misaligned 64-bit
	write was being logged after the second translation occurred, so
	that cache status for the second write was being picked up for the
	first write.  In this case, the second write was to cache
	inhibited space, so we logged the memory contents of the value of
	the first write because we were erroneously in cache-inhibited
	space.  Fixed this by moving the logging command to be before the
	second translation.  In order to test this, mod21.adl now has a
	simple MMU and cache-inhibited translation logic was added.  The
	test in90.dat was added to test this: It does a misaligned 64-bit
	store, where the first translation is not cache inhibited and the
	second is.

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.22 (v0_3_22) on Linux (lb32001) on 3/7/2007 ==

       == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.22 (v0_3_22) on Linux (lb32001) on 3/7/2007 ==

2007-03-07  Brian Kahne  <bkahne@freescale.com>

	* The release notes now directly include the stylesheet
	information because I don't know of a good place to put the
	stylesheet: It seems like all of the servers out there require
	logins, which means that the stylesheet might not be fetched.

	** The cache API has been expanded to include invalidate, flush,
	and store routines which take a set and a way as a parameter.
	Previously, equivalent routines only existed which took a
	real-address as a parameter.

	* mod18 was modified to test the above routines.
	
	* Added range checking to cache API functions which take set/way
	values.  A runtime_error is thrown if they're out of bounds.
	
2007-03-07  Michele Reese  <michele.reese@freescale.com>

	* iss/GenCache.C: 

	CDCpp57506:  The problem was the L2EIP exception was thrown before
	the cache was loaded because the L2 is a victim cache so it never
	made it up to the L1.  Updated the Altair model to set
	EIP_CFG.pendingThread when an EIP is detected in the miss hook.
	Then the line_access function checks for this status bit to
	determine if it should throw the EIP  exception. Removed try/catch
	blocks in the miss hooks in GenCache.C. Added regression test:
	dumb_polling.elf  

2007-03-06  Sergey Khristo  <b08077@freescale.net>

	* Added regression tests for remaps.  
	
	Minor fix in UvpFlexerLexer.C: For some reason lookback value was zero 
	(instead of page size) and flexer got garbage for negative offsets. 
	The problem may be in the order of includes of memory map support files. 
	
2007-03-06  Brian Kahne  <bkahne@freescale.com>

	** The UVP writer now supports register updates to cores other
	than the one executing an instruction.  The register name has the
	path to the core being updated appended to it.  For example:

	      E : I {asm="mtspr r1,300"; c=2;
                     ea=0x0000000000000004; ra=0x0000000000000004;
		     d=0x7c2c4ba6; op=0x7c2c4ba6; ta=0x3; op_size=32;
                     ir={[ t=>"reg", rn=>"core1::FOO", d=>0x00000001],
                         [ t=>"reg", rn=>"FOO", d=>0x00000001],};};

	Note that the format is such that the top-level element's name in
	the hierarchy is not included in the path name in the register
	update.

	** Added support to the UVP reader and writer for handling
	misaligned instructions.  The new UVP format looks something like
	this:

	E : I {asm="subf. 3,4,3"; c=2;
               ea=0x0000000000000002; ra={0x0000000000000002,0x0000000000000004}; 
	       d={0x7c64,0x1851}; op=0x7c641851; ta={0x3,0x3}; op_size=32;
               ir={[ t=>"reg", rn=>"CR", d=>0x40000000],
                   [ t=>"reg", rn=>"G3", d=>0x00000009],};};	

	The real-address (ra) is a list where the first ra is misaligned
	and the second ra will always be aligned.  The data value (d) and
	translation attributes (ta) are also lists.  The opcode size is a
	single value and represents the size of the entire instruction.

	* Added the above support and also modified tracediff.  Now, when
	a UVP value is copied to an intermediate result card, rather than
	just copying simple values, we have to handle aggregates.  We do
	this by flattening lists such that each element of the list is
	copied so that the key is of the form key<n>, where n is the index
	of the element in the list.  For maps, we copy things over with
	keys of the form key:mapkey.

	* Fixed a bug in the UVP parser: The line numbers were incorrect
	when we parsed a file which contained multiple top-level items
	because the parser's location object was actually a local variable
	of the parse() function and was thus reset each type parse() was
	restarted.  Fixed this by always saving @$ into a UvpParser member
	variable.
	
2007-03-02  Hangsheng Wang <hangshen@freescale.com>

	** Change OSM semantics to support both state actions and edge actions.
	By this mechanism, the user can now put only transition actions on 
	edges, which may depend on the outcome of state actions.

2007-03-02  Brian Kahne  <bkahne@freescale.com>

	* Fixed a minor issue with memory-mapped files:  Remapping didn't
	work b/c I didn't pass in the base address that it needed.

	I also fixed tracediff so that it will correctly switch into
	incremental mode: It was just checking the first two C arguments,
	which could be options, rather than checking the actual source
	file names discovered by AnyOption.

2007-03-01  Brian Kahne  <bkahne@freescale.com>

	* Changelog addition test 1.

2007-02-28  Brian Kahne  <bkahne@freescale.com>

	* Minor fixes related to the Windows port.

	* Various changes for the Windows port.  You can now compile
	a standalone executable with DAT file support.

	* For now, I've commented out the GDB stdio tests because their
	operation is unreliable on Linux.  I don't know why- it looks as
	if the OS is dropping the signal.  This might be related to the
	performance issues we're seeing on the new Opteron workstations.

	* Moved the memory-mapped file access routines into a new file,
	MmapFiles.{h,C} so that these could be ported to Windows and
	reside in a single location.

2007-02-27  Brian Kahne  <bkahne@freescale.com>

	* Forget it:  Windows has strtoi64, so I'll use that for now.

	* Added implementations for strtoull and strtoll for systems which
	don't implement it (Windows).

        == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.21 (v0_3_21) on Linux (lb32001) on 2/27/2007 ==

        == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.21 (v0_3_21) on Linux (lb32001) on 2/27/2007 ==

        == file:///proj/.ppc_43/vc_noec/svn/adl release 0.3.20 (v0_3_20) on Linux (lb32001) on 2/27/2007 ==

2007-02-22  Brian Kahne  <bkahne@freescale.com>

	* Added a "heartbeat" option to the ISS with the --heartbeat=n
	option.  Every n instructions, each core will display a message
	listing its instruction count.  This was also added as the
	"icount" command in the interaction manager and CLI, so it's also
	available as a monitor command in gdb.

	* Major modificaiton to the TCL/CLI interface: I thought that the
	use of SWIG was adding a lot of complexity, since we had a small
	TCL function that converted all arguments to a single string, then
	we split those up again.  Instead, I'm just using the native TCL
	interface, which uses an argc/argv calling pattern.  It should be
	sufficient for now.  Using SWIG with the object-oriented interface
	might be nice in the future.  In the future, we should also extend
	the CLI's line-completion handling so that multi-line tcl commands
	will be supported.

	* Added the 'icount' function to the interaction manager and to
	the CLI.  This returns the instruction count for the current or a
	specified node.  When using the scripting interface, it not only
	prints a message but also returns the value so that it can be used
	by the interpreter.  Added cli/c20.cli to test this and updated
	adl-iss-cli.rst to document this new command.
	
2007-02-22  Sergey Khristo  <b08077@freescale.com>

	* CDCpp57385: tracediff: Instruction counter was not handled 
	properly in incremental mode.

2007-02-21  Brian Kahne  <bkahne@freescale.com>

	* helpers/AnyOption.C (adl): Changed the behavior so that if an
	item follows a negated option and is not an option, then it's
	regarded as a plain value.  Otherwise, we'd end up with issues for
	when that's what the user intended- we would previously report an
	error.  For example, this used to fail:

	--no-output in2.dat

	Because in2.dat was regarded as an option for "output", which was
	negated.  Now, it's considered just a plain value.

	* Fixed a segfault when writing UVPs with a transactional ISS.
	The problem is that the debug memory access routines, used by the
	UVP to get the current memory state, were incorrectly using the
	transactional-ISS memory interface, which was not set up to be
	used.  Instead, the debug memory interface uses the normal debug
	route so that no simulation time is consumed.

2007-02-20  Brian Kahne  <bkahne@freescale.com>

	* Added a new CLI regression, c19.cli, to explicitly test the use
	of TCL control structures.  I also moved towards having the
	regressions use the --script option rather than file redirection,
	unless specifically requested.

	* Reworked the UVP writer's data structures so that they are not
	garbage collected because of the fact that many of them use
	RNumber, which is an external class and is not GC'd.  Thus, they
	must be cleaned up manually, meaning that we would need finalized
	objects.  However, if we do that, then we want to clear out
	internal containers at the end of a test so that constituent
	elements can be collected, e.g. the list of instruction entries
	should be cleared because otherwise, they would be considered
	reachable, since the parent object, CoreInfo, is finalizable and
	if a finalizable object points to some object, then that object is
	not considered collectable.  In order to clear out these internal
	data structures, the code looks very similar to a destructor, so
	it seemed to make sense to simply switch over to manual memory
	management for this application.

	* Added the gc_string class so that a gc'd C++ string is
	available.  The front-end needs to be converted over to use this.

	* Added a new finalizable base class, gc_destruct, which does an
	immediate destructor call without worrying about topological
	ordering.  This is useful for objects which need to be finalized,
	but have simple destructors and are contained within STL data
	structures which might fool the collector into thinking that they
	are reachable, when they really shouldn't be considered as such.
	
2007-02-19  Brian Kahne  <bkahne@freescale.com>

	* Various changes for the Windows port.  Mostly minor- just
	various tweaks.  One thing is that the intbv arbitrary-sized
	algorithms have been hacked to only support up to 128-bits on
	Windows because of Visual 8.0's lack of support for C99
	dynamically-sized arrays.  This will need to be revisited to use
	alloca, when we have time.

2007-02-15  Brian Kahne  <bkahne@freescale.com>

	* Initial work for the Windows port: We can use the Boost typeof
	implementation available in Boost RC 1.34.0 to replace gcc's
	typeof implementation.  It's not quite as nice, since you have to
	register some types, but it seems to pretty much work: I was able
	to compile the back-end libraries and mod1.cc with the -ansi
	switch and the Boost code.  Boost is not currently required, but
	the support was added to Macros.h.


2007-02-15  Sergey Khristo  <b08077@freescale.com>

        * Fixed defmod bug for instructions: for instructions that did not 
	exist at parse-time it was not possible apply 'defmod'. 
	  Now, when seeing unknown  instruction new dummy handler is built 
	and to its instruction dummy flag is set.
	 During finalize all newly built instruction are checked for being 
	defmod'ed and are modified appropriately.

	* Added support for referring to a set of instruction using 
	subinstruction.	Now, 

	defmod (instr = subinstr_a) {...;};
	
        means that changes should be applied to all instructions built from
	this subinstruction and not to the subinstruction object. Also 
	handled by dummy instructions.

        * Attributes assigned to subinstruction are inherited by instructions
	built from it. Attributes of succinct instruction are inherited by
	all instruction built.

	* Added support for "remove_attrs" key in defmod.
	
	** Added support for group construct. Group can consist only of 
	objects of the same type. Subinstruction and instructions are 
	considered to be the same type (StarCore team requirement). Set 
	difference and set intersection are also supported. 

2007-02-12  Brian Kahne  <bkahne@freescale.com>

	* CDCpp57247:  Fixed a bug handling reads of fields for registers
	and register-files.  If the field wasn't indexed, then we'd drop
	any trailing function-call parameters.  So, if the user was trying
	to extract a slice, e.g.:

	   var x = FOO.A(0,8);

	The resulting code would drop the slice.  Fixed this by adding
	back the transformed parameters if we do not have an indexed
	field.

2007-02-12  Sergey Khristo  <b08077@freescale.com>

	* Enhanced tracediff to handle large files.
	Added possibility for incremental parsing. Now, if input files are
	larger then ~200M tracediff automaticly switches into incremental mode:
	For the found file handlers are created in filtering mode. This means 
	that that handler reads only trace data from specified core, 
	context and test, everything else it ignores. The handler with 
	empty target  	core and empty target context also reads all the 
	results information, it is used to check final results.
	The flow is as follows: expects's handler reads chunk of trace and
	checks intermediate results with appropriate found's handler.
	After all intermediate results are diffed, we check final results.

	* Out of memory in UvpWriter. 
	In iss/UvpWriter.C was added counter for intermeidate results.
	When trace is too big writer stops with descriptive message.

2007-02-09  Brian Kahne  <bkahne@freescale.com>

	* CDCpp57171: In RemoteGdbServer::remoteSetMemory, we were using
	strncpy to copy chunks of data to a temporary buffer and then
	using sscanf to convert that to an integer.  The problem is that
	strncpy doesn't add a terminating null, so sscanf was sometimes
	reading garbage data.  Fixed this by simply adding a terminating
	null after the strncpy and before the sscanf.

	* Modified how setMem and getMem are generated: Rather than
	enumerating every possible element of a register file in the
	if-then-else chain, I now try to match the prefix, then extract an
	integer as a suffix.  If that works, I then set the value.  A two
	functions, <regfile>_debug_(set|get), handle getting and setting
	values of a register file.  Sparse register files are now
	supported, too, so the user can set, e.g. SPR20 or "n=SPR, i=20".

2007-02-08  Brian Kahne  <bkahne@freescale.com>

	* Fixed tracediff so that the max-tests option will work as
	expected- we had an off-by-one error so that if it was told to
	check only the first test, it wouldn't check anything.

	* Minor edits to port to gcc 4.1.1.

2007-02-07  Brian Kahne  <bkahne@freescale.com>

	* Caches may now have a variable number of ways or sets.  The
	currently active values are set using predicates which are
	activated on writes to registers that they look at.  Added
	fe/cache6.adl and fe/cache7.adl to test the front-end stuff and
	modified mod18.adl to test the feature in a simulation.

2007-02-02  Brian Kahne  <bkahne@freescale.com>

	* Ported the setjmp/longjmp coroutine support to x86_64.

	* The GDB server's m and M commands now read effective addresses
	through the memory hierarchy.  If you want direct access to
	memory, you should now use the qadl.m and qadl.M commands.

	* Re-worked the memory interface so that setMem and getMem allow
	multi-sized accesses and work across all memories defined for the
	system.  There's now also debug_data_read, debug_data_write, and
	debug_instr_read, which can read either EAs or RAs and read
	through the cache.  They also allow multi-sized accesses.

2007-01-31  Hangsheng Wang  <hangshen@freescale.com>

	* Correctly model the behavior of a load/store instruction that is
	splitted into multiple memory accesses due to address misalignment.
	Now each memory access takes one extra cycle to finish.  This also
	fully utilizes the new exec() return value.

2007-01-31  Brian Kahne  <bkahne@freescale.com>

	* CDCpp57023: The GDB server now handles multiple clients when
	using the UDP protocol.  Previously, the problem was that the
	server could get confused because when it was waiting for an ack
	after sending a packet, a query packet from another client might
	arrive.

	Fixed this by tracking the address of the current client, that is,
	the address of the client which sent a request packet.  When such
	an address is set, we place any packets from any other clients
	onto a pending list and ignore them until a packet from the
	desired client arrives.  We then handle any pending packets.

	The gdb client has been modified so that a custom execution
	function can be called within an external program.  The
	multiplex.pl file tests the multiplexing behavior by sending out
	two request packets, followed by waiting for two response packets.
	This is tested with mod1/in86.dat.

2007-01-30  Brian Kahne  <bkahne@freescale.com>

	* More Solaris porting work.  Fixed a sigbus error caused by
	accessing a cache line.  The cache line was misaligned b/c of an
	odd number of boolean members.  Added padding so that this would
	always be aligned.

	The entire framework works on Solaris, except for the assembler
	generator and the gdb client.  The generated assemblers fail b/c
	Solaris' regex routines are *broken*.  The gdb client doesn't work
	b/c of differences in the I/O interface- this could be fixed if
	anybody cares.

2007-01-29  Brian Kahne  <bkahne@freescale.com>

	* CDCpp57108: Writes to a register with a write hook weren't
	showing up in intermediate results because an exception was being
	raised within the write hook.  Our tracing logic is invoked after
	the write hook finishes, so that logic was being skipped.  Fixed
	this by adding a try-catch block around the outer function if a
	user-supplied write hook is present.  Added mod3/in85.dat to test
	this.

2007-01-26  Brian Kahne  <bkahne@freescale.com>

	* A port to Solaris is mostly complete.  The gdbclient does not
	yet work and a few other issues are still there.  Changes were
	minor- mostly configuration issues.  The coroutine files were
	extended so that, on Solaris, the makecontext/swapcontext routines
	are used.

	Note that on Solaris, you must explicitly specify the location of
	the readline library.  Currently, this is the autogen.sh line that
	I use:

	./autogen.sh --disable-shared \
	--with-readline=/_TOOLS_/dist/gnu-readline-/4.3/sparc-sun-solaris2.8/ \
	--with-tcl=/_TOOLS_/dist/tcltk-/8.5a2/sparc-sun-solaris2.8/bin

2007-01-25  Brian Kahne  <bkahne@freescale.com>

	* Cleaned up various makefiles in order to remove unneeded
	dependencies, e.g. make-iss was dependent upon libRNumber, even
	though it didn't use it.

2007-01-23  Hangsheng Wang  <hangshen@freescale.com>

	* Use bison C++ mode to generate uADL parser in C++ instead of C.

	* Changed transaction code generation to cope with the new stage-wise
	transactional ISS, mainly for memory instructions.

        ========== adl release 0.3.20 (v0_3_20) on Linux (lb32001) on 1/22/2007 ==========

        ========== adl release 0.3.20 (v0_3_20) on Linux (lb32001) on 1/22/2007 ==========

        ========== adl release 0.3.20 (v0_3_20) on Linux (lb32001) on 1/22/2007 ==========

2007-01-19  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with coroutine-stack allocation for the
	transactional ISS.  We were incorrectly passing a pointer to
	the coroutine stack to the free routine for the coroutine stacks.
	This resulted in corruption of the _next pointers in the pool.

	Fixed this by adding a pointer to the instruction packet to store
	the pointer to the stack object for memory management purposes.

2007-01-18  Brian Kahne  <bkahne@freescale.com>

	* Changed how the pool allocator, used for instruction packets and
	coroutine stacks, works.  It used to be that the pointer used by
	the pool, and the object allocated, were treated as a union.
	However, that meant that the vtable pointer could be clobbered,
	since gcc puts the pointer at the front.  Changed the
	implementation so that the pool allocator requires that its value
	type have a _next pointer.  It then uses that for creating the
	free list.

	* Expanded the printing mechanism of instruction packets so that
	they print out operand information, if the operand is either dirty
	or has been read.

	* Modified the introspection functions so that there is a static
	version.  This allows other functions to query the introspection
	data without a class pointer.  The instruction packet printing
	mechanism uses this feature in order to get register names, given
	operand IDs.
	
2007-01-17  Brian Kahne  <bkahne@freescale.com>

	* Modified the logging interface so that the code for the
	dispatcher is generated via a perl script.  All events are listed
	in iss/logging_events.pm.  The script simple_logging_events
	generates the basic logger used for non-transactional ISSs.  The
	generated file is LoggingMgr.C and is compiled into the library
	libAdlIssLogging.la.  For transactional ISSs, the logging code is
	stored in TransLoggingMgr.C and goes into the
	libAdlIssTransLogging.la library.  The adl-config script was
	modified to have a --trans parameter to list the appropriate
	libraries.

	* For transactional ISSs, logging events are stored in temporary
	objects, then commited to client writers all at once via a call to
	log_commit().  Issue and completion times are also logged, using
	the time value in the global AccumTime.  So, this means that
	intermediate results should be accurate even when a transactional
	ISS is used in a pipeline model.

	These logging objects are not garbage collected because I found
	that the GC has problems when allocating in a separate coroutine-
	it can't see the main stack, so it has the potential to collect
	objects which should not be collected.

	The tdriver script was modified to have a very basic pipeline in
	order to test this functionality.
	
2007-01-12  Brian Kahne  <bkahne@freescale.com>

	* Each instruction transaction now has a disassembly-function
	pointer, which is used by the extraction operator, so that
	instruction packets can now be displayed.  Currently, only the
	disassembled instruction is printed, w/o any of the operand
	values.
	
	* Modified the transactional-ISS to use a coroutine approach for
	memory activity.  The coroutine coded is defined in
	iss/Coroutine.{h,C} and uses a setjmp/longjmp approach.  The code
	is based upon the Portable Coroutine Library
	(http://www.xmailserver.org/libpcl.html).  For this
	implementation, I simplified the original, converted it over to
	using templates, and added support for a class pointer as well as
	a data pointer.

	The way the interface works now is as follows:

	The model now has a member function, memory_request(), which
	returns a MemAccess object which describes a memory request.  This
	stores the ea, ra, size, and type (read, write, ifetch).  Another
	member function, set_memory_result, takes a byte pointer and an
	offset, and is used to supply the result of the memory request.
	It's a byte pointer so that a cache line or memory page can be
	directly supplied.

	The new function, prefetch(), has been added.  This must be called
	first and if it returns true, it means that an instruction-fetch
	request was made.  The driver must service this request before
	calling fetch().  The fetch() function works as before: It returns
	an instruction packet.

	The calc_ea() function has been removed.  This is no longer
	necessary, since the ISS returns to the driver when a memory
	request is made.
	
	The exec() function now returns a boolean.  If it returns true,
	then a memory request was made and must be serviced through the
	memrory_request(), set_memory_result() interface. If it returns
	false, then it means that the instruction has finished its
	execution.  For a function such as lmw, this could involve many
	iterations, while a simple lwz will probably only result in one.
	However, a misaligned lwz could result in two iterations.

	A config parameter for the ISS generator (coro_pool_size) allows
	you to specify the number of elements in the coroutine stack pool.
	It defaults to 2, but should be sized according to the maximum
	possible number of concurrently executing load/store instructions.
	So, in other words, a load/store instruction which has finished
	execution and is sitting in a re-order buffer is not included in
	this list, but a unit which can simultaneously process three
	load/store instructions would need a pool of 3 elements.

	The tdriver script in tests/iss has been modified to handle these
	changes.  I've temporarily disabled the uADL regressions until
	uADL can be ported to use this new interface.
	
2007-01-10  Brian Kahne  <bkahne@freescale.com>

	* Fixed a small bug, whereby the default illegal-disasm function
	did not print the numerical value in hex.

	* Added a new function, available in action code, called
	resetCore().  This will set the core to the reset state and log
	the new initial state (currently just registers and MMU) as
	intermediate results using the logging interface.  Test in81.dat
	with mod11.adl was added to test this.

	In order to implement this, extra ReportBase-derived classes are
	generated.  The relevant reset routines (resetRegs, resetMmu)
	instantiate these classes and then call the relevant show routine
	using it.  This class just converts report method calls to the
	appropriate logging function call, which is then sent to the
	relevant test writer.

2007-01-09  Brian Kahne  <bkahne@freescale.com>

	** In order to support the ability to model partially-executed
	stores, whereby a misaligned store which crosses a page and causes
	an interrupt on the second page will complete the write to the
	first page, and atomic stores, whereby for the above operation, no
	portion of the store would complete, various changes were made:

	1.  All write operations in Memory.h now perform all translations
	before any memory operations are performed.

	2.  A new hook was added to the mmu, misaligned_write, which is
	called between write operations for misaligned writes.

	3.  The permission checking and hit and miss handlers were
	modified to take an additional argument

2007-01-08  Brian Kahne  <bkahne@freescale.com>

	* Logging of 'ta' fields in a UVP file was incorrect for 64-bit
	load/store operations which crossed a page.  This was because we
	treat these as atomic: All translations are done before any memory
	modifications.  So, the last ta value is then applied to all of
	the memory accesses.  This atomic-access isn't currently true for
	other than 64-bit accesses, but it should and will be soon.

	Fixed this by adding a sequence number to all MMU and memory
	logging events.  The UVP writer is then able to track which
	translation goes with which memory access and then log those
	appropriately.

	* Fixed a problem with reading in UVP files and setting up
	translations.  The manipulation of the EPN/RPN fields,
	necessitated by issues related to Raptor, was overly specific to
	PowerPC.  I generalized this somewhat so that it would work for
	simple models such as mod11.
	
2007-01-08  Zigu Haras  <zigu.haras@freescale.com>

	* Modified parallel execution syntax and implementation.
	A parallel execution is declared by parallel_execution key in
	the architecture. A serial register/regfile is marked with
	the serial key.

2006-12-29  Hangsheng Wang  <hangshen@freescale.com>

	* <iss/GenInstr.C> Fix slot generation so that every target has a
	"_used" target.

	* <iss/GenInstr.C> Reset op_read information in generated instruction
	packet reset() method.
	  
2006-12-24  Sergey Khristo  <b08077@freescale.com>

	* Add support for parametrized attributes.

2006-12-19  Sergey Khristo  <b08077@freescale.com>
	
	* Add support for syntax and dsyntax definions with expressions.
	Implemented algorithm for automatic derivation of dsyntax,
	works on all instructions from the QE's assember. 

2006-12-19  Brian Kahne  <bkahne@freescale.com>

	* The log_instr event now transmits an instruction size.  The
	DatWriter and UvpWriter shift the opcode value accordingly.  The
	UvpWriter also includes the op_size key to specify the opcode
	size.

	* The UvpWriter has been modified to handle misaligned
	instructions, such as VLE instructions.  The writer stores the
	instruction's ea on the log_instr_prefetch event.  Then, on
	log_instr_read events, it stores the ra, but takes the
	least-significant-nibble from the ea.  It also shifts the data
	value based on how many bytes remain.  Added a test to mod2 which
	reads in5.uvp to test this and the point above.
	
	* The instruction packet in a transactional ISS now stores the
	instruction's address.  If the instruction has the cia as a
	source, then that slot is filled during fetch, so that the cia is
	always the cia of that instruction.

	* Fixed a bug in VarWalker, where we were counting as targets
	registers which appeared in the left side of an assignment, but as
	arguments to a function call, e.g. Mem(<expr1>) = <expr2>.  In
	this case, <expr1> is a source, no a target.  Fixed this by
	pushing a 0 onto the _in_assign stack when calling populateArgs in
	TranslateFuncall().  Added tests/fe/inst44.adl to test this.

2006-12-18  Brian Kahne  <bkahne@freescale.com>

	** Contexts in ADL are now understood to be threads by the data
	model if they contain the current-instruction-address register
	(the register identified using the "cia" attribute).  This fact
	(whether or not it's a thread) is placed into the introspection
	data for any given model and is then used by the test writers.

	The prior approach, requiring an attribute of "thread", is no
	longer necessary.

2006-12-15  Brian Kahne  <bkahne@freescale.com>

	* Handling of thread-specific register accesses has been redone.
	These are now transformed into calls to context-specific
	functions, e.g. FOO_ctx_write(), etc.  Fields and slice-accesses
	are now also supported.  mod3.adl was modified to test this; a
	small context and a series of operations in the "tw" instruction
	were added.

2006-12-14  Brian Kahne  <bkahne@freescale.com>

	* Modified how registers and register files are accessed within
	the ISS.  Rather than writing extra copies of access functions to
	handle different data types that might be used by action code to
	index into fields and register files, I now surround all index
	expressions with a call to to_uint32() (defined in
	ModelSupport.h).  This function is overloaded to handle integers
	and bits objects.

2006-12-14  Zigu Haras  <zigo.haras@freescale.com>

	* Add suppport for parallel execution of exection sets of 
	fixed size. Tested by mod34.adl, mod34.ttc and in77.dat

2006-12-13  Brian Kahne  <bkahne@freescale.com>

	* The send() method of an eventbus now takes a second boolean,
	signal_self = false, which if set to true, means that the act of
	sending will invoke all registered handlers, even that of the
	sender.

	* The UVP writer will now emit E : A cards for any exceptions
	which have the "asynchronous" attribute.  The UVP reader has been
	modified to ignore E : A cards and the tracediff program will
	treat them as instructions, comparing their intermediate results
	in the same manner.

	mod3.adl has been modified so that its Decrementer interrupt has
	this attribute.  It is tested against in76.uvp to make sure that
	the UVP generated contains these cards.

2006-12-12  Brian Kahne  <bkahne@freescale.com>

	** Modified how exceptions work.  The user may now call
	setException(<name>) to simply register that an exception has
	occurred.  It will be serviced once the current instruction has
	been committed.  raiseException(<name>) works as before.
	Exceptions are handled in reverse priority, so that the effects of
	a higher priority exception will take affect over those of a lower
	priority.  Test in76.dat tests the use of setException and the
	handling of multiple, simultaneous exceptions.

	* Documented the enum type of an Exception so that users can catch
	an exception, such as when thrown by an MMU hook.
	
2006-12-11  Kishore Paul <kishorep@freeescale.com>

	* iss/RemoteGdbServer.C/GdbServer.C: 
	Added support for thread switching communication to gdb and fixed a
	bug  to sync thread switches on breakpoints. Added mt_eip to test
	this.

2006-12-08  Brian Kahne  <bkahne@freescale.com>

	* iss/UvpWriter.C (adl):  Fixed a bug, whereby the RES card's ta
	field would be incorrect if the final instruction was a branch,
	rfi, or other change-in-control instruction.  The problem was that
	we were fetching the ta from the last instruction on the list,
	rather than from the translation done to obtain the ra of the
	program counter.

	Instead, we now enable logging of mmu translations, get the
	program counter, swithc the logging back to its prior value, and
	then get the ta from the cached last-instruction-translation,
	which was updated by the action of getting and translating the
	program counter.  Added designs/end_on_rfi.uvp to test this.

	* Added the _op_read field to the instruction packet, which tracks
	which operands have been read.  This is set by using the
	set_slot() method and may be queried by using the is_op_read()
	method.  The idea is that this allows a performance model to
	detect which operands have been read, if necessary.

2006-12-07  Brian Kahne  <bkahne@freescale.com>

	* Added a branch_info() method to the instruction packet of a
	transactional ISS.  This returns pair<bool,bool>, where the first
	boolean indicates whether the packet stores a branch and the
	second represents whether the branch was taken or not.

	* Added a unique ID to every instruction in a core.  The
	instruction packet of a transactional ISS now stores this ID.

2006-12-06  Brian Kahne  <bkahne@freescale.com>

	** Added support for using UDP as a protocol for the GDB remote
	serial protocol.  This can be selected by using the --gdb-udp
	command-line option.  Since this protocol is connectionless,
	multiple clients can all send traffic to the server at once.

	** Added an option, --gdb-halt, which toggles whether the server
	starts in a halted state if the --gdb option is selected.  To
	start executing immediately, you simply negate the option,
	e.g. --no-gdb-halt.  This can be used, for example, if the user
	wants to run a program on the ISS and then have a client program
	interrogate the ISS, such as to query for memory values.

2006-11-30  Brian Kahne  <bkahne@freescale.com>

	* Miscellaneous fixes to get building in a separate directory from
	the source working again.

2006-11-29  Brian Kahne  <bkahne@freescale.com>

	* The ftp-compass script now gets it param1 value from a file in
	the user's home directory called .compass.param1.

	* Added flex.m4 for finding flex and its include file.  We now try
	to discover the location of the include file by using which and
	resolving a symbolic link, if necessary.  If that doesn't work, we
	try w.which.  If that fails, then the user must specify the
	include path explicitly using --with-flex-include.

	* Modified bison.m4 to use the same argument and version checking
	convention as used by plasma.m4 and flex.m4.

2006-11-20  SERGEY KHRISTO  <b08077@lfreescale.com>

	** Enumerated instruction fields support default value, denoted by 
	the keyword `value`.

	Enumerated fields may have multiple mnemonics for the same value.

	An instruction syntax string supports the "%p" construct denoting
	the corresponding enumerated fields may appear in any order in
	the assembler without affecting their interpretation.This fields,
	if exist, must preceed the non commuting fields.

	Added a pseudo instruction field which can be used only in aliases
	and affects only the syntax. 

	The valid_ranges keyword was added to instruction fields, it consists
 	of a list of integer pairs. The field's value must be in one of
	the allowed ranges.

	The valid_masks was added to instruction fields, it consists of
	a list of integer pairs, interpreted as (a mask, value) pair.
	For a valid field value, there must be a pair s.t., the field
	anded with the mask equals the prescribed vlaue anded with that
	mask. 

	The '$' sign can be used in immediate operands instead of '0x'.

	The make-db utiity reports on an instruction inputs/outputs. 

2006-11-17  Brian Kahne  <bkahne@freescale.com>

	** We now use asynchronous I/O for the GDB server.  Rather than
	constantly polling for activity, we set up a signal handler.  When
	a packet arrives, the signal handler fires.  This causes us to
	temporarily set the _active flag for the simulation to false.  The
	upshot is that we now no longer pay a penalty vs. running w/o the
	debugger.

        ========= adl release 0.3.19 (v0_3_19) on Linux (lb32001) on 11/16/2006 =========

        ========== adl release 0.3.19 (v0_3_19) on Linux (lb0169) on 11/16/2006 ==========

2006-11-16  Brian Kahne  <bkahne@freescale.com>

	* We were not properly translating arguments to memory accesses.
	Fixed this and modified the stb instruction of mod1.adl to test
	this by moving the address calculation logic into the Mem call.
	
	* Added support for aliases to target slices of the target.
	Modified tests/iss/mod3.adl and added in74.dat to test this.

	* Added warnings if an alias' target is of a different size than
	the alias.  If an alias does not have its width explicitly set,
	then its width will be that of the target.

	* Fixed an issue with intbv: We must have an explicit "unsigned
	int" constructor in 32-bit mode.  Modified NumberTest.C.in to test
	this.
	
2006-11-15  Brian Kahne  <bkahne@freescale.com>

	* If we can use the cached load or store translation, then we
	check to see if the last access was of a different type, e.g. the
	current access is a load and the last access was a store.  If so,
	then we execute the appropriate hit function in order to allow the
	model to be able to keep itself consistent.

	tests/designs/mmu4.dat test this feature.

	In this test, a store to cache-inhibited memory occurs, followed
	by a load to non-inhibited memory.  Previously, the load would get
	the wrong data, because the last hit function executed was the
	store and the load was to a cached translation.

	* ADL has been ported to AMD64.  However, there are still some
	failures in uADL that need to be addressed before we can do a
	complete release.

2006-11-15  Brian Kahne  <bkahne@freescale.com>

	* A CacheAccess parameter has been added to the enable(),
	replace(), invalidate_line(), and write_through() hooks of the
	cache.

2006-11-14  Brian Kahne  <bkahne@freescale.com>

	* New syntax has been added for accessing context registers
	directly, bypassing all read/write hooks and logging.  This allows
	the user to peak and poke values into other threads with minimal
	overhead.

	The syntax is:

	    <contxt>( <index> ) . <element>

	For example:

	    thread(0).DEC = thread(0).DEC - 1;

	Modified tests/iss/mod31.adl and in73.dat to demonstrate this.  It
	now has a private decrementer register (DEC), where all threads'
	decrementers are decremented after each instruction.  If a
	non-zero decrementer decrements to 0, then a thread swap occurs to
	the thread whose decrementer is now 0.

2006-11-10  Michele Reese  <michele.reese@freescale.com>

	* helpers/intbv_impl.h: 
	The signed comparison operations didn't work for different sized
	intbvs (the code wouldn't even compile).  Fixed this and modified
	callTemplatizer.pl and NumberTest.C.in to test these cases.
	
2006-11-10  Brian Kahne  <bkahne@freescale.com>

	* Further changes to how memory hooks are handled.  In the prior
	architecture, the write routine was called before the translation,
	if any, as made, making it impossible to model PowerPC's
	page-based little-endian flag.

	In the new methodology, all hooks have the same function
	signature:

	    func(unsigned s,bits<s> d) -> bits<s>

	In other words, they take a size and data value, perform any
	necessary transformation, and return the new value.

	The translation occurs first, followed by the hook, followed by
	the memory action.  The hook functions no longer directly access
	memory.

	The MemoryAccess class and write_internal routines were modified.
	They now take an ra as well as an ea and thus expect that the
	first translation is done prior to the call.  The model's
	mem_write routines perform this translation.  A subsequent
	translation may occur within the write routines for a misaligned
	access.

	tests/iss/mod28.adl was modified to support this new syntax.

	tests/iss/mod11.adl had memory hooks added to it which are set by
	an E bit in the translation.

	* Fixed the UvpWriter so that the "d" field for instructions is
	the actual memory representation, which might be byte-swapped,
	which is obtained form logInstrRead.
	
2006-11-07  Brian Kahne  <bkahne@freescale.com>

	* Modified how memory hooks are handled.  The syntax has changed
	slightly- refer to adl-notes.rst for the new syntax.  I also
	modified intbv so that its swap_bytes routine right-justifies
	after the byte-swapping.  This way, a swap on a 16-bit quantity
	works correctly.

	* A new memory hook has been added for instruction reads, called
	instr_read.  If specified, this is used for reading instructions.
	Otherwise, the 'read' hook is used, if one is specified.

	mod28.adl has been modified to check these new features.
	
2006-11-06  Michele Reese  <michele.reese@freescale.com>

	* iss/ElfReader.C: 
	Fixed bug where we were byte-swapping the data from the ELF binary
	before initializing memory.  We need to byte-swap the data that we
	want to interpret (section headers, sizes, offsets, etc.) but we
	don't want to byte-swap the data or opcodes as we initialize
	memory, we should just copy them straight over.  Added regression
	test sieve_le.elf to test this.
	
2006-11-02  Brian Kahne  <bkahne@freescale.com>

	* All width-specific integers are now of the form [u]int<N>_t in
	order to be compliant with POSIX standards.  These types are
	included from <stdint.h>, which is included in
	helpers/BasicTypes.h.

	This means, for example, that rather than using "uint32", you
	should use "uint32_t".  Using these new types makes porting much
	easier, since the base types for 64-bit integers can vary amongst
	architectures.

	If using [x]emacs, an easy way to replace these types is to do a
	regular-expression search and replace as follows:

	Search for:    \(u?\)int\([0-9]+\)\([^(0-9]\)

	Replace with:  \1uint\2_t\3

	This should avoid trying to replace something of the form
	"uint32()", which remains the accessor method for converting an
	intbv object into a uint32_t.
	
	* All C++ code in the ADL project has been moved into the 'adl'
	namespace in order to reduce the chance of conflicts with other
	libraries or code.

2006-11-01  Brian Kahne  <bkahne@freescale.com>

	** All standalone models now have the command-line-interface
	interpreter linked in.  This is accessible via the --cli
	command-line option.

	** By default, loading an ELF file on the command-line interface
	does not set the program-counter of the model to the file's entry
	point.  To have the reader do this, use the --use-file-entry-point
	or --fep option.
	
	* Modified the CLI so that it's always included in a model.  It's
	treated as another debugger as far as the main loop is concerned:
	If the --cli option is specified, we enter the CLI loop and exit
	when it's finished.

2006-10-31  Brian Kahne  <bkahne@freescale.com>

	** When using the GDB debugger interface, the result of issuing a
	monitor command is now sent back to GDB over the RSP interface, so
	that the data will appear in the GDB console.

	* The gdbclient script has been enhanced to now use
	select, sysread, and syswrite for better I/O performance.  It can
	also now handle commands which expect an arbitrary number of
	response packets.  The user just needs to set the 'extra' command,
	e.g.

	    :extra:qRcmd,72656773

	This sends a GDB monitor command of "regs", then waits for n
	packets in response.

	* Added a script called ascii2hex to aid in converting ASCII to
	hex strings or vice versa, when dealing with GDB monitor commands.
	
2006-10-30  Brian Kahne  <bkahne@freescale.com>

	* iss/UvpReader.C (update_cur): We weren't comparing model
	hierarchy names against UVP hierarchy names correctly due to how
	we were calling compare.  Fixed this by adding in a second size
	specifier so that the comparison is against substrings of the same
	size.  Added tests/designs/mp1.uvp to test this.

	* Modified UvpWriter::removeHalt() so that it traverses the
	complete CoreInfo tree.  We weren't properly removing halt
	instructions from MP/MT tests.  Added tests/designs/mp1.uvp to
	test this.

	* Moved FlexLexer.h out of iss and into a new subdirectory (flex)
	so that uADL, the UVP parser, and any other flex scanners can use
	this include file.

	* Bumped up the bison requirement to 2.2 b/c 2.1 wasn't sufficient
	for the features we require.

2006-10-27  Brian Kahne  <bkahne@freescale.com>

	* The interface for the transactional ISS has changed: The
	interface is now accessed as methods of the instruction packet and
	reading and writing of operands is now down individually, where
	the user specifies the index of the operand to read or write.
	Additionally, there is an operand array available so that an
	external program can query about what operands are used by an
	instruction.

	The tdriver script has been updated to support this new interface.
	
	* Switched back to having all register files and registers in the
	same "id" space, i.e. the first register has an ID of 0, the first
	register file has an id of num-registers.

	* Added native support for UVP handling to tracediff (formerly
	datdiff).  However, you can only compare UVP/UVP or DAT/DAT, since
	the formats differ by a fair amount.

	* Added the --ignore-reg=X and --ignore-extra-mem options to
	tracediff.  The first allows specified registers to be ignored
	when comparing two traces.  This can be useful, for example, for
	when a model does not contain a register that Raptor expects to be
	there, such as VPIA0 in Altair.  The second option says to ignore
	addresses which aren't in the found-file trace.  This can be
	useful, for example, when comparing against a Raptor UVP with
	cache instructions.  Since those addresses are never touched, they
	do not appear in the ADL ISS output UVP.
  
	These options can be accessed from within the regression by
	specifying an array reference as either the fifth argument to
	model_test, or use the 'ignoreregs' parameter for ext_model_test.
	
	* Fixed a number of bugs in the UVP writer.  We now track the last
	instruction and data translation separately in order to get the ta
	field for the instruction and data trace.

2006-10-25  Brian Kahne  <bkahne@freescale.com>

	* Fixed a pretty major bug in the regression: We weren't properly
	converting UVPs to DATs for comparison purposes if the input file
	was a UVP and a result DAT file was specified, meaning that we
	should convert the input to a DAT for comparison.  The fix was to
	modify make_checker slightly to catch this condition and do the
	appropriate conversion.

	* Fixed a bug in datdiff:  We were always incrementing
	_handled_cards at the top of DatHandler::handleCard(), so that
	even garbage would cause us to increment the counter.  Fixed this
	by moving the counter to only increment if we reach a RESULTS or
	TRACE section.

	* The QE tests are currently broken b/c they do not contains any
	expects data.  This needs to be fixed; I've sent an email to Zigu
	to ask him to look into this.

	* I temporarily removed test #4 b/c it appears that the test is
	not workin correctly and needs to be fixed.
	
2006-10-24  Michele Reese  <michele.reese@freescale.com>

	* cli/CmdLineIface.C: 
	CDCpp55187: The CLI now implements logCtxChange and logCoreChange
	so that it can detect breakpoints on the first instruction after a
	core or context switch.  We had a corner case where we were unable
	to break on that first instruction because we only check for 
	breakpoints at the bottom of the simulation loop (after the NIA
	has been bumped). Added CLI test 13.

2006-10-23  Brian Kahne  <bkahne@freescale.com>

	* The parsing classes have been moved into a new library,
	libAdlParsing.la.  This means that datdiff no longer requires all
	of the ADL libraries and thus doesn't have to define various dummy
	routines required by those libraries.
	
	* The bison stack class (in stack.hh) must be editted slightly
	using perl, in order for it to work with the gc: The deque class
	must use a traceable allocator.  Bummer.

	* A UVP reader is now part of the ISS framework.  It uses the UVP
	parser to load memory, registers, and TLB.  Some hacks are
	required, such as converting register-file shortcuts into the full
	name, e.g. G0 => GPR, index 0.  Also, EPN and RPN fields must be
	shifted by two bits (ugh) and IAR is converted to NIA (ugh).

	The regression has been modified so that uvp2dat is only used in
	order to create an expects file for datdiff.  The next step will
	be to enhance datdiff to support directly comparing UVPs.  The
	name of the program will probably change to tracediff, to reflect
	the fact that it is no longer limited to workin with DAT files.

2006-10-20  Brian Kahne  <bkahne@freescale.com>

	** The adl-dump program is now installed in bin and may be used to
	dump out an ADL data model in a human-readable manner.

	* Writes to registers and register-files in write hooks now call a
	<name>_write_inhook function.  This function respects reserved and
	read-only bits on the write.  mod3.adl and in64.dat were modified
	to test this.

	* If a register is an alias, then its read hook will return a
	const ref only if the target of the alias has no readhook.
	Otherwise, we would be returning a reference to a temporary.

2006-10-19  Brian Kahne  <bkahne@freescale.com>

	* Preliminary UVP parsing work.  We just create a simple test
	program for now using a C++ parser produced by bison and a C++
	scanner from flex.

2006-10-17  Brian Kahne  <bkahne@freescale.com>

	* Updated the uvp2dat routine to handle tlb intermediate results.

	* The disassembler now has an additional constructor argument for
	specifying whether extra white space should be appended to the
	instruction name so that the operands all line up in a column.
	This is on for the standalone disassembler and off for the ISS
	disassembler functions.

	* Moved the C/C++ I/O flag to the constructor for the disassembler
	class.

	* Added a check to VarWalker to disallow any assignments except
	simple assignments to registers or register files, e.g. no += is
	allowed.

	* Added a t=<type> key to the T card.  This can be either "instr",
	"load", "store", or "write".  The latter is for a tlb-write
	operation.  To implement this, an assignment to a TLB is now
	converted to a call of the write() method for the proxy object.

	* Updated the UvpWriter to handle TLB intermediate results.
	
2006-10-16  Brian Kahne  <bkahne@freescale.com>

	* The post-exec handler now works with a transactional ISS and
	records it actions into an instruction packet.  The decode-miss
	handler and pre/post-fetch handlers also work, but they directly
	modify architectural state.

	* For a transactional ISS, register field and slice functions are
	now generated in the original and instruction-packet aware manner,
	so that the decode_miss function can modify machine state.

	* Changed the slice_set functions to take a uint64, rather than an
	unsigned, so that larger scalar values can be specified.

2006-10-13  Brian Kahne  <bkahne@freescale.com>

	* The ISS generator code has been moved to GenSim.C and the
	entrypoint is accessible via GenSim.h.  All generation code is now
	contained in libAdlIss.la, so that the generator can be used as a
	library by other applications.

	* Added the calc_ea() function to transactional ISSs, which will
	return info about the first memory access encountered.  Added the
	--log-ea option to tdriver in order to test this feature.

2006-10-12  Brian Kahne  <bkahne@freescale.com>

	* Added support for exceptions and register/register-file field
	and slice accesses.

	Exceptions are handled by catch an exception in the exec() for
	fetch() functions.  For fetch(), we then immediately handle the
	exception.  For exec(), we store the exception type and handle it
	in the commit function.

	Field and slice acceses are supported by modifying all slice and
	field accessor functions to take a reference to the slot.  All
	actions are then performed on this slot.

2006-10-10  Kishore Paul  <kishorep@freescale.com>

	* iss/RemoteGdbServer.C/GdbServer.[Ch]: 
	Added support for cli commands through gdb Rcmd.

2006-10-10  Brian Kahne  <bkahne@freescale.com>

	* Initial version of the transactional-ISS generator.  This can
	handle basic register operations but not yet slices or fields.
	The instruction packet is created in GenInstrs.C and this is also
	where the slots are allocated for registers used by each
	instruction and where the various simulation functions (fetch,
	read-operands, exec, and commit) are created.  Each instruction
	gets its own set of functions, which are then dispatched from
	central functions via a large switch based upon the instruction's
	ID.  This ID is set in the fetch function, which does the initial
	decode.  Theoretically, this means that the subsequent switch
	statements in read-operands, exec, and commit can be optimized to
	jump tables, since the labels are consecutive integers.

	Slot allocation is done via a simple bottom-up process, starting
	with the lowest-level of helpers and working up, with slot
	allocations cached at each point.  This way, a helper function
	always uses the same slots for the same registers, so there's no
	issue with two different instructions calling the same helper.

	The InstrWalker class has been refactored to group register
	operations into a few small routines, rather than spread out over
	various translation functions.  It then decides how to do the
	transformation based upon whether it's an assignment, whether it's
	a transactional-ISS, etc.  If it's a transactional-ISS, then the
	appropriate slot is found and referenced directly in the code.

	If the instruction is simple and always writes to a given
	register, then the commit function contains now conditionals.
	However, if a register assignment is nested within an
	if-then-else, then it is conditional and a dirty bit is set on
	assignment.  The commit function checks the dirty bit before
	pushing it back to the architecture.

	For register-file accesses which are not fixed, e.g. lmw/stmw,
	then we also have to set the dirty bit and check it on the
	commit.  We also allocate a block large enough to store the entire
	register file.

	The instruction packet itself is simply an array of intbv objects
	large enough to store the largest register accessed, plus an intbv
	for storing dirty bits as bit-values, plus a link used by the
	pool-based allocator.  Currently, the size of the pool is set at
	model-generation time via a command-line parameter.

	Still to do:

	1.  Re-organize the code so that the generator can be used as a
	library.  The uADL generator will then call the ISS generator and
	configure it appropriately, such as by setting the
	instruction-packet pool size, what instructions to ignore,
	e.g. don't generate lmw if it's going to be implemented as a
	series of micro-ops.

	2.  Support the use of slices and register fields.

	3.  Add a new service for figuring out the EA referenced by an
	instruction.

2006-10-09  Brian Kahne  <bkahne@freescale.com>

	* tests/cli/c10.regress:  Switched to using ext_file_diff with a
	regular expression defining the start, in order to skip the "File
	loaded" message, since this includes a path which causes a
	miscompare when the regression is run out of a different directory.

2006-10-05  Michele Reese  <michele.reese@freescale.com>
	
	** The CLI now allows multiple actions for the same address.  For
	example you can sliceOn and sliceOff at the top and bottom
	respectively of a loop multiple times.  Added c13.cli to the
	regression. 

	** The CLI no longer breaks when it hits a sliceOff.  If you want
	that functionality then you need to set/clr a breakpoint before
	and after the go command.  Added c14.cli to the regression.

	* Fixed a small bug in uvp2dat where we didn't handle regenerated
	instructions in the UVP correctly.

	* Fixed a small bug in GenRegs.C where the return type of the
	read/write hook functions was not emitted for hooks on a sparse
	register file.

2006-10-04  Brian Kahne  <bkahne@freescale.com>

	* Divided tests and models into proprietary and open-source
	groups.  Modified the build system so that only open-source models
	will be distributed and only the relevant regressions will be run.

	* Fixed a minor bug in datdiff: The instruction counts for error
	messages were off by one due to the extra frame added to support
	cards which might appear before the first instruction, such as
	annotations.
	
2006-09-29  Brian Kahne  <bkahne@freescale.com>

	* CDCpp55731: Modified CoreInfo::getProgramCounter() so that it
	returns an (ea,ra) pair, where the ra is obtained by switching
	contexts as appropriate, then translating the address using
	extInstrReadTranslate().

	Added a test in tests/designs, which runs in1_32bit_hybrid.uvp,
	then compares the RES cards of the output and input to make sure
	that the translation occurs.  CLI test #6 also tests this issue.

	* Fixed an issue with contexts: The setActiveCtxToDbg() and
	restoreActiveCtx() functions must invalidate the MMU cache, if
	necessary, because an external user, such as a writer, might
	switch a context, then call one of the external-translate
	functions.

	** The CLI will now handle environment variables.  When used
	interactively, environment variables will be completed.  If an
	environment variable is followed by "/", then the completion
	operation will substitute the variable's value for the variable
	name.  Both variables of the form $x and ${x} are processed.

	When not used interactively, or when an environment variable is
	entered and not expanded via the completion mechanism, then the
	variable will be expanded before the command is actually executed.
	So, for example, you can have a line such as this:

	    load ${srcdir}/foo.elf

	in a script and "${srcdir}" will be replaced with the value of
	that variable before the load command is executed.

	* Modified the CLI scripts and the CLI regression so that all load
	commands use the ${srcdir} environment variable, rather than
	relying upon the regression to copy the file.

	* Each MMU lookup object may now have a reset function.  This
	function allows the MMU to be setup with default translations, as
	needed.  Refer to the documentation for more details.  mod11.adl
	has been modified to have a reset function to test this feature.
	
2006-09-28  Brian Kahne  <bkahne@freescale.com>

	* The MMU lookup miss and hit functions now take TransType as
	their first argument, allowing these functions to know what kind
	of translation was performed.

	* Register/file reset action functions now take an unsigned index
	if they are context resources.  This allows the use to initialize
	a register to a value based upon its context.  Modified
	iss/mod31.adl, fe/ctx1.adl, and fe/ctx2.adl to test this.

	* Register files now have a size() method which allows you to get
	their size.

	** The interface for the CLI has changed slightly:

	1. The uvpon/uvpoff commands have been removed.  The
	traceon/traceoff command will now produce a DAT or UVP, depending
	upon the filename.

	2. Concurrent slices are allowed.  The sliceon command may be
	called while another slice is active.  The sliceoff command takes
	an optional filename argument; if provided, then only that slice
	is turned off.  If no filename is given, then all slices are
	turned off.

	3. The regs commands now prints all registers in the system.

	4. The only difference now between the sliceon/off and traceon/off
	commands is that the trace commands take effect immediately, whiel
	the slice commands take effect when a specific instruction-address
	is encountered.

	* Minor bugfix to uvp2dat:  We weren't ignoring comments in
	various areas where we should have, so I added in comment-skipping
	code.

2006-09-26  Michele Reese  <michele.reese@freescale.com>

	* iss/MiscWriter.C: 
	Small fix to add_translation for backwards logic.  Added _size
	member to core info to generalize the EPN/RPN shifting based on
	the size of the core (32/64 bits) as determined by the size of the
	CIA.

	Updated uvp2dat to also support shifting the EPN/RPN for Zen.

	Updated the models in adl/designs to the current snapshot of the
	Altair models.  

2006-09-26  Brian Kahne  <bkahne@freescale.com>

	* Modified VarWalker so that it will ignore some register-file
	usage, as appropriate, such as when referencing validIndex(),
	which is really a static function.  Also, we'll ignore calls to
	some instruction-field methods, such as type conversions, so that
	we'll still record the fact that a single, statically analyzable
	element of a register file is being accessed.

	* CDCpp55712: Modified datdiff so that multiple IR results for a
	single register are collapsed into the last value in the expects
	file.  This is done by processing the IR results for the expects
	file as well as the found file, then scanning those elements
	separately.

2006-09-25  Brian Kahne  <bkahne@freescale.com>

	* The front-end now tracks what registers are used as sources and
	targets by instruction action code, including trackin those used
	by helper functions.  This data is stored in each instruction's
	object.  The adl-fe test program prints this data and the
	front-end regression suite was updated to handle this change.

2006-09-20  Zigu Haras  <zigu.haras@freescale.com>

	* Added support for sub-instructions. Sub-instructions
        encapsulate fields and related action which are used
        be different instructions, e.g., addressing mode, arithmetic
        operation. They allow to succintly represent the cross-product of
        sub-instruction combinations described. The interface allows to supress
        generation of illegal combinations.

2006-09-19  Brian Kahne  <bkahne@freescale.com>

	* Added the --jit option to make-iss to enable/disable JIT code
	generation.  The default is to have it off by default.

2006-09-19  Kishore Paul  <kishorep@freescale.com>

	* iss/RemoteGdbServer.C: 
	Changed the initial values of GDBTargets for no-thread option. Added a
	gdb test for mod25.

2006-09-18  Brian Kahne  <bkahne@freescale.com>

	* doc/adl-iss-integration.rst:  Added a new document describing
	the ADL ISS API and how to use it to integrate a bare-bones model
	into an external application.

	* Modified how external memories are used and added a regression.
	The global memory may be defined as external now by using the
	--extern-mem command-line option for adl2iss or make-ss.

	An external memory must implement the API defined by
	DefaultExternMem.h, which basically cconsists of various routines
	for reading and writing memory.

	The driver2 example in tests/scripts is now built w/o RNumber
	support and with an external memory.
	
	* The option --rnumber/--no-rnumber has been added to make-iss,
	adl2iss, and adl-config in order to support generating a model
	with no RNumber support.  This only works for the base model and
	if set, means that all register access is done via uint64, rather
	than via RNumber.

2006-09-15  Brian Kahne  <bkahne@freescale.>

	* CDCpp55563: Fixed the problem whereby we might produce a DAT
	file that was not reproducible.  This could happen if we created a
	DAT slice, where during the slice referenced memory which was not
	initially logged.  For example, memory referenced from the .bss or
	.stack section which was set up outside of the slice.  Fixed this
	by emitting a small INIT section if we encounter an uninitialized
	non-zero memory location.  This does produce DAT files which are
	less readable, since it means that there could be an embedded INIT
	section within a huge TRACE, but it does mean that the DAT file is
	correct.  We could always create a filter program that rewrites
	the DAT file to be more readable, if necessary.
	
	* CDCpp55564: It appears that finalization/cleanup will not happen
	if an object multiply inherit from gc_cleanup.  For that reason, I
	modified MemoryLogger in UvpWriter to be explicitly
	allocated/deallocated, rather than gc'd.

2006-09-14  Brian Kahne  <bkahne@freescale.com>

	* Relaxed the constraint that arrays are not allowed within ADL,
	since we allow arbitrary action code to now be used.

2006-09-13  Brian Kahne  <bkahne@freescale.com>

	** Added support for compressed traces.  The bzip2 compression
	program is used and the standard file extension for this is .dbz2.
	The file format is exactly the same as the DAT file format- it's
	simply compressed.

	Compressed files can be viewed directly within emacs/xemacs by
	adding the following to your .emacs or .xemacs/init.el:

	; .dbz2 files are simply DAT files that are compressed.
	(setq-default jka-compr-compression-info-list '(
	       ["\\.dbz2$" "bzip2ing" "bzip2" nil "unbzip2ing" "bzip2" ("-d") nil t] ["\\.Z\\(~\\|\\.~[0-9]+~\\)?\\'" "compressing" "compress" ("-c") "uncompressing" "uncompress" ("-c") nil t]
	       ["\\.bz2\\(~\\|\\.~[0-9]+~\\)?\\'" "bzip2ing" "bzip2" nil "unbzip2ing" "bzip2" ("-d") nil t]
	       ["\\.tgz\\'" "zipping" "gzip" ("-c" "-q") "unzipping" "gzip" ("-c" "-q" "-d") t nil]
	       ["\\.tbz2\\'" "bzip2ing" "bzip" nil "unbzip2ing" "bzip2" ("-d") t nil]
	       ["\\.gz\\(~\\|\\.~[0-9]+~\\)?\\'" "zipping" "gzip" ("-c" "-q") "unzipping" "gzip" ("-c" "-q" "-d") t t]))

	(auto-compression-mode t)

	The lesspipe package can be used to view these compressed traces
	directly using "less".  Various Perl packages exist for reading
	and writing bzip2 files and the DAT trace comparison program,
	datdiff, also supports these compressed traces.

	** The ADL project now requires that the bzip2 program and libbz2
	library be present.
	
2006-09-08  Brian Kahne  <bkahne@freescale.com>

	* Lots of minor updates to support Altair using contexts for
	modeling MT.  Minor changes include only showing register aliases
	if they refer to registers in other contexts.  We'll probably want
	to make this user-controlled at some point.

2006-08-31  Zigu Haras  <zigu.haras@freescale.com>

	* Added support for generating external exceptions. The CLI inteface
	for this is:
		triggerExcept Except
	where Except is an exception name. An exception may be called at
	a breakpoint. 

2006-08-29  Brian Kahne  <bkahne@freescale.com>

	* CDCpp55412: I added in a few extra versions of splice_set for
	register files in order to handle the situation where an index is
	an intbv, but the rhs is an integer, and the case where the bit
	positions might be intbv objects, but not the rhs or the index.
	Modified mod3.adl to test this.

	* Added support for contexts in order to model threads.  Updated
	the UvpWriter to support this concept- it will take a context that
	has a "thread" attribute and treat it as representing threads.
	Added mod31.adl to test this new concept.  

	Updated GenRegs.[hC] and main.C to do the actual generation, which
	basically consists of putting the register data storage into a
	Context structure.  One change that was made is that you can now
	see aliases in setRegs, getRegs, and showRegs.  This is so that a
	register such as NIA0, which maps to the NIA register of thread 0,
	can be seen in a UVP or DAT.

2006-08-23  Brian Kahne  <bkahne@freescale.com>

        * Simplified the dual-core Altair model by simply instantiating
        two of the existing MT models, rather tha re-defining the MT
        system.

2006-08-22  Brian Kahne  <bkahne@freescale.com>

	* Changed the MemoryLog data structure so that it records what
	addresses are initialized, rather than being a list of addresses.
	It's basically just a map of addr_t -> bool, where the first-level
	is a map to vector<bool> arrays of 1k elements that record init
	status on a per-word basis.

	The DatWriter makes a copy of the global log, then records
	addresses as they're found by calls to log_mem_write and
	log_mem_read.
	
	* Moved most of the ElfReader logic into ElfReader.C so that only
	the factor is visible to the outside world.

	* Added a new ElfReader option, --elf-log-bss, to enable logging
	of the BSS section.  This is off by default.

2006-08-21  Brian Kahne  <bkahne@freescale.com>

	* Added a pre-write hook logging call, which occurs before the
	write occurs, allowing a test writer to view memory before the
	modification.  This was then incorporated into the UvpWriter.
	Now, the UvpWriter doesn't need to know about all used addresses
	up-front- it logs them as they occur.  This dramatically reduces
	run-times and memory utsage for the slicing flow when dealing with
	large testcases.
	
	* The front-end now allows just about anything at the top-level:
	typedefs, declarations, etc.  This is so that we can easily use
	external libraries.  We may want to tighten this up in the fture,
	but for now we'll allow it.  I removed tests/fe/helpers{3,4} but
	added helpers11.

2006-08-17  Brian Kahne  <bkahne@freescale.com>

	* Modified how writes to slices of a register work.  Rather than
	directly accessing the data, each register or register file has a
	<name>_slice_set() function which performs the action.  This means
	that we now correctly log the fact that the register was modified.

	* CDCpp55202: For any register field access or slice-set
	operation, the underlying function is now different if we have a
	write hook vs. not having a write hook.  If we have a write hook
	then we follow a read/modify/write paradigm to ensure that we get
	any desired side-effects.

	* CDCpp55251: Fixed a bug whereby user type declarations were only
	appearing in one core for Altair.  The problem was that we were
	using splice() to copy over type declarations, which meant that
	only the first core got the types, since that's a mutating
	operation that removes the elements from the original list.  Fixed
	this by using insert() instead.
	
2006-08-16  Brian Kahne  <bkahne@freescale.com>

	* Yet another change to how helper functions are found in the
	environment by the front-end.  The latest bug was that action code
	in a define in one architecture couldn't see helpers in another
	architecture.

	I fixed this, along with the first problem, dealing with defmods,
	by adding a pointer to the Core's environment to VarWalker.  Now,
	if a search fails, we then search this core environment, which has
	pointers to all of the architectures' environments set as
	baseclass/using environments.

	* CDCpp54910: Modified loading of ELF files for the CLI: If the
	second arg to load is 'setpc', then we set the system's
	entry-point from the value in the file.  This meant adding a
	boolean flag to readInput() that defaults to true (we do want to
	set the entry-point addr), but the CLI sets to false by default
	for legacy reasons.

        ====== adl release 0.3.17 (v0_3_17) on Linux (cde-tx32-ldt189) on 8/15/2006 ======

2006-08-14  Brian Kahne  <bkahne@freescale.com>

	* Added copyright notices to all C++, Perl, and ADL files.

	* CDCpp55199: We weren't able to see helper functions from
	architecture-level hooks.  The problem was that we weren't setting
	up the cores' environments so that they'd be able to see into the
	architectures' environments.  Fixed this by adding all
	architecture environments as baseclass/using environments to the
	core's environment when the cores are processed.  Added
	fe/helpers8.adl to test this.

2006-08-11  Brian Kahne  <bkahne@freescale.com>

	* Added the ability to write to a slice of a register-file
	element.  In other words, the following syntax works:

	GPR(RT)(32,63) = ... ;

	This was annoying to implement because OpenC++ incorrectly
	identifies the above as a declaration.  Strangely, the following:

	GPR(RT+5)(32,63) = ... ;

	is parsed as an assignment.  So, InstrWalker now has a
	TranslateDeclaration function to handle the first case and an
	extra test in TranslateAssign to handle the second case.  Both are
	translated into the following:

	GPR()(...).set_data().set( x , y, <expr> );

	The single-bit assignment case is also handled.  This, of course,
	means that read/write hooks are ignored for these kinds of slices.

	This will have to be revisited when we do want to execute
	read/write hooks for field/slice access.

	** The generators (adl2iss, adl2asm, etc) now support a --define or
	-D option that lets the user supply preprocessor definitions to
	the ADL front-end.

2006-08-09  Zigu Haras  <zigu.haras@freescale.com>

	* CDCpp55148: A dense regfile can alias a sparse regfile and the correct
	read hook is generated. 

	* regfile entry was depreciated from InstrField block.

2006-08-08  Brian Kahne  <bkahne@freescale.com>

	* Added a regression to test MMU lookup set fields (in63.dat).

	* Added num_sets() and num_ways() methods to the MMU lookup proxy
	objects for querying for the number of sets and ways in a lookup.

2006-08-07  Brian Kahne  <bkahne@freescale.com>

	* CDCpp54916: Each MMU lookup object now has a search method:

	search(unsigned &set,unsigned &way,addr_t ea,TransType tt);

	which can be used to lookup a translation based upon an address.
	A form exists where the ea can be an intbv object.  Enhanced
	mod11.adl and added in62.dat to test this feature.

	* CDCpp65973: The MMU definition has changed slightly: Each MMU
	lookup now can take set and way fields.  The definition names
	match those of the cache.

	Note:  This introduces a minor incompatibility with older versions
	of AdL.  The user must now use the "wayfield" define in stead of
	"field" for defining lookup fields.

        ====== adl release 0.3.16 (v0_3_16) on Linux (cde-tx32-ldt189) on 8/4/2006 ======

2006-08-04  Brian Kahne  <bkahne@freescale.com>

	* Added a configure test to make sure that Perl's version is >=
	5.8.8

	* Fixed some compilation errors.

2006-08-03  Zigu Haras  <zigu.haras@freescale.com>

	* CDCpp54721: The size of an insturction, if not specified, is derived 
	  from the instruction fields used in the "fields" key. It is highest bit-index
	  used in any field, rounded up to nearest byte.

	* CDCpp54720: Added support for table-based instruction fields. 
          
	 table = <list(k-tuple|"resereved")> Specify that the field is an enumerated
     	 list of admissible resource tuples. Tuples map to indices starting with 0. 
	 The identifier "reserved" is used to indicate a gap in the sequence. The tuple 
	 elements may be accessed in the insturction syntax specifier or in the action
         code by using a function call notation.
         An instruction field X with a table of pairs of integer may be referenced 
         in the action code by: tmp = X(0) + X(1), where X is a pair index and X(0), X(1)
         are its first and second elements, respectively. 

	* CDCpp54857: Added support for instruction field specialization.
	Instruction can now be encoded in internal nodes of the instruction table tree.
	In insruction decoding, if no instruction with specialized fields matches, the
	one with the unspecialized field is taken. Now, ADL cna correctly encode instructions
	with fully overlapping fields where one field is smaller. 

	* Instruction field type can be determined from referenced resource 
	type (memory/regfile), if ref key is used. 
	
	
2006-08-02  Brian Kahne  <bkahne@freescale.com>

	* CDCpp54915: The problem was that we were intantiating systems in
	the same phase as we were evaluating all declarations, so it was
	possible to have an ordering issue: We'd instantiate a child item
	within a system before we'd created that object.  That meant we'd
	push a null pointer on as a child item, causing an assertion
	later.

	Fixed this by having all systems and cores created in an initial
	phase, followed by the handling of all keys and declarations.
	Added fe/share12.adl to test this.

	* CDCpp55036:  Added setName and setType methods to IssNode so
	that the name and type can be modified after instantiation.
	
	* CDCpp54866: Modified the behavior of the cache logic slightly:
	If we evict a line into a lower-level cache, then we don't read
	that lower cache's line first if it doesn't exist in the cache and
	the line-sizes of the cache are the same same.  It's pointless to
	do that, since the data will just be overwritten.  This solved a
	problem with cache correlation with Altair.

2006-08-01  Brian Kahne  <bkahne@freescale.com>

	* CDCpp54946: Keys in a core were being processed before we
	processed keys in a core's constituent architectures, which meant
	that those keys had a lower priority than they should have- it
	makes more sense for what's in the core to have the highest
	priority.

	Fixed this by adding architectures during the add_key phase of
	parsing.  Then, in CoreHandler::process_keys, all architectures
	are processed, followed by keys within the core.  Added
	fe/inst30.adl to test this.
	
2006-07-28  Brian Kahne  <bkahne@freescale.com>

	* Fixed bug in datdiff: We weren't handling the case where any
	kind of intermediate results cards were found in a trace section
	before an instruction card.  This can happen with annotation
	cards, since they can be injected by the traceOn and traceOff
	functions, or by the CLI.  We ended up accessing the back()
	element of an empty list, which caused some corruption.  Another
	example of how C++ sucks: No checking for this kind of stuff.

	We now check for this case before appending to the trace list and
	add on a Trace object if we encounter this.

	* Rearranged the relative order of eventbus creation because
	shared eventbuses were producing compile errors when the model
	also had a cache and MMU, due to incorrect ordering of constructor
	arguments.  mod30.adl has been updated to have a cache and MMU in
	order to test this.

	* Restructured the cache logic so that the miss function, if
	specified, is called after the cache line is loaded from memory.
	This allows the user to throw an exception, e.g. to switch a
	thread, and still have the cache be in the updated, valid state.
	mod25 and in61.dat test this functionality.

	* Restructured some of the ISS generator code to move the cache
	generation functionality to GenCache.C, out of main.C.
	Eventually, I'd like to greatly diminish the size of main.C, so
	this is a step in that direction.

2006-07-27  Brian Kahne  <bkahne@freescale.com>

	* Fixed bug in datdiff: We weren't checking if a Frame in an
	IrHash had any elements, which meant that we could get a
	segfault.  Fixed this by skipping empty found-arrays.

	* Exceptions can now take attributes.

	* Exception data is now available through the same introspection
	mechanism as registers and MMU info.
	
	* Enhanced the UVP writer so that exceptions marked with the
	attribute of "unarchitected" will not be displayed in the
	intermediate results of a trace.  An exception marked with
	"squash_instr" will cause the parent instruction to not be
	printed.

2006-07-20  Brian Kahne  <bkahne@freescale.com>

	* Modified how tracing works.  Instead of a single boolean, each
	tracing type is guarded by a bitflag so that individual types of
	tracing may be turned on or off.  I also added the ability to set
	and clear these bits to the interaction manager and command-line
	interface.  For the CLI, the commands are 'clrfilter' to turn off
	specific events and 'setfilter' to turn on various events.

2006-07-17 Michele Reese  <michele.reese@freescale.com>

	* iss/UvpWriter.C: 
	Minor changes to writeResults to scale to MP.  It's more regular
	now in that we just recursively call writeResults for every child node.
	* scripts/regress_utils.pm:
	Minor changes to uvp2dat to scale to MP.
	Fixed bug where we expected 3 lines of TLB key/value pairs but
	there can be more.  Now we just process until the we hit the end
	inicator "},}".
	* designs/altair_r1_mt_2p.adl
	Added MP/MT model.
	* tests/designs/regress
	Added round-trip uvp regression test for MP.  This test is
	generated by Raptor and tests every instruction but mainly we're
	just trying to catch bugs in uvp2dat or the UvpWriter.

2006-07-10  Kishore Paul  <kishorep@freescale.com>

	* iss/main.C: 
	Added register size for dummy registers.

	* iss/RemoteGdbServer.C ModelInterface.h GdbServer.C GdbServer.h: 
	Added Gdb support for variable register set size and multithreading. 


        ====== adl release 0.3.15 (v0_3_15) on Linux (cde-tx32-ldt189) on 7/7/2006 ======

2006-07-07  Brian Kahne  <bkahne@freescale.com>

	* Modified the DAT file format:

	Added the D card, which records accesses from the core's
	perspective.  This means that only an ea is displayed and it's the
	actual ea being accessed.  The nb field displays the number of
	bytes for the access.

	The INSTR card no longer displays ea and ra information.  Instead,
	an M card with a type of "ifetch" records fetch information.  This
	works better for the situation where an instruction might be
	misaligned, as can be the case for VLE:  Two acceses will be
	displayed, which will more clearly display what happens when a
	page is crossed.

	* Added in a new check to prevent instruction fields from having
	the same name as any other resource in the system.  This prevents
	ambiguities, such as when a register-file and an instruction field
	have the same name and are intermixed within action code.

	* The adl2iss program now supports a target of "base-so", which
	causes it to create a shared object w/o the standalone
	infrastructure.  Added tests/scripts/driver2.C to test this
	functionality.

2006-07-06  Brian Kahne  <bkahne@freescale.com>

	* Added front-end support for the idea of "contexts".  These allow
	the user to group resources (currently just registers and
	register-files) into banks.  The active element is set by a
	predicate function.  This allows the user to model blocked
	multi-threading more easily than prior methods.
remoteSetRegister
	* Registers are now accessed through an accessor function, so that
	the actual data implementation, e.g. if it's a context register,
	is hidden from functions which use the register.

2006-06-30  Brian Kahne  <bkahne@freescale.com>

	* The DatWriter now just reports the first write made for an
	instruction-read.  The problem was that an instruction which
	crossed a word would cause two reads, so the instruction address
	would be reported as the second read.

	We might want to rethink how we report this stuff in the DAT file.
	We might want to switch over to having M cards for the instruction
	fetch so that we can clearly see the memory accesses.

2006-06-29  Brian Kahne  <bkahne@freescale.com>

	* Added support for shared event buses.  The event-bus message
	data type is declared at the highest level of sharing, along with
	integers for the bus handle and bus id.  References to these
	integers are passed down to the cores.  Each core declares the
	event-bus object and instantiates it, along with references to the
	handle and id.  Registration of the event bus is done by a call in
	the constructor at the highest-level of sharing.

	The end result is that only a single instance of the bus is
	registered for a given shared event bus so that a message sent to
	it will only be generated once.  Added mod30/in60.dat to test
	this.

2006-06-28  Brian Kahne  <bkahne@freescale.com>

	* The cache flush() API function no longer invalidates a line.

	* Added support for arch-level enums, e.g. 

	define (arch=x) {

	  enum MsgType { Read,Write,Shared };
	
	}

	These enums can then be used within action code or as reset values
	for fields (cache, mmu, eventbus).

	* Added the eventbus object.  Refer to the documentation for
	syntax details.  This basically defines a message-broadcast
	object.  All cores register their buses into a central registry;
	buses of the same name must have the same types.  The message type
	is a group of fields, where each field is an integer of either a
	specific number of bits, or a 32-bit C integer.  When a message is
	sent on the bus, all handlers registered to that bus, except the
	sender, are executed.  Added bus1.adl and bus2.adl in tests/fe for
	syntax checking and mod29.adl to demonstrate the modeling of a
	simple cache-coherency protocol.
	
2006-06-25  Zigu Haras  <zigu.haras@freescale.com>
	
	* Add support for read/write hooks for locally defined memories and 
	for global memory Mem. These hooks allow endianess handling.
	The hooks can be defined per-core, thus, different cores can access
	same memory differently. The syntax
	def(mem=MyMem) {
		...
		read = func(addr_t addr, size_t s) {
	            ....
		    ThisMem.read(addr);
	            ...
	        };
	        write = func(addr_t addr, unsinged v; size_t s) {
	            ...
	            ThisMem.write(addr,v);
	        };
        }
	Memory access size is determined by context, thus, the user may query it
	size but cannot modify it. 
	ThisMem provides a reference to the underlying memory.
	
	Added to bits class a method swap_bytes() which returns a bits vector with reversed
	endianess.
		

        ====== adl release 0.3.14 (v0_3_14) on Linux (cde-tx32-ldt189) on 6/23/2006 ======

2006-06-23  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug in the ISS generator: If we had a model which did
	not create all instruction tables, then if we tried to generate an
	instruction which was never used by the instruction ables that did
	exist, we'd segfault, because the Instr::_shortcuts pointer was
	not setup.  Fixed this by adding an assertion and a predicate,
	is_used(), which returns true if the instruction is every used by
	any instruction table in the core.  If not, then the ISS generator
	does not generate the instruction.  Added mod27.adl/in57.dat to
	test this.

	* When applying a defmod to an element defined in another
	architecture, if the defmod contained a code block that referenced
	a helper function in its outer scope, we would produce an error.
	This is because when we checked the code, we used the environment
	for the original object (which was in a different scope).  Fixed
	this by adding the defmod's outer environment to the environment
	of the original object as a baseclass/using environment.

	In other words, OpenC++'s environment structure is a tree, rather
	than just a stack, so that it can handle C++'s using directives
	and multiple inheritance.  We use it here to support the mix-in
	nature of ADL's architectures.

        ====== adl release 0.3.13 (v0_3_13) on Linux (cde-tx32-ldt189) on 6/22/2006 ======

2006-06-20  Michele Reese  <michele.reese@freescale.com>

	* iss/ExecSupport.C: 
	Separated init into init and processOptions.  This way the
	standalone ISS can call processOptions to process most of the
	command line options and init to setup the test io.  This allows
	the CLI to call processOptions so that it can generically pass
	options through to the ISS.

	* cli/main.C:
	Modified the CLI to use AnyOption instead of get_opt.

2006-06-19  Brian Kahne  <bkahne@freescale.com>

	* Updated the document generator to describe the semantics of
	instruction fields.

2006-06-16  Brian Kahne  <bkahne@freescale.com>

	* Updated the documentation generator to handle new resources that
	have been added, such as caches and MMU.  It also now supports
	systems and it will attempt to collapse identical elements, such
	as instruction fields and instruction tables, if they're
	identical, boosting them up a level of the hierarchy.

	* Modified regress_utils so that it attempts to find binaries that
	it needs by looking at the %INC hash to find from where it was
	loaded.  If this doesn't work, such as when it's being run from a
	separate build-tree, then it resorts to crawling up from the
	current-directory, looking for a bin directory.

2006-06-14  Michele Reese  <michele.reese@freescale.com>

	* iss/UvpWriter.C: 
	Created a persistent used address logger.  The CLI creates it and
	passes it to the constructor for the UvpWriters.  Since tracing is
	always on in the CLI, the used address are always passed to this
	logger.  When new UvpWriters are created they are given a pointer
	to this logger so they can populate their used address list.  This
	keeps a record of all used addresses and which core used them so
	that the appropriate cores memory hierarchy can be queried when
	dumping state.  Added regression test: cli1.

	* CDCpp54498
	Modified the ElfReader to also process the .stack section. 

	* CDCpp54515
	Added start/stopSlicing functions which take an optional
	pointer to a testWriter.  If a particular writer is not specified
	then they apply to all writers.  start/stopSlicing does not
	modify the TraceMode flag.  This is so that the persistent
	logger can continue to track used addresses between slices. 
	Added regression test: cli2.

2006-06-12  Brian Kahne  <bkahne@freescale.com>

	* Modified how memory logging works.  We now use a list of blocks
	to store addresses to better handle large numbers of addresses by
	init_mem.  The UvpWriter, for its memory logger, now uses a map
	b/c the hash table, for very large inputs, was growing to an
	extremely large size.

	* The UvpWriter's hacks for modifying the epn/rpn fields have been
	moved into CoreInfo so that they're on a per-core basis.  They're
	also stored in an array, indexed by the id of the relevant lookup
	object, so that it'll work if different lookups have different
	fields.

	* Modified the UvpWriter so that the epn/rpn field indices are
	stored in an array in the CoreInfo hiearchy.  This means that
	different MMU lookups can be handled correctly.
	
2006-06-09  Michele Reese  <michele.reese@freescale.com>

	* designs/Makefile.am: 
	Added Jim's CLI (a command line interface) to ADL.  To build it, you
	need to link it with an iss.  I've done this in the designs
	directory to create altair_r1_mt_cli.  The CLI can be used to
	peek/poke registers and memory and to start/stop logging at
	breakpoints.  

2006-06-09  Brian Kahne  <bkahne@freescale.com>

	* The assembler and disassembler now support multiple instruction
	tables.  The assembler will insert mapping symbols which designate
	when a shift in instruction table occur.  The disassembler looks
	for these symbols.

	For the assembler, a different instruction table can be specified
	using either the command-line option of -m<name>, where <name> is
	the name of the instruction table, or a pseudo-op of the form:

		.switch -m<name>

2006-06-06  Zigu Haras  <zigu.haras@freescale.com>

	* Add support for external local memories and for external Mem.
	  Mem is defined external by adding in the configuration file
	  the entry: extern_mem=true in the global config block.
	  A local memory is defined local by adding, in the appropriate
	  place in the hierachy: 

	  define(mem=MyMemory) {
		extern_mem = true;
	  }

	  All memories are by default internally defined.

	* Add support for external global function declaration in the adl
	  file. 

2006-06-05  Brian Kahne  <bkahne@freescale.com>

	* The regression support scripts are now released into the share
	directory of the install tree.

	* The memory log for addresses touched by readers is now external
	and defined within MemoryLog.C.  The MemoryLog class is passed to
	any Writer that is created.  This means that writers can be
	created after readers have read a file and the writer will still
	report the used memory addresses.

	* Added support for multiple Writers.  The createWriter() and
	removeWriter() functions have been modified so that a Writer is
	returned or taken as an argument and removeAllWriters() has been
	added, to de-register all writers.  The driver program in
	tests/scripts has been modified to test multiple output files.

2006-06-02  Brian Kahne  <bkahne@freescale.com>

	* Added the flag --ir-length-check flag to datdiff so that
	trace-length checking could be turned off.  This was necessary
	because some of the MT tests have instructions in the UVP which
	are never executed.

	** The UVP writer will now suppress intermediate results for any
	register which is given the attribute of "indeterminate".  All
	reporting of a register will be suppressed if it is given an
	attribute of "unarchitected".

2006-06-01  Brian Kahne  <bkahne@freescale.com>

	* Created the program 'datdiff' in the iss directory, which is a
	DAT diff tool written in C++.  It's about 10x faster than the Perl
	version.  The regressions now use this for doing their checking.
	This program will be installed in the bin directory of an
	installation, so it can be used by customers of ADL.

	To use the older Perl version, edit the function "check_results"
	in regress_utils.pm to run the function "check_results_old",
	rather than "check_results_new".

2006-06-01  James C Holt  <Jim.Holt@freescale.com>

	* Update InteractionMgr class to support loading of DAT files
	as well as elf files.

2006-05-30  Brian Kahne  <bkahne@freescale.com>

	* The ISS's handling of instruction fields is now consistent with
	the assembler.  So, if a field is marked as signed, then that
	field, for instruction action code, will be sign-extended to the
	size of the NIA before the action code is executed.  The same goes
	for the invert flag, shifting, and relative addressing.  Mod1.adl
	was modified to take this into account.

2006-05-26  Brian Kahne  <bkahne@freescale.com>

	* The logging interface for the ISS has been modified so that
	log_instr() is called with a callback function for printing an
	instruction.  This callback function uses the syntax string and
	also handles shortcuts, so the output will look just like what the
	disassembler prints.

2006-05-26  Michele Reese  <michele.reese@freescale.com>

	* iss/ElfReader.C (options): 
	Added options to the ElfReader to map an elf file to a particular
	node and to request addresses to be treated as effective rather
	than real.  This will allow users to load elf files in different
	address spaces.  The options are:
	  elf2node=<filename:node>
	  elf-ea
	If you have your mmu initialized when you load an elf file, then
	if you specify elf-ea, it can translate that ea based on the node
	you specified in the elf2node map.  For Altair, while the mmu is
	shared, the pids are private.  This is why it requires a core to
	be specified in the map in order to perform the translation.

2006-05-25  Brian Kahne  <bkahne@freescale.com>

	** I've added a very simply ADL DAT XEmacs mode in the scripts
	directory, called adl-dat.el.  For a distribution, this file can
	be found in the share directory.  This does some basic syntax
	highlighting on .dat files in order to make them more readable and
	also enables commenting/uncommenting.

	* Fixed a bug:  We were always creatin the "other" instruction
	table, even if we explicitly listed the tables that we wanted
	produced.  Fixed this and modified tests/fe/inst19.adl to exercise
	this.

	* gdbclient can now be used simply for stimulus generation.  If
	you use the --no-exec option, a child process will not be
	created.  This means you can launch the ISS in GDB and simply use
	gdbclient for stimulus.

	* Register writehooks now properly handle writes to register
	fields, including when ThisReg is used.  Mod5.adl tests this.

	* Assignments to intbv objects are transformed into calls to
	intbv::set().  Mod5.adl tests this.

2006-05-24  Brian Kahne  <bkahne@freescale.com>

	* CDCpp54340:  Added the CacheAccess enum types to the global-resources list so
	that they can be used within an ADL file.

	* CDCpp54341: Added the enum CacheIFetch to CacheAccess.  The read
	functions propagate a CacheAccess field so that we can track
	whether a read was for an instruction fetch or a data load.

	* Since nothing was using the CacheType for log_cache_action, I
	removed it.

2006-05-24  James C Holt  <Jim.Holt@freescale.com>

	* Made modifications to InteractionMgr to support multi-thread
	and eventually Multi-core commands such as setting registers.

2006-05-23  Brian Kahne  <bkahne@freescale.com>

	* Added support to the assembler for handling instructions with
	the same name but with different operands.  Operands may differ in
	number and type (register vs. immediate, different shift amounts).

	So, for example, "or r1,r2,r3" would assemble into the
	register-register instructions and "or r1,r2,0x1000" would
	assemble into the register-immediate instruction.

2006-05-22  Brian Kahne  <bkahne@freescale.com>

	* Fixed adl-config so that its --libs line is correct.

	* Modified adl2iss to use adl-config --libs, so that shared
	objects will be used.

2006-05-19  Brian Kahne  <bkahne@freescale.com>

	* Added support for proper handling of overlayed fields in the
	assembler, such as for when assembling beq+.  Added support for
	shifted and inverted fields.

	* The assembler generator now no longer creates the
	architecture-specific header file.  Since this doesn't change very
	frequently, it's easier to just let the user generate the file
	once.  It also does not create the base entry points for the
	disassembler.  The user must create these stubs, which should then
	call the generated functions.

2006-05-18  Brian Kahne  <bkahne@freescale.com>

	* Added support for enumerated options to the assembler generator.

        ====== adl release 0.3.12 (v0_3_12) on Linux (cde-tx32-ldt189) on 5/18/2006 ======

2006-05-17  Brian Kahne  <bkahne@freescale.com>

	** The user may now add hooks which will be called when tracing is
	turned on or turned off.  These go in the config file (.ttc file)
	in a config block for a core, e.g.:

	define (core = Foo) {

	  define (config) {
	  
	    tracing_on = func() {
	      // ...
	    };
	
	    tracing_off = {
	      // ...
	    };
	
	  }
	
	}

	* Changed IssNode::getRegisterName() to
	IssNode::getRegisterInfo().  It now returns a pair of (name,size).

	* First step in modifying how we configure an
	assembler/disassembler.  Instruction field semantics have been
	taken out of the syntax string and moved into the individual
	instruction fields.  Documentation has been updated to reflect
	this.

	* Modified how instruction aliases are specified:  Rather than an
	implicit mapping by position, mappings are now explicit, e.g.

	  define (instr=mr) {
	    alias=or(RS(RS),RA(RA),RB(RS));
	    syntax = ("%i %f,%f",RA,RS);
	  }
		
	This should remove some sources of confusion.  We also allow
	fields to be skipped.

	* Added the "overlay" key to instrfield, which says that the field
	may overlap others and should be considered optional.  This can be
	used, for example, to directly set the Y bit for conditional
	branches.

	* Added the "disassemble" key to instr, which lets the user
	exclude an instruction from disassembly- mainly used with
	shorthands that we don't want to disassemble.
	
2006-05-12  Brian Kahne  <bkahne@freescale.com>

	* ADL is now using RNumber for get/set/log operations on register
	values.  This allows us to handle the data stored in arbitrarily
	large registers; we can't use intbv because we need a dynamically
	sized integer class.

	This means that rnumber-config must be in your PATH when you
	configure ADL.  RNumber is installed on CDE as
	fs-rnumber-/1.26.0-gcc_4.0.2.  It's also been uploaded to the
	compass distribution site.

	* Modified ModelInterface to use RNumber, rather than strings, for
	register data.  Modified readers and writers to use RNumber.

	* Added to intbv the ability to be constructed from, assigned to,
	and produce an RNumber of its contents.  Added testing to
	NumberTest to check this.
	
2006-05-11  Brian Kahne  <bkahne@freescale.com>

	* CDCpp54251: Fixed a bug relating to thread activity.  Because we
	were evaluating a system's activity state using a single pass (
	the result of the simulate() function), if we had a CGMT model,
	where only a single thread is active, then we could get a
	situation where a thread de-activates itself and activates another
	thread, but that thread has already executed for that cycle, so
	the overall result is that no thread identifies itself as active,
	thus the simulation quits.

	Fixed this by converting simulate() back to a void function and
	calling activeCount() to get activity information after all
	threads have been cycled.

        ====== adl release 0.3.11 (v0_3_11) on Linux (cde-tx32-ldt189) on 5/10/2006 ======

2006-05-10  Brian Kahne  <bkahne@freescale.com>

	* Added IssNode::is_active().  This returns the active state of
	the core or system.  In the case of the system, it returns true if
	any children are active.

	** Addd a "target" option to adl2iss.  Valid values are "exe",
	which produces a standalone executable and "so", which produces a
	shared object.
	
	** Added a "preamble" option to make-iss and adl2iss, which takes a
	string argument and is repeatable.  This option is also present in
	the config file, under the global "config" define, where it can be
	either a string or list of strings.

	The preamble string is displayed to stderr when the model starts
	up.  Multi-line strings are allowed.  This allows the user to add
	licensing info, version data, etc.

2006-05-09  Brian Kahne  <bkahne@freescale.com>

	* Added various options to adl2iss so that its options mirror what
	make-iss takes.

2006-05-05  Brian Kahne  <bkahne@freescale.com>

	** adl2iss no takes the option --optimize[=level] to specify an
	optimization level.  The default is 3.  0 implies no optimization.
	You can also use --no-optimize to turn off optimization.

	** The ADL ISS GDB interface now supports extended-mode, which
	allows a program to be restarted.  This can be activated using
	"target extended-remote" within GDB.

	** Program interrupt support has been added to the GDB interface.
	If the user presses Control-C within GDB, the ISS will interrupt
	its execution.

	** The ADL ISS will use standard-IO for communicating with GDB if
	the --gdb-stdio option is specified.  Within GDB, this can be used
	with the command:

		target extended-remote | <path-to-model> <model options>

	The standard-IO interface is faster than the socket interface.  A
	short-cut macro, called "startsim" is available in the "share"
	directory of the ADL release in the file "iss-macros.gdb".  To use
	it, source the file:

		so iss-macros.gdb

	If this command is placed into your .gdbinit file, it will be done
	automatically at GDB startup time.

	Then invoke the macro:

		startsim <path-to-model> <ELF file to run and debug>

	For example:

	(gdb) so iss-macros.gdb
	(gdb) startsim ./altair_r1_ut dhry.elf

	* The interface to the model has changed in order to better suit
	system integration:

	1.  The model is no longer statically instantiated.  You must call
	createTopLevelModel() to instantiate a model.  This creates a
	model and returns a pointer to the object.

	2.  The static functions of simulate(), stepn(), and step() no
	longer exist.  Instead, IssNode methods of run(), stepn(), and
	step() exist.

        ====== adl release 0.3.10 (v0_3_10) on Linux (cde-tx32-ldt189) on 5/3/2006 ======

2006-05-03  Brian Kahne  <bkahne@freescale.com>

	* Added intbv_io::iupper, which sets ios_base::uppercase for the
	intbv::str() method.  This causes uppercase letters to be used for
	hex digits when printing.

	* Fixed a bug with printing of intbv:  The showbase flag is now
	correctly handled.  This means that the default is the same as for
	C++ types:  The radix prefix is not printed by default.

	* Modified the format of the debug register mapping parameter in
	the config file.  The new syntax is documented in adl-notes.rst.
	Basically, it now consists of a list of elements, where each
	element may be:

	  * <ident>:  Specifies a register.

	  * <ident>(<int>):  Specifies an element of a register file.

	  * (<res>,<int>): Where <res> is one of the prior two types and
	  <int> specifies a width in bits.  This causes the register value
	  to be resized to the specified width.

	* Enhanced error checking for the debug register mapping:  It is
	now case sensitive, but we check for unknown resources and
	out-of-bounds indices at parse time.

	** Added a new command-line option to ISS models,
	--port-file=<file> | --pf=<file>.  If the ISS enters debug mode,
	then a "target remote" GDB command is written to the specified
	file along with the port used.  This file can then be sourced by
	gdb to automatically connect to the model.  For example:

	Run the ISS with:

		./model <input> --gdb --port-file=.gdb-port

	Then have a .gdbinit file with the following line:

		source .gdb-port

	When GDB is started, it will read the file ".gdb-port", which will
	cause GDB to connect to the model.

	** The new default port value for ISS/GDB connectivity is 0, which
	means to choose a free port.  The value of the port used is
	printed to stdout and, optionally, to a file if the --port-file
	option is specified on the command-line.

	NOTE: When using GDB, make sure that your architecture is
	correctly set.  GDB contains a bug, whereby it thinks that the
	architecture is an e500 core if the ELF file contains a
	.PPC.EMB.apuinfo section.  This section is added by gas whenever
	an APU is used, such as if an "isel" instruction is emitted by the
	compiler.  Thus, it is possible that GDB will set the architecture
	to "powerpc:e500" when an Altair ELF file is loaded.  To correct
	this, you may wish to add to your .gdbinit file:

		set architecture powerpc:common64

	This tells GDB to use a standard 64-bit PowerPC architecture,
	which is what Altair resembles.

2006-05-02  Michele Reese  <michele.reese@freescale.com>

	* helpers/intbv_base.h: 
	Changed setField and getField in intbv_base to mod the start and
	stop indices with the size of the intbv.  We still have the
	concept of the register offset in the models but the code
	generation no longer attempts to subtract them.  Rather, it's only
	used for error checking in the front end.  This is to support
	BookE's way of indexing into a 32 bit register with indices of (32,63).

	* scripts/regress_utils.pm: 
	I needed to be able to compare a 64 bit BigInt to a 32 bit scalar
	for the zen regression (Raptor doesn't have a BookE model with 32
	bit gprs).  Even though the upper half is zero the regression
	still failed final results checking.  I extended Data::Compare 
	to handle scalar to BigInt comparisons by registering a subroutine
	in the plugin that converts the scalar to a BigInt.

	* tests/designs/regress:
	Added 32 bit zen test that hits every instruction.

2006-05-01  Brian Kahne  <bkahne@freescale.com>

	* The default GDB port is now 0, which means to pick an available
	port.

	* Backed out the use of the built-in install code in the Makefiles
	b/c of libtool complexities.

	* Updated test-build to try and build a model using the installed
	adl2iss program.

	* The helpers include files were not being properly installed in a
	'helpers' directory within the installation, so the adl2iss script
	was not working correctly.  Fixed this and modified the makefiles
	so that they use the built-in installation code in order to reduce
	code duplication and the chance for mistakes.

2006-04-28  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug, where we were propagating non-zero offsets.  The
	idea is that these should only be applied to registers; as soon as
	we assign the value or use it in an expression, we eliminate the
	offset.

        ======= adl release 0.3.9 (v0_3_9) on Linux (cde-tx32-ldt189) on 4/28/2006 =======

        ======= adl release 0.3.9 (v0_3_9) on Linux (cde-tx32-ldt189) on 4/28/2006 =======
	
2006-04-27  James C Holt  <Jim.Holt@freescale.com>

	* Added support to InteractionMgr class that allows use of
	symbols from the ELF symbol table for slicing and for 
	breakpoints.  

2006-04-27  Brian Kahne  <bkahne@freescale.com>

	* Tweaked the regression to get it to generate filenames in a
	consistent manner.

	* Moved default-filename generation to FilenameUtils.C.

2006-04-25  Brian Kahne  <bkahne@freescale.com>

	** Added a shortcut for register aliasing:  A user may now use
	just the key "alias", rather than writing separate read and write
	hooks.  The following syntax:

		define (reg=A) { alias=a; }

	is equivalent to the prior syntax of:

		define (reg=A) {
		  define (read) { alias=a; }
		  define (write) { alias=a; }
		}
	
	** Extended ADL's register aliasing support:  Registers may now
	alias elements of a register file using the syntax
	<register-file-name>(<index>), e.g.

		define (reg=Foo) { alias=GPR(20); }

	The same syntax may be used for sparse register-file entries,
	e.g.:

		define (regfile=S) {
		  define (entry=20) { reg=GPR(10); }
		}

	* Tests were added to handle the new aliasing logic.  In adl/iss,
	mod3.adl was updated to have this kind of aliasing; in53.dat
	exercises it.

	
2006-04-24  Zigu Haras  <zigu.haras@freescale.com>

	* Added support for local memory which may be called with
	
	define(mem=<name>) { ... }

	It has a mandatory size and instr_unit fields and optional
	fields of instr_mem and parent. The boolean instr_mem indicates
	a memory may contain instruction - only one allowed per core.
	The parent fields uses to indicate aliasing and takes a pair
	of a memory name and offset within that memory.
	The memory access is function call style as in the global memory 
	Mem.

2006-04-24  Brian Kahne  <bkahne@freescale.com>

	* Added the XML::Mini parser to the distribution.  This is used by
	the make-release-notes script when communicating with DDTS and is
	used by xmltest.pl in the tests/doc directory to parse the XML
	output of the dbgen program.

	** The register file definition for sparse files has changed.
	Now, instead of specifying that a register file is sparse and
	specifying, within each register definition, that a register is
	part of a register file, registers are included in a register file
	by using "entry" definitions within the register file.  For
	example:

  	define (reg=IVPR) {
    	  """
    	  The interrupt-vector prefix register.
    	  """;
    	  width = regSize;
	}

	define (regfile=SPR) {
	  define(entry) { reg=IVPR; }
	}

	To remove a register from a register file, use the "remove=true"
	flag within an entry.  To add entries to the register file after
	it has already been defined, e.g. within another architecture, use
	the "defmod" keyword.

	You can also define read and write hooks within an entry.  These
	are only executed when a read or write operation is made through
	the register file.
	
2006-04-20  Michele Reese  <michele.reese@freescale.com>

	* iss/UvpWriter.C: 
	We now adjust the EPN/RPN fields in uvp2dat as well as in the
	UvpWriter to accomodate the Raptor UVP format which requires 54
	bit EPN/RPN fields for BookE implementations.

	* designs
	Separated fp into fp_apu.adl and mt into mt_apu.adl.  Created
	zen.adl and zen_z0.adl in order to verify that BookE can support
	both 64 bit and 32 bit implementations.  Corrected the EPN and RPN
	tlb field sizes for Altair to match the book4 spec.

2006-04-20  Brian Kahne  <bkahne@freescale.com>

	* CDCpp54106: Fixed a bug with handling registers w/non-zero
	offsets.  We were only correcting for the offset if the arguments
	were constants and we wanted to modify the return value so that it
	was properly sized.  This meant that we wouldn't handle the case
	where the arguments were non-constant.  This was fixed for both
	two-argument slices and single-argument bit access.  The model
	mod3.adl and in11.dat were modified to test this.
	
2006-04-20  Brian Kahne  <bkahne@freescale.com>

	* Added a new MMU option, pageshift, that lets the user specify
	that the EPN and RPN fields should be shifted before being
	combined with an offset to form a mask.  For example, BookE says
	that an EPN can be a maximum of 54 bits, with 10 bits of offset.
	However, this is because BookE supports 1k pages.  Most
	implementations do not, so they can eliminate 2 bits of the
	translation, thus requiring an implicit shift left of 2 bits to
	form an address.

2006-04-19  Brian Kahne  <bkahne@freescale.com>

	* A new configure option, --with-webdir=<path>, allows
	documentation to be installed into a directory, rather than onto
	Compass.

	* A new script, make-release-notes, was added, which generates an
	HTML file named README-<ver>.html.  It scans the ChangeLog for
	features, which are entries that start with "**".  These are added
	to a "Features Added" section.
	
2006-04-18  Brian Kahne  <bkahne@freescale.com>

	* CDCpp54073: Modified the cache hit and miss functions so that
	their first parameter is a CacheAccess value.  This allows the
	subsequent action to be based upon whether a load or store
	generated the access.

	* CDCpp54074: Added a valid-predicate to the MMU lookup object.
	The report_mmu function is called with a valid flag set by this
	predicate and the UVP and DAT writers have been modified to only
	print valid translations for the results section.  If no valid
	predicate is supplied, the default is always true.
	
	* CDCpp53992:  Added two new methods to IssNode:

	uint32 debug_instr_read32(addr_t ra);
	uint32 debug_data_read32(addr_t ra);

	These read memory from the perspective of the core.  The default
	action is to simply perform a mem_read32, but if a core has a
	cache hierarchy, then the action is to perform the read from the
	top-level of the hierarchy w/o modifying the cache contents; a
	miss means that we move to the next level of the hierarchy.

	The UvpWriter has been modified to use this routine for performing
	memory reads.

2006-04-15  Brian Kahne  <bkahne@freescale.com>

	** Added support for user-specified cache replacement algorithms.
	This involved adding the "replace" hook, which is called when a
	way must be replaced.  It takes a set index and returns a way
	index to replace.  The "line_access" function is called for every
	line that is either hit or loaded; it's useful for updating LRU
	bits, for example.

	The ability to add cache fields was also added.  These can be
	specified for each set or way and are similar to MMU fields:  They
	consist of a size in bits and a reset value (default is 0).

	For regressions, mod23.adl and in52.dat test this feature.

2006-04-14  James C Holt  <Jim.Holt@freescale.com>

	* Added the ability to use the symbol table for setting and
	clearing breakpoints in the InteractionManager class.

2006-04-13  Brian Kahne  <bkahne@freescale.com>

	** Added a cache-locking API.  The functions are documented in
	adl-notes.rst and allow the user to lock and unlock on a line
	basis.  You use the find() routine to find a set/way if the line
	is specified by using an address.

	A locked way will not be replaced unless all ways are locked for a
	given set.

	** Added cache logging support for lock/unlock operations.  The
	lock status is also printed in the final results and may be
	specified by an initial state.  Test in51.dat and mod18.adl test
	this feature.

2006-04-12  Brian Kahne  <bkahne@freescale.com>

	* Added cache logging for invalidate operations.  The CacheAction
	value is set to CacheNone in this case, which means that the "t"
	field in a C command is ommitted.  The "a" field is then set to
	"invalidate".

	* Modified cache logging so that cache cards (C cards) can ommit
	the set and way parameters if they are not relevant.  Certain
	types of misses no do this.

	* Modified the cache API so that a victim cache could be correctly
	modeled.  The read_from_next() function now takes a boolean which
	says whether to load the cache line if it doesn't exist in the
	next-level cache.  If false, then the function returns false if
	the line does not exist.

	* Fixed the code generator to handle the name "ThisCache", which
	means to apply the method to whatever cache's hook is being used.

	* Extended the cache logging so that loads are reported
	explicitly.  Thus, a miss command is usually followed by a load
	command, although a victim cache would not have a load.  For
	example, a normal cache miss might look like:

		L1 miss
		L2 miss
		L2 load
		L1 load

	For a victim cache, it would look like:

		L1 miss
		L2 miss
		L1 load

2006-04-05  Arthur Hyder  <ahyder@freescale.com>

	* Changed the executables in /designs so that the 64bit gdb
	interface is the default and the executable with the 32bit
	interface is more clearly labelled.

2006-04-04  Michele Reese  <michele.reese@freescale.com>

	* iss/ElfReader.h: 
	Created a public virtual method in Reader.h: 
	   virtual uint64 symbol(const char* sname) const 
	The ElfReader is the only Reader that overloads this.  It will
	search the symbol table for a symbol of the given name and return
	it's address in a uint64. 
	
	Timed the ISS (3 Mips), and in doing so discovered problems with 
	toggling of trace-mode:
	* main.C:
	Fixed the logic to check for toggle arguments.  Previously we called
	it like: configDB->trace_mode(getOption("trace-mode",configDB->trace_mode()))
	That won't work because we first need to see if the flag was set
	on the command line and if so we should set the value to
	!configDB-><argument> otherwise, we just need to leave it alone.
	
	* iss/GenMmu.C: 
	Wrapped a call to logMmuTranslation with a check to make sure
	trace_mode is enabled.

	Steps taken to time the ISS:
	----------------------
	Built in /tmp on a 32 bit machine (to get around no 32 bit only
	installation of gcc-4.0.2 as well as remove network issues from
	our timing).  Ran autogen w/ --enable-opt to build optimized.

	Upped Sieve to calculate primes to 100000.  This resulted in
	about 7.5M instructions.  

	Timed w/ tracing & debug on/off and with both the uvp and dat writers.
	Used startup.dat to setup mmu translations. All runs came to about 3 Mips.
        Note: performance is ~1Mip without the mmu. 

	Notes: tests/iss needs a regression test that turns off trace and
	debug modes.  It would be nice for the documentation to tell how
	to set these in a ttc file or for the regression to have an
	example of how to do this.  I'm sure it's straightforward but I 
	couldn't get it to work.
	
2006-03-30  James C Holt  <Jim.Holt@freescale.com>

	* Modified Writer.h to flush the output stream on finalize; 
	  Added uvp creation to InteractionMgr.h & InteractionMgr.C

2006-03-29  Arthur Hyder  <ahyder@freescale.com>

	* Added documentation describing the gdb interface and how to use
	it.

	* Added a testcase to support 64bit Gdb interface code generation
	and client and changed the designs makefile to create an
	altair_r1_ut version with a 64bit gdb interface.

2006-03-24  Brian Kahne  <bkahne@freescale.com>

	* Added a new command-line option for models, --max-instr-count or
	--mic, that lets the user set a maximum number of instructions
	that should execute.  This is currently counted across all cores.
	The checking code is inserted if debug-mode is on.  This is tested
	with mod3 and in48.dat.

	* helpers/RtlWalker.C:  We now analyze ternary expressions and if
	both sides are bits types, then if the sizes differm the smaller
	one is enlarged with 0-padding.  Thus, the following expression:

	var y = bits<4>(1) : bits<12>(1);

	Will compile and produce a bits object of size 12.  Previously,
	this wouldn't have compiled b/c C++ requires that both sides of a
	ternary expression be the same.

	* Fixed bug:  Helper functions can now call other helper
	functions.  Added a secondary helper to tests/fe/helpers1.adl and
	tests/iss/mod2.adl to test this.

2006-03-23  Brian Kahne  <bkahne@freescale.com>

	* Modified DAT R cards in init or results sections to "RD", per
	Altair request.  I also bumped up instruction numbers so that the
	first instruction starts at 1.
	
	* Expunged AVP functionality from the regression harness, since we
	don't use that anymore.

	* Added a test to check that tracing results are correct for
	sub-word-sized accesses.

2006-03-22  Michele Reese  <michele.reese@freescale.com>
	* tests/designs
	Removed all the 1-1 mappings in the designs regression because we 
	need to fully exercise the MMU and currently if the iss can't find
	a translation for an ea, it uses the ea as the ra which hides
	bugs.  Also removed the bias for aligned data addresses.  Found
	quite a few bugs:
	
	* booke.adl
	bcctrl: the new IAR was always getting truncated to 32 bit when we
	anded the 64 bit CTR w/ ~0x3 instead of ~0x3ULL.

	* altair_r1.adl
	TID tlb field: size was 6 bits, it should be 32.
	
	* helpers/intbv_impl.h (operator|): 
	Modified operations w/ integer to take an unsigned long long
	instead of just an unsigned long.  This way they will work with
	both 32 bit and 64 bit integers whereas before the ULL was getting
	silently truncated.

	* scripts/regress_utils.pm
	Fixed bug in uvp2dat where it expected the ea for icards to have a
	leading zero.

	* Memory.h
	write64: the logging for misaligned doubles was incorrect.  The
	value written to memory was correct, but the logging sent to the
	testwriter needed to be ea,ea+4 and ea+8 (if necessary).  Added
	regression test designs/ldst.uvp that tests byte,half,word and
	double word loads and stores to addresses ending in 0-f.  Found
	bug in scripts/Compare/Data.pm that I forwarded to Brian where it
	can't determine the type of a structure.  
	
2006-03-22  Michele Reese  <michele.reese@freescale.com>

	* iss/Porthole.C (getArgs): 
	Added support for System Calls.  Currently in the altair/booke
	model the sc instruction just does a series of memory writes to
	the porthole locations.  The next step will be to move that logic
	into an assembly library that an application can link to
	containing the low level standard library routines for
	read/write/open/close/exit. 

	The effective address of the porthole is what the library/sc will
	write to.  It's up to the user to setup a translation to the real
	address and configure the model with that real address so that the
	iss can watch for the porthole writes. By default, porthole
	support is disabled.
	
	To see how to use the system call support look at regression test 
	17 in the designs directory.

2006-03-22  Arthur Hyder  <ahyder@freescale.com>

	* Added a regression to make sure the gdb interface scales 32bit
	tests up to 64bit models without sign extending.

2006-03-21  Brian Kahne  <bkahne@freescale.com>

	* Fixed a minor bug with GDB- we were sign extending addresses and
	thus screwing up memory acceses.

2006-03-20  Brian Kahne  <bkahne@freescale.com>

	* The home page for ADL is now located on Compass at
	http://compass.freescale.net/go/ADLsite.  I moved it so that
	everybody could see it- the old location was on an
	export-controlled server and was thus not accessible by some
	people, such as the Romanian DevTech development team.

	Added scripts/ftp-compass to allow for an automated means of
	submitting stuff to Compass.  Modified configure.ac to check to
	see if Compass exists and to set stuff up if it does.
	
        ======== adl release 0.3.8 (v0_3_8) on Linux (cde-tx32-ldt189) on 3/20/2006 ========

2006-03-20  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with the MMU's logging system:  We used to have just
	a single pointer to the last hit translation.  The problem was
	that if we mixed translation types, we'd use the wrong one.  In
	other words, if we did a load, then another instruction fetch, the
	instruction fetch's logging would use the poiner to the data
	translation.

	Fixed this by having a last-hit pointer for each type of
	translation (instr, load, store).  Added a tracing section to
	in21.dat to check for this.

2006-03-20  Arthur Hyder  <ahyder@freescale.com>

	* Fixed bug with setting a port number on the command line and
	starting the server on the correct port.

2006-03-16  Brian Kahne  <bkahne@freescale.com>

	** Creation of the skip_instruction_target label is now
	conditional, based on whether we use the skip_instruction()
	function in the pre_fetch hook.  This eliminates an annoying
	warning from the compiler.

	* Removed "let" blocks b/c they weren't being used and they just
	cluttered things up.  Type inferencing is now solely down via the
	"var" statement.

	* Added the skip_instruction() function, which can go into a
	pre_fetch hook and skip the execution of the next instruction.
	Added mod22 and in46.dat to test this.

	* Fixed parms so that they can be booleans, e.g. can have the
	options "true" and "false".  However, if they have either true or
	false, then they can only exclusively have true and false as
	options.  In such a case, we instantiate a boolean rather than
	create a special enum type.
 	
	* Fixed bug with displaying TLB results:  We were incorrectly
	marking lookups as not shared when they should have been.

	* Added final results checking for TD cards.

	* Added the ability to check to make sure that certain types of
	cards do not exist in an output DAT file.  This is done by using a
	comment block named "excludes" and then listing the names of the
	cards that should not exist.  Look at in26.dat for an example that
	makes sure that TD cards do not exist in the child threads and
	only in the main system.

	* Got rid of introspector.C and the standalone introspection
	programs.  Replaced it with a command-line parameter
	"--model-info" in ExecStuff.C, so that all models have the option
	of printing their data in valid XML.

	* Added the info() function, which generates annotation cards in
	the testcase.

        ======== adl release 0.3.7 (v0_3_7) on Linux (cde-tx32-ldt189) ========

2006-03-14  Brian Kahne  <bkahne@freescale.com>

	* Updated the DAT format so that everything is stored as a
	key-value pair.  The format is now documented in
	doc/dat-format.rst

	* Updated the regression suite and all tools to handle the new DAT
	format.

	* Updated the regression framework so that it uses Data::Compare
	for comparing data structures.

2006-03-14  Arthur Hyder  <ahyder@freescale.com>

	* Updated main.C to support code generation for get/set register
	by index and to lookup register names by index. It retrieves
	register-index mapping information from the config file, which
	also sepcifies the width of registers sent back to gdb (for 64bit
	compatability with 32bit gdb).

	Complete register handlers in GdbServer and added testcase
	gdbtest1 to test register functionality. All of GdbServer should
	work with the exception of watchpoints.
	
2006-03-10  James C Holt  <Jim.Holt@motorola.com>

	* Updated InteractionMgr to include 'show_mem', 'trace_on', and trace_off'
	commands.  Documentation for using these commands is included in
	the file InteractionMagr.C

        ======== adl release 0.3.6 (v0_3_6) on Linux (cde-tx32-ldt189) ========

2006-03-09  Brian Kahne  <bkahne@freescale.com>

	* Removed the reference class from intbv, as it tended to be a
	little flaky: It could only handle single bits and not slices.
	For some reason, we still need the 'volatile' keyword or else it
	fails with -O3.  We should investigate this further at a later
	time.

	* Changed the slice and single-bit accessor functsion to return
	constant intbv objects so that simple mistakes, such as trying to
	assign to a slice, will be caught.

        ======== adl release 0.3.5 (v0_3_5) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.4 (v0_3_4) on Linux (cde-tx32-ldt189) ========

2006-03-09  Brian Kahne  <bkahne@freescale.com>

	* Various little fixes for gcc 4.0.2 compatibility:

	Fixed bug in intbv:  A precedence error in _whichbit originally
	looked like this: (nb - 1 - pos % _INTBV_BITS_PER_WORD) but should
	have been:  ((nb - 1 - pos) % _INTBV_BITS_PER_WORD).

	Fixed bug in intbv:  _whichbit in intbv_base<2> had its
	functionality swapped with _whichwordbit.

	* Various minor tweaks, such as adding virtual destructors to
	remove warnings.

	* Added a default case to the disassembler's disassemble tree to
	remove a warning.

	* Added a requirement for plasma 0.8.24.  Should have been done
	for the changes which added .get<> transformations.
	
2006-03-07  Michele Reese  <michele.reese@freescale.com>

	* iss/ElfReader.h: 
	Fixed bug in readFile() caused when advanceToData hits the end of
	the file, it needed to break out of the loop.  This was causing us
	to always initialize address 0 to a stale value.  Also added print
	statement when initializing the entry_addr so that we can be loud
	about the fact that the ElfReader does this.  Really the entry
	addr is just for gdb so that it can break on the start address of
	the application.  Customers using their own crt0 code, really want
	the NIA to start at the reset vector.  This at least lets them
	know they should reset their NIA.

	* iss/UvpWriter.C: 
	Added code to sort the dcards before printing them - customer
	requested this for readability.
	
2006-03-07  Brian Kahne  <bkahne@freescale.com>

	* Helper functions are now placed within architecture or core
	blocks, not at the global scope.  Functions may be overridden by
	name (we don't look at parms).

	* Bit slices now return an intbv of the right size, e.g. if x is an
	intbv object, x(28,31) returns intbv<4>.  This is done using a
	code transformer in RtlWalker.  We track types so that we can
	handle this.  InstrWalker, when it does code transformations, adds
	typing information now.

	* We can now handle registers with offsets, so that bit indices
	are offset-relative.  For example, a register with an offset of 32
	has indices of (32,63).

	* We do some simple constant expression evaluation so that
	functions which need constant arguments because they're
	transformed into template calls can have simple expressions for
	arguments.

2006-02-27  Brian Kahne  <bkahne@freescale.com>

	* Got rid of Config (Config.h) and moved that logic into ConfigDB.

2006-02-23  Michele Reese  <michele.reese@freescale.com>

	* iss/UvpWriter.C: 
	Removed final_addr data member in the CoreInfo class.  It was
	initialized when we removed the last instruction (the halt) and
	used for writing the RES card.  Now that we have the concept of
	'active' for threads, the testcase can also end when the thread is
	disabled, thus no halt instruction.  We now use the current pc
	for the ea and call instr_read_translate to get the ra.  The ta
	comes from the logging.  We eventually want to get rid of the halt
	instruction.

2006-02-23  Brian Kahne  <bkahne@freescale.com>

	* Added the invalidate_line, read_line, and write_through hooks to
	the cache define block and implemented them.  Expanded the cache
	API and added mod21.adl to test basic victim-cache/write-through
	behavior.

	* Added pre_fetch and post_exec handlers, which are called before
	an instruction fetch and after instruction execution,
	respectively.

2006-02-22  Brian Kahne  <bkahne@freescale.com>

	* The MMU may now be queried to perform a translation through an
	interface in IssCore.

	* Added lastRealAddr() to return the real address result of the
	last translation performed.

	* Changed "classes" to "attrs" because people didn't like the old
	name.

	* Added model introspection features for registers and caches.
	Moved all introspection stuff to Introspection.h and added
	regressions to test this.  The extractor functions output in an
	XML-style format if you just want to dump the info.
	
2006-02-21  Brian Kahne  <bkahne@freescale.com>

	* Modified the GDB interface so that it returns a signal of 5 when
	step or continue completes.  This is what GDB expects, so this
	allows stepping across C statements.

2006-02-17  Arthur Hyder  <ahyder@freescale.com>

	* Updated RemoteGdbServer to encapsulate all of the model's gdb
	handling functionality. Breakpoints work. Get registers works and
	the code commented out is the code that works specifically for
	altair but has not been genericized yet.

2006-02-17  Brian Kahne  <bkahne@freescale.com>

	* Modified the MMU's interface.  Rather than calling the Mmu
	function and specifying the lookup object, you simply call the
	lookup object as a function and then either read or write to it.
	Now, the type of a lookup is the lookup's name with _t appended.
	So, a permission checking function for a lookup named TlbCam would
	take a parameter of type TlbCam_t.

	* Added an API for caches.  You simply call a method on the cache,
	e.g. L2.flush(ra).  The complete cache API is documented in
	adl-notes.

	* Translate functions are now user accessible:

	addr_t instrReadTranslate(addr_t ea);
	addr_t dataReadTranslate(addr_t ea);
	addr_t dataWriteTranslate(addr_t ea);

	These can be called in instruction action code.  For example, to
	implement a cache instruction, you would calculate an EA,
	translate it by calling the appropriate function, then call the
	appropriate cache method.
	
2006-02-17  James C Holt  <Jim.Holt@freescale.com>

	* Removed InteractionMgr inheritance from ReportBase.  This was
	an incorrect interpretation on my part of the architecture
	that Brian intended.

2006-02-16  Brian Kahne  <bkahne@freescale.com>

	* Fixed a bug with encoding.  If we had two instructions which
	each have non-overlapping opcodes, such that working in a left to
	right fashion would cause mutual conflicts, we could get into an
	infinite loop.  Fixed this by cycling through all remaining
	opcodes when a conflict was found and then not allowing
	re-encoding during that process.  Added inst26.adl to check this.

	* Added better error messsages for when conflicts are found during
	instruction encoding.

2006-02-15  Michele Reese  <michele.reese@freescale.com>

	* iss/GenMmu.C: 
	Modified the mask in the translate function so that 1 is an ULL
	rather than an int because for Altair the larger size transations
	were using a mask of zero.  You would think this would cause a
	failed translation and a failed test but that is not the case
	because if a handler is not registered, it just uses the ea as the
	ra.  Added regression test 14 in designs.


2006-02-14  Brian Kahne  <bkahne@freescale.com>

	* Modified cache logging so that miss C-cards at higher
	level-caches occur before lower cache level cards (CDCpp53321).

	* Modified the node hierarchy so that cores have parent pointers.

	* Modified system and core generation so that we support events on
	register updates of shared registers, even if writes to the
	shared register are done by another core.  This was accomplished
	by:

	1.  When cores/systems are generated, if they're locally defined,
	they get references to all of their parents.

	2.  Any hooks which watch a shared register, such as a parameter watch,
	an active watch, etc., generate a shared watch, which is attached
	to the parent list at the appropriate point.  After generatin the
	cores, all parent watches are generated, which then call down to
	the members' watches.

	* Added support for course-grained MT by adding an "active" key to
	the core.  If the 0-ary function return true, the core is active,
	otherwise it is halted.
	
	Added mod20.adl and in42.dat to test this stuff.
	
        ======== adl release 0.3.4 (v0_3_4) on Linux (cde-tx32-ldt189) ========

2006-02-09  Michele Reese  <michele.reese@freescale.com>

	* iss/ElfReader.h: 
	The ElfReader is now extended to support 64 bit input (ELF64) 
	files.  I made the ElfReader a templated class based on the number
	of words (1=32 bit, 2=64 bit, etc.).  There are two types of
	structures in the ElfReader *.internal and *.external.  The
	external structures are arrays of bytes and the internal
	structures are just those bytes converted to integers, shorts,
	etc.  I extended the sizes of the internal structures as necessary
	to accodomate the 64 bit fields.  Since the external is just
	populated by a memcpy, it has to match the layout exactly.  Thus
	the external structures base their sizes on the template
	argument.  Also, I added an ElfReaderFactory that opens the file,
	checks the type (ELf64 or ELf32), instantiates the correct
	ElfReader based on the type and returns a pointer to it.  Added
	the sieve64 elf regression test.
	
2006-02-09  Brian Kahne  <bkahne@freescale.com>

	* Changed the tracing on/off functions to be called startLogging()
	and stopLogging() (requested by Altair).

	* Updated the dat and uvp writers to handle multiple tests.

	* Updated ExecSupport, DatReader, and the regression suites to
	handle multiple tests.

	* Modified how the instruction tables are created.  Previously, we
	worked in a strict left to right direction when encoding opcodes.
	If we encountered a conflict, then we had to quite.  However,
	that's too limited for architectures where a tertiary opcode
	occurs in the middle of the instruction.  The new version, on a
	conflict, destroys that node in the tree and re-encodes using the
	next available opcode.  It then re-inserts every instruction that
	was in that node, starting at the root.

2006-02-03  Brian Kahne  <bkahne@freescale.com>

	* Restructured the reader and writer interface in ExecSupport.C.
	Now the writer's type is inferred automatically from the filename
	is no explicit type is specified, just as the input's type is
	inferred.  It is also legal to start a model w/o an input file as
	long as there is another option specfied, such as starting up the
	debugger.

	* Added SimInterface.h, which creates an interface to a standalone
	model for simulation control.  Most of this stuff is reading
	input, creating a writer, toggling tracing, etc.  Refer to the
	header file for more information.
	
2006-02-02  Arthur Hyder  <ahyder@freescale.com>

	* Added initial GdbServer code to the iss directory and
	genericized it for all models. All basic gdb commands are
	supported get/set memory, stepi. Breakpoints and register support
	needs to be added in a generic way for all models.

	* The commands to connect a gdb client are as follow: 
	set debug remote 1 # this directs gdb to output detailed 
	information about the packets sent and is only 
	necessary for debugging.  target

	remote hostname:port # this will connect the client to the host.

2006-02-01  Brian Kahne  <bkahne@freescale.com>

	* Illegal opcodes now call log_instr with a special "<illop>"
	string.  This way, intermediate results caused by an exception can
	be attributed to the illegal instruction.

	* Exceptions now generate a call to log_exception().  The
	DatWriter handles this by printing an "E <type>" card.

	* Breakpoints and watchpoints were added.  These are enabled if
	the ISS is generated with "--debug-mode" (default is on).
	Functions for setting and clearing these things were also added.
	The DatReader will read these and set them up and the DatWriter
	will log their occurrance for testing purposes.  

	When one of these events occurs, a call to log_breakpoint or
	log_watchpoint is made.  At that point, the user can decide to
	throw a SimInterrupt struct in order to immediately halt the
	simulation loop.
	
2006-02-01  Michele Reese  <michele.reese@freescale.com>

	* helpers/intbv.h: 
	Added support for signedMultiply and signedDivide to intbv/bits.
	The regression is the same as that for the other arithmetic
	operators and checkArith takes a parm to tell if if it needs to
	convert  the signed numbers to unsigned and append the '_' that
	indicates to dc that it's a signed number.  Overloads for integer
	were also added.  The implementation for the 32bit and 64bit
	partial specializations simply casts to an integer.  The
	implementation for the arbitrary precision notes the signs of each
	operand, converts to unsigned (ie. takes the twos complement of
	the negative number), performs the operation and takes the twos
	complement of the result (if the signs are not equal, ie. the
	result should be negative).

2006-01-31  Brian Kahne  <bkahne@freescale.com>

	* Added support for shared caches.  Changed the syntax of caches
	slightly:  Caches must now have unique names; level and type
	information is then specified using keys.  Caches are then shared
	using the usual method of specifying the name within the shared
	block, using the key "caches".

2006-01-27  Brian Kahne  <bkahne@freescale.com>

	* Added support for cache enable, hit, and miss functions hooks.

2006-01-26  Brian Kahne  <bkahne@freescale.com>

	* Added an example, in37.dat, which demonstrates how the delay
	slot in a delayed-branch can be cancelled.  Modified mod16.adl to
	add this functionality.

2006-01-25  Brian Kahne  <bkahne@freescale.com>

	* Added initial cache-model generation.  The cache is pretty
	simple: It only supports an LRU replacement algorithm, implemented
	using a linked-list of indices of ways.  The least-recently used
	element is at the head and the most-recently-used is at the tail.

	* Added support for reading and writing cache data cards and
	printing cache activity during the trace.

	* Added native, low-level support for 64-bit reads and writes.

	* Modified the DatWriter back to using a linked-list of memory
	extents.  Using the hash was not needed, since we just list used
	memory.  I also modified the uint64 hash function found in
	stringhash.h because it resulted in a big performance bug.

2006-01-20  Michele Reese  <michele.reese@freescale.com>

	* iss/UvpWriter.C: 
	In order to track ea/ta/owner info per real address for writing
	dcards in the UvpWriter, added new RaInfo structure.  An RaInfo
	consists of: ra_owner, init_value, mappings list
	(ea,ta,translation_owner).  This is all stored in the new
	templatized MemoryLogger class.  The UvpWriter instantiates it
	as a hash_map of ra->ra_owner* while the DatWriter intantiates it
	as a hash_map of ra->void*.  This replaces the old memQList and
	the LogWriter entirely.  UvpWriter and DatWriter now just inherit
	directly from the Writer base class.  These structures should give
	us a clean way to extend the information we track as new needs
	arise.  The MemoryLogger class publicly inherits from
	gc_hash_map.  hash_map is an extension and didn't have a hash
	function for unsigned long long (addr_t) so I added one in 
	helpers/stringhash.h.  When init_mem is called the ra is inserted
	into the hash and the only field in the raInfo that is set is the
	init_value.  Then as instructions access real addresses,
	log_used_addres is called which captures the
	ea/ta/translation_owner information and adds it to the mappings
	list in the RaInfo.  If the translation owner doesn't match the
	real address owner, the real address owner is updated to the root
	of the hierarchy (ie. global).  

	* iss/DatWriter.C
	In order to support mt, I added a new keyword to the DatFormat.
	We now print INIT at the start of the initialization section.
	This allows us to support any arbitrary interleaving of
	sections/cores in the dat format.  Also, changed the DatWriter so
	that it now writes out the hierarchy (including the root) and only
	prints the shared registers at the level they're shared at.  We
	also now print the CORE tag at the start of a test even for uni.
	This allows the uvp2dat script to stream out a CORE tag as soon as
	it encounters "powerpc => " rather than trying first to figure out
	if we're uni or mp/mt.  

	Modified regress_utils to handle mt.  It now pops the intermediate
	results frames off so that the irs list is effectively reset
	between cores/threads.  Also, we weren't catching the transtion
	from powerpc::t2 to powerpc in the results section for dats
	created by uvp2dat.  uvp2dat now writes a CORE identifier as it
	exits the threads sections and writes out the final global
	results.  Fixed bug in uvp2dat where matching when we convert
	G[n]/F[n]/V[n] to GPR[n]/FPR[n]/VPR[n] wasn't only checking from
	the beginning of the line. ex: L1CFG0 got changed to L1G0 causing
	a fail when the test was put back through raptor runmode.  

2006-01-18  Brian Kahne  <bkahne@freescale.com>

	* Added the initial front-end support and documentation for
	modeling caches.

2006-01-17  James C Holt  <Jim.Holt@motorola.com>

	* Removed 'using namespace std' from header files for LoggingMgr
	and InteractionMgr.  Did some trivial cleanups on my coding style.

	
2006-01-16  Brian Kahne  <bkahne@freescale.com>

	* Added the ability to read and write MMU lookups.  The syntax to
	write is:

	Mmu(<lookup name>,<set>,<set>) = ...

	The same synatx (as an r-value) is used for reading.  For testing,
	mod11.adl was modified to implement tlbwe and tlbre and in34.dat
	tests this.

2006-01-13  Brian Kahne  <bkahne@freescale.com>

	* Added support for nested lookups.  One minor change is that the
	namespace for lookups is flat- nested lookups must have unique
	names wrt. every other lookup.  This is so that the
	read/write/test interface can deal with a flat namespace and not
	have to worry about paths to identify nested lookups.  Added
	mod17.adl and in33.dat to test this.

2006-01-12  James C Holt  <Jim.Holt@motorola.com>

	* Created the LoggingManager and InteractionMgr classes. Updated
	the Writer subclasses to use the new LoggingMgr interface for
	output.  The InteractionMgr is just a stub for now.  Modified
	ExecSupport to use the LoggingMgr.

2006-01-12  Brian Kahne  <bkahne@freescale.com>

	* Added a new key to the DAT format:  = <ident> and = /<ident>

	These start and end multi-line comments.  The identifier can be
	used to identify specific types of multi-line comments, such as
	blocks of assembly code.  Comments should be properly nested; the
	same identifier that starts a comment should end a comment.

	The various scripts (regress_utils and check_results) have been
	modified to parse these blocks.

	* Modified the format for ra_mask and added ea_mask.  The model
	mod10.adl was modified to test this; in32.dat is used as input for
	the regression.  Refer to adl-notes for information about the new
	format.

        ======== adl release 0.3.3 (v0_3_3) on Linux (cde-tx32-ldt189) ========

2006-01-10  Brian Kahne  <bkahne@freescale.com>

	* Added a new hook, post_fetch, which allows the user to modify
	how the NIA is updated.  The default action is:

	NIA = CIA + instr_size

	The hook takes an unsigned integer argument (instr_size), which is
	the size of the instruction in bytes.

	This can be used to model a processor with a delay slot.  Refer to
	tests/iss/mod16.adl for an example.

2006-01-09  Michele Reese  <michele.reese@freescale.com>

	* iss/ExecSupport.C: 
	Added support for multiple readers.  For each input file given,
	we determine the reader, create it and read in the input file.
	This required separation of determineReaderWriter and 
	createReaderWriter into separate functions for the reader and
	the writer.  Also, init now calls reader->readFile() rather
	than the separate readInput function so that parsing can be done
	while looping through 
	the given input files.

2006-01-09  Brian Kahne  <bkahne@freescale.com>

	* Modified the reporting infrastructure so that the showRegs and
	showMmu functions now take an argument of a ReportBase object.
	This object's methods are then called repeatedly to report values.
	Writer now derives from this class.  This avoids some of the
	circuitous data flow that we had and means that non-writers can
	call the show routines.

	* Added the getReg function to the model so that individual
	register values can be fetched.

	* Added versions of setReg and getReg that take uint64.

2006-01-06  Brian Kahne  <bkahne@freescale.com>

	* Added support for set-associative MMU arrays.

	* Added support for single-way arrays directly indexed using
	AddrIndex.

2006-01-06  Michele Reese  <michele.reese@freescale.com>

	* iss/UvpWriter.C (writeRCmd): 
	Lots of little fixes to get the uvp parseable by abe.
	
	Added code to the model generator so that epage and rpage are
	reported by the model on a call to showMmu.
	

2006-01-05  Brian Kahne  <bkahne@freescale.com>

	* Added mmu enable functionality.

	* Added support for mmu lookup hit/miss functions.

	* I now clear the MMU translation cache if a register is modified
	that's used by any of the address comparison tests or the enable
	functions.  So, for example, a mtmsr will clear the cache so that
	eroneous translations are not made, such as by allowing a
	supervisor access even though the core is now in user-mode.
	
2006-01-03  Michele Reese  <michele.reese@freescale.com>

	* iss/ExecSupport.C: 
	Little fixes to get mt going:
	Added LaxMode option to allow for parsing to pass even when an
	unknown register is encountered.  This is needed to support raptor
	uvps that display the alias for the register per thread as well as
	the actual register in the global section (ex: TEN).  
	Modified cur_core to start at the root in the DatReader rather
	than the first core in the list.  The first core in the list is
	not the root (outer global level) in an mt system due to the
	recursive way we build the core hierarchy.  

2005-12-21  Brian Kahne  <bkahne@freescale.com>

	* Modified how classes are handled:  Rather than different types
	of classes, there is now a single, global pool of classes stored
	in a static data structure accessible via Data.  These classes can
	then be assigned to instructions, registers, mmu lookups, and mmu
	fields.  More may be added at a later time.

	* The ISS generator now stores all classes in a static data
	structure so that clients can access them by calling
	getClassData().

	* Added additional APIs to the MMU:

	  * Calling getMmuInfo() now returns information about each
	    lookup's fields, including width and class information.

	  * An MmuBase object (base class for lookups) has a method,
	    getField(), that allows access to individual fields by index.
	    These indices correspond to the information returned by
	    getMmuInfo().

 	* Updated the UvpWriter/MiscWriter so that the 'ta' field for
	instructions and intermediate results reflects the value from the
	translation used.  How this works is that any MMU field that has
	an attribute of "translation_attr" is added to an internal
	structure, CoreInfo::_transAttrs.  When a translation is made, it
	is stored in UvpWriter::_last_trans.  When an instruction or
	intermediate value is logged, we use the _last_trans item and the
	_transAttrs data structure to compute the ta value.  To be done:
	We need to track memory accesses and then use that information to
	supply ta fields for D cards.

	NOTE: Currently, we don't have any regressions for this.  This
	needs to be done when the D card work (described above) is
	complete.

	* Fixed bug in UvpWriter: We were failing an assertion if the
	simulation wasn't run with --trace b/c we didn't have a final
	address to use to print the result card.  Changed this so that if
	we don't have a final address, we simply do not print the result
	card.  Thus, when not run in trace mode, we'll just print initial
	state and final state information.  This should probably be
	updated to also include D cards for instructions, if not run in
	trace mode.
	
2005-12-16  Brian Kahne  <bkahne@freescale.com>

	* Added support for shared parameters and MMU lookups.  The
	general structure is the same as for registers:  Shared structures
	are declared at a higher level in the hierarchy and references are
	passed to child objects via their constructors.

2005-12-15  Michele Reese  <michele.reese@freescale.com>

	* iss/UvpWriter.C: 
	Modified the UvpWriter to hold a tree structure instead of a list
	structure to represent the cores in the system.  This mirrors the
	hierarchy of systems and cores in the model.  It first builds the
	mirror hierarchy of CoreInfos and then traverses the hierarchy to
	print out the testcase.  

2005-12-14  Brian Kahne  <bkahne@freescale.com>

	* Modified the ISS generator so that it names the top-level root
	element with the name of the system.  An object's type is now
	specified using the "type" key first and then, if that's empty,
	the type of the system or core.

	* Added the "type" keyword to both systems and cores; this is
	accessible within IssNode objects.  The intent is that the UVP
	writer can use this when writing out the hierarchy.

2005-12-13  Brian Kahne  <bkahne@freescale.com>

	* Modified the IO interface some more:  Got rid of the concept of
	registering cores.  Instead, the reader and writer get access to
	the root of the hierarchy via the constructor.  They then
	construct whatever data structures they need to:  The dat format
	is flat, while the uvp format is hierarchical.

	* Modified system generation so that setRegs is also present for
	all systems as well as all nodes.

	* Modified the dat reader so that the user can specify CORE and
	then any path, including a system, or the special name of ROOT
	which returns the top-level element.

2005-12-12  Brian Kahne  <bkahne@freescale.com>

	* Added an interface to be able to traverse an ISS hierarchy.  The
	top-level node can be accessed by calling getTopLevelNode().  You
	can then call children() on each node.  All cores derive from
	IssCore, which derives from IssNode and all systems derive from
	IssSystem, which derives from IssNode.

	* Modified showRegs: A showRegs() routine now exists at each level
	of the hierarchy.  The shared flag on the call to report_reg() and
	report_regfile() (formerly reg() and regfile_reg()) is true if the
	register is defined at a higher level in the hierarchy.

2005-12-09  Brian Kahne  <bkahne@freescale.com>

	* Modified how shared resources are handled so that registers and
	register files can be shared across cores of different types.

	* Added the ability to specify architectural resources directly
	within a core.

	* Modified tracing logic for registers so that aliased registers
	show up as writes to that register, rather than the target of the
	alias.

	* Modified the sharing syntax.  The resources are now specified
	within a shared define block:

	define (shared) {
	  regs = ...;
	  regfiles = ...;
	}

2005-12-07  Brian Kahne  <bkahne@freescale.com>

	* Modified the memory logging interface so that ea and ra values
	are sent.  Updated the DAT file to handle this:  Intermediate
	loads are represented as:

	L ea=<addr> ra=<addr> data=<addr>  

	Stores are represented as:

	S ea=<addr> ra=<addr> data=<addr>  

	The ea is optional so that AVP -> DAT conversion can ommit it,
	since the ea isn't present on AVP intermediate results.

2005-12-06  Michele Reese  <michele.reese@freescale.com>

	* designs/booke.adl: 

	In order to support mt/mp and translations:
	
	Added support to the UvpWriter to handle multiple cores.  If 
	numCores>1, then the first entry in the _cores (list of
	coreinfo's) is the global "core".  Currently it holds shared regs
	and the mmu.

	Added support to the UvpWriter to suppress multiple register
	updates on a single instruction.  For example, addmeo. sets xer.sols
	and xer.ov but we only want to display the last register update
	for xer.  reg updates are stored lifo in the _irs list for a
	particular instruction.  I opted to do the suppression on the
	writing of the intermediate results rather than on the adding of
	each intermediate result.  We now keep a hash and only display the
	first update we come to (lifo list).

	Added support to the UvpWriter for printing tcards.  More work is
	needed in order to track the type of a given translation (we need
	to know I,D, or ID) and to display the epage (showMMU needs to
	send that).  For now we print all 16 entries of the CAM even if
	they are uninitialized (the altair model doesn't define the tlb4k
	yet) but this is not practical especially when we start defining
	the tlb4k.  We can't key off the valid bit as we need to print the
	invalid entries as well.  So, we need to track what is initialized
	and what isn't in the tlb so that we don't dump hundreds of
	uninitialized tlb entries in every testcase.

	Modified the translation fields to be uint64 rather than uint32
	becuase booke defines 52 bit epn/rpn fields for 64 bit
	implementations.  

	Modified uvp2dat to handle mt.

        General syntax cleanup in booke.adl: 
        changed carry to Carry in intbv and bits.
        added buildEA helper function to isolate case where we can't match
          RTL syntax.

2005-11-29  Michele Reese  <michele.reese@freescale.com>

	* iss/ExecSupport.C: 
	Removed concept of initial/final from the testwriter methods.  Now
	we just have write_mmu, write_regs, write_mem and they take a bool
	that indicates initial or final state.

	Updated the adl-iss-design documentation to include detail on test
	readers and writers.

2005-11-23  Michele Reese  <michele.reese@freescale.com>

	* tests/designs/regress: 
	Switched from avp to uvp format.  Added uvp2dat script to
	regress_utils.pm.  Multithreading shared resources are not
        supported in the avp format.

2005-11-21  Brian Kahne  <bkahne@freescale.com>

	* Modified the ADL grammar so that define/defmod blocks can take a
	list as a name.  This has the effect of applying that block to
	each of the names in the list.  For example:

	define (reg=(A,B,C)) {
	  width = 64;
	}

	This creates three 64-bit registers.

	* Added "ThisReg" as a placeholder for the current register
	involved in a read or write hook.  This allows generic hooks to be
	written using the list syntax detailed above, e.g.:

	defmod (reg=(A,B,C)) {
	  define (write ) {
	    action = func (bits<64> value) {
	      if (Mode = LowPower) {
	        ...
	      } else {
	        ...
	      }
	    };
	  }
	}

2005-11-17  Brian Kahne  <bkahne@freescale.com>

	* Added a new attribute to arch definitions, ra_mask, which lets
	you set a mask to be applied to the real address after
	translation.  Since the native memory model is 64-bit, this lets
	you model a 32-bit system, or anything else whose address is
	smaller than 64-bits.

	* Added a new attribute to register/regfile definitions, offset,
	which takes an integer parameter and specifies the starting index
	for bits.  So, for example, a 32-bit register with an offset of 32
	would have its field use indices 32-63.  Right now, this only
	affects field definitions- direct bit access to registers still
	requires indices to start at 0.  However, generally speaking, you
	shouldn't be accessing bits directly anyway.

        ======== adl release 0.3.2 (v0_3_2) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.2 (v0_3_2) on Linux (cde-tx32-ldt189) ========

2005-11-16  Brian Kahne  <bkahne@freescale.com>

	* Modified adl2iss so that it uses adl-config for library and
	include information, thus reducing the redundancy.

	* Added tests/scripts to test the use of adl2iss.

	* Added --setpfx=path to adl-config so that the user can set an
	alternative install path.

2005-11-15  Brian Kahne  <bkahne@freescale.com>

	* Added watch functions to parameters so that a mode can be
	updated when any register in the watch function is modified.  This
	lets the state of a system be modified during initialization or
	runtime.  Mod12.adl and in22.dat test this.

2005-11-14  Brian Kahne  <bkahne@freescale.com>

	* Re-architected register handling within ISS models.  Now, the
	register data structures are pretty simple and inherit directly
	from their storage item, if necessary.  Accessor functions are
	methods of the core so that read and write hooks can see other
	registers.  The InstrWalker now does code transformations similar
	to how memory is handled, e.g. converting GPR(RT) = GPR(RA) +
	GPR(RB) to GPR_write(RT, GPR_read(RA) + GPR_read(RB)).

	I expanded mod7 and in10.dat to test write hooks that reference
	other registers.

2005-11-09  Brian Kahne  <bkahne@freescale.com>

	* Re-architected memory so that misaligned loads/stores will work
	correctly when they cross a page.  The new architecture handles
	arbitrary loads and stores in Memory.h using the MemoryAccess
	class.  MemoryInterface.h contains routines for handling
	arbitrary-sized loads/stores with intbv.

2005-11-02  Michele Reese  <michele.reese@freescale.com>

	* tests/designs/regress: 
	Added the UvpWriter.  
	Separated Writer::initialize and Writer::finalize into: 
	pre_initialize: The memory query list is reset
	post_initialize: Initialization is done so we populate the
	  initial register values.
	pre_finalize: The simulation is done so we populate the final 
	  register values.
	post_finalize: close the output file.

	Dat format change: we no longer print intermediate results for the
	NIA.  We no longer print intermediate or final results for the
	CIA.
	
	There is some hackage to deal with the halt instruction.  We pop
	the last instruction off the instruction list and then call
	set_program_counter so that we end up with the correct NIA.  Both
	the reader and writer have set_program_counter_internal methods so
	that only the base classes talk to the model interface.  

	The reader no longer pushes initial values through the interface to
	the writer.  Now the writer just pulls the initial values just
	like it pulls the final values by calling showregs.  

	The UvpWriter contains lots of structures for buffering the
	output.  The top of the hierarchy is a CoreInfo structure that
	contains a register list and an instruction list.  Each
	instruction  list also has an intermediate results list. 

2005-11-02  Brian Kahne  <bkahne@freescale.com>

	* Minor fixes to get the MMU to work.  The file in21.dat does some
	basic testing of the MMU.

2005-11-01  Brian Kahne  <bkahne@freescale.com>

	* Initial MMU code generation.  Functionality has not yet been
	tried, but it generates code that compiles!

	* Change to memory usage:  You now use the syntax
	Mem(addr,<size-bytes>) to address memory.  For example:

	Mem(addr,4) = GPR(RS);

	or 

	GPR(RT) = Mem(addr,4);

	* Register-file references now use function-call syntax rather
	than array syntax.

	* signExtend is now a standalone function:  signExtend(x,bit);

	* The zero-generating function is now zero(<size-bits>).

2005-10-21  Brian Kahne  <bkahne@freescale.com>

	* Changed how MMU fields are specified:  We now use a define-block
	syntax so that you can have documentation strings on each field.
	The basic syntax is:

		define (field=<name>) {
		  // Documentation string.
	  	  bits = <int>
		}

	If 'bits' is not specified, the default is 0, which means that the
	field is incomplete.  A non-interface lookup object may not have
	incomplete fields.

2005-10-20  Brian Kahne  <bkahne@freescale.com>

	* Added front-end support for MMU modeling.  The adl-notes
	document describes the define types and allowed keys.  Regressions
	were added, plus examples for modeling BookE and Classic MMUs.

2005-10-17  Michele Reese  <michele.reese@freescale.com>

	* iss/ElfReader.C: 
	Added the elfreader.  Much+ of the code is from AME's elfistreamfmt
	class.  It parses an elf file into the codebuf structure and then
	walks the sections to locate all memory that needs to be
	initialized.  The only register it initializes is the NIA.  The
	class is completely self-contained.  The methods in the public
	interface are only the ctor,dtor and readFile.  The functions it
	calls out to are only: init_mem_internal and init_reg_internal.  
	Added sieve.o to the regression and modified regress-utils to know
	what to do with a elf input file.  To add an elf regression test,
	it expects not only the test.o but also the test.dat to contain
	the results section for it to check.  There are some "howtos" in
	the elfreader exlaining how to use the cross compiler to create
	the ppc elf file and a little about the readelf and objdump
	utilities.  Memory is currently initialized a word at a time, for
	speed purposes later we may want a higher-bandwidth memory
	initialization function and we may also want to consider
	re-writing the elfreader to use mmap.

2005-10-17  Brian Kahne  <bkahne@freescale.com>

	* Added a new core service:

		setStartAddr(addr_t)

	This sets the starting address for the core by setting the program
	counter register.  The idea is that file formats which specify a
	starting address can use this w/o having to know what the program
	counter register is named.

2005-10-14  Brian Kahne  <bkahne@freescale.com>

	* Changed "defmodify" to "defmod" for brevity.

	* Added a proposal for MMU modeling to adl-notes.

2005-10-10  Michele Reese  <michele.reese@freescale.com>

	* Changed DatWriter to call final_regs in ModelInterface rather than
	calling showRegs directly on the core.  This way all communicate
	between the readers/writers goes through the interface.

	* Changed the DatReader to shut off when it encounters either a
	TRACE or RESULTS command in the dat file.  Since we used to
	continue in "log only" mode it was okay to not have init cards for
	every data address as when the reader encountered them in the
	trace or results section it would tell the writer to log them as
	used addresses.  Since we shut off now, there is no log_only mode
	and all addresses touched in the testcase now require init_cards.

	* Changed the core pointer in the writer to const.  These pointers
	in the reader/writer are just used to keep track of which core we
	are currently processing.  

        ======== adl release 0.3.1 (v0_3_1) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.1 (v0_3_1) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.1 (v0_3_1) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.1 (v0_3_1) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.1 (v0_3_1) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.1 (v0_3_1) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.1 (v0_3_1) on Linux (cde-tx32-ldt189) ========

        ======== adl release 0.3.1 (v0_3_1) on Linux (cde-tx32-ldt189) ========

2005-10-07  Brian Kahne  <bkahne@freescale.com>

	* The docinstall target now installs a copy of the distribution
	and an info.xml file.

	* Added support for time-tagged ISS groups with count > 1.  This
	was implemented using a templated resource-counter class.  A
	partial specialization exists for counts of 1- this is simply an
	integer counter.  For > 1 we have an array of counters.  We search
	for the next available counter using a loop, which should be
	unwound by the compiler.  We might want a faster approach, but I
	think that an unwound loop will be faster than a generic sort
	algorithm for the usual case of 2 - 3 elements.

	* Modified the resource-limited time algorithm a bit- we
	accumulate time based upon the next available resource, then
	execute the instruction, then modify the resource to be available
	at accumulated-time + delay.

2005-10-06  Brian Kahne  <bkahne@freescale.com>

	* Modified the format of the ISS-generator configuration file.
	Now, groups are defined with the following parameters:

		define (group=foo) {
		  items   = <list of instructions or instr. classes>;
		  latency = <instr latency; default = 1>;
	          delay   = <delay until next available, for non-pipelined
	                     units.  Default = 0>;
		  count   = <number of resources available.  Default is 1
			     if group has a delay, otherwise no limit.>
		}

	The "config" group remains unchanged.

	* Added support for multiple issue and for delays in time-tagged
	ISSs.

2005-10-04  Brian Kahne  <bkahne@freescale.com>

	* Fixed time-tagged ISSs so that they work with MP simulations-
	each class now has a current-time member variable for tracking
	instruction time.

	* Rearchitected the regression suite so that AVP files are
	converted to DATs, with intermediate results being placed into the
	DAT TRACE section.  A standalone DAT, if it has a TRACE section,
	will activate intermediate result checking, so it's possible to do
	things like check instruction issue/completion time, etc.

	* Added a new feature to the parser that allows error messages to
	be printed w/o path information- just the base-name is printed.
	The regression turns this feature on so that "make distcheck" will
	pass w/o requiring that files be copied into the current
	directory.

	* Added "FilenameUtils.[hC]":  This adds support for getting the
	basename/dirname of a filename using C++ strings.
	
2005-09-30  Brian Kahne  <bkahne@freescale.com>

	* Moved test-creation routines into regress_utils.pm, since they
	were duplicated in iss/regress and designs/regress.

	* Updated the configuration file for the ISS generator.  It is
	documented in adl-notes.rst.  The major classes are:

	ConfigDB:  Stores the overall configuration database.  It contains
	a hierarchy which must match the hierarchy in the model file.

	CoreConfig:  Stores configuration information for a core.

	ConfigParser: The parser object.  Various handlers deal with
	processing the key/value pairs and define groups.

2005-09-30  Michele Reese  <michele.reese@freescale.com>
	* tests/iss/regress (rerun_model_test): 
	Added two regression tests to the iss directory.  The
	first one calls rerun_model_test which generates a test
	and then runs the model again on the output of the first
	test.  This caught some bugs in the DatReader where
	we weren't handling the TRACE section correctly.  The
	DatReader now shuts off when it encounters a TRACE card
	but turns back on for a RESULTS card.  The second regression test
	has an intentionally incorrect results card and
	expects the checker to fail.  This will catch bugs
	like we ran into the other day where check_final_results
	was being called with the input and output files reversed
	and wasn't checking anything.

2005-09-28  Michele Reese  <michele.reese@freescale.com>

	* designs/booke.adl: finished up adding add and
	and instructions.

2005-09-27  Michele Reese  <michele.reese@freescale.com>
	* Added readers & writers framework.  	
	Reader base class:
		DatReader inherits from it

	Writer base class:
		LogWriter inherits from it and adds a memoryQueryList
		 data member to keep track of used addresses.
			DatWriter inherits from LogWriter.

	ExecSupport.C's logging methods now just call the writer's
	logging methods.  Added setMem global function that the
	reader calls so that memory is initialized and the writer
	is called to log it (if it cares).  Moved all dat specific
	i/o into the DatReader and DatWriter classes.

	main.C now has determineReaderWriter and createReaderWriter
	methods so that the appropriate reader and writer are determined
	first from command line options or if not specified then from
	the filenames.  If no output format is specified and not output
	file name is given, default is dat and default file name is
	out.dat.  Added command line options: if (input file format),
	of (output file format), o (output file name).

	Dat format: Results are now printed in an output file rather than
	to stdio.  If tracing is turned on, it is sent to the output file
	as well so they are now combined.
	
	
2005-09-26  Brian Kahne  <bkahne@freescale.com>

	* iss/ModelInterface.h: Changed time to 64-bits.

2005-09-23  Brian Kahne  <bkahne@freescale.com>

	* Changed how time-tagged ISSs work.  Rather than storing a list
	of targets and sources, each register now has a tag and a new-tag
	value.  It also has an update time.  When a source's tag is
	referenced, it updates the tag with the new-tag value if the
	update time is older than the current-time.

2005-09-20  Michele Reese  <michele.reese@freescale.com>

	* finally, finally got the 64 bit specialization working.  Turns 
	out the funky cast in getword caused the compiler to not be able 
	to tell who was referencing that memory thus when compiled optimized 
	O2 or O3, the registers used for storage by the reference class 
	were not written back to memory.  Made -w in the 64 bit 
	specialization and all pointers to it volatile to get past this.
	
2005-09-19  Brian Kahne  <bkahne@freescale.com>

	* Initial support for time-tagged ISSs added.  This is just basic
	infrastructure and does not yet constitute a useable system.

	Modifications included:

	1.  The basic register data type, used by RegFile objects and just
	plain registers is a structure, either Tag<T> or NoTag<T>, where T
	is a bits object of a given size.  Both contain a data member (the
	bits object) and get_data() and set_data() methods.  NoTag<T>
	should optimize away to nothing; Tag<T> also contains a time tag
	and pointers for linking into a source or target list.

	Each time a register is used as a source or target, it is added to
	the source or target list.  At the end of the cycle, we calculate
	time as follows:

	CurrentTime = max(CurrentTime,source._tag. . .) + 1

	TargetTime = CurrentTime + InstructionLatency

	Each target register is then updated with the new target time.

	2. I have separated the main OpenC++-based parser into a generic
	base portion and the ADL-specific portion.  I also created a
	class, SimpleParser, which can parse an ADL-like file and create a
	tree of objects.  The iss generator uses the base parser to parse
	a configuration file.  The format is currently:

	define (timing) {
	  <instr name> = <latency>;
	}

	3. Expanded the DAT format with two new cards: ITIME (issue time)
	and CTIME (completion time).  These only appear in the
	intermediate results when the ISS has been compiled as a
	time-tagged model.  A CTIME card is also printed in the final
	results.


2005-09-16  Michele Reese  <michele.reese@freescale.com>

	* Added workaround for gcc bug revealed by partial 
	specialization for 64bit:
		(uint32*)(&w)[0] returns a pointer to the first word
		in the long long.  Unfortunately, it appears that this
		gets stored in a register and when sanitize updated it,
		the memory location was not updated.  This only shows
		up in O2 or O3 optimization levels.  Looks like a gcc bug.
	Pushed sanitize down into base as a templatized method on the
	number of bits.
	
2005-09-14  Brian Kahne  <bkahne@freescale.com>

	* Made some performance improvements on the regression:  We now
	dump out the simulation data to a file, then read it in in order
	to avoid memory overhead of splitting it into lines.  I also fixed
	a bug where we always using BigInt, rather than just using it for
	when we came across large numbers.
	
2005-09-12  Michele Reese  <michele.reese@freescale.com>

	* Created 64 bit specialization for intbv.  The underlying
	data type is an unsigned long long.  This required the following
	changes:

	1. i/o: we create a temporary array of two unsigneds to pass to
	the i/o methods in intbv.C since they all take pointers to an
	unsigned long.  This was cleaner than adding new methods to 
	operate on long long's.

	2. getword: the version that returns a reference to a word
	in the intbv required a cast.  I added extra code so that this
	is endian safe.  On different endian machines the long long is
	stored reversed.  

	3. added maskwordbit in addition to maskbit becuase sometimes
	we apply the mask to what getword returns (always a 32 bit
	operation) and sometimes we apply it to _w (not always a 32
	bit operation now that a 64 bit intbv is represented as a long
	long).

	4. got rid of _WordT type in favor of uint32.  

	* Fixed bug in NumberTests where the concat tests were commented
	out.  This revealed a bug in bits operator() where res wasn't 
	being set.

2005-09-08  Brian Kahne  <bkahne@freescale.com>

	* Added some simple disassembly info to the instruction logging
	function.

	* Moved the core memory routines to Memory.h and added some more
	documentation about how it works.

2005-09-07  Brian Kahne  <bkahne@freescale.com>

	* Added a last-accessed-page cache to the memory object in order
	to reduce the penalty of accessing the same page multiple times.

	* Modified the memory representation so that it is a template
	class which is templated on the size of the address and the number
	of levels of lookup.  This is currently fixed at 64/4, which means
	four levels of lookup (16-bits per node).

	The m-ary tree is implemented using recursive templates- each node
	defines a child node type.  A specialization exists for children
	of level 0; this is the base page of bytes.

	Note: The number of levels of lookup parameter specifies the
	number of tree nodes and does not include the final page.  Thus,
	parameters of <64,3> means three tree nodes plus the final page
	address.

2005-09-02  Brian Kahne  <bkahne@freescale.com>

	* Changed all address types over to "addr_t", which is defined in
	ModelInterface.h.  Currently it's defined as uint32 (no change
	from before) but this allows me to shift over to uint64 very
	easily.

2005-09-01  Brian Kahne  <bkahne@freescale.com>

	* Added a back-end for generating a Perl or XML representation of
	the database.  This is called "make-db" and is located in the misc
	directory.

	* Among the regressions, added regfile-query.pl, which shows how
	to use make-db within a perl program to query for information
	about an architecture.  In this case, it prints used and available
	indices for sparse register files.

2005-08-31  Brian Kahne  <bkahne@freescale.com>

	* Makefile.am (distcheck-hook): Modified this to fix a bug: For
	some reason, building texinfo creates a directory in the source
	tree, which is a problem, since that's write-protected.  So, I
	un-write-protect it, since it seems like an automake bug (or else
	I just don't understand, or want to understand, how texinfo is
	built).

	* Some performance improvements were made:  

	1.  The bits class is no longer used unless specified using a
	define.  Instead, we just use plain old intbv.  

	2.  For simple register files, the reference class just contains a
	reference to the element specified, without an index, in order to
	improve performance.

	3.  Modified most arguments within the generated model to pass
	bits/intbv by const reference.

	4.  Some intbv performance improvements, such as removing a copy
	constructor b/c it turns out that the default constructor was
	sufficient and allowed the optimizer to do some extra stuff.

	Resulting performance is 26 Mips w/mod1.adl and 16 Mips
	w/booke.adl.  It looks like the extra instructions in the decoder
	do create a penalty- we might want to investigate that.

2005-08-26  Brian Kahne  <bkahne@freescale.com>

	* Initial support for documentation generation.  The make-doc
	program in misc generates an RST file which can then be processed
	into HTML using trip.  Right now I have to inject raw HTML in
	order to get various tables to look good.  In the future, a
	Restructured Text construct will hopefully exist that will let me
	create these tables.  Otherwise, I will have to also produce raw
	Latex.  The need is for an easy to generate table format that lets
	me do column spans and also specify a class on a per-cell basis.

	* adl2html:  This script wraps make-doc and will also call trip.
	
2005-08-24  Michele Reese  <michele.reese@freescale.com>
	
	* Changed intbv parameter passing to const reference instead
	of pass-by-value for performance.
	
2005-08-22  Michele Reese  <michele.reese@freescale.com>
	
	* Fixed bug in intbv specialization for 32 bit divide where we
	were using unsigned instead of signed division.

	* Checked in 5 powerstone benchmarks: fir,des,adpcm,compress and 
	ucbqsort.
	
2005-08-22  Brian Kahne  <bkahne@freescale.com>

	* Fixed bug with intermediate results checking: Half-word accesses
	that were misaligned on 0x1 or 0x2 were not printed correctly: The
	address needed to be masked for printing the relevant word.
	Modified in18.dat to test this.

	* configure.ac: Modified the compile search-path routine to try
	and deal with the wrapper if it is encountered.

2005-08-19  Brian Kahne  <bkahne@freescale.com>

	* Modified the build system so that we can pass the 'distcheck'
	test.

2005-08-18  Brian Kahne  <bkahne@freescale.com>

	* Modified binutils so that the source code is now checked in and
	used by regressions in tests/iss for checking the assembler and
	disassembler.

2005-08-17  Michele Reese  <michele.reese@freescale.com>
	
	* Fixed bug in intbv where the global operators overloaded for 
	integers were not expanding the intbv to size int in the case
	where it was smaller.  This worked correctly for intbv with intbv,
	just not for intbv with integer.  Thus the following didn't work:
	int a=b=c=0;  intbv<1> so = 1;
	intbv<4> res = a | b | c | so;
	The regression also didn't seem to be testing the integer
	overloads so I added that to NumberTest.
	
2005-08-04  Brian Kahne  <bkahne@freescale.com>

	* Added a script, adl2asm, which generates an
	assembler/disassembler and optionally copies the resulting files
	into a binutils file tree.

2005-08-03  Brian Kahne  <bkahne@freescale.com>

	* Fixed some front-end encoding bugs:

	1. We didn't detect the bug where the user had two instructions
	and one simply has more opcodes than the other, but were otherwise
	identical, e.g. "or" and "or.", where the user didn't include the RC
	field for "or".  We detect this by checking for a non-null _instr
	value at each level of the table tree, rather than just when we
	reach the end of the table.

	2. We segfaulted due to a pathological case because we weren't
	sorting opcodes.  So, if the user had the LK field (1 bit) before
	XO, and then encoded another instruction that didn't have the LK
	field, we'd think that we had to split the table and then do some
	bad stuff and crash.  I now sort the opcodes so that LK appears
	last and I detect that if a mask exists at a node in the tree, but
	the given field's mask has no overlap, then we have an encoding
	error.

2005-08-03  Michele Reese  <michele.reese@freescale.com>
	
        * intbv: modified mask function to support mask (start,stop)
        where if stop < start it will wrap.  

  	* bits: overloaded set to take intbv's as well as unsigned's.

	* added instruction count to the intermediate results report.

        * added intermediate results checking to regress_utils.pm as
	well as avp2dat (similar to what we had in microADL but the
	dat format is slightly different for ADL).
	
2005-07-29  Brian Kahne  <bkahne@freescale.com>

	* Changed memory logging so that it logs aligned word acceses.  If
	the access isn't aligned, it will log multiple entries.

	
2005-07-28  Brian Kahne  <bkahne@freescale.com>

	* Modified how we treat syntax strings.  Rather than Instr::Syntax
	just having an array of field indices, it now has an array of
	structures that contain an enum for the type, a left shift value,
	a sign-extension flag, and the index.  The format string now
	contains a single character for each field, which is the index
	into the syntax items array + 128, e.g. 129 is element 1 of
	Syntax._items.

	* Changed how operands are parsed by the assembler.  The new flow
	is:

	1.  Parse with the regular expression.

	2.  Convert each operand into an expressionS and store in an array
	of expressionS (operand_values).

	3.  Iterate over the operands defined for the instruction, taking
	items from the operand_values array.  This eliminates
	double-parsing of operands and means that I can check the operand
	count after step 2 for error messages.

2005-07-27  Brian Kahne  <bkahne@freescale.com>

	* Beginnings of an assembler.  I don't handle any relocations, but
	I can assemble sieve.s.

	* Added the ability to have expressions in instruction aliases-
	this lets the user do simple macros, such as mapping slwi to
	rlwinm, where the ME parameter is set to (0-SH).

2005-07-20  Brian Kahne  <bkahne@freescale.com>

        * Disassembler is finished.  I changed things slightly so that the
        user can specify multiple entry points and each entry point can be
        designated as big or little endian.  You can also generate a stub
        for the disassembly-options function.  The end result is that you
        can drop this into binutils and compile objdump configured for
        "ppc-elf" and it should work.

2005-07-19  Brian Kahne  <bkahne@freescale.com>

        * Started work on generating an assembler and disassembler.  I
        created a new directory (asm) which stores code to create
        "make-asm".  This will create code files which will compile with
        binutils in order to create an assembler (gas) and a disassembler
        (objdump).  So far, I'm generating a very basic disassembler.  No
        regressions have yet been added.

        ======== adl release 0.2.0 (v0_2_0) on Linux (cde-tx32-ldt189) ========

2005-07-15  Brian Kahne  <bkahne@freescale.com>

        * Added intermediate results checking.  If a model is compiled
        with trace-mode turned on then code is inserted which logs memory
        read/writes and register writes.  This simply calls a set of
        functions which can then do whatever they want.  In this case,
        they dump to a stream.  Trace mode is activated using the --trace
        option when running the executable iss.

2005-07-14  Brian Kahne  <bkahne@freescale.com>

        * Modified bits.h so that if NO_PROPAGATE is defined, the _mask
        variable does not exist, making bits the same as intbv.  I define
        this in ModuleSupport.h, for now- we can remove this once we
        understand what the performance implications are.
        
        * Updatd the makedat script so that it can now read from a .dat
        file:  It parses the data found within the <ASM> tags and
        sends that to the assembler.  It then copies everything except
        that found within the <GEN> tags over that file and puts the
        assembled output within the <GEN> tags.  The original file is
        written to a backup (same name with .bak extension).

        * Modified the memory model so that read and write now require an
        explicit template parameter specifying the number of bytes of the
        request, e.g.:

                Mem.read<4>(addr);

        This system supports requests of an arbitrary number of bytes and
        should be efficient: Partial specialization is used to map normal
        requests (1, 2, 3, 4, and 8 bytes) directly to the underlying
        memory calls.  Other requests are handled using a generic function
        that processes words first, then whatever remains.  If needed, we
        could extend the number of partial specializations, e.g. to handle
        64, 128, etc.

        ======== adl release 0.1.0 (v0_1_0) on Linux (cde-tx32-ldt189) ========

2005-07-13  Brian Kahne  <bkahne@freescale.com>

        * Created the script "adl2iss", which creates an ISS from a .adl
        file.  It can generate just the source file, an object file, or a
        final executable.

        * Added the script "adl-config".

2005-07-12  Brian Kahne  <bkahne@freescale.com>

        * Changed most of the hashes in the data model to maps so that
        things are ordered.  This makes generation easier, since the order
        is now deterministic.

        * Added support for shared variables in MP/MT systems.  A resource
        may only be made shared for systems or cores which are declared
        locally- globally-declared objects are "locked in".  This means
        that we now support nested cores.

        * Currently, if a read or write hook in a register or register
        uses architectural parms or anything that requires a parent
        reference, it cannot be made shared.  This will probably need to
        be changed in the future.

        * The setRegs method now returns false if the register was not
        handled; it's up to the caller to deal with that case.  Also, the
        parser no longer requires a core or system to be defined; it's up
        to the caller to handle that case.
        
2005-07-08  Brian Kahne  <bkahne@freescale.com>

        * Moved most of the Perl scripts into the "scripts" directory and
        updated the methodology-notes.rst file.

        * Added back-end support for MP/MT, along with regression support.
        Shared resources are not yet supported.  A new command has been
        added to the DAT file to redirect input to a new core:

        CORE <name>

        where <name> is a colon-delimited path to the core,
        e.g. chip0:core1

2005-07-07  Brian Kahne  <bkahne@freescale.com>

        * Added front-end support for MP/MT with shared resources.

2005-06-22  Brian Kahne  <bkahne@freescale.com>

        * Modified the ISS generator so that it creates a re-entrant class
        for the ISS.  This is the first step towards MP/MT support.

2005-06-17  Brian Kahne  <bkahne@freescale.com>

        * Added support for multiple instruction tables.  If a design has
        multiple tables, then an extra switch statement is added, along
        with a global for specifying the current table, and an enum for
        identifying the table types.  The design mod8.adl demonstrates
        this.

2005-06-09  Brian Kahne  <bkahne@freescale.com>

        * The setRegs function now takes a const char ptr for data so that
        registers of arbitrary size can be handled.  I modified the
        regress scripts to use Math::BigInt.

        * Added support for fields in register files.  Added in13.dat,
        which demonstrates their use with vector registers.

        * Added support for indexed register fields.  Rather than being
        member variables, these are methods of the register which return a
        register field object.  I had to modify the code transformer
        (InstrWalker) to modify expressions involving indexed fields so
        that they're transformed via a function-call to become a bits
        object when on the rhs of an expression.
        
2005-06-08  Brian Kahne  <bkahne@freescale.com>

        * Added initial support for register fields.  They're currently
        only for registers and indexed fields are not yet supported.

2005-06-07  Brian Kahne  <bkahne@freescale.com>

        * Added the "Zero" function as a way to get a zero value of a
        specified size.

2005-06-06  Brian Kahne  <bkahne@freescale.com>

        * Added a regression (mod7.adl) that tests the use of
        architectural parameters to decide between modes of operation,
        e.g. 32-bit and 64-bit operation.

2005-06-03  Brian Kahne  <bkahne@freescale.com>

        * Changed from 'intbv' to 'bits' for the main data type used by
        the ISS and recognized by the front-end.

        * Modified the ISS generator so that InstrWalker now transforms
        register and register file variables into calls to operator().
        For example, "GPR" becomes "GPR()", thus getting around the
        problem of implicit conversions not working properly with template
        classes.

        If a register does not have a readhook, then operator() returns a
        reference so that mutable operators can be used.  If it does have
        a readhook, then it returns a constant object, meaning the user
        has to copy this to a temporary in order to manipulate the value,
        then write it back.

        Register files work in a similar fashion.

2005-06-01  Brian Kahne  <bkahne@freescale.com>

        * Integrated in intbv into the ISS generator.

2005-05-31  Brian Kahne  <bkahne@freescale.com>
                                                                             
        * NumberTest.C.in now produces two regressions: One that uses
        intbv and one that uses bits, based upon a compile-time define.

2005-05-27  Michele Reese  <michele.reese@freescale.com>
        * Added carry operations.  It's a non-member method that takes
        two intbv's to be added and a one bit carry-in.  It returns a
        one bit carry out.  Added checkMisc regression method to
        NumberTest.

2005-05-27  Michele Reese  <michele.reese@freescale.com>
	
        * Added signed comparison.  Right now it's only for same sized 
        intbv's.  

        Changed the new overloads (for shift, rotate set/getField) that 
        take intbv's to take intbv's of differing sizes.

        * Added signExtend and it's test in NumberTest.

        * Added mask_inv to clear a field.

2005-05-27  Brian Kahne  <bkahne@freescale.com>

        * Added decimal I/O for intbv.  I implemented the arithmetic by
        extracting the word-array operations into separate functions, the
        larger of which were placed into intbv.C.  These functions are
        addWords, subtractWords, multiplyWords, and divideWords.  They all
        take the form of:

        xWords (unsigned num_words,unsigned long *result,const unsigned
                long *x, const unsigned long *y);

        The decimal I/O uses the native decimal I/O if the word size if 1,
        otherwise it uses these routines for arithmetic.

        * Removed the version of operator() in intbv that does a set- I
        thought it was a bit confusing.  I also renamed getField to get
        and made it constant, as well as operator().

2005-05-25  Michele Reese  <michele.reese@freescale.com>
	
        * Changed intbv representation from little to big endian.  This
        causes us to have to pass _Nb (the number of bits) from intbv
        into base.  This is kind of ugly but is intrinsic to big endian
        and I don't know any other way around it.  I pass it as a parm
        rather than maintaining a member variable in base becuase that
        would cause even more code to be generated by the compiler
        when a new intbv is created.  The most significan bit is the
        leftmost bit, bit 0 of word 0 and the least significant bit is
        the rightmost bit, bit _Nb-1 of word _Nw-1.  
        
2005-05-24  Brian Kahne  <bkahne@freescale.com>

        * Added a key to Arch, "decode_miss", that takes an action
        function and is called if we do not decode a fetched value.  This
        can be used to signal an interrupt or do whatever.  The default is
        to abort the simulation.

2005-05-23  Brian Kahne  <bkahne@freescale.com>

        * Added support for register-file aliaes and sparse register
        files.  This is implemented in pretty much the same way as
        registers are:  Using a wrapper class.  However, instead of
        directly defining operator= and a conversion operator to handle
        writes and reads, instead operator[] returns a reference object
        which contains a reference to the underlying data and the index.
        This then defines operator= and the conversion operator for reads
        and writes.  This is necessary b/c you can't tell at the time that
        operator[] is called whether a read or write is being performed.


2005-05-20  Brian Kahne  <bkahne@freescale.com>

        * Added support for register aliases, though slices don't yet work
        and type checking has been disabled until intbv is integrated.
        All registers in the ISS are now represented as classes, for
        uniformity, and given default read and write functionality unless
        the user has declared a read or write hook.  Reading is done using
        a cast operator and writing is done using operator=.

2005-05-18  Brian Kahne  <bkahne@freescale.com>

        * Added support for parms and aspects to the ISS generator.
        Currently, line directives are not added in, since it turns out to
        be kinda complicated to get it right.  Maybe I'll add it in the
        future, if it's needed.

2005-05-17  Brian Kahne  <bkahne@freescale.com>

        * Fixed bug in intbv:  operator[] was begin used with string w/o
        correctly sizing the array, causing memory corruption.  Fixed by
        switching to the use of push_back().

2005-05-16  Brian Kahne  <bkahne@freescale.com>

        * Added support for aspect and parm types to the front-end (refer
        to adl-notes for more information).


2005-05-09  Michele Reese  <michele.reese@freescale.com>
	
        * Added new file intbv.C.  This is for any helper routines that
        we don't want templatized in intbv.  For now it only contains
        io support for streams and strings.  The functions operate on
        the underlying integer array of intbv.  This will cut down
        on the amount of code generated when a new intbv is created.

2005-05-09  Michele Reese  <michele.reese@freescale.com>
	
        * Added support for division and modulus.  Mod is straight-
        forward.  div is from Raptor RNumber.  It uses Knuth's
        divide algorithm from vol2 - numberical computations.
        It uses the first three (base 100) digits of the numerator and the 
        first two digits of the denominator to determine the trial divisor, 
        instead of Knuth's use of two and one digits, respectively

        A byte-array representation for both the numerator and
        denominator are created.  This is endian-safe.
        
        /= did not give the same results as / due to the diff-sized
        copy constructor truncating prior to the operation.  I don't
        know why this works fine for the other operators.  I had to
        add an overloaded /= for different sized intbv's to get around
        this.
                
        This implementation is a first pass, lots of cleanup is forthcoming 
        for the array indexing as well as the malloc's.  It should be
        simple to re-factor now that the basic code is in and passing
        regression.
        
2005-05-06  Brian Kahne  <bkahne@freescale.com>

        * Removed the idea of typed instruction fields, after talking with
        Jim Holt and Gary Whisenhunt.  We're back to the original idea of
        using array notation.

2005-05-05  Brian Kahne  <bkahne@freescale.com>

        * Support for instruction aliases.

        * Added UML diagrams to adl-fe-design.rst.  The UML tool I'm using
        is called "umbrello" and is part of KDE.

2005-05-03  Brian Kahne  <bkahne@freescale.com>

        * Added a motivation and competitive analysis paper to the
        documentation:  front-end-modeling-overview.rst.

2005-05-02  Michele Reese  <michele.reese@freescale.com>
	
        * Added support for concat (a,b,...n) It constructs
        a new intbv of the size of the sum of the intbv's sizes to be
        concatenated.  It calls the copy constructor on the least significant
        (last) parameter and  and then uses setField to copy in the rest 
        of the parameters.  Added a regression test for concatenation that uses
        getField to separate the values back out and compare back to the
        original values.  There are 5 concat methods so that we support
        2:6 intbv's to be concatenated.

        * modified getField so that it works like such:
        getField(start,stop,intbv x) will return the least significant
        bits of x starting with 0 and going to stop-start.  It used to
        return the field from x starting with start and going to stop but
        that is not the behavior we want.
        Also, fixed bug in getField overload for 1word where the result 
        wasn't being passed by reference so the change was lost. 

2005-04-29  Brian Kahne  <bkahne@freescale.com>

        * Documentation work.

        * Fixed bug in the sparse memory:  16-bit reads/writes didn't work
        across a page.  Note:  This code should be templatized!

2005-04-28  Brian Kahne  <bkahne@freescale.com>

        * Static linking now works- if you configure with
        --disable-shared, you can avoid the double-compilation issue and
        you won't get the wrapped binaries.

        * Added configure and Makefile.in files so that you should be able
        to build from CVS w/o needing automake and autoconf.

        * Added support for exceptions.  The user can raise an exception
        using the function Exception(<exception>), where <exception> is
        one of an enum written by the iss generator.  At the end of the
        simulate loop, we check for any raised exceptions.

2005-04-25  Brian Kahne  <bkahne@freescale.com>

        * Changed memory to be big-endian.  Reads and writes do
        byteswapping if the host architecture is little-endian, e.g. Linux
        x86.  This is determined by autoconf using AC_C_BIGENDIAN, which
        defines WORDS_BIGENDIAN.

        * Got a simple test of VLE working (in5.dat) which demonstrates an
        architecture with mixed instruction sizes.

2005-04-25  Michele Reese  <michele.reese@freescale.com>
	
        * Added support to intbv for comparison operators (<,>,<=,>=)
        for same-sized and different sized intbvs.  No integer overloads
        yet.  Also added support for == and != for different sized intbvs.
                
        * Added support for right_rotate and left_rotate.  It's a little
        tricky because you have to keep track of the number of actual bits
        in the intbv at the Base:: level, so _Nb gets passed as a parameter.

2005-04-22  Brian Kahne  <bkahne@freescale.com>

        * Added support for var and let statements.  A var statement is a
        declaration of a variable, where the type is derived from the rhs,
        e.g.:

          var foo = 3 + bar();

        A let block does the same and then introduces a new scope:

          let(x = 10, y = foo()) {
            ...
          }

        Both constructs are transformed into C++ using gcc's typeof
        operator.  I added a new class, RtlWalker in helpers that
        transforms ADL RTL into C++.  It currently converts let and var
        statements and changes lambdas (func) into just the code block.

        VarWalker had to be modified to properly handle let statements:
        The variables need to be recorded in the environment.

        AdlWalker was modified to parse all code (it used to not transform
        value expressions for key/value pairs).  It now ignores let and
        func blocks, passing them on.

        AdlParser was modified to add the "let" syntax.  I also now heap
        allocate all objects related to parsing so that the parser can
        exit and the environments are still valid.

2005-04-20  Brian Kahne  <bkahne@freescale.com>

        * Added some statistics to the output of a model, such as
        instructions per second.

        * Added line directives to a generated model so that gdb can debug
        in the original adl file.  Added the class lnstream, which tracks
        newlines so that valid line directives can be added.

2005-04-19  Michele Reese  <mreese@freescale.com>
	
        * Implemented multiplication in _Base_intbv.  It's the same algorithm
        used in RNumber but much simpler since it only operates on same-
        sized intbv's (the global operators wrap the method calls for 
        different sized intbv's).    

2005-04-19  Brian Kahne  <bkahne@freescale.com>

        * Added back the idea that instruction fields can be associated with
        register files.  Now, to access a register file's value, you use
        unary-*, e.g *RT = *RA + *RB.

        * Got basic model generation working, with regressions to test
        it.  The most sophisticated is "in4.dat", which implemements the
        Sieve of Eratosthenes.

2005-04-14  Brian Kahne  <bkahne@freescale.com>

        * Generated models now init memory and print all addresses
        mentioned in the dat file.

        * Created a sparse memory model.  'memtest' in tests/iss tests its
        functionality.

2005-04-12  Brian Kahne  <bkahne@freescale.com>

        * Started work on the initial ISS generator.  It currently creates
        registers, register files, and instruction-field accessors.
        Registers are just ints for right now- they'll become intbv
        objects later.

2005-04-08  Brian Kahne  <bkahne@ibmoto.com>

        * Moved the gc'd containers to the helpers directory.

        * Moved convenience macros to helpers/Macros.h.

        * Created the AnyOption class for handling cmdline parms in clients.

2005-04-05  Brian Kahne  <bkahne@ibmoto.com>

        * Added a new document, adl-fe-design.rst, which describes the
        architecture of the front-end.

2005-04-04  Brian Kahne  <bkahne@ibmoto.com>

        * Initial support for exceptions.

        * Added support for storing and checking the instruction syntax
        string.

        * Modified how error reporting works: We now add errors to a log
        so that we don't stop on the first thing we encounter, but instead
        keep going.  This can't always happen though- we won't assemble if
        we already have errors b/c we rely upon everything being
        consistent.

2005-04-01  Brian Kahne  <bkahne@ibmoto.com>

        * Added support for instruction aliases, both for shorthand
        notation and for mapping one encoding to another.

2005-03-30  Brian Kahne  <bkahne@ibmoto.com>

        * Added support for instruction actions.  These are analyzed to
        make sure we don't access anything that doesn't exist.
        Instruction fields are explicitly excluded.
        
        * Added disassembly table creation to the front-end so that we can
        check for instruction encoding collisions.  The disassembly is
        done during Core::finalize() and involves creating an m-ary tree
        of InstrTable objects.  Each object may either point to an Instr
        object or contain a mask and a hash of key/values, where the
        values are other InstrTable objects.

        Creation of the table involves iterating over each opcode field of
        each instruction:  If an instruction table already exists for the
        opcode, we add a the entry to the table and repeat, otherwise we
        create a table, set its mask to the opcode field's mask, add the
        new entry, and repeat.

        The tricky part is when an instruction's field has a larger or
        smaller mask than what already exists for a node in the tree.  For
        example, two instructions each have a primary opcode of 31, but
        one has a secondary opcode consisting of bits 21-31 and the other
        has a secondary opcode consisting of 21-30.  If a larger field is
        encountered than what exists, we subdivide it into subfields,
        where the first subfield is the current node of the tree.  We add
        these subfields to the list of opcode for the instruction and then
        continue with the normal algorithm.

        In the other case, when a smaller field is encountered, we have to
        restructure the tree:  The current node is emptied and its mask is
        set to the smaller mask.  We then add back each item that was
        there, adding new tree elements for each subfield that is
        encountered.
        
2005-03-28  Brian Kahne  <bkahne@ibmoto.com>

        * Opcode fields may not be split.
        
        * Consolidated some code in Handlers.C:

        A templated function now replaces most of the process_* functions
        that I had for ArchHandler.

        Merged add_define and add_modify hooks for Handler into one
        function and added standard modify handling to RemoveHandler.

2005-03-25  Brian Kahne  <bkahne@ibmoto.com>

        * Added initial support for instructions- I handle classes, size,
        and fields.

2005-03-24  Brian Kahne  <bkahne@ibmoto.com>

        * Added support for instruction fields.  I simplified things by
        removin the 'regfile' command.  We now don't track if an
        instruction field maps to a given register file, though we might
        add this feature in later.  I decided not to do this because I
        couldn't figure out how to easily verify that it's correct and it
        didn't seem necessary.  Later, we might need it for configuring a
        test generator, though, so we might add it in.  However, a better
        solution would be to try and infer it from the instruction action
        code.

2005-03-23  Brian Kahne  <bkahne@ibmoto.com>

        * Change to the grammar:  define/defmodify blocks now have the
        syntax of:

                define (type = name) { ... }

        Where name can now be an identifier or a string.  This lets the
        user name something with characters that aren't valid for
        identifiers, e.g.:

                define (instr = "addi.") { ... }

        * Removed the "offset" parameter from register file alias specs
        and replaced it with "regs", which lets the user specify the
        registers that the file will map to.  This is a pair or list of
        pairs of indices- we iterate over these items to create a list;
        this list must be the same size as the register file.  So, for
        example, to map "vle_gprs" to the top and bottom eight registers
        of the gprs, you would do:

                define (read) {
                  alias = gprs;
                  regs = ((0,7),(24,31));
                }

2005-03-22  Brian Kahne  <bkahne@ibmoto.com>

        * Added the "reset" key to reg and regfiles.  This accepts either
        an integer or a 0-arity function.

        * Added support for code analysis.  This is done using the
        VarWalker class- it will traverse an expression and store a list
        of all variables not declared within the expression.

        The register hook objects, during finalization, use these to see
        if the read or write hook action blocks contain variables which
        are not resources declared in the design.

2005-03-21  Brian Kahne  <bkahne@ibmoto.com>

        * Added support for register and register-file aliases.  See
        adl-notes.rst for usage.  This was implemented in the typical
        way.  A new function, get_func, was added to Handlers.C to check
        that a value is actually a function of the proper arity.

2005-03-16  Brian Kahne  <bkahne@ibmoto.com>

        * Added support for register fields.  These may go into registers
        or register files and use a define-block syntax:

                define (field <name) {
                  <key/value pairs>
                }

        * In the data model, register files now have data structures
        indexing any constituent registers by name and by index.

2005-03-15  Brian Kahne  <bkahne@ibmoto.com>

        * Added an initial regression suite.

        * Massive restructuring of the parser.  The front-end works as
        follows:

        The first pass creates a tree of handler objects which store their
        key/value pairs in them and any nested handler objects.  At this
        stage we just do basic error checking, such as checking what can
        be nested, etc.

        Once the entire tree has been created, we do the second pass,
        where we actually check each of the keys and build the data
        model.  For each core, we iterate over the list of architectures,
        processing each of the sub-elements.  This allows us to treat the
        architectures as "mix-in" objects so that they can reference
        elements defined in other architectures, but that strict checking
        is done to make sure that the items do exist.

2005-03-14  Brian Kahne  <bkahne@ibmoto.com>

        * Documentation is now installed on the web under the tool
        directory "adl".

        * Further work on the parser, with some templated functions to
        handle common cases.

2005-03-10  Brian Kahne  <bkahne@ibmoto.com>

        * The basic parsing infrastructure now exists:

        The main parser is AdlParser- it handles all of the parsing.

        The visitor is AdlWalker.  It maintains a stack of Handler objects
        and passes all new things to the handler.

        Various Handler objects have been created for processing the
        data:  OuterHandler handles the outer-most scope, ArchHandler
        handles the architecture blocks, RegHandler handles register
        definitions, etc.

        The data model is contained within Data.  It stores top-level C++
        items and architecture elements.  Eventually it will handle Core
        and System items, too.  The Arch class stores architecture
        information and the Reg class stores register definitions.

2005-03-09  Brian Kahne  <bkahne@ibmoto.com>

        * Start of the work on the front-end.  The basic plan is to have a
        visitor (AdlWalker) that calls the top item on a handler stack.
        The handler objects encapsulate the rules about what is allowed,
        e.g. allowed fields, etc.

2005-03-04  Brian Kahne  <bkahne@ibmoto.com>

        * Further updates to the documentation.

2005-03-01  Brian Kahne  <bkahne@ibmoto.com>

        * Wrote a proposal document (adl-notes.rst), describing a possible
        ADL using extensions to C++.
