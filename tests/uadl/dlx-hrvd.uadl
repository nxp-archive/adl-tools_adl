//
// A DLX model with forwarding paths, branch predictor and a harvard memory
// architecture, with just an L1 instruction cache.
//
define (core P) {

  allow_unimpl_instrs = true;

  define (resources) {
    // instruction buffer (fetch stage)
    define (fetchunit Fetcher) {
      fetch_memory = L1i;
      entries = 2;
      entry_size = 4;
      fetch_size = (4);
      reuse_data = true;
      branch_predictor = BP;
    }

    // pipeline stages
    define (pipestage=(mID, mEX, mMM, mWB)) {}

    // forwarding path
    define (forwarding_path=(FwdEX,FwdMM)) {
      size = 3;
    }

    // branch predictor
    define (branch_predictor BP) {
      algorithm = Counter;
      size = 8;
      counter_width = 2;
    }

    // memory system
    define (cache L1i) {
      next_level_memory = Mem.I;
      write_mode = WriteThrough;
      data_width = 32;
      addr_bandwidth = 1;
      data_bandwidth = 1;
      read_hit_latency = 1;
      write_hit_latency = 1;
      linefill_read_latency = 1;
      linefill_write_latency = 1;
      invalidate_latency = 1;
      zero_latency = 1;
      max_requests = 1;
      critical_word_first = true;
    }

    define (memory Mem) {
      data_width = 32;
      max_requests = 3;                 
      
      define (port I){
        type = instr;
        addr_bandwidth = 1;
        data_bandwidth = 1;
      }
      define (port D){
        type = data;
        addr_bandwidth = 1;
        data_bandwidth = 1;
        read_latency = 2;
        write_latency = 2;
      }
    }
    
  }

  define (machine normal) {
    init_state = S_INIT;
    states = ( S_ID, S_EX, S_EXp, S_MM, S_MMp, S_WB, S_WBp,
               S_IDe, S_EXe, S_MMe, S_WBe  );

    define (mapping) {
      mID = S_ID;
      mEX = (S_EX,S_EXp);
      mMM = (S_MM,S_MMp);
      mWB = (S_WB,S_WBp);
    };

    define (exception_mapping) {
      S_IDe = (S_ID);
      S_EXe = (S_EX,S_EXp);
      S_MMe = (S_MM,S_MMp);
      S_WBe = (S_WB,S_WBp);
    }

  }

  define (instr_class sfx) {
    instructions = ( "addic.", addi, addis, ori, "andi.", 
                     add, or, mullw, rlwinm, cmpi, cmp, 
                     srw, halt );

    machine = normal;
    
    define (operands) {
      Src = sources;
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
    S_ID:  if (Src.can_read_fp(FwdEX,FwdMM) && Trg.can_write() && mEX.has_space()) {
        Src.read(FwdEX,FwdMM);
				Trg.allocate();
				change_state(S_EX);
      }
		S_EX: {
			exec();
      FwdEX.write(Trg);
			change_state(S_MM);
		}
		S_MM: { 
      FwdMM.write(Trg);
			change_state(S_WB); 
		}
		S_WB: {
      write_ops();
      change_state(S_INIT);
    }
    };
  };

  define (instr_class mtspr) {
    instructions = (mtspr, mfspr );

    machine = normal;
    
    define (operands) {
      Src = sources;
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
    S_ID:  if (Src.can_read_fp(FwdEX,FwdMM) && Trg.can_write() && mEX.has_space() && mMM.has_space() && L1i.can_lock()) {
        Src.read(FwdEX,FwdMM);
				Trg.allocate();
        L1i.allocate_lock();
				change_state(S_EX);
      }
		S_EX: {
			exec();
      FwdEX.write(Trg);
			change_state(S_MM);
		}
		S_MM: { 
      FwdMM.write(Trg);
			change_state(S_WB); 
		}
		S_WB: {
      write_ops();
      L1i.deallocate_lock(1);
      change_state(S_INIT);
    }
    };
  };

  define (instr_class load) {
    instructions = ( lbz, lhz, lwz, lwzu, lwzx );

    machine = normal;
    
    define (operands) {
      Src = sources;
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
		S_ID: if (Src.can_read_fp(FwdEX,FwdMM) && Trg.can_write() && mEX.has_space()) {
        Src.read(FwdEX,FwdMM);
				Trg.allocate();
				change_state(S_EX);
			}
    S_EX: if (mMM.has_space() && Mem.D.can_request_read()) {
        // Calc ea.
        exec();
        Mem.D.send_read_request();
        change_state(S_MM);
      }
		S_MM: if (Mem.D.can_read()) { 
        exec_and_read(Mem.D);
        change_state(S_MMp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at MM.
    S_MMp: if (exec_done() && mWB.has_space()) {
        FwdMM.write(Trg);
        change_state(S_WB);
      }
      else if (Mem.D.can_request_read()) {
        Mem.D.send_read_request();
        change_state(S_MM);
      }
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      change_state(S_WBp);
    }
		S_WBp:{
			change_state(S_INIT);
		}
    };
  }

  define (instr_class store) {
    instructions = (stb, sth, sthx, stw, stwu, stwx);

    machine = normal;

    define (operands) {
      Src = sources;
    };

    action = {
    S_INIT: {
      change_state(S_ID);
    };
    S_ID: if (Src.can_read_fp(FwdEX,FwdMM) && mEX.has_space()) {
        Src.read(FwdEX,FwdMM);
        change_state(S_EX);
      }
    S_EX: if (mMM.has_space() && Mem.D.can_request_write()) {
        // Calc ea.
        exec();
        Mem.D.send_write_request();
        change_state(S_MM);
      }
    S_MM: if (Mem.D.can_write()) {
        exec_and_write(Mem.D);
        change_state(S_MMp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at MM.
    S_MMp: if (exec_done() && mWB.has_space()) {
        change_state(S_WB);
      }
      else if (Mem.D.can_request_write()) {
        Mem.D.send_write_request();
        change_state(S_MM);
      }
    // No need for a space-check, since S_WBp maps to the same stage.
    S_WB: {
      write_ops();
      change_state(S_WBp);
    }
    S_WBp: {
      change_state(S_INIT);
    }
    };
  }

  define (instr_class branch) {
    instructions = ( bc, b, bl, bclr );
   
    machine = normal;

    define (operands) {
      Src = sources;
      Src = (CR,0xffffffff);
      Trg = targets;
    };

    allow_missing_operands = true;
   
    action = {
    S_INIT :{
      change_state(S_ID);
    };
    S_ID: if (Src.can_read_fp(FwdEX,FwdMM) && can_write_ops() && mEX.has_space()) {
        Src.read(FwdEX,FwdMM);
        allocate_ops();
        exec();
        write_ops();
        BP.update();
        if ( branch_taken() != BP.last_predict_taken()) {
          taken_flush();
        }
        change_state(S_EX);
      }
    S_EX: if (mMM.has_space()) {
        change_state(S_MM);
      }
    S_MM: if (mWB.has_space()) {
        Fetcher.pause();
        change_state(S_WB);
      }
    S_WB: {
      change_state(S_INIT);
    }

    };
  }

}
