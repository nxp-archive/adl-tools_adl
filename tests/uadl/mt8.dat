#
# This tests the scheduling of multiply (cfx) instructions for a 4-thread
# design, in which we alternate between threads when scheduling.
#
= asm

	add r1,r1,r10
	add r2,r2,r11
	mullw r3,r1,r2
	mullw r4,r2,r1
	addi r3,r3,1
	addi r4,r4,2

= /asm

# <GEN>
MD n=Mem ra=0x00000000 d=0x7C215214	#	add r1,r1,r10
MD n=Mem ra=0x00000004 d=0x7C425A14	#	add r2,r2,r11
MD n=Mem ra=0x00000008 d=0x7C6111D6	#	mullw r3,r1,r2
MD n=Mem ra=0x0000000c d=0x7C8209D6	#	mullw r4,r2,r1
MD n=Mem ra=0x00000010 d=0x38630001	#	addi r3,r3,1
MD n=Mem ra=0x00000014 d=0x38840002	#	addi r4,r4,2
# </GEN>

CORE n=:PMT

RD n=TEN d=0xf0000000

CORE n=:PMT:s0:t0

RD n=NIA      d=0x0
RD n=GPR i=10 d=10
RD n=GPR i=11 d=20

CORE n=:PMT:s0:t1

RD n=NIA      d=0x0
RD n=GPR i=10 d=30
RD n=GPR i=11 d=40

CORE n=:PMT:s1:t0

RD n=NIA      d=0x0
RD n=GPR i=10 d=50
RD n=GPR i=11 d=60

CORE n=:PMT:s1:t1

RD n=NIA      d=0x0
RD n=GPR i=10 d=70
RD n=GPR i=11 d=80

TRACE

RESULTS

CORE n=:PMT:s0:t0

RD n=GPR i=1 d=10
RD n=GPR i=2 d=20
RD n=GPR i=3 d=201
RD n=GPR i=4 d=202

CORE n=:PMT:s0:t1

RD n=GPR i=1 d=30
RD n=GPR i=2 d=40
RD n=GPR i=3 d=1201
RD n=GPR i=4 d=1202

CORE n=:PMT:s1:t0

RD n=GPR i=1 d=50
RD n=GPR i=2 d=60
RD n=GPR i=3 d=3001
RD n=GPR i=4 d=3002

CORE n=:PMT:s1:t1

RD n=GPR i=1 d=70
RD n=GPR i=2 d=80
RD n=GPR i=3 d=5601
RD n=GPR i=4 d=5602
