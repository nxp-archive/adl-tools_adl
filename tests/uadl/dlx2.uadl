//
// An in-order, dual-issue DLX model.
// Custom release policy for decode prevents two load/stores from
// issuing at once.
//
define (core P) {

  allow_unimpl_instrs = true;

  define (resources) {
    // instruction buffer (fetch stage)
    define (fetchunit Fetcher) {
      fetch_memory = Mem;
      entries = 6;
      entry_size = 4;
      fetch_size = (8);
    };

    // Can't be lock-step or else we'll get deadlock if two instructions try and
    // issue, but one can't acquire its resources due to the other.
    define (pipestage=mID) {
      size = 2;
    };

    define (pipestage=(mEX, mMM)) {
      size = 2;
      scheduler = lock_step;
    };

    // Not lock-step so that commits are strictly sequential for breakpoint
    // purposes.
    define (pipestage=mWB) {
      size = 2;
    };

    // memory system
    define (memory Mem) {
      data_width = 32;
    }

    define (flag hid_stall) {}
    define (semaphore all_stall) {}
  }


  define (machine normal) {
    init_state = S_INIT;
    states = ( S_ID, S_IDe, S_EX, S_EXp, S_EXe, S_MM, S_MMp, S_MMe, S_WB, S_WBp, S_WBe );

    // Maps states to stages.
    define (mapping) {
      mID = (S_ID,S_IDe);
      mEX = (S_EX,S_EXp,S_EXe);
      mMM = (S_MM,S_MMp,S_MMe);
      mWB = (S_WB,S_WBp,S_WBe);
    };

    // Defines the state transition on an exception:
    //  Lhs:  exception state.
    //  Rhs:  states which might generate an exception.
    define (exception_mapping) {
      S_IDe = S_ID;
      S_EXe = S_EX;
      S_MMe = S_MM;
      S_WBe = S_WB;
   }
  }

  // Behavior common to all instruction classes (can be overridden on a
  // per-class basis): If an exception occurs, perform its actions (commit) and
  // flush the pipe behind it.
  commit_on_exception = true;

  define (instr_class sfx) {
    instructions = ( addic, "addic.", addi, addis, ori, "andi.", 
                     add, or, rlwinm, cmpi, cmp, 
                     mfspr, mtspr, srw, mullw, tw, halt );

    machine = normal;

    commit_on_exception = true;
    
    define (operands) {
      Src1 = GPR(RA);
      Src2 = GPR(RB);
      Trg  = GPR(RT);
      TrgFlags = (CR,target);
      TrgFlags = (XER,target);
      SrcFlags = (CR,source);
      SrcFlags = (XER,source);
    };

    define (instr=(ori, xori, "andi.", "andis.", rlwimi, "rlwimi.", 
                   rlwinm, "rlwinm.", and, or, "or.", xor, slw, sraw, "sraw.", srawi, "srawi.",
                   srw, mtspr )) {
      define (operands) {
        Src1 = GPR(RS);
        Src2 = GPR(RB);
        Trg  = GPR(RA);
        TrgFlags = (MSR,target);
        SrcFlags = (MSR,source);
      };
    }

    define (instr=(cmpli,cmpi,cmp,cmpl)) {
      define (operands) {
        Src1 = GPR(RA);
        Src2 = GPR(RB);
        Trg  = CR;
      }
    }

    define (instr=(mfspr)) {
      define (operands) {
        Src1 = SPR(SPRN);
        Trg  = GPR(RT);
      }
    }

    define (instr=(mtspr)) {
      define (operands) {
        Trg  = SPR(SPRN);
        Src1 = GPR(RS);
      }
    }

    define (instr=(crxor,creqv)) {
      define (operands) {
        Src1 = CR;
        Trg  = CR;
      }
    } 

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
    S_ID:  if (Src1.can_read() &&  Src2.can_read() && SrcFlags.can_read() &&
               Trg.can_write() && TrgFlags.can_write() && mEX.has_space() && all_stall.can_allocate()) {
        Src1.read();
        Src2.read();
        SrcFlags.read();
				Trg.allocate();
        TrgFlags.allocate();
				change_state(S_EX);
      }
		// No space-check, so one will be inserted.
		S_EX: {
			exec();
			change_state(S_MM);
		}
		S_MM: { 
			change_state(S_WB); 
		}
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      change_state(S_WBp);
    }
		S_WBp:{
			change_state(S_INIT);
		}

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_MMe); };
    S_MMe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  }

#   define HID0_INDEX 50
#   define HID1_INDEX 51

  // A mtspr to HID0 or HID1 allocates the hid_stall semaphore in order to
  // to prevent loads and stores from executing.  Note:  It doesn't check
  // the flag itself.
  define (instr_class mtspr_hid) {
    instructions = (mtspr(SPRN(HID0_INDEX)),mtspr(SPRN(HID1_INDEX)));
    machine = normal;

    define (operands) {
      Src = GPR(RS);
      Trg = SPR;
    };

    allow_missing_operands = true;

#   define HID0_INDEX 50
#   define HID1_INDEX 51

    action = {
    S_INIT: {
      change_state(S_ID);
    }
    S_ID: {
      if (can_read_ops() && mEX.has_space()) {
        read_ops();
        Trg.allocate();
        hid_stall.allocate();
        change_state(S_EX);
      }
    }
    S_EX: if (Mem.can_force_lock()) {
        Mem.allocate_force_lock();
        Fetcher.set_cancel(true);
        Fetcher.cancel();
        exec();
        set_latency(capacity());
        change_state(S_EXp);
      }
    S_EXp: if (check_latency() && mMM.has_space(capacity())) {
        change_state(S_MM);
      } else {
        decr_latency();
      }
    S_MM: {
      change_state(S_WB);
    }
    S_WB: {
      write_ops();
      change_state(S_WBp);
    }
    S_WBp: {
      Mem.deallocate_force_lock();
      hid_stall.deallocate(capacity());
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_MMe); };
    S_MMe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  }

  // For testing purposes, we're making this a serially dispatched instruction.
  // It allocates all stages so that nothing can execute until it's done and it
  // can't execute until everything else is done.
  define (instr_class mtmsr) {
    instructions = (mtmsr);
    machine = normal;

    define (operands) {
      Src = sources;
      Trg = targets;
    };

    allow_missing_operands = true;

    action = {
    S_INIT: {
      change_state(S_ID);
    }
    S_ID: {
      if (Src.can_read() && all_stall.can_allocate() && hid_stall.can_allocate() 
          && mEX.empty() && mMM.empty() && mWB.empty()) {
        Src.read();
        Trg.allocate();
        all_stall.allocate();
        hid_stall.allocate();
        change_state(S_EX);
      }
    }
    S_EX: {
      exec();
      change_state(S_MM);
    }
    S_MM: {
      change_state(S_WB);
    }
    S_WB: {
      write_ops();
      change_state(S_WBp);
    }
    S_WBp: {
      all_stall.deallocate();
      hid_stall.deallocate(capacity());
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_MMe); };
    S_MMe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  }

 define (instr_class load) {
    instructions = ( lbz, lhz, lwz, lwzu, lwzx );

    attrs = single_issue;

    machine = normal;
    
    define (operands) {
      Src = sources;
      Trg = targets;
      Imm = field(D);
    };

    allow_missing_operands = true;

    action = {
		S_INIT: if (mID.has_space() && mID.instr_class(0) != loadClass && mID.instr_class(0) != storeClass) { 
        change_state(S_ID); 
		};
		S_ID: if (Src.can_read() && Trg.can_write() && 
              mEX.has_space() && hid_stall.can_allocate() ) {
        Src.read();
				Trg.allocate();
				change_state(S_EX);
			}
    S_EX: if (mMM.has_space(capacity()) && Mem.can_request_read()) {
        // Calc ea.
        exec();
        Mem.send_read_request();
        change_state(S_MM);
      }
		S_MM: if (Mem.can_read()) { 
        exec_and_read(Mem);
        change_state(S_MMp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at MM.
    S_MMp: if (exec_done() && mWB.has_space(capacity())) {
        change_state(S_WB);
      }
      else if (Mem.can_request_read()) {
        Mem.send_read_request();
        change_state(S_MM);
      }
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      change_state(S_WBp);
    }
		S_WBp:{
			change_state(S_INIT);
		}

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_MMe); };
    S_MMe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  }

 define (instr_class store) {
    instructions = (stb, sth, sthx, stw, stwu, stwx);

    attrs = single_issue;

    machine = normal;
    
    define (operands) {
      Src = sources;
      Trg = targets;
    };

    allow_missing_operands = true;

    action = {
      // Alternative way to check instruction classes by using an attribute query.
		S_INIT: if (mID.has_space() && !mID.has_attr(0,single_issue)) { 
        change_state(S_ID); 
		};
		S_ID: if (Src.can_read() && Trg.can_write() && 
              mEX.has_space() && hid_stall.can_allocate()) {
				Src.read();
        Trg.allocate();
				change_state(S_EX);
			}
    S_EX: if (mMM.has_space(capacity()) && Mem.can_request_write()) {
        // Calc ea.
        exec();
        Mem.send_write_request();
        change_state(S_MM);
      }
		S_MM: if (Mem.can_write()) { 
        exec_and_write(Mem);
        change_state(S_MMp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at MM.
    S_MMp: if (exec_done() && mWB.has_space(capacity())) {
        change_state(S_WB);
      }
      else if (Mem.can_request_write()) {
        Mem.send_write_request();
        change_state(S_MM);
      }
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      change_state(S_WBp);
    }
		S_WBp: {
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_MMe); };
    S_MMe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  }

 define (instr_class branch) {
   instructions = ( bc, b, bl, bclr );
   
   machine = normal;

   allow_missing_operands = true;
   
   action = {
   S_INIT :{
     change_state(S_ID);
   };
   S_ID: if (can_read_ops() && can_write_ops() && mEX.has_space()) {
       read_ops();
       allocate_ops();
       change_state(S_EX);
     }
   S_EX: if (mMM.has_space(capacity())) {
       exec();
       write_ops();
       if (branch_taken()) {
         taken_flush();
       }
       change_state(S_MM);
     }
   S_MM: if (mWB.has_space(capacity())) {
       change_state(S_WB);
     }
   S_WB: {
     change_state(S_INIT);
   }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_MMe); };
    S_MMe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

   };
 }

 define (instr_class rfi) {
   instructions = ( rfi );
   
   machine = normal;

   allow_missing_operands = true;
   
   action = {
   S_INIT :{
     change_state(S_ID);
   };
   S_ID: if (can_read_ops() && can_write_ops() && mEX.has_space()) {
       read_ops();
       allocate_ops();
       change_state(S_EX);
     }
   S_EX: if (mMM.has_space(capacity())) {
       exec();
       write_ops();
       taken_flush();
       change_state(S_MM);
     }
   S_MM: {
     change_state(S_WB);
   }
   S_WB: {
     change_state(S_INIT);
   }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_MMe); };
    S_MMe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };


   };
 }

 define (instr_class isync) {
   instructions = ( isync );
   
   machine = normal;

   attrs = serialized;

   action = {
   S_INIT : if (mID.empty()) {
       // Only needed for safe-mode models to make sure that subsequent
       // instructions are not really executed, since we know we're going to
       // flush
       set_speculative();
       change_state(S_ID);
   };
   // The Issue check is just a dummy check, to make sure that we can reference
   // the implicit issue stage to check for attributes.
   S_ID: if (mEX.empty() && mMM.empty() && mWB.empty() && !Issue.has_attr(0)) {
       exec();
       flush();
       change_state(S_EX);
     }
   S_EX: {
       change_state(S_MM);
     }
   S_MM: {
     change_state(S_WB);
   }
   S_WB: {
     change_state(S_INIT);
   }

   };
 }

 define (instr_class decode_miss) {
   instructions = ( decode_miss );
   
   machine = normal;

   allow_missing_operands = true;

   action = {
   S_INIT: {
     change_state(S_ID);
   }
   S_ID: if (can_read_ops() && can_write_ops() && mEX.has_space()) {
     exec();
     change_state(S_IDe); // We won't get here b/c we'll get a program
                          // exception.  This is subtly wrong, in that we'd
                          // normally want to change to S_EXe, but I want to
                          // make sure that we can handle this correctly.
   }
   S_IDe: {
     change_state(S_EXe);
   }
   S_EXe: {
     change_state(S_MMe);
   }
   S_MMe: {
     change_state(S_WBe);
   }
   S_WBe: {
     change_state(S_INIT);
   }

   };
 }

 define (instr_class fetch_exception) {
   instructions = ( fetch_exception );
   
   machine = normal;

   // We have explicit code to do this, so we don't need the automatic code.
   commit_on_exception = false;

   action = {
   S_INIT: {
     change_state(S_ID);
   }
   S_ID: {
     commit_exceptions();
     taken_flush();
     change_state(S_EX);
   }
   S_EX: {
     change_state(S_MM);
   }
   S_MM: {
     change_state(S_WB);
   }
   S_WB: {
     change_state(S_INIT);
   }

   };
 }


}
