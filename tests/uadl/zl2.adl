//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//

//////////////////////////////////////////////////////////////////////////////
//
// This model is only meant to demonstrate the use of the ADL language and does
// not represent any actual Freescale product.
//
// THIS MODEL IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//
//////////////////////////////////////////////////////////////////////////////

//---------------------------------------------------------------------------
//
//  An example 32-bit Power ISA microprocessor.  This does not contain a cache
//  or an MMU.
//
//---------------------------------------------------------------------------

#define regSize 32
#define defaultOffset 32

#define CacheLineSize 32

//
// L1d size and associativity.
//
#ifndef L1d_Size
# define L1d_Size 4096
#endif
#ifndef L1d_Assoc
# define L1d_Assoc 4
#endif

//
// L1i size and associativity.
//
#ifndef L1i_Size
# define L1i_Size 4096
#endif
#ifndef L1i_Assoc
# define L1i_Assoc 4
#endif

//
// L2 size and associativity.
//
#ifndef L2_Size
# define L2_Size 32768
#endif
#ifndef L2_Assoc
# define L2_Assoc 4
#endif


#import "generic32.adl"

// Remove this core b/c the name is not what we want.
define (core=powerpc) {
  remove = true;
}

//---------------------------------------------------------------------------
// An example 32-bit Power ISA processor core.
//
// The only difference between this and 'powerpc' is the name, so that we're
// compatible with the regression tests that expect a core named "P".
// ---------------------------------------------------------------------------
define (core = P) {
  //---------------------------------------------------------------------------
  // Helper functions
  //---------------------------------------------------------------------------

  define (reg=QEXIT) {}

  defmod (regfile=SPR) {
    define (entry=350)  { reg = QEXIT; }
  }

  // These BookE helper functions are stubbed out becuase z0 does not implement caches.
  void AllocateDataCacheBlock(bits<regSize> x ) {}
  void FlushDataCacheBlock(bits<regSize> x) {}
  void InvalidateDataCacheBlock(bits<regSize> x) {}
  void InvalidateInstructionCacheBlock(bits<regSize> x) {}
  void StoreDataCacheBlock(bits<regSize> x) {}
  void PrefetchDataCacheBlock(bits<regSize> x,bits<5> y) {}
  void PrefetchInstructionCacheBlock(bits<regSize> x,bits<5> y) {}
  void ZeroDataCacheBlock(bits<regSize> x) {}
  
  // Cache are shared across all threads.
  define (cache = L1i) {
    type      = instr;
    level     = 1;
    linesize  = CacheLineSize;
    size      = L1i_Size;
    set_assoc = L1i_Assoc;
    
    enable = func (CacheAccess ca,addr_t addr) {
      return true;
    };
  }

  define (cache=L1d) {
    type      = data;
    level     = 1;
    linesize  = CacheLineSize;
    size      = L1d_Size;
    set_assoc = L1d_Assoc;

    // The L1 is write-through in order to avoid coherency issues.  Coherency
    // (if applicable) is handled by the L2.
    write_through = func(CacheAccess,addr_t addr) { return true; };

    enable = func (CacheAccess ca,addr_t addr) {
      return true;
    };

  }  

  define (cache=L2) {
    type      = unified;
    level     = 2;
    linesize  = CacheLineSize;
    size      = L2_Size;
    set_assoc = L2_Assoc;

    enable = func (CacheAccess ca,addr_t addr) {
      return true;
    };

  }  


  archs = (power,generic32);
  type = "generic32_0";
}
