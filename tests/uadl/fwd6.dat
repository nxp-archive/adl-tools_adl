#
# Makes sure that we detect when a forwarding path is invalidated b/c a
# subsequent instruction allocated the register before another instruction
# checks to see if it can read the value.
#
= asm

	addi r1,r1,1  # Allocate r1.
	addi r2,r2,2
	addi r1,r3,2  # Also allocate r1.
	addi r5,r1,4  # Use r1, but shouldn't get value from fwd path.
	
= /asm

CORE n=:P

# <GEN>
MD n=Mem ra=0x00000000 d=0x38210001	#	addi r1,r1,1  # Allocate r1.
MD n=Mem ra=0x00000004 d=0x38420002	#	addi r2,r2,2
MD n=Mem ra=0x00000008 d=0x38230002	#	addi r1,r3,2  # Also allocate r1.
MD n=Mem ra=0x0000000c d=0x38A10004	#	addi r5,r1,4  # Use r1, but shouldn't get value from fwd path.
# </GEN>

RD n=NIA d=0x0

TRACE

I ea=0x0 id=1
M n=Mem t=ifetch ea=0x0 ra=0x0 d=0x38210001
INSTR op=0x38210001					asm="addi r1,r1,1"
ITIME t=2
R n=GPR i=1 d=0x00000001
CTIME t=5

I ea=0x4 id=2
M n=Mem t=ifetch ea=0x4 ra=0x4 d=0x38420002
INSTR op=0x38420002					asm="addi r2,r2,2"
ITIME t=2
R n=GPR i=2 d=0x00000002
CTIME t=5

I ea=0x8 id=3
M n=Mem t=ifetch ea=0x8 ra=0x8 d=0x38230002
INSTR op=0x38230002					asm="addi r1,r3,2"
ITIME t=3
R n=GPR i=1 d=0x00000002
CTIME t=6

I ea=0xc id=4
M n=Mem t=ifetch ea=0xc ra=0xc d=0x38a10004
INSTR op=0x38a10004					asm="addi r5,r1,4"
ITIME t=4
R n=GPR i=5 d=0x00000006
CTIME t=7

I ea=0x10 id=5
M n=Mem t=ifetch ea=0x10 ra=0x10 d=0x00000000
INSTR op=0x00000000					asm="halt "
ITIME t=7
CTIME t=10

RESULTS

RD n=GPR i=1 d=2
RD n=GPR i=2 d=2
RD n=GPR i=5 d=6

