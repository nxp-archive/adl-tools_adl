// 
// A simple in-order processor with early-out conditions for multiply and
// divide.
//
define (core P) {

  allow_unimpl_instrs = true;

  define (resources) {
    // instruction buffer (fetch stage)
    define (fetchunit Fetcher) {
      fetch_memory = mMEM;
      entries = 12;
      entry_size = 2;
      fetch_size = (4);
    }

    // pipeline stages
    define (pipestage=(mID, mEX, mWB)) {}

    // forwarding path
    define (forwarding_path Fwd) {
      // we want to be able to handle data + flags, etc
      size = 3;
    }

    // memory system
    define (memory mMEM) {
      data_width = 32;
      addr_bandwidth = 1;
      data_bandwidth = 1;
      read_latency = 1;
      write_latency = 1;
      max_requests = 1;
      read_only = false;
    }

    // Load/store after mul/div stall
    define (semaphore lsamd_stall) {}

    // Flag for msync access stalling.
    define (semaphore msync_stall) {}
  }

  define (machine normal) {
    init_state = S_INIT;
    states = ( S_ID, S_IDp,S_IDe,  S_EX, S_EXp, S_EXe, S_WB, S_WBe );

    define (mapping) {
      mID = (S_ID,S_IDp,S_IDe);
      mEX = (S_EX,S_EXp,S_EXe);
      mWB = (S_WB,S_WBe);
    };

    // Defines the state transition on an exception:
    //  Lhs:  exception state.
    //  Rhs:  states which might generate an exception.
    define (exception_mapping) {
      S_IDe = (S_ID,S_IDp);
      S_EXe = (S_EX,S_EXp);
      S_WBe = S_WB;
   }
  }

  define (instr_class dispatchSerial) {
    instructions = msync;
    machine = normal;

    action = {
		S_INIT: { 
      set_speculative();
			change_state(S_ID); 
		};
    S_ID:  if (msync_stall.can_allocate() && mEX.has_space() ) {
				change_state(S_EX);
        msync_stall.allocate();
      }
		S_EX: {
			exec();
      flush();
			change_state(S_WB);
		}
		S_WB: {
      // Since we've flushed, we don't need to deallocate the semaphore (the
      // flush takes care of that).
      write_ops();
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  };

  define (instr_class sfx) {
    // FIXME: mulli
    instructions = (halt,
                    add, addc, addco, adde, addeo, addi, addic, addis, addme,
                    addmeo, addo, addze, addzeo, and, andc, cntlzw, eqv, extsb,
                    extsh, nand, neg, nego, nor, or, orc, ori, oris, rlwimi, rlwinm,
                    rlwnm, slw, sraw, srawi, srw, subf, subfc, subfco, subfe,
                    subfeo, subfic, subfme, subfmeo, subfo, subfze, subfzeo, xor,
                    xori, xoris, "add.", "addc.", "addco.", "adde.", "addeo.", "addic.", "addme.",
                    "addmeo.", "addo.", "addze.", "addzeo.", "and.", "andc.", "andi.", "andis.",
                    "cntlzw.", "eqv.", "extsb.", "extsh.", "nand.", "neg.", "nego.", "nor.", "or.",
                    "orc.", "rlwimi.", "rlwinm.", "rlwnm.", "slw.", "sraw.", "srawi.", "srw.",
                    "subf.", "subfc.", "subfco.", "subfe.", "subfeo.", "subfme.", "subfmeo.",
                    "subfo.", "subfze.", "subfzeo.", "xor.", cmpli, cmpi, cmp, cmpl, crxor,
                    creqv,
                    mulli, default_instruction );

    machine = normal;

    define (operands) {
      Src = sources;
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
    S_ID:  if (Src.can_read_fp(Fwd) && Trg.can_write() && msync_stall.can_allocate() && mEX.has_space() ) {
        Src.read(Fwd);
				Trg.allocate();
				change_state(S_EX);
      }
		S_EX: {
			exec();
      Fwd.write(Trg);
			change_state(S_WB);
		}
		S_WB: {
      write_ops();
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };

  };

  unsigned signed_mul_div_delay(bits<32> x,bits<32> y)
  {
    return (x == 0 || y == 0) ? 0 : 9;
  }

  define (instr_class signedMulDiv) {
    instructions = (mullw, mulhw, divw );

    machine = normal;

    define (operands) {
      Src = sources;
      Src1 = GPR(RA);
      Src2 = GPR(RB);
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
    S_ID:  if (Src.can_read_fp(Fwd) && Trg.can_write() && 
               msync_stall.can_allocate() && mEX.has_space() ) {
        Src.read(Fwd);
				Trg.allocate();
        lsamd_stall.allocate();
				change_state(S_EX);
      }
		S_EX: {
			exec();
      set_latency(signed_mul_div_delay(Src1.value(),Src2.value()));
			change_state(S_EXp);
		}
    S_EXp: if (check_latency() && mWB.has_space()) {
        Fwd.write(Trg);
        change_state(S_WB);
      } else {
        decr_latency();
      }
		S_WB: {
      write_ops();
      lsamd_stall.deallocate();
      change_state(S_INIT);
    }

    };
  };

  // This is for multiplies which modify the CR register. Note that mullwo is
  // included, with a false CR dependency, to test that we can directly query a
  // register, even when not necessary, such as when RTL might have a false
  // dependency.
  define (instr_class signedMulCr) {
    instructions = ("mullw.", mullwo, "mullwo." );

    machine = normal;

    define (operands) {
      Src = sources;
      Src1 = GPR(RA);
      Src2 = GPR(RB);
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
    S_ID:  if (Src.can_read_fp(Fwd) && Trg.can_write() && 
               msync_stall.can_allocate() && CR.can_read(0xff000000) && mEX.has_space() ) {
        Src.read(Fwd);
				Trg.allocate();
        lsamd_stall.allocate();
				change_state(S_EX);
      }
		S_EX: {
			exec();
      set_latency(signed_mul_div_delay(Src1.value(),Src2.value()));
			change_state(S_EXp);
		}
    S_EXp: if (check_latency() && mWB.has_space()) {
        Fwd.write(Trg);
        change_state(S_WB);
      } else {
        decr_latency();
      }
		S_WB: {
      write_ops();
      lsamd_stall.deallocate();
      change_state(S_INIT);
    }

    };
  }

  define (instr_class mftspr) { // model completion serialization
    instructions = (mfspr, mtspr );

    machine = normal;

    define (operands) {
      Src = sources;
      Trg = targets;
    };

    define (instr=mtspr) {
      define (operands) {
        CheckDelay = 1;
      }
    }

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
    S_ID:  if (Src.can_read_fp(Fwd) && Trg.can_write() && msync_stall.can_allocate() && mEX.empty() && mWB.empty()) {
        Src.read(Fwd);
				Trg.allocate();
				change_state(S_EX);
      }
		S_EX: {
			exec();
      if (CheckDelay.value() && (Trg.field_value() == 284 || Trg.field_value() == 285)) {
        set_latency(4);
      }
			change_state(S_EXp);
		}
    S_EXp: if (check_latency() && mWB.has_space()) {
        Fwd.write(Trg);
        change_state(S_WB);
      } else {
        decr_latency();
      }
		S_WB: {
      write_ops();
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  };


  define (instr_class load) {
    instructions = (lbz, lbzu, lbzux, lbzx, lhz, lhzu, lhzux, lhzx, lha, lhax, lwz, lwzu,
                    lwzux, lwzx );

    machine = normal;

    define (operands) {
      Src = sources;
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
		S_ID: if (Src.can_read_fp(Fwd) && Trg.can_write()) {
        Src.read(Fwd);
				Trg.allocate();
				change_state(S_IDp);
			}
    S_IDp: if (lsamd_stall.can_allocate() && msync_stall.can_allocate() && mEX.has_space()) {
        // Calc ea.
        exec();
        mMEM.send_read_request();
        change_state(S_EX);
      }
		S_EX: if (mMEM.can_read()) { 
        exec_and_read(mMEM);
        change_state(S_EXp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at EX.
    S_EXp: if (exec_done() && mWB.has_space()) {
        Fwd.write(Trg);
        change_state(S_WB);
      }
      else if (mMEM.can_request_read()) {
        mMEM.send_read_request();
        change_state(S_EX);
      }
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  };

  // Note that lmw does 64-bit reads, loading two operands at a time.
  define (instr_class lmw) {
    instructions = (lmw );

    machine = normal;

    define (operands) {
      Src = sources;
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
		S_ID: if (Src.can_read_fp(Fwd) && Trg.can_write()) {
        Src.read(Fwd);
				Trg.allocate();
				change_state(S_IDp);
			}
    S_IDp: if (lsamd_stall.can_allocate() && msync_stall.can_allocate() && mEX.has_space()) {
        // Calc ea.
        exec();
        mMEM.send_read_request(8);
        next_req_mem();
        change_state(S_EX);
      }
		S_EX: if (mMEM.can_read()) { 
        exec_and_read(mMEM,2);
        change_state(S_EXp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at MM.
    S_EXp: if (exec_done() && mWB.has_space()) {
        Fwd.write(Trg);
        change_state(S_WB);
      }
      else if (mMEM.can_request_read()) {
        mMEM.send_read_request(8);
        next_req_mem();
        change_state(S_EX);
      }
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  }


  define (instr_class store) {
    instructions = (stb, stbu, stbux, stbx, sth, sthu, sthux, sthx, stw, stwu,
                    stwux, stwx );

    machine = normal;

    define (operands) {
      Src = sources;
      Trg = targets;
    };

    action = {
    S_INIT: {
      change_state(S_ID);
    };
    S_ID: if (Src.can_read_fp(Fwd) && mEX.has_space()) {
        Src.read(Fwd);
        Trg.allocate();
        change_state(S_IDp);
      }
    S_IDp: if (mEX.has_space() && lsamd_stall.can_allocate() && msync_stall.can_allocate() && mMEM.can_request_write()) {
        // Calc ea.
        exec();
        mMEM.send_write_request();
        change_state(S_EX);
      }
    S_EX: if (mMEM.can_write()) {
        exec_and_write(mMEM);
        change_state(S_EXp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at MM.
    S_EXp: if (exec_done() && mWB.has_space()) {
        change_state(S_WB);
      }
      else if (mMEM.can_request_write()) {
        mMEM.send_write_request();
        change_state(S_EX);
      }
    // No need for a space-check, since S_WBp maps to the same stage.
    S_WB: {
      write_ops();
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  };

  // Note that stmw does 64-bit writes, writing two operands at a time.
  define (instr_class stmw) {
    instructions = (stmw );

    machine = normal;

    define (operands) {
      Src = sources;
      Trg = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
		S_ID: if (Src.can_read_fp(Fwd) && Trg.can_write() && mEX.has_space()) {
				Src.read(Fwd);
        Trg.allocate();
				change_state(S_IDp);
			}
    S_IDp: if (mEX.has_space() && lsamd_stall.can_allocate() && msync_stall.can_allocate() && mMEM.can_request_write()) {
        // Calc ea.
        exec();
        mMEM.send_write_request(8);
        next_req_mem();
        change_state(S_EX);
      }
		S_EX: if (mMEM.can_write()) { 
        // Do 64-bit writes, unless our request is odd in size, in which case
        // we'll have a 4-byte write at the end.
        exec_and_write(mMEM,2,4);
        change_state(S_EXp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at MM.
    S_EXp: if (exec_done() && mWB.has_space()) {
        change_state(S_WB);
      }
      else if (mMEM.can_request_write()) {
        mMEM.send_write_request(8);
        next_req_mem();
        change_state(S_EX);
      }
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  };

  define (instr_class branch) {
    // branch behavior (not implemented yet):
    //   - always predicted taken (at decode stage, sends out target address)
    //   - resolved at EX stage
    //   - targets (other than PC) updated at WB stage
    instructions = (bc, b, bl, bcl, bclr, bcctr, bcctrl, bclrl );

    machine = normal;

    allow_missing_operands = true;
   
    action = {
    S_INIT :{
      change_state(S_ID);
    };
    S_ID: if (can_read_ops() && can_write_ops() && msync_stall.can_allocate() && mEX.has_space()) {
        read_ops();
        allocate_ops();
        exec();
        write_ops();
        if (branch_taken()) {
          taken_flush();
        }
        change_state(S_EX);
      }
    S_EX: {
      change_state(S_WB);
    }
    S_WB: {
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  };

  define (instr_class jump) {
    instructions = (rfi, rfci );

    machine = normal;

    allow_missing_operands = true;
   
    action = {
    S_INIT :{
      change_state(S_ID);
    };
    S_ID: if (can_read_ops() && can_write_ops() && msync_stall.can_allocate() && mEX.has_space()) {
        read_ops();
        allocate_ops();
        exec();
        write_ops();
        if (branch_taken()) {
          taken_flush();
        }
        change_state(S_EX);
      }
    S_EX: {
      change_state(S_WB);
    }
    S_WB: {
      change_state(S_INIT);
    }

    S_IDe: { change_state(S_EXe); };
    S_EXe: { change_state(S_WBe); };
    S_WBe: { change_state(S_INIT); };

    };
  }

  // dummy- we don't really have a fetch-exception in this design.
  define (instr_class fetch_exception) {
    instructions = ( fetch_exception );
   
    machine = normal;

    // We have explicit code to do this, so we don't need the automatic code.
    commit_on_exception = false;

    action = {
    S_INIT: {
      change_state(S_ID);
    }
    S_ID: {
      commit_exceptions();
      taken_flush();
      change_state(S_EX);
    }
    S_EX: {
      change_state(S_WB);
    }
    S_WB: {
      change_state(S_INIT);
    }

    };
  }
};


