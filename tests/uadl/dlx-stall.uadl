//
// A DLX model that gets stuck at store instructions.
//
// This is accomplished using a flag that it allocates itself, thus resulting in
// a deadlock.  The sfx class also checks this flag, so this makes sure we test
// that discarding the instruction also releases any resources it allocated.
//
define (core P) {

  allow_unimpl_instrs = true;

  define (resources) {

    // instruction buffer (fetch stage)
    define (fetchunit Fetcher) {
      fetch_memory = Mem;
      entries = 2;
      entry_size = 4;
      fetch_size = (4);
      reuse_data = true;
    }

    // pipeline stages
    define (pipestage=(mID, mEX, mMM, mWB)) {}

    // forwarding path
    define (forwarding_path=(FwdEX,FwdMM)) {
      size = 4;
    }

    define (memory Mem) {
      data_width = 32;
    }

    define (semaphore=FooFlag) {}
  }

  define (machine normal) {
    init_state = S_INIT;
    states = ( S_ID, S_EX, S_EXp, S_MM, S_MMp, S_WB, S_WBp );

    define (mapping) {
      mID = S_ID;
      mEX = (S_EX,S_EXp);
      mMM = (S_MM,S_MMp);
      mWB = (S_WB,S_WBp);
    };

  }

  define (instr_class sfx) {
    instructions = ( "addic.", addi, addis, ori, "andi.", 
                     add, or, 
                     cmpi, cmp, 
                     mfspr, srw, halt );

    machine = normal;
    
    define (operands) {
      Src = sources;
      Trg  = targets;
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
		S_ID: if (Src.can_read() && Trg.can_write() && mEX.has_space() && FooFlag.can_allocate()) {
        read_ops();
				Trg.allocate();
				change_state(S_EX);
			}
		// No space-check, so one will be inserted.
		S_EX: {
			exec();
			change_state(S_MM);
		}
		S_MM: { 
			change_state(S_WB); 
		}
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      change_state(S_WBp);
    }
		S_WBp:{
			change_state(S_INIT);
		}
    };
  }

 define (instr_class store) {
    instructions = (stb, sth, sthx, stw, stwu, stwx);

    machine = normal;
    
    define (operands) {
      Src = sources;
      Trg = targets;
    };

    allow_missing_operands = true;

    action = {
		S_INIT: { 
      FooFlag.allocate();
			change_state(S_ID); 
		};
		S_ID: if (Src.can_read() && Trg.can_write() && mEX.has_space() && FooFlag.can_allocate()) {
				Src.read();
        Trg.allocate();
				change_state(S_EX);
			}
    S_EX: if (mMM.has_space() && Mem.can_request_write()) {
        // Calc ea.
        exec();
        Mem.send_write_request();
        change_state(S_MM);
      }
		S_MM: if (Mem.can_write()) { 
        exec_and_write(Mem);
        change_state(S_MMp);
      }
    // "edge" action:  If we're done executing, then move to writeback, else stay at MM.
    S_MMp: if (exec_done() && mWB.has_space()) {
        change_state(S_WB);
      }
      else if (Mem.can_request_write()) {
        Mem.send_write_request();
        change_state(S_MM);
      }
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: {
      write_ops();
      FooFlag.deallocate();
      change_state(S_WBp);
    }
		S_WBp: {
      change_state(S_INIT);
    }
    };
  }

}
