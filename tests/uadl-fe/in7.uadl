//
// Basic test of instruction class definitions.
//

// Add back when implemented.

// Test that outer-most-scope decls get propagated to the ADL data model.

enum Stuff {X,Y,Z};

int foo();
int bar(int x, int y);

define (core P) {

  allow_unimpl_instrs = true;

  define (resources) {

    define (fetchunit=Fetcher) {
      fetch_memory = L1i;
      entries = 2;
      entry_size = 4;
      fetch_size = (4,8);
    }

    define (pipestage mID) {}

    define (pipestage mEX) {}

    define (pipestage mMM) {}

    define (pipestage mWB) {}

    // reorder buffer (assuming at most four targets per instruction)
    define (forwarding_path reorder) {}

  }

  define (machine normal) {
    init_state = S_INIT;
    states = ( S_ID, S_EX, S_MM, S_WB, S_WBp );

    define (mapping) {
      mID = S_ID;
      mEX = S_EX;
      mMM = S_MM;
      mWB = (S_WB,S_WBp);
    };

  }

  define (instr_class a) {
    instructions = ( add, addi );

    machine = normal;
    
    define (operands) {
      Src1 = GPR(RA);
      Src2 = GPR(RB);
      Trg  = GPR(RT);
    };

    allow_missing_operands = true;

    action = {
		S_INIT: { change_state(S_ID); }
      S_ID: if (Src1.can_read() && Src2.can_read() && Trg.can_allocate() && mEX.has_space()) {
              Src1.read();
              Src2.read();
              Trg.allocate();
              change_state(S_EX);
            }
      S_EX: if (mMM.has_space()) {
              exec();
              change_state(S_MM);
            }
		S_MM: { change_state(S_WB); }
      S_WB: if (Trg.can_write()) {
              write_ops();
              change_state(S_WBp);
            }
      S_WBp:{
              change_state(S_INIT);
            }      
    };
  }

  define (instr_class b) {
    instructions = ( "andi." );

    machine = normal;
    
    define (operands) {
      Src1 = GPR(RA);
      Trg  = GPR(RT);
    };

    allow_missing_operands = true;

    action = {};
  }


}
