//
// Test the use of explicit 'source' and 'target' specifiers in operands.
// Test the use of not specifying a machine, when only one is define.
//
define (core P) {

  define (resources) {
    define (fetchunit fetcher) {
      fetch_memory = mMEM;
      entries = 6;
      entry_size = 1;
      fetch_size = (4);
      min_fetch_entries = 4;
    }

    // pipeline stages
    define (pipestage mID) {
      issue = true;
    }

    define (pipestage=(mEX, mMM, mWB)) {};

    // memory system
    define (memory mMEM) {
      data_width = 32;
    }
  }

  define (machine normal) {
    init_state = S_INIT;
    states = ( S_ID, S_EX, S_MM, S_WB );

    define (mapping) {
      mID = S_ID;
      mEX = S_EX;
      mMM = S_MM;
      mWB = S_WB;
    };

  }

  allow_unimpl_instrs = true;

  define (instr_class sfx) {
    instructions = ( addi );

    define (operands) {
      Src1 = (GPR(RT),source);
      Src2 = (GPR(RT),source,0x0000000f);
      Trg  = (GPR(RT),target);
      Si   = field(SI);
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
		S_ID: {
				change_state(S_EX);
			}
		S_EX: {
      exec();
			change_state(S_MM);
		}
		S_MM: { 
			change_state(S_WB); 
		}
		S_WB: {
				change_state(S_INIT);
			}
    };
  }

  define (instr_class loadu) {
    instructions = ( lwzu );

    define (operands) {
      Src   = sources;
      TrgEa = (GPR(RA),target);
      Trg  =  GPR(RT);
    };

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
		S_ID: {
				change_state(S_EX);
			}
		S_EX: {
      exec();
			change_state(S_MM);
		}
		S_MM: { 
			change_state(S_WB); 
		}
		S_WB: {
				change_state(S_INIT);
			}
    };
  }

}
