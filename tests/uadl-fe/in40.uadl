//
// Test the use of interface functions.
//
define (core P) {
  allow_unimpl_instrs = true;
  define (resources) {
    // instruction buffer (fetch stage)
    define (fetchunit fetcher) {
      fetch_memory = mMEM;
      entries = 6;
      entry_size = 1;
      fetch_size = (4);
      min_fetch_entries = 4;
    }

    define (memory mMEM) {
      data_width = 32;
    }

    // pipeline stages
    define (pipestage mID) {
      issue = true;
    }

    define (pipestage=(mEX, mWB)) { }

  }

  define (machine sfx) {
    init_state = S_INIT;
    states = ( S_ID, S_EX, S_EX0, S_EX1, S_WB  );

    define (mapping) {
      mID = S_ID;
			mEX = (S_EX,S_EX0,S_EX1);
			mWB = S_WB;
    };
	}

  enum Delays {
    FooDelay = 10,
    BarDelay = 20,
    FuzDelay = 30,
  };

  int foo() { return FooDelay; };

  int bar() { return BarDelay; };

  int fuz() { return FuzDelay; };

  define (instr_class sfx) {
    instructions = ( add, addi, addic,halt );

    machine = sfx;
    
    define (operands) {
      Src = sources;
      Trg = targets;
    };

    define (functions) {
      delay = foo;
    }

    define (instr=(addi)) {
      define (functions) {
        delay = bar;
      }
    }

    define (instr=(addic)) {
      define (functions) {
        delay = fuz;
      }
    }

    action = {
		S_INIT: { change_state(S_ID); }
		S_ID:   { change_state(S_EX); }
		S_EX:   { 
      exec();
      set_latency(delay); 
      change_state(S_WB); 
    }
		S_WB:   { change_state(S_INIT); }
    };
  }
 
}
