P (for architecture P):
  First-level instruction memory:  Mem

  First-level data memory:  Mem

  Fetch Unit:  fetcher
    Fetch Memory:  Mem.I
    Entries     :  6
    Entry Size  :  1
    Fetch Sizes :  4 

  Pipeline Stage:  mEX
    Size          :  1
    Bandwidth     :  1
    Rigid         :  0
    Scheduler        :  dependent
    Is issue stage:  0
		Shared           :  0
  Pipeline Stage:  mID
    Size          :  1
    Bandwidth     :  1
    Rigid         :  0
    Scheduler        :  dependent
    Is issue stage:  1
		Shared           :  0
  Pipeline Stage:  mMM
    Size          :  1
    Bandwidth     :  1
    Rigid         :  0
    Scheduler        :  dependent
    Is issue stage:  0
		Shared           :  0
  Pipeline Stage:  mWB
    Size          :  1
    Bandwidth     :  1
    Rigid         :  0
    Scheduler        :  dependent
    Is issue stage:  0
		Shared           :  0

  Register:  CIA
    ID        :  0
    Size      :  1
    Width     :  32
    Latency   :  0
    Is aliased:  0
  Register:  CR
    ID        :  1
    Size      :  1
    Width     :  32
    Latency   :  0
    Is aliased:  0
  Register File:  GPR
    ID        :  4
    Size      :  32
    Width     :  32
    Latency   :  0
    Is aliased:  0
  Register:  NIA
    ID        :  2
    Size      :  1
    Width     :  32
    Latency   :  0
    Is aliased:  0
  Register:  XER
    ID        :  3
    Size      :  1
    Width     :  32
    Latency   :  0
    Is aliased:  0

  Memory:  Mem
    Total address bandwidth: 2
    Total data bandwidth:    2
    Data width:              32
    Max requests:            3
    Port:  D (data)
      address bandwidth: 1
      data bandwidth:    1
      read latency:      2
      write latency:     2
      max requests:      3
      allow bus-wait:    0
    Port:  I (instr)
      address bandwidth: 1
      data bandwidth:    1
      read latency:      0
      write latency:     0
      max requests:      3
      allow bus-wait:    1
    Read latency :  1
    Write latency:  1
    Read-only    :  0

  Pipeline Scheduling Order:   mWB mMM mEX mID 

  Machine:  normal
    Initial state:  S_INIT
    States       :  S_EX S_ID S_MM S_WB S_WBp
    Default State Bindings:
      S_ID = mID
      S_EX = mEX
      S_MM = mMM
      S_WB = mWB
      S_WBp = mWB

  Instruction Class:  foo1
    Instructions:
      add
        Src = (src: GPR(RA)), (src: GPR(RB)), 
        Trg = (trg: GPR(RT)), 

		Commit On Exception:  1
    Machine    :  normal
    State Bindings:
      S_ID = mID
      S_EX = mEX
      S_MM = mMM
      S_WB = mWB
      S_WBp = mWB
    State actions:
      S_EX:
        To-States:  S_MM 
        From-States:  S_ID S_INIT 
        Action:
if ( mMM . has_space (  ) && Mem . D . can_request_read (  ) ) {
    exec (  ) ;
    Mem . D . send_read_request (  ) ;
    change_state ( S_MM ) ;
}

      S_ID:
        To-States:  S_EX 
        From-States:  S_INIT 
        Action:
if ( can_read_ops (  ) && Trg . can_write (  ) && mEX . has_space (  ) ) {
    read_ops (  ) ;
    Trg . allocate (  ) ;
    change_state ( S_EX ) ;
}

      S_INIT:
        To-States:  S_ID 
        Action:
if ( mID . has_space (  ) ) {
    change_state ( S_ID ) ;
}

      S_MM:
        To-States:  S_WB 
        From-States:  S_EX S_ID S_INIT 
        Action:
if ( mWB . has_space (  ) ) if ( Mem . D . can_read (  ) ) {
    exec_and_read ( Mem . D ) ;
    change_state ( S_WB ) ;
}

      S_WB:
        To-States:  S_INIT 
        From-States:  S_EX S_ID S_INIT S_MM 
        Action:
{
    write_ops (  ) ;
    change_state ( S_INIT ) ;
}


