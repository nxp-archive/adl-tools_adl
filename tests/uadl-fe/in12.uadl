//
// Demonstrates more complex operands:  The use of just a register-file,
// the use of single registers, and the use of source masks.
//
// Also tests custom resources.
//
define (core P) {
  allow_unimpl_instrs = true;
  define (resources) {
    // instruction buffer (fetch stage)
    define (fetchunit fetcher) {
      fetch_memory = mMEM;
      entries = 6;
      entry_size = 1;
      fetch_size = (4);
      min_fetch_entries = 4;
    }

    // pipeline stages
    define (pipestage mID) {
      issue = true;
    }

    define (pipestage=(mEX, mMM, mWB)) {};

    // memory system
    define (memory mMEM) {
      data_width = 32;
    }

    define (custom foo) {
      header = "Foo.h";
      type = "Foo";
      define (args) {
        N1 = 1;
        N2 = 2;
        parm1 = 3;
        parm2 = 4;
      }
    }
  }

  define (machine normal) {
    init_state = S_INIT;
    states = ( S_ID, S_EX, S_MM, S_WB, S_WBp );

    define (mapping) {
      mID = S_ID;
      mEX = S_EX;
      mMM = S_MM;
      mWB = (S_WB,S_WBp);
    };

  }

  define (instr_class sfx) {
    instructions = ( add, addi, "addic.", halt );

    machine = normal;
    
    define (operands) {
      Src1 = (GPR(RA),0xffffffff);
      Src2 = (GPR,0x0000ffff);
      Src3 = (CR,0xf0000000);
      Src3 = XER;
      Trg  = GPR(RT);
    };

    allow_missing_operands = true;

    action = {
		S_INIT: { 
			change_state(S_ID); 
		};
		S_ID: if (Src1.can_read() && Src2.can_read() && 
							Trg.can_allocate() && mEX.has_space()) {
				Src1.read();
				Src2.read();
				Trg.allocate();
				change_state(S_EX);
			}
		// No space-check, so one will be inserted.
		S_EX: {
			exec();
			change_state(S_MM);
		}
		S_MM: { 
			change_state(S_WB); 
		}
		// No need for a space-check, since S_WBp maps to the same stage.
		S_WB: if (Trg.can_write()) {
				write_ops();
				change_state(S_WBp);
			}
		S_WBp:{
			change_state(S_INIT);
		}
    };
  }

}
