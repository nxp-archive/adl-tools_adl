in22.uadl:10: warning: Instructions access no data memory
P (for architecture P):
  First-level instruction memory:  L1i

  Fetch Unit:  Fetcher
    Fetch Memory:  L1i
    Entries     :  2
    Entry Size  :  4
    Fetch Sizes :  8 4 

  Pipeline Stage:  mEX
    Size          :  1
    Bandwidth     :  1
    Rigid         :  0
    Scheduler        :  dependent
    Is issue stage:  0
		Shared           :  0
  Pipeline Stage:  mID
    Size          :  1
    Bandwidth     :  1
    Rigid         :  0
    Scheduler        :  dependent
    Is issue stage:  0
		Shared           :  0
  Pipeline Stage:  mWB
    Size          :  1
    Bandwidth     :  1
    Rigid         :  0
    Scheduler        :  dependent
    Is issue stage:  0
		Shared           :  0

  Register:  Bar
    ID        :  0
    Size      :  1
    Width     :  32
    Latency   :  0
    Is aliased:  0
  Register:  Foo
    ID        :  1
    Size      :  1
    Width     :  32
    Latency   :  0
    Is aliased:  0
  Register File:  GPR
    ID        :  3
    Size      :  32
    Width     :  32
    Latency   :  0
    Is aliased:  0
  Register:  PC
    ID        :  2
    Size      :  1
    Width     :  32
    Latency   :  0
    Is aliased:  0

  Memory:  Mem
    Total address bandwidth: 1
    Total data bandwidth:    1
    Data width:              32
    Max requests:            1
    Read latency :  1
    Write latency:  1
    Read-only    :  0

  Cache:  L1d
    Total address bandwidth: 1
    Total data bandwidth:    1
    Data width:              32
    Max requests:            1
    Next-level memory             :  Mem
    critical_word_first        :  1
    invalidate_latency         :  1
    linefill_access_width      :  64
    linefill_lock_holdoff_cycle:  1
    linefill_read_latency      :  1
    linefill_write_latency     :  1
    lock_latency               :  1
    read_hit_latency           :  1
    unlock_latency             :  1
    write_hit_latency          :  1
    write_mode                 :  WriteThrough
    zero_latency               :  1
  Cache:  L1i
    Total address bandwidth: 1
    Total data bandwidth:    1
    Data width:              32
    Max requests:            1
    Next-level memory             :  Mem
    critical_word_first        :  1
    invalidate_latency         :  1
    linefill_access_width      :  64
    linefill_lock_holdoff_cycle:  1
    linefill_read_latency      :  1
    linefill_write_latency     :  1
    lock_latency               :  1
    read_hit_latency           :  1
    unlock_latency             :  1
    write_hit_latency          :  1
    write_mode                 :  WriteThrough
    zero_latency               :  1

  Pipeline Scheduling Order:   mWB mEX mID 

  Machine:  normal
    Initial state:  S_INIT
    States       :  S_EX S_ID S_IDp S_WB
    Default State Bindings:
      S_ID = mID
      S_IDp = mID
      S_EX = mEX
      S_WB = mWB

  Instruction Class:  a
    Instructions:
      add
        RA = (src: GPR(RA)), 
        Src = (src: GPR(RA)), (src: GPR(RB)), 
        Trg = (trg: GPR(RT)), 
      addi
        RA = (src: GPR(RA)?), 
        Src = (src: GPR(RA)?), 
        Trg = (trg: GPR(RT)), 
      addic
        RA = (src: GPR(RA)), 
        Src = (src: GPR(RA)), 
        Trg = (trg: GPR(RT)), 

    Attributes:  Bar, Foo,
    Instruction Attributes:  classA,
		Commit On Exception:  1
    Machine    :  normal
    State Bindings:
      S_ID = mID
      S_IDp = mID
      S_EX = mEX
      S_WB = mWB
    State actions:
      S_EX:
        To-States:  S_INIT 
        From-States:  S_ID S_IDp S_INIT 
        Action:
{
    exec (  ) ;
    L1i . write (  ) ;
    if ( isFooMode (  ) || out_bar (  ) ) {
        write_ops (  ) ;
    }
    change_state ( S_INIT ) ;
}

      S_ID:
        To-States:  S_IDp 
        From-States:  S_INIT 
        Action:
if ( mEX . has_space (  ) && isUserMode ( RA , 1 ) && Src . can_read (  ) ) {
    flush ( 2 ) ;
    Src . read (  ) ;
    change_state ( S_IDp ) ;
}

      S_IDp:
        To-States:  S_EX 
        From-States:  S_ID S_INIT 
        Action:
if ( mEX . has_space (  ) ) {
    L1i . send_write_request (  ) ;
    change_state ( S_EX ) ;
}

      S_INIT:
        To-States:  S_ID 
        Action:
if ( mID . has_space (  ) ) {
    change_state ( S_ID ) ;
}



Helper Functions:
  foo1:
 unsigned foo1 ( unsigned x1 ) {
    return x1 ;
}

  foo2:
 unsigned foo2 ( unsigned x1 , unsigned x2 ) {
    return x1 + x2 ;
}

  isFooMode:
 bool isFooMode (  ) {
    return ( Foo != 0 ) ;
}

  isUserMode:
 bool isUserMode ( unsigned i , unsigned j ) {
    return ( GPR ( i ) == j ) ;
}
