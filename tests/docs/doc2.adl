//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//

//
// A model with a simple MMU.
//

#import "mod1.adl"

define (arch = ppc_mmu) {

  blk = (x, y);

  attrs = (translation_attr,load,store,special);

  define (reg=FOOCTRL) {
  }

  define (reg=RESRV) {
  }

  define (reg=PID0) {
  }

  define (reg=PID1) {
  }

  define (reg=ESR) {
    """
    Exception syndrome register.
    """;
  }

  define (reg=HDBCR0) {
    """
    Hardware debug control register 0.
    """;

    define (field=REALMODE) {
      bits = 0;
    }
  }

  define (reg=MSR) {
    """
    Machine state register.
    """;
    define (field=PR) {
      bits = 9;
    }
    define (field=IR) {
      bits = 10;
    }
    define (field=DR) {
      bits = 11;
    }
  }

  define (reg=SRR0) {
    """
    Save-restore register 0.
    """;
  }

  define (reg=SRR1) {
    """
    Save-restore register 1.
    """;
  }

  define (reg=IVPR) {
    """
    Interrupt-vector prefix register.
    """;
  }

  define (reg=IVOR6) {
    """
    Interrupt-vector offset register 6.
    """;
  }

  define (reg=IVOR7) {
    """
    Interrupt-vector offset register 7.
    """;
  }

  define (reg=HitReg) {
    """
    Tracks MMU TlbCam hits.
    """;
  }

  define (reg=MAS0) {
    """
    Memory assist register 0.
    """;
    define (field=EPN) {
      bits=(0,23);
    }
    define (field=TID) {
      bits=(24,29);
    }
    define (field=V) {
      bits=30;
    }
    define (field=TS) {
      bits=31;
    }
  }

  define (reg=MAS1) {
    """
    Memory assist register 1.
    """;
    define (field=RPN) {
      bits=(0,23);
    }
    define (field=SIZE) {
      bits=(24,29);
    }
    attrs = doc_hidden;
  }

  define (reg=MAS2) {
    """
    Memory assist register 2.
    """;
    define (field=SX) {
      bits=0;
    }
    define (field=SW) {
      bits=1;
    }
    define (field=SR) {
      bits=2;
    }
    define (field=UX) {
      bits=3;
    }
    define (field=UW) {
      bits=4;
    }
    define (field=UR) {
      bits=5;
    }
    define (field=WIMG) {
      bits=(6,9);
      attrs=doc_hidden;
    }
    define (field=Set) {
      bits=(20,27);
    }
    define (field=Way) {
      bits=(28,31);
    }
  }

  defmod (regfile=SPR) {
    define (entry=62) { reg=ESR; }
    define (entry=100) { reg=HDBCR0; }
    define (entry=26) { reg=SRR0; }
    define (entry=27) { reg=SRR1; }
    define (entry=200) { reg=MAS0; }
    define (entry=201) { reg=MAS1; }
    define (entry=202) { reg=MAS2; }
  }

  //
  // Instructions.
  //

  define (instr=lwarx) {
    fields=(OPCD(31),RT,RA,RB,XO(20));
    attrs = load;
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);      var addr = b + GPR(RB);      GPR(RT) = Mem(addr,4);      RESRV = lastRealAddr();
    };
  }

  define (instr=mfmsr) {
    fields=(OPCD(31),RT,XO(83));
    action = {
      GPR(RT) = MSR;
    };
  }

  define (instr=mtmsr) {
    fields=(OPCD(31),RS,XO(146));
    action = {
      MSR = GPR(RS);
    };
  }

  // test docstrings when nesting multiple aliases
  define (instr=nest_test) {
    """This description should represent the entire family
    and appear at the top.""";
    fields=(OPCD);
    action={};
    blk = (x, y);
    doc_title = "n1";
    define (instr=n1) {
      """This description should be appended
      to that of the family.""";
      alias = nest_test(OPCD(20));
      syntax = ("n1");
      blk = x;
      doc_title_add = "(premium)";
    }
    define (instr=n2) {
      """This description should also be appended
      to that of the family.""";
      alias = nest_test(OPCD(21));
      syntax = ("n2");
      blk = y;
    }
  }

  // test identical docstrings when nesting multiple aliases
  define (instr=nest_test_2) {
    """This should not appear 3 times.""";
    fields=(OPCD);
    action={};
    define (instr=n3) {
      """This should not appear 3 times.""";
      alias = nest_test_2(OPCD(22));
      syntax = ("n3");
      doc_title = "n2"; // since both have this, it should become the family's title
    }
    define (instr=n4) {
      """This should not appear 3 times.""";
      alias = nest_test_2(OPCD(23));
      syntax = ("n4");
      doc_title = "n2";
    }
  }

  // test nesting of attributes; all should be displayed
  define (instr=nest_test_3) {
    attrs=(load);
    fields=(OPCD);
    action={};
    define (instr=n5) {
      alias = nest_test_3(OPCD(22));
      syntax = ("n5");
    }
    define (instr=n6) {
      alias = nest_test_3(OPCD(23));
      syntax = ("n6");
      attrs=(special);
    }
  }

  define (instr=rfi_family) {
    """This description should not appear in documentation.""";
    fields=(OPCD,RS,RA,RB,XO);
    blk = x;
    action = {
      MSR = SRR1;
      NIA = SRR0;
    };
    // test nesting a single alias
    define (instr=rfi) {
      """This description should override because it is a single son.""";
      fields=(OPCD(19),RS,RA,RB,XO(50));
      alias = rfi_family(OPCD(OPCD),RS(RS),RA(RA),RB(RB),XO(XO));
      syntax = ("rfi %f, %f, %f",RS,RA,RB);
    }
  }

  define (instr=tlbre) {
    fields=(OPCD(31),XO(946));
    action = {
      var set = MAS2.Set;
      var way = MAS2.Way;
      var t = TlbCam(set,way);
      
      MAS0.EPN  = t.EPN;
      MAS0.TID  = t.TID;
      MAS0.V    = t.V;
      MAS0.TS   = t.TS;

      MAS1.RPN  = t.RPN;
      MAS1.SIZE = t.SIZE;

      MAS2.SX   = t.SX;
      MAS2.SW   = t.SW;
      MAS2.SR   = t.SR;
      MAS2.UX   = t.UX;
      MAS2.UW   = t.UW;
      MAS2.UR   = t.UR;
      MAS2.WIMG = t.WIMG;
    };
  }

  define (instr=tlbwe) {
    fields=(OPCD(31),XO(978));
    action = {
      var set = MAS2.Set;
      var way = MAS2.Way;
      TlbCam_t t;
      
      t.EPN  = MAS0.EPN;
      t.TID  = MAS0.TID;
      t.V    = MAS0.V; 
      t.TS   = MAS0.TS;
                      
      t.RPN  = MAS1.RPN;
      t.SIZE = MAS1.SIZE;
                      
      t.SX   = MAS2.SX;
      t.SW   = MAS2.SW;
      t.SR   = MAS2.SR;
      t.UX   = MAS2.UX;
      t.UW   = MAS2.UW;
      t.UR   = MAS2.UR;
      t.WIMG = MAS2.WIMG;
            
      TlbCam(set,way) = t;
    };
  }

  // Special instruction:  This is used for simulation purposes and is
  // not a PPC instruction.
  define (instr=halt) {
    doc_title="Halt Instruction"; // test case-insensitive sort
    width=32;	
    fields=(OPCD(0));
    action = {
      halt();
    };
  }

  //
  // Decode miss handler.
  // 
  decode_miss = func (addr_t ea,unsigned) {
    ESR.set(4);
    raiseException(Program);
  };

  //
  // Program interrupt.
  // 
  define (exception=Program) {
    action = {
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR(0,15),IVOR6(16,31));
    };
  }

  define (exception=ProtectionFault) {
    action = {
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR(0,15),IVOR7(16,31));
    };
  }

  define (mmu) {

    both_enable = { return (HDBCR0.REALMODE() == 0); };

    define(lookup=TlbCam) {

      """
      Fully associative variable-sized page TLB.
      """;

      define (wayfield=TID) {
        bits = 6;
      }
      define (wayfield=SIZE) {
        bits = 6;
      }
      define (wayfield=V) {
        bits = 1;
      }
      define (wayfield=TS) {
        bits = 1;
      }
      define (wayfield=RPN) {
        bits = 24;
      }
      define (wayfield=EPN) {
        """
        Example documentation
string for an MMU field.
        """;
        bits = 24;
      }
      define (wayfield=SX) {
        bits=1;
       }
      define (wayfield=SW) {
        bits=1;
      }
      define (wayfield=SR) {
        bits=1;
      }
      define (wayfield=UX) {
        bits=1;
      }
      define (wayfield=UW) {
        bits=1;
      }
      define (wayfield=UR) {
        bits=1;
      }
      define (wayfield=WIMG) {
        bits = 4;
        attrs = translation_attr;
      }
      
      define (array) {
        entries = 16;
      }

      test = Compare(V,1);
      test = Compare(TS, ((Instr) ? MSR.IR : MSR.DR) );
      test = Compare(TID,0,PID0,PID1);      
      test = AddrComp(EPN);

      size      = SIZE;
      sizetype  = BitSize;
      sizeshift = 10;
      sizescale = 2;

      realpage = RPN;

      valid = { return (V != 0); };

      exec_perm = func(TlbCam_t t,addr_t,unsigned) {
        if ( ((MSR.PR == 0) ? t.SX : t.UX) == 0) {
          raiseException(ProtectionFault);
        }
      };

      load_perm = func (TlbCam_t t,addr_t,unsigned) {
        if ( ((MSR.PR == 0) ? t.SR : t.UR) == 0 ) {
          raiseException(ProtectionFault);
        }
      };

      store_perm = func (TlbCam_t t,addr_t,unsigned) {
        if ( ((MSR.PR == 0) ? t.SW : t.UW) == 0 ) {
          raiseException(ProtectionFault);
        }
      };

      hit = func(TransType tt,TlbCam_t t,addr_t a,unsigned) {
        HitReg = HitReg + 1;
      };

      miss = func(TransType tt,addr_t a,unsigned) {
        TlbCam_t t;
        t.RPN = a >> 10;
        t.SIZE = 4;
        return t;
      };

      reset = {
        // Reset state: One 4k translation at top of memory.  In this case,
        // it maps the top 4k to the bottom 4k.
        TlbCam_t t;
      
        t.EPN  = 0x3fffff;
        t.TID  = 0;
        t.V    = 1;
        t.TS   = 0;
                      
        t.RPN  = 0;
        t.SIZE = 1;
                      
        t.SX   = 1;
        t.SW   = 1;
        t.SR   = 1;

        t.UX   = 0;
        t.UW   = 0;
        t.UR   = 0;
        t.WIMG = 0;
            
        TlbCam(0,0) = t;
      };

    }

  }

  define (context = Foo ) {
    """
    Example context documentatino.
    """;
    regs = (NIA,CIA);

    num_contexts = 4;

    active = { return FOOCTRL.uint32(); };
  }

}

define (core = P) {
  archs = (minippc,ppc_mmu);
}
