//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//

//
// Test of extracting an operaion from the code using a label, and then
// transforming it.
//

define (arch = minippc) {

  attrs = (one,two,three);

  void setCrField0(bits<32> x,bits<32> y) {
    bits<4> r = 
      ( (x.signedLT(y)) ? 0x8 : 0) |
      ( (x.signedGT(y)) ? 0x4 : 0) |
      ( (x == y)        ? 0x2 : 0) ;
      
    CR(0,3) = r;    
  }

  void setXerField(bool ov, bool so, bool ca,const bits<32>& carry)
  {
    if (ov) { XER.OV = carry(0) ^ carry(1);}
    if (so) { XER.SO = XER.SO | XER.OV ;}
    if (ca) { XER.CA = carry(0);}
  }

  //
  // Registers.
  //

  define (reg=CIA) {
    """
Current instruction address.
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
Next instruction address.
    """;
    attrs = nia;
  }

  define (reg=CR) {
    define (field=CR0) { bits = (0,3); };
  }

  define (regfile=GPR) {
    """
General purpose registers.
    """;
    size = 32;
  }

  define (reg=XER) {
    """
      The overflow and carry register.
      """;
    width = 32;
    define (field=SO) { bits = 0; }
    define (field=OV) { bits = 1; }
    define (field=CA) { bits = 2; }
  }

  //
  // Instruction fields.
  //

  define (instrfield=Src1) { pseudo = true; width = 5; };
  define (instrfield=Src2) { pseudo = true; width = 5; };
  define (instrfield=Trg)  { pseudo = true; width = 5; };

  define (instrfield=OPCD) {
    """
Primary opcode.
    """;
    bits = (0,5);
  }

  attrs = (opcode,regop,immop);

  define (instrfield=XO) {
    """
Extended opcode.
    """;
    bits = (21,30);
    attrs = opcode;
  }

  define (instrfield=RA) {
    """
Field used to specify a General Purpose Register (GPR_) to be used as a source.
    """;
    bits = (11,15);
    attrs = regop;
  }
  define (instrfield=RB) {
    """
Field used to specify a General Purpose Register (GPR_) to be used as a source.
    """;
    bits = (16,20);
    attrs = regop;
  }
  define (instrfield=RT) {
    """
Field used to specify a General Purpose Register (GPR_) to be used as a target.
    """;
    bits = (6,10);
    attrs = regop;
  }
  define (instrfield=RS) {
    """
Field used to specify a General Purpose Register (GPR_) as a target.
    """;
    bits = (6,10);
    attrs = regop;
  }

  define (instrfield=D) {
    """
Immediate field used to specify a 16-bit signed two's complement integer
which is sign-extended to 64-bits.
    """;
    bits = (16,31);
    display = dec;
    is_signed = true;
    attrs = immop;
  }


  //
  // Instructions.
  //

  attrs = (a1,a2,a3,a4);

  // test docstrings when nesting multiple aliases
  define (instr=add_family) {
    """This description should represent the entire family
    and appear at the top.""";
    fields=(Src1,Src2,Trg);
    attrs = (a1,a2);
    action={
    doc_op :  { GPR(Trg) = GPR(Src1) + GPR(Src2); }
      setCrField0(GPR(Trg),0);
      setXerField(false/*ov*/,false/*so*/,true/*ca*/,0);
    };

    define (instr=add1) {
      """This description should be appended
      to that of the family.""";
      attrs = a3;
      fields=(OPCD(31),RT,RA,RB,XO(266));
      width = 32;
      alias = add_family(Src1(RA),Src2(RB),Trg(RT));
    }
    define (instr=add2) {
      """This description should also be appended
      to that of the family.""";
      fields=(OPCD(31),RT,RA,RB,XO(300));
      width = 32;
      alias = add_family(Src1(RA),Src2(RB),Trg(RT));
    }

  }

  defmod (instr=add_family) {
    define (aspect=A) {
      instr_pre_exec = true;
      action = {
        int j = 20;
      };
    }
  }

}

define (core = P) {
  """
Example documentation string- place overview information here.
""";
  archs = minippc;
}
