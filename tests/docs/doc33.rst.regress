=================
ADL Documentation
=================

.. contents:: Table of Contents
   :backlinks: entry
   :depth: 2

.. sectnum::

.. |ne|:  mathml:: ne
.. |le|:  mathml:: leq
.. |ge|:  mathml:: geq
.. |la|:  mathml:: wedge
.. |lo|:  mathml:: vee
.. |xor|: mathml:: oplus


.. _adl-internal-target-0:
Core: P
=======


.. _adl-internal-target-1:
Overview
--------

Example documentation string- place overview information here.



.. _adl-internal-target-2:
Registers
---------


.. _adl-internal-target-3:
*CIA*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">CIA</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Current instruction address.
  
  


.. _adl-internal-target-4:
*CR*
````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="12.5%" class="field">CR0<table class="subfield"><tr>
   <td class="subfield" width="25%">LT[0]</td>
   <td class="subfield" width="25%">GT[1]</td>
   <td class="subfield" width="25%">EQ[2]</td>
   <td class="subfield" width="25%">SO[3]</td>
   </tr></table>
   </td>
   <td colspan="2" width="12.5%" class="field">CR1<table class="subfield"><tr>
   <td class="subfield" width="25%">FX[4]</td>
   <td class="subfield" width="25%">FEX[5]</td>
   <td class="subfield" width="25%">VX[6]</td>
   <td class="subfield" width="25%">OX[7]</td>
   </tr></table>
   </td>
   <td colspan="2" width="12.5%" class="field">CR2</td>
   <td colspan="2" width="12.5%" class="field">CR3</td>
   <td colspan="2" width="12.5%" class="field">CR4</td>
   <td colspan="2" width="12.5%" class="field">CR5</td>
   <td colspan="2" width="12.5%" class="field">CR6</td>
   <td colspan="2" width="12.5%" class="field">CR7</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">3</td>
   <td class="lefteven">4</td><td class="righteven">7</td>
   <td class="leftodd">8</td><td class="rightodd">11</td>
   <td class="lefteven">12</td><td class="righteven">15</td>
   <td class="leftodd">16</td><td class="rightodd">19</td>
   <td class="lefteven">20</td><td class="righteven">23</td>
   <td class="leftodd">24</td><td class="rightodd">27</td>
   <td class="lefteven">28</td><td class="righteven">31</td>
   </tr>
   </table>
   
Description:

  The condition register.
  
  

Fields:
  .. list-table::
     :class: attributes
     :widths: 15 10 40
     :header-rows: 1
  
     * - Field
       - Range
       - Description
     * - CR
       -  [4bits x 8] 
       - 
     * - LT
       -  [0] 
       - 
             Negative (LT)- This bit is set when the result is negative.
     
     * - GT
       -  [1] 
       - 
             Positive (GT)- This bit is set when the result is positive (and not zero).
     
     * - EQ
       -  [2] 
       - 
             Zero (EQ)- This bit is set when the result is zero.
     
     * - SO
       -  [3] 
       - 
             Summary overflow (SO)- This is a copy of the final state of XER(SO) at the
             completion of the instruction.
     
     * - FX
       -  [4] 
       - 
             Floating point exception (FX). Copy of the final state of FPSCR(FX) at the
             completion of the instruction.
     
     * - FEX
       -  [5] 
       - 
             Floating-point enabled exception (FEX). Copy of the final state of FPSCR(FEX)
             at the completion of the instruction.
     
     * - VX
       -  [6] 
       - 
             Floating-point invalid exception (VX). Copy of the final state of FPSCR(CX) at
             the completion of the instruction.
     
     * - OX
       -  [7] 
       - 
             Floating-point overflow exception (OX). Copy of the final state of FPSCR(OX) at
             the completion of the instruction.
     


.. _adl-internal-target-5:
*CTR*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">CTR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  The counter register.
  
  

On a read
  .. code_block:: cpp
     :color:
  
    {
        return CTR / 2 ;
    }
    
On a write
  .. code_block:: cpp
     :color:
  
    func ( bits < 32 > x ) {
        CTR = x * 2 ;
    }
    

.. _adl-internal-target-6:
*ESR*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">ESR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Exception syndrome register.
  
  


.. _adl-internal-target-7:
*IVOR6*
```````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">IVOR6</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Interrupt-vector offset register 6.
  
  


.. _adl-internal-target-8:
*IVPR*
``````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">IVPR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Interrupt-vector prefix register.
  
  


.. _adl-internal-target-9:
*MSR*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">MSR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Machine state register.
  
  


.. _adl-internal-target-10:
*NIA*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">NIA</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Next instruction address.
  
  


.. _adl-internal-target-11:
*SRR0*
``````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">SRR0</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Save-restore register 0.
  
  


.. _adl-internal-target-12:
*SRR1*
``````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">SRR1</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Save-restore register 1.
  
  


.. _adl-internal-target-13:
Register Files
--------------


.. _adl-internal-target-14:
*GPR*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">GPR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Number of registers in file:  32

Description:

  General purpose registers.
  
  


.. _adl-internal-target-15:
*SPR*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">SPR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Number of registers in file:  1024

.. list-table:: Constituent Registers
   :class: sparsecontents
   :widths: 10 40
   :header-rows: 1

   * - Index
     - Register Usage
   * - 9
     - `CTR <#adl-internal-target-5>`__
   * - 26
     - `SRR0 <#adl-internal-target-11>`__
   * - 27
     - `SRR1 <#adl-internal-target-12>`__
   * - 62
     - `ESR <#adl-internal-target-6>`__
   

.. _adl-internal-target-16:
Instruction Fields
------------------

.. raw:: html

   <a href="#ifield-section-d">&nbsp;&nbsp;D&nbsp;&nbsp;</a> <a href="#ifield-section-o">&nbsp;&nbsp;O&nbsp;&nbsp;</a> <a href="#ifield-section-r">&nbsp;&nbsp;R&nbsp;&nbsp;</a> <a href="#ifield-section-s">&nbsp;&nbsp;S&nbsp;&nbsp;</a> <a href="#ifield-section-u">&nbsp;&nbsp;U&nbsp;&nbsp;</a> <a href="#ifield-section-x">&nbsp;&nbsp;X&nbsp;&nbsp;</a> 


.. _ifield-section-d:


.. _adl-internal-target-17:
*D*
```


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 16
   * - Bits
     - [16,31] 

Description:

  Immediate field used to specify a 16-bit signed two's complement integer
  which is sign-extended to 64-bits.
  
  


.. _ifield-section-o:


.. _adl-internal-target-18:
*OPCD*
``````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 6
   * - Bits
     - [0,5] 

Description:

  Primary opcode.
  
  


.. _ifield-section-r:


.. _adl-internal-target-19:
*RA*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 5
   * - Bits
     - [11,15] 

Description:

  Field used to specify a General Purpose Register (GPR_) to be used as a source.
  
  


.. _adl-internal-target-20:
*RB*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 5
   * - Bits
     - [16,20] 

Description:

  Field used to specify a General Purpose Register (GPR_) to be used as a source.
  
  


.. _adl-internal-target-21:
*RS*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 5
   * - Bits
     - [6,10] 

Description:

  Field used to specify a General Purpose Register (GPR_) as a target.
  
  


.. _adl-internal-target-22:
*RT*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 5
   * - Bits
     - [6,10] 

Description:

  Field used to specify a General Purpose Register (GPR_) to be used as a target.
  
  


.. _ifield-section-s:


.. _adl-internal-target-23:
*SI*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 16
   * - Bits
     - [16,31] 

Description:

  Signed immediate field for arithmetic operations.
  
  


.. _ifield-section-u:


.. _adl-internal-target-24:
*UI*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 16
   * - Bits
     - [16,31] 

Description:

  Unsigned immediate field for arithmetic operations.
  
  


.. _ifield-section-x:


.. _adl-internal-target-25:
*XO*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 10
   * - Bits
     - [21,30] 

Description:

  Extended opcode.
  
  


.. _adl-internal-target-26:
Instructions
------------


.. _adl-internal-target-27:
*add RT, RA, RB*
````````````````

Action:
  
  .. code_block:: cpp
     :color:
  
    {
        GPR ( RT ) = GPR ( RA ) + GPR ( RB ) ;
    }
    
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-14>`__ (RA)
       - Entire Register
       - 
     * - `GPR <#adl-internal-target-14>`__ (RB)
       - Entire Register
       - 
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-14>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">31&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="15.625%" class="field">RB</td>
     <td colspan="2" width="31.25%" class="field">266&nbsp;XO</td>
     <td width="3.125%" class="reserved" title="Reserved">0</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">20</td>
     <td class="leftodd">21</td><td class="rightodd">30</td>
     <td class="singleeven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-28:
*addi RT, RA, SI*
`````````````````

Action:
  
  .. code_block:: cpp
     :color:
  
    {
         var si = signExtend ( SI , 32 ) ;
        if ( RA == 0 ) {
            GPR ( RT ) = si ;
        } else {
            GPR ( RT ) = GPR ( RA ) + si ;
        }
    }
    
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-14>`__ (RA)
       - Entire Register
       - Conditional
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-14>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">14&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="50%" class="field">SI</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-29:
*addic. RT, RA, SI*
```````````````````

Action:
  
  .. code_block:: cpp
     :color:
  
    {
         var si = signExtend ( SI , 32 ) ;
        GPR ( RT ) = GPR ( RA ) + si ;
        setCrField ( 0 , GPR ( RT ) , 0 ) ;
    }
    
  The code above uses the following routines (directly or indirectly): `setCrField <#adl-internal-target-30>`__
  
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `CR <#adl-internal-target-4>`__
       - Entire Register
       - 
     * - `GPR <#adl-internal-target-14>`__ (RA)
       - Entire Register
       - 
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `CR <#adl-internal-target-4>`__
       - Entire Register
       - 
     * - `GPR <#adl-internal-target-14>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">13&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="50%" class="field">SI</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-31:
*addis RT, RA, SI*
``````````````````

Action:
  
  .. code_block:: cpp
     :color:
  
    {
         bits < 32 > si = SI ;
        if ( RA == 0 ) {
            GPR ( RT ) = si << 16 ;
        } else {
            GPR ( RT ) = GPR ( RA ) + ( si << 16 ) ;
        }
    }
    
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-14>`__ (RA)
       - Entire Register
       - Conditional
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-14>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">15&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="50%" class="field">SI</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-32:
*lwz RT,D(RA)*
``````````````

Action:
  
  .. code_block:: cpp
     :color:
  
    {
         var b = ( RA == 0 ) ? 0 : GPR ( RA ) ;
         var addr = b + D ;
        GPR ( RT ) = Mem ( addr , 4 ) ;
    }
    
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-14>`__ (RA)
       - Entire Register
       - 
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-14>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">32&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="50%" class="field">D</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-33:
External Resources
------------------


.. _adl-internal-target-34:
*bar*
`````

Object type:  Bar

Internally defined.

Constructed With:  1 2 3 


.. _adl-internal-target-35:
*foo*
`````

Object type:  Foo

Externally defined.


.. _adl-internal-target-36:
Helper Functions
----------------

Built-in helper routines are documented in `the ADL user manual`_.

.. _`the ADL user manual`: http://cad.freescale.net/trac/adl/chrome/site/adl-language-reference.html#global-functions

In addition, the following helper routines are defined for P:


.. _adl-internal-target-30:
*setCrField*
````````````

  
  .. code_block:: cpp
     :color:
  
     void setCrField ( bits < 3 > field , bits < 32 > x , bits < 32 > y ) {
         var cr = CR ;
         bits < 4 > r = ( ( x . signedLT ( y ) ) ? 0x8 : 0 ) | ( ( x . signedGT ( y ) ) ? 0x4 : 0 ) | ( ( x == y ) ? 0x2 : 0 ) ;
        cr . set ( 4 * field , 4 * field + 3 , r ) ;
        CR = cr ;
    }
    

.. _adl-internal-target-37:
*setcrfield*
````````````

  
  .. code_block:: cpp
     :color:
  
     void setcrfield ( bits < 3 > field , bits < 32 > x , bits < 32 > y ) {
         var cr = CR ;
         bits < 4 > r = ( ( x . signedLT ( y ) ) ? 0x8 : 0 ) | ( ( x . signedGT ( y ) ) ? 0x4 : 0 ) | ( ( x == y ) ? 0x2 : 0 ) ;
        cr . set ( 4 * field , 4 * field + 3 , r ) ;
        CR = cr ;
    }
    
