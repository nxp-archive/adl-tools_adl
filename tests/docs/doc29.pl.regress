$data = {
"cores" => {
"P" => {
"doc" => <<DATA
Example documentation string- place overview information here.

DATA
,
"bit_endianness" => "little",
"RaMask" => {
"initial" => "0xffffffff",
"constant" => 1,
},
"EaMask" => {
"initial" => "0xffffffff",
"constant" => 1,
},
"regs" => {
"CIA" => {
"doc" => <<DATA
Current instruction address.
    
DATA
,
"width" => 32,
"attributes" => {
"cia" => "",
},
"shared" => 0,
},
"NIA" => {
"doc" => <<DATA
Next instruction address.
    
DATA
,
"width" => 32,
"attributes" => {
"nia" => "",
},
"shared" => 0,
},
"SP" => {
"width" => 32,
"shared" => 0,
},
"SR" => {
"width" => 32,
"fields" => {
"C" => {
"bits" => [
[
0,
0,
],
],
},
"LF" => {
"bits" => [
[
30,
27,
],
],
},
"OVF" => {
"bits" => [
[
10,
10,
],
],
},
"P0" => {
"bits" => [
[
1,
1,
],
],
},
"P1" => {
"bits" => [
[
31,
31,
],
],
},
"P2" => {
"bits" => [
[
30,
30,
],
],
},
"P3" => {
"bits" => [
[
29,
29,
],
],
},
"P4" => {
"bits" => [
[
28,
28,
],
],
},
"P5" => {
"bits" => [
[
27,
27,
],
],
},
"RF" => {
"bits" => [
[
13,
13,
],
],
},
"RM" => {
"bits" => [
[
3,
3,
],
],
},
"S" => {
"bits" => [
[
6,
6,
],
],
},
"SAT" => {
"bits" => [
[
11,
11,
],
],
},
"SCM" => {
"bits" => [
[
8,
8,
],
[
5,
4,
],
],
},
"SM" => {
"bits" => [
[
2,
2,
],
],
},
"SM2" => {
"bits" => [
[
7,
7,
],
],
},
"T" => {
"bits" => [
[
1,
1,
],
],
},
"W20" => {
"bits" => [
[
12,
12,
],
],
},
},
"reserved_mask" => "0b00000111111111111100001000000000",
"shared" => 0,
},
},
"regfiles" => {
"D" => {
"doc" => <<DATA
General purpose registers.
    
DATA
,
"width" => 32,
"size" => 32,
"shared" => 0,
},
},
"instrfields" => {
"OPCD" => {
"doc" => <<DATA
Primary opcode.
    
DATA
,
"bits" => [
[
5,
0,
],
],
"width" => 6,
"size" => 6,
"shift" => 0,
"offset" => 0,
"mask" => "0x3f",
"type" => "imm",
},
"RA" => {
"doc" => <<DATA
Field used to specify a General Purpose Register (D_) to be used as a source.
    
DATA
,
"bits" => [
[
15,
11,
],
],
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0xf800",
"type" => "imm",
},
"RB" => {
"doc" => <<DATA
Field used to specify a General Purpose Register (D_) to be used as a source.
    
DATA
,
"bits" => [
[
20,
16,
],
],
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0x1f0000",
"type" => "imm",
},
"RC" => {
"doc" => <<DATA
Field used to specify a General Purpose Register (D_) to be used as a source.
    
DATA
,
"bits" => [
[
25,
21,
],
],
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0x3e00000",
"type" => "imm",
},
"RS" => {
"doc" => <<DATA
Field used to specify a General Purpose Register (D_) as a target.
    
DATA
,
"bits" => [
[
10,
6,
],
],
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0x7c0",
"type" => "imm",
},
"RT" => {
"doc" => <<DATA
Field used to specify a General Purpose Register (D_) to be used as a target.
    
DATA
,
"bits" => [
[
10,
6,
],
],
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0x7c0",
"type" => "imm",
},
"Src1" => {
"pseudo" => 1,
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0x0",
"type" => "imm",
},
"Src2" => {
"pseudo" => 1,
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0x0",
"type" => "imm",
},
"Src3" => {
"pseudo" => 1,
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0x0",
"type" => "imm",
},
"Subtraction" => {
"pseudo" => 1,
"width" => 1,
"size" => 1,
"shift" => 0,
"offset" => 0,
"mask" => "0x0",
"type" => "imm",
},
"Trg" => {
"pseudo" => 1,
"width" => 5,
"size" => 5,
"shift" => 0,
"offset" => 0,
"mask" => "0x0",
"type" => "imm",
},
"XO" => {
"doc" => <<DATA
Extended opcode.
    
DATA
,
"bits" => [
[
30,
21,
],
],
"width" => 10,
"size" => 10,
"shift" => 0,
"offset" => 0,
"mask" => "0x7fe00000",
"type" => "imm",
},
},
"instrs" => {
"foo_family" => {
"syntax" => "foo_family Src1, Src2, Src3, Trg, Subtraction",
"dsyntax" => "foo_family ${Src1}, ${Src2}, ${Src3}, ${Trg}, ${Subtraction}",
"fields" => {
"Src1" => "",
"Src2" => "",
"Src3" => "",
"Trg" => "",
"Subtraction" => "",
},
"action" => <<DATA
{
     sbits < 16 > src1 = D ( Src1 ) , src2 = D ( Src2 ) ;
    {
        src1 <<= 1 ;
        src2 += 10 ;
    }
    D ( Trg ) = concat ( src1 , src2 ) ;
}
DATA
,
"disassemble" => 1,
"extracted-doc-op" => <<DATA

Trg = { ( Src1 << 1 ) , ( Src2 + 10 ) } ;
DATA
,
"inputs" => [
"D(Src1)",
"D(Src2)",
],
"outputs" => [
"D(Trg)",
],
},
"f1" => {
"width" => 32,
"syntax" => "f1 RC, RB, RA, RT",
"dsyntax" => "f1 ${RC}, ${RB}, ${RA}, ${RT}",
"fields" => {
"RC" => "",
"RB" => "",
"RA" => "",
"RT" => "",
"OPCD" => 31,
},
"aliases" => {
"foo_family" => {
"sources" => [
"source" => {
"field" => "Src1",
"value" => "RA",
},
"source" => {
"field" => "Src2",
"value" => "RB",
},
],
"destinations" => [
"destination" => {
"field" => "Trg",
"value" => "RT",
},
],
"miscs" => [
"misc" => {
"field" => "Src3",
"value" => "RC",
},
"misc" => {
"field" => "Subtraction",
"value" => 0,
},
],
"parent_action" => <<DATA
{
     sbits < 16 > src1 = D ( RA ) , src2 = D ( RB ) ;
    {
        src1 <<= 1 ;
        src2 += 10 ;
    }
    D ( RT ) = concat ( src1 , src2 ) ;
}
DATA
,
"extracted-doc-op" => <<DATA

RT = { ( RA << 1 ) , ( RB + 10 ) } ;
DATA
,
},
},
"parent" => "foo_family",
"disassemble" => 1,
"inputs" => [
"D(RA)",
"D(RB)",
],
"outputs" => [
"D(RT)",
],
},
},
"core-level-hooks" => {
"decode-miss" => <<DATA

DATA
,
"pre-cycle" => <<DATA

DATA
,
"post-cycle" => <<DATA

DATA
,
"pre-fetch" => <<DATA

DATA
,
"post-fetch" => <<DATA

DATA
,
"post-exec" => <<DATA

DATA
,
"post-asm" => <<DATA

DATA
,
"post-packet-asm" => <<DATA

DATA
,
"post-packet" => <<DATA

DATA
,
"active-watch" => <<DATA

DATA
,
"instr-table-watch" => <<DATA

DATA
,
},
"asm_config" => {
"comments" => [
"#",
],
"line_comments" => [
"#",
],
},
},
},
"systems" => {
},
};

