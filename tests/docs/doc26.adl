//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//

//
// More tests of expression expansion, this time with operation transforms as well.
//

define (arch = minippc) {

  attrs = (one,two,three);

  bit_endianness = little;  

  //
  // Registers.
  //

  define (reg=CIA) {
    """
Current instruction address.
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
Next instruction address.
    """;
    attrs = nia;
  }

  define (regfile=D) {
    """
General purpose registers.
    """;
    size = 32;
  }

  define (reg=SR) {
    define (field = C)
      {
        bits=0;
      }
    define (field = (T,P0))
      {
        bits=1;
      }
    define (field = SM)
      {
        bits=2;
      }
    define (field = RM)
      {
        bits=3;
      }
    define (field = SCM)
      {
        bits=(8,5,4);
      }
    define (field = S)
      {
        bits=6;
      }
    define (field = SM2)
      {
        bits=7;
      }
    define (field = OVF)
      {
        bits=10;
      }
    define (field = SAT)
      {
        bits=11;
      }

    define (field = W20)
      {
        bits=12;
      }
    define (field = RF)
      {
        bits=13;
      }
    define (field = P5)
      {
        bits=27;
      }
    define (field = P4)
      {
        bits=28;
      }
    define (field = P3)
      {
        bits=29;
      }
    define (field = P2)
      {
        bits=30;
      }
    define (field = P1)
      {
        bits=31;
      }
    define (field =LF)
      {
        bits = (30,27);
      }
  }

  define (reg=SP) {}

  //
  // Instruction fields.
  //

  define (instrfield=Src1) { pseudo = true; width = 5; };
  define (instrfield=Src2) { pseudo = true; width = 5; };
  define (instrfield=Src3) { pseudo = true; width = 5; };
  define (instrfield=Trg)  { pseudo = true; width = 5; };

  define (instrfield=Subtraction)
    {
      width = 1;
      parm = true;
    }

  define (instrfield=OPCD) {
    """
Primary opcode.
    """;
    bits = (5,0);
  }

  define (instrfield=XO) {
    """
Extended opcode.
    """;
    bits = (30,21);
  }

  define (instrfield=RA) {
    """
Field used to specify a General Purpose Register (D_) to be used as a source.
    """;
    bits = (15,11);
  }
  define (instrfield=RB) {
    """
Field used to specify a General Purpose Register (D_) to be used as a source.
    """;
    bits = (20,16);
  }
  define (instrfield=RC) {
    """
Field used to specify a General Purpose Register (D_) to be used as a source.
    """;
    bits = (25,21);
  }
  define (instrfield=RT) {
    """
Field used to specify a General Purpose Register (D_) to be used as a target.
    """;
    bits = (10,6);
  }
  define (instrfield=RS) {
    """
Field used to specify a General Purpose Register (D_) as a target.
    """;
    bits = (10,6);
  }

  //
  // Instructions.
  //

  attrs = (a1,a2,a3,a4);

  bits <32> fp_fusedmpy (bits <32> src1,bits <32>  src2 ,bits <32>  src3 , bool addition)
  {
    if (addition) {
      return src1 + src2 * src3;
    } else {
      return src1 - src2 * src3;
    }
  }

  bits<32> ABS20(bits<32> src)
  {
    return src;
  }

  void get(int a1,bits<32> *r1,int a2,bits<32> *r2,bool)
  {
  }

  bits<32> f_inst_rnd_mpy(sbits<32> x) {}

  
  // Make sure that deliberately empty blocks parse correctly.
  define (instr=ld_family) {
    fields=(Src1,Src2,Src3,Trg,Subtraction);


   action =
     {
       bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)Src1;
       bits <64> mem_data = Mem(eff_mem_add,8);
       D(Trg).WL = signExtend(mem_data(15,0), 20);
       D(Trg).WH = signExtend(mem_data(31,16), 20);
       D(Trg).WL = signExtend(mem_data(47,32), 20);
       D(Trg).WH = signExtend(mem_data(63,48), 20);
     };

    define (instr=ld1) {
      fields=(OPCD(31),RT,RA,RB,RC);
      width = 32;
      alias = ld_family(Src1(RA),Src2(RB),Src3(RC),Trg(RT),Subtraction(0));
    }
  }

  define (instr=st_family) {
    fields=(Src1,Src2,Src3,Trg,Subtraction);


   action =
     {
       bits<32> eff_mem_add = (RA) + D(Src1);
       bits <16> mem_data = concat(D(Src2).HL, D(Src3).LL);
       Mem(eff_mem_add,2)= mem_data;
     };

    define (instr=st1) {
      fields=(OPCD(32),RT,RA,RB,RC);
      width = 32;
      alias = st_family(Src1(RA),Src2(RB),Src3(RC),Trg(RT),Subtraction(0));
    }
  }

}

define (core = P) {
  """
Example documentation string- place overview information here.
""";
  archs = minippc;
}
