=================
ADL Documentation
=================

.. contents:: Table of Contents
   :backlinks: entry
   :depth: 2

.. sectnum::

.. |ne|:  mathml:: ne
.. |le|:  mathml:: leq
.. |ge|:  mathml:: geq
.. |la|:  mathml:: wedge
.. |lo|:  mathml:: vee
.. |xor|: mathml:: oplus


.. _adl-internal-target-0:
Core: foo
=========


.. _adl-internal-target-1:
Registers
---------


.. _adl-internal-target-2:
*CIA*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">CIA</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Current instruction address.
  
  


.. _adl-internal-target-3:
*CR*
````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">CR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  The condition register.
  
  


.. _adl-internal-target-4:
*ESR*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">ESR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Exception syndrome register.
  
  


.. _adl-internal-target-5:
*IVOR6*
```````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">IVOR6</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Interrupt-vector offset register 6.
  
  


.. _adl-internal-target-6:
*IVPR*
``````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">IVPR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Interrupt-vector prefix register.
  
  


.. _adl-internal-target-7:
*MSR*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">MSR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Machine state register.
  
  


.. _adl-internal-target-8:
*NIA*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">NIA</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Next instruction address.
  
  


.. _adl-internal-target-9:
*PREG*
``````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">PREG</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   

.. _adl-internal-target-10:
*SRR0*
``````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">SRR0</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Save-restore register 0.
  
  


.. _adl-internal-target-11:
*SRR1*
``````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">SRR1</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Description:

  Save-restore register 1.
  
  


.. _adl-internal-target-12:
Register Files
--------------


.. _adl-internal-target-13:
*GPR*
`````


.. raw:: html

   <table class="field">
   <tr><td colspan="2" width="100%" class="field">GPR</td>
   </tr>
   <tr>
   <td class="leftodd">0</td><td class="rightodd">31</td>
   </tr>
   </table>
   
Number of registers in file:  32

Description:

  General purpose registers.
  
  


.. _adl-internal-target-14:
Instruction Fields
------------------

.. raw:: html

   <a href="#ifield-section-o">&nbsp;&nbsp;O&nbsp;&nbsp;</a> <a href="#ifield-section-r">&nbsp;&nbsp;R&nbsp;&nbsp;</a> <a href="#ifield-section-s">&nbsp;&nbsp;S&nbsp;&nbsp;</a> <a href="#ifield-section-x">&nbsp;&nbsp;X&nbsp;&nbsp;</a> 


.. _ifield-section-o:


.. _adl-internal-target-15:
*OPCD*
``````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 6
   * - Bits
     - [0,5] 

Description:

  Primary opcode.
  
  


.. _ifield-section-r:


.. _adl-internal-target-16:
*RA*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 5
   * - Bits
     - [11,15] 

Description:

  Field used to specify a General Purpose Register to be used as a source.
  
  


.. _adl-internal-target-17:
*RB*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 5
   * - Bits
     - [16,20] 

Description:

  Field used to specify a General Purpose Register to be used as a source.
  
  


.. _adl-internal-target-18:
*RS*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 5
   * - Bits
     - [6,10] 

Description:

  Field used to specify a General Purpose Register as a target.
  
  


.. _adl-internal-target-19:
*RT*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 5
   * - Bits
     - [6,10] 

Description:

  Field used to specify a General Purpose Register to be used as a target.
  
  


.. _ifield-section-s:


.. _adl-internal-target-20:
*SI*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 16
   * - Bits
     - [16,31] 

Description:

  Signed immediate field for arithmetic operations.
  
  


.. _ifield-section-x:


.. _adl-internal-target-21:
*XO*
````


.. list-table::
   :class: attributes
   :widths: 10 8
   :header-rows: 0

   * - Size
     - 10
   * - Bits
     - [21,30] 

Description:

  Extended opcode.
  
  


.. _adl-internal-target-22:
Instructions
------------


.. _adl-internal-target-23:
*add RT, RA, RB*
````````````````

Action:
  
  .. code_block:: cpp
     :color:
  
    {
        GPR ( RT ) = GPR ( RA ) + GPR ( RB ) ;
    }
    
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-13>`__ (RA)
       - Entire Register
       - 
     * - `GPR <#adl-internal-target-13>`__ (RB)
       - Entire Register
       - 
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-13>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">31&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="15.625%" class="field">RB</td>
     <td colspan="2" width="31.25%" class="field">266&nbsp;XO</td>
     <td width="3.125%" class="reserved" title="Reserved">0</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">20</td>
     <td class="leftodd">21</td><td class="rightodd">30</td>
     <td class="singleeven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-24:
*addi RT, RA, SI*
`````````````````

Description:
  
  If RA=0, the sign extended value of the SI field is placed into GPR(RT)
  
  
  
Action:
  
  .. code_block:: cpp
     :color:
  
    {
        if ( RA == 0 ) {
            GPR ( RT ) = signExtend ( SI , 32 ) ;
        } else {
            GPR ( RT ) = GPR ( RA ) + signExtend ( SI , 32 ) ;
        }
    }
    
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-13>`__ (RA)
       - Entire Register
       - Conditional
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-13>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">14&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="50%" class="field">SI</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-25:
*addic. RT, RA, SI*
```````````````````

Action:
  
  .. code_block:: cpp
     :color:
  
    {
        GPR ( RT ) = GPR ( RA ) + signExtend ( SI , 32 ) ;
        setCrField ( 0 , GPR ( RT ) , 0 ) ;
    }
    
  The code above uses the following routines (directly or indirectly): `setCrField <#adl-internal-target-26>`__
  
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `CR <#adl-internal-target-3>`__
       - Entire Register
       - 
     * - `GPR <#adl-internal-target-13>`__ (RA)
       - Entire Register
       - 
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `CR <#adl-internal-target-3>`__
       - Entire Register
       - 
     * - `GPR <#adl-internal-target-13>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">13&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="50%" class="field">SI</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-27:
*addis RT, RA, SI*
``````````````````

Action:
  
  .. code_block:: cpp
     :color:
  
    {
        if ( RA == 0 ) {
            GPR ( RT ) = signExtend ( concat ( SI , zero ( 16 ) ) , 32 ) ;
        } else {
            GPR ( RT ) = GPR ( RA ) + signExtend ( concat ( SI , zero ( 16 ) ) , 32 ) ;
        }
    }
    
Affect instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-13>`__ (RA)
       - Entire Register
       - Conditional
  
Affected by instruction:
  .. list-table::
     :class: attributes
     :widths: 10 15 10
     :header-rows: 1
  
     * - Register
       - Fields
       - Details
     * - `GPR <#adl-internal-target-13>`__ (RT)
       - Entire Register
       - 
  
Encoding:
  
  .. raw:: html
  
     <table class="field">
     <tr><td colspan="2" width="18.75%" class="field">15&nbsp;OPCD</td>
     <td colspan="2" width="15.625%" class="field">RT</td>
     <td colspan="2" width="15.625%" class="field">RA</td>
     <td colspan="2" width="50%" class="field">SI</td>
     </tr>
     <tr>
     <td class="leftodd">0</td><td class="rightodd">5</td>
     <td class="lefteven">6</td><td class="righteven">10</td>
     <td class="leftodd">11</td><td class="rightodd">15</td>
     <td class="lefteven">16</td><td class="righteven">31</td>
     </tr>
     </table>
     

.. _adl-internal-target-28:
Exceptions
----------


.. _adl-internal-target-29:
*Program Exception*
```````````````````

Priority:  0

Action taken when exception occurs:
  
  .. code_block:: cpp
     :color:
  
    {
        SRR0 = CIA ;
        SRR1 = MSR ;
        MSR = 0 ;
        NIA = concat ( IVPR ( 0 , 15 ) , IVOR6 ( 16 , 31 ) ) ;
    }
    

.. _adl-internal-target-30:
Helper Functions
----------------

Built-in helper routines are documented in `the ADL user manual`_.

.. _`the ADL user manual`: http://cad.freescale.net/trac/adl/chrome/site/adl-language-reference.html#global-functions

In addition, the following helper routines are defined for foo:


.. _adl-internal-target-31:
*clearCR*
`````````

  
  .. code_block:: cpp
     :color:
  
     void clearCR (  ) {
        CR = 0 ;
    }
    

.. _adl-internal-target-26:
*setCrField*
````````````

  
  .. code_block:: cpp
     :color:
  
     void setCrField ( int field , int x , int y ) {
         unsigned r = ( ( x < y ) ? 0x8 : 0 ) | ( ( x > y ) ? 0x4 : 0 ) | ( ( x == y ) ? 0x2 : 0 ) ;
         unsigned mask = 0xf << ( ( 7 - field ) * 4 ) ;
        r = r << ( ( 7 - field ) * 4 ) ;
        CR = ( CR & ~ mask ) | r ;
    }
    
