//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//

//
// Further testing of conditionals, especially based upon inputs and outputs.
//

define (arch = minippc) {

  attrs = (one,two,three);

  //
  // Registers.
  //

  define (reg=CIA) {
    """
Current instruction address.
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
Next instruction address.
    """;
    attrs = nia;
  }

  define (reg=CR) {
    define (field=CR0) { bits = (0,3); };
    define (field=CR1) { bits = (4,7); };
    define (field=CR2) { bits = (8,11); };
  }

  define (regfile=GPR) {
    """
General purpose registers.
    """;
    size = 32;
  }

  define (reg=XER) {
    """
      The overflow and carry register.
      """;
    width = 32;
    define (field=SO) { bits = 0; }
    define (field=OV) { bits = 1; }
    define (field=CA) { bits = 2; }
  }

  //
  // Instruction fields.
  //

  define (instrfield=OPCD) {
    """
Primary opcode.
    """;
    bits = (0,5);
  }

  attrs = (opcode,regop,immop);

  define (instrfield=XO) {
    """
Extended opcode.
    """;
    bits = (21,30);
    attrs = opcode;
  }

  define (instrfield=RA) {
    """
Field used to specify a General Purpose Register (GPR_) to be used as a source.
    """;
    bits = (11,15);
    attrs = regop;
  }
  define (instrfield=RB) {
    """
Field used to specify a General Purpose Register (GPR_) to be used as a source.
    """;
    bits = (16,20);
    attrs = regop;
  }
  define (instrfield=RT) {
    """
Field used to specify a General Purpose Register (GPR_) to be used as a target.
    """;
    bits = (6,10);
    attrs = regop;
  }
  define (instrfield=RS) {
    """
Field used to specify a General Purpose Register (GPR_) as a target.
    """;
    bits = (6,10);
    attrs = regop;
  }

  define (instrfield=D) {
    """
Immediate field used to specify a 16-bit signed two's complement integer
which is sign-extended to 64-bits.
    """;
    bits = (16,31);
    display = dec;
    is_signed = true;
    attrs = immop;
  }


  //
  // Instructions.
  //

  define (instr=i1) {
    fields=(OPCD(1),RT,RA,RB,XO(0));
    action = {
      CR.CR0 = CR.CR1 + CR.CR2;
    };
  }

  define (instr=i2) {
    fields=(OPCD(2),RT,RA,RB,XO(0));
    action = {
      CR.CR0 = CR.CR1;
    };
  }

  define (instr=i3) {
    fields=(OPCD(3),RT,RA,RB,XO(0));
    action = {
      CR.CR0 = CR.CR2;
    };
  }

  define (instr=i3) {
    fields=(OPCD(3),RT,RA,RB,XO(0));
    action = {
      GPR(RA) = CR.CR1 + CR.CR2;
    };
  }

}

define (core = P) {
  """
Example documentation string- place overview information here.
""";
  archs = minippc;
}
