// Test instruction separator

define (core = rubber) {
  archs = rubber; 
  instrtables = ( other );
}

define (arch = rubber) {


//##############################################################################
// Parameters
//##############################################################################

  bit_endianness = little;
     
//==============================================================================

//##############################################################################
// Attributes
//##############################################################################
   
  attrs = ( instr1, instr2 );

//============================================================================== 


//##############################################################################
// Registers
//##############################################################################

  define (reg=CIA) {
    """
    Current instruction address
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address
    """;
    attrs = nia;
  }

//============================================================================== 


//##############################################################################
// Instructions
//##############################################################################
 
  define (instr = rd_s0) {  
    width = 8;
    fields = ((bits(1,0),b01));
    syntax = ("rd S0");   
    action =  { };
  }

  define (instr = rd_s0_rS0) {  
    syntax = ("rd S0, [rS0]");
    alias = rd_s0();
  }   
  
  define (instr = foo) {  
    width = 8;
    fields = ((bits(1,0),b10));
    syntax = ("foo");  
    action =  { };
  }

  define (instr = two) { 
    width = 8;  
    fields = ((bits(1,0),b11));
    syntax = ("two");
    action =  { };
  }  
  
  define (instr = done) { 
    width = 8;  
    fields = ((bits(1,0),0));
    syntax = ("done");
    action =  { halt(); };
  }  
   
//============================================================================== 

//##############################################################################
// Assembler
//##############################################################################
  
  parallel_execution = 1;
  define (assembler) {
    packet_grouping = ("\n");
    instr_separators = (";","|");
    asm_instrtables = (other);
    disasm_instrtables = (other);
  }
  
//============================================================================== 

//##############################################################################
// Post-packet Assembly Hook
//##############################################################################

  post_packet_asm = func(InstrBundle b) {
    
    InstrBundle bb;
    InstrInfo ii;
   
    if (b.size() == 2) {
      ii = createInstr("two");
    }
    if (b.size() == 1) {
      ii = b[0];    
    }

    bb.push_back(ii);
    b = bb;
  };
  
//==============================================================================

}
