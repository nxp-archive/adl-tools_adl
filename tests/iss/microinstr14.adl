// Test patchInstr(macro, micro, shift) with combineInstr()

define (core = rubber) {
  archs = rubber; 
  instrtables = (other, instr_opV, instr_opZ, instr_opA, instr_opB);
}

define (arch = rubber) {


//##############################################################################
// Parameters
//##############################################################################

  bit_endianness = little;
  instr_endianness = little;

//==============================================================================

//##############################################################################
// Attributes
//##############################################################################
   
    attrs = (
             log_as_reg, instr_done, 
             instr_macro, instr_opV, instr_opZ, instr_opA, instr_opB
            );

//============================================================================== 


//##############################################################################
// Registers
//##############################################################################

  define (reg=CIA) {
    """
    Current instruction address
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address
    """;
    attrs = nia;
  }

  define (regfile = a) { 
    attrs = (log_as_reg);
    width = 10;
    size = 4;
  }  
  
//============================================================================== 


//##############################################################################
// Instruction Fields
//##############################################################################

  define(instrfield=AA){
    display = dec;
    pseudo = true;
    width = 2;    
  }

  define(instrfield=Imme4){
    display = dec;
    pseudo = true;
    width = 4; 
  } 
  
  define(instrfield=opV) {
    display = hex;
    pseudo = true;
    width = 18;
    type = instr;
    ref = instr_opV;
  }

  define(instrfield=opZ) {
    display = hex;
    pseudo = true;
    width = 2;
    type = instr;
    ref = instr_opZ;
  }

  define(instrfield=opA) {
    display = hex;
    pseudo = true;
    width = 15;
    type = instr;
    ref = instr_opA;
  }
  
  define(instrfield=opB) {
    display = hex;
    pseudo = true;
    width = 15;
    type = instr;
    ref = instr_opB;
  }    
  
//============================================================================== 

//##############################################################################
// Instructions
//##############################################################################

  define (instr = format){ 
    width = 64;
    fields = (
              (bits(55,52),b1010),
              (bits(51,37),opA), (bits(36,22),opB), 
              (bits(21,4),opV), (bits(1,0),opZ)
             );
    syntax = ("format %f %f %f %f", opA, opB, opV, opZ);
    attrs = (instr_macro);
    action={ 
            run(opA, opB, opV, opZ); 
           };    
  }
  
  define (instr = mva){  
    width = 15;
    fields = (
              (bits(14,12),b111), 
              (bits(11,10),AA), (bits(9,6),Imme4),
              (bits(5,0),0)
             );
    syntax = ("mva a%f,%f", AA, Imme4);
    attrs = (instr_opA);    
    action={
            a(AA) = Imme4;
           };
  }

  define (instr = emptyA){  
    width = 15;
    fields = (
              (bits(14,0),0)
             );
    syntax = ("empty");
    attrs = (instr_opA);    
    action={};
  }
  
  define (instr = mvb){  
    width = 15;
    fields = (
              (bits(14,12),b101), 
              (bits(11,10),AA), (bits(9,6),Imme4),
              (bits(5,0),0)
             );
    syntax = ("mvb a%f,%f", AA, Imme4);
    attrs = (instr_opB);    
    action={
            a(AA) = Imme4;
           };
  }
 
  define (instr = emptyB){  
    width = 15;
    fields = (
              (bits(14,0),0)
             );
    syntax = ("empty");
    attrs = (instr_opB);    
    action={};
  }

  define (instr = mvv){  
    width = 18;
    fields = (
              (bits(17,16),b11), 
              (bits(15,14),AA), (bits(11,8),Imme4),
              (bits(7,0),0)
             );
    syntax = ("mvv a%f,%f", AA, Imme4);
    attrs = (instr_opV);    
    action={
            a(AA) = Imme4;
           };
  }

  define (instr = emptyV){  
    width = 18;
    fields = (
              (bits(17,0),0)
             );
    syntax = ("empty");
    attrs = (instr_opV);    
    action={};
  }
  
    define (instr = Z1){  
    width = 2;
    fields = (
             (bits(1,0),b10)
             );
    syntax = ("z1");
    attrs = (instr_opZ);    
    action={
            a(1) = a(1) + 1;
           };
  }  
  
  define (instr = Z0){  
    width = 2;
    fields = (
             (bits(1,0),b01)
             );
    syntax = ("z0");
    attrs = (instr_opZ);    
    action={
            a(0) = a(0) + 1;
           };
  }

  define (instr = emptyZ){  
    width = 2;
    fields = (
             (bits(1,0),0)
             );
    syntax = ("empty");
    attrs = (instr_opZ);    
    action={};
  }
  
 
  define (instr = done){ 
    width = 64;
    fields = ((bits(63,0),0));  
    syntax = ("done");
    attrs = (instr_done);
    action={ 
            halt(); 
           };
  }  

//============================================================================== 

//##############################################################################
// Assembler
//##############################################################################
  
  parallel_execution = 1;
  define (assembler) {
    comments = ("//", "#", ";");
    line_comments = ("//", "#", ";");
    packet_grouping = ("\n");
    line_separators = ("\n");
    asm_instrtables = (other);
    disasm_instrtables = (other);
  }
  
//============================================================================== 

//##############################################################################
// Post-packet Assembly Hooks
//##############################################################################

  post_packet_asm = func(InstrBundle b) {
    InstrBundle newb;
    InstrInfo ii;
     
    if ((b.size() == 4) && 
        b[0].instrHasAttr(instr_opA) && b[1].instrHasAttr(instr_opB) &&
        b[2].instrHasAttr(instr_opV) && b[3].instrHasAttr(instr_opZ)) {
            ii = combineInstr("format", 0, 1, -1, -1);
            ii = patchInstr(ii, b[2], 4);
            ii = patchInstr(ii, b[3], 0);
    } 
    else if ((b.size() == 1) && b[0].instrHasAttr(instr_done)) ii = b[0];
    else error(1,"Incorrect instruction formation: ", b.size());
    
    newb.push_back(ii);
    b = newb;
  };

//==============================================================================


}  // End of core spec



