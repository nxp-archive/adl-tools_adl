//
// Another syntax parsing test.  This has two instructions with the same name,
// but different formats, with a mix of permutable fields and not.
//
define (core = rubber) {
  archs = rubber; 
  instrtables = ( other );
}

define (arch = rubber) {


//##############################################################################
// Parameters
//##############################################################################

  bit_endianness = little;
     
//==============================================================================

//##############################################################################
// Instruction Fields
//##############################################################################

  define (instrfield = IM3) {
    display = dec;
    pseudo = true;
    width = 3; 
  } 
  
  define (instrfield = IM2) {
    display = dec;
    pseudo = true;
    width = 2; 
  } 

  define (instrfield = AA) {
    display = dec;
    pseudo = true;
    width = 2; 
  }    
  
  define (instrfield = UNSIGN_SIGN) {
    display = dec;
    pseudo = true;
    width = 1;
    enumerated = ("",".s");
  } 

  define (instrfield = UNSIGN_SIGN2) {
    pseudo = true;
    width = 1;
    enumerated = (".u",".s");
  } 

//==============================================================================

//##############################################################################
// Registers
//##############################################################################

  define (reg = CIA) {
    """
    Current instruction address
    """;
    attrs = cia;
  }

  define (reg = NIA) {
    """
    Next instruction address
    """;
    attrs = nia;
  }
   
  
//============================================================================== 


//##############################################################################
// Instructions
//##############################################################################
 
  define (instr = st0) {  
    width = 8;
    fields = ((bits(7,6),b01), (bits(5,4),IM2), (bits(3,1),IM3), (bits(0),UNSIGN_SIGN));
    syntax = ("st%p %f %f", UNSIGN_SIGN, IM2, IM3);   
    action =  { };
  }
  
  define (instr = st1) {  
    width = 8;
    fields = ((bits(7,6),b10), (bits(5,4),AA), (bits(3,1),IM3));
    syntax = ("st [a%f]+%f", AA, IM3);   
    action =  { };
  }  

  define (instr = st2) {  
    width = 8;
    fields = ((bits(7,6),b11), (bits(5,4),IM2), (bits(3,1),IM3), (bits(0),UNSIGN_SIGN2));
    syntax = ("st%f.4t %f,%f", UNSIGN_SIGN2, IM2, IM3);
    action =  { };
  }
  
  define (instr = done) { 
    width = 8;  
    fields = ((bits(7,0),0));
    syntax = ("done");
    action =  { halt(); };
  }  
   
//============================================================================== 

//##############################################################################
// Assembler
//##############################################################################
  
  define (assembler) {
    comments = ("//", "#");
    asm_instrtables = (other);
    disasm_instrtables = (other);
  }
  
//============================================================================== 


}
