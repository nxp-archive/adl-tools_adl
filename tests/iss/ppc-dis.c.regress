/*

  Disassembler code generated by ADL.

*/

#include <stdio.h>
#include "sysdep.h"
#include "dis-asm.h"

//
// Instruction field getter functions.
//

static inline uint get_AA(uint x) {
  return (((x & 0x2) >> 1));
}

static inline uint get_BD(uint x) {
  return (((x & 0xfffc) >> 2));
}

static inline uint get_BF(uint x) {
  return (((x & 0x3800000) >> 23));
}

static inline uint get_BI(uint x) {
  return (((x & 0x1f0000) >> 16));
}

static inline uint get_BO(uint x) {
  return (((x & 0x3e00000) >> 21));
}

static inline uint get_D(uint x) {
  return (((x & 0xffff)));
}

static inline uint get_LK(uint x) {
  return (((x & 0x1)));
}

static inline uint get_MB(uint x) {
  return (((x & 0x7c0) >> 6));
}

static inline uint get_ME(uint x) {
  return (((x & 0x3e) >> 1));
}

static inline uint get_OPCD(uint x) {
  return (((x & 0xfc000000) >> 26));
}

static inline uint get_RA(uint x) {
  return (((x & 0x1f0000) >> 16));
}

static inline uint get_RB(uint x) {
  return (((x & 0xf800) >> 11));
}

static inline uint get_RS(uint x) {
  return (((x & 0x3e00000) >> 21));
}

static inline uint get_RT(uint x) {
  return (((x & 0x3e00000) >> 21));
}

static inline uint get_SH(uint x) {
  return (((x & 0xf800) >> 11));
}

static inline uint get_SI(uint x) {
  return (((x & 0xffff)));
}

static inline uint get_SPRN(uint x) {
  return (((x & 0xf800) >> 6) | ((x & 0x1f0000) >> 16));
}

static inline uint get_UI(uint x) {
  return (((x & 0xffff)));
}

static inline uint get_XO(uint x) {
  return (((x & 0x7fe) >> 1));
}


static int disassemble_insn(bfd_vma memaddr, unsigned long insn,struct disassemble_info *info)
{
  switch (insn & 0xfc000000) {
    case 0x0: {
      (*info->fprintf_func) (info->stream, "%-7s","halt");
      return 4;
    }
    break;
    case 0xb0000000: {
      (*info->fprintf_func) (info->stream, "%-7s","sth");
      (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "0x%x",get_D(insn));
      (*info->fprintf_func) (info->stream, "(");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ")");
      return 4;
    }
    break;
    case 0x40000000: {
      switch (insn & 0x2) {
        case 0x0: {
          switch (insn & 0x1) {
            case 0x0: {
              if ((get_BO(insn) == 0x10)&& (get_BI(insn) == 0x0)) {
                (*info->fprintf_func) (info->stream, "%-7s","bdnz");
                (*info->print_address_func) (memaddr + (((get_BD(insn) & (1 << 13)) ? (get_BD(insn) - (1 << 14)) : get_BD(insn)) << 2), info);
                return 4;
              }
              (*info->fprintf_func) (info->stream, "%-7s","bc");
              (*info->fprintf_func) (info->stream, "0x%x",get_BO(insn));
              (*info->fprintf_func) (info->stream, ",");
              (*info->fprintf_func) (info->stream, "0x%x",get_BI(insn));
              (*info->fprintf_func) (info->stream, ",");
              (*info->print_address_func) (memaddr + (((get_BD(insn) & (1 << 13)) ? (get_BD(insn) - (1 << 14)) : get_BD(insn)) << 2), info);
              return 4;
            }
            break;
            default:
            (*info->fprintf_func) (info->stream, ".long 0x%lx",insn);
            return 4;
          }
        }
        break;
        default:
        (*info->fprintf_func) (info->stream, ".long 0x%lx",insn);
        return 4;
      }
    }
    break;
    case 0x34000000: {
      (*info->fprintf_func) (info->stream, "%-7s","addic.");
      (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
      (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ",0x%x",get_SI(insn));
      return 4;
    }
    break;
    case 0x98000000: {
      (*info->fprintf_func) (info->stream, "%-7s","stb");
      (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "0x%x",get_D(insn));
      (*info->fprintf_func) (info->stream, "(");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ")");
      return 4;
    }
    break;
    case 0x80000000: {
      (*info->fprintf_func) (info->stream, "%-7s","lwz");
      (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "0x%x",get_D(insn));
      (*info->fprintf_func) (info->stream, "(");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ")");
      return 4;
    }
    break;
    case 0x38000000: {
      if ((get_RA(insn) == 0x0)) {
        (*info->fprintf_func) (info->stream, "%-7s","li");
        (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
        (*info->fprintf_func) (info->stream, ",0x%x",get_SI(insn));
        return 4;
      }
      (*info->fprintf_func) (info->stream, "%-7s","addi");
      (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
      (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ",0x%x",get_SI(insn));
      return 4;
    }
    break;
    case 0x2c000000: {
      (*info->fprintf_func) (info->stream, "%-7s","cmpi");
      (*info->fprintf_func) (info->stream, "%d",get_BF(insn));
      (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ",0x%x",get_SI(insn));
      return 4;
    }
    break;
    case 0x90000000: {
      (*info->fprintf_func) (info->stream, "%-7s","stw");
      (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "0x%x",get_D(insn));
      (*info->fprintf_func) (info->stream, "(");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ")");
      return 4;
    }
    break;
    case 0x60000000: {
      (*info->fprintf_func) (info->stream, "%-7s","ori");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "0x%x",get_UI(insn));
      return 4;
    }
    break;
    case 0x54000000: {
      (*info->fprintf_func) (info->stream, "%-7s","rlwinm");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "%d",get_SH(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "%d",get_MB(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "%d",get_ME(insn));
      return 4;
    }
    break;
    case 0x3c000000: {
      if ((get_RA(insn) == 0x0)) {
        (*info->fprintf_func) (info->stream, "%-7s","lis");
        (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
        (*info->fprintf_func) (info->stream, ",0x%x",get_SI(insn));
        return 4;
      }
      (*info->fprintf_func) (info->stream, "%-7s","addis");
      (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
      (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ",0x%x",get_SI(insn));
      return 4;
    }
    break;
    case 0xa0000000: {
      (*info->fprintf_func) (info->stream, "%-7s","lhz");
      (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "0x%x",get_D(insn));
      (*info->fprintf_func) (info->stream, "(");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ")");
      return 4;
    }
    break;
    case 0x94000000: {
      (*info->fprintf_func) (info->stream, "%-7s","stwu");
      (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "0x%x",get_D(insn));
      (*info->fprintf_func) (info->stream, "(");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ")");
      return 4;
    }
    break;
    case 0x88000000: {
      (*info->fprintf_func) (info->stream, "%-7s","lbz");
      (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
      (*info->fprintf_func) (info->stream, ",");
      (*info->fprintf_func) (info->stream, "0x%x",get_D(insn));
      (*info->fprintf_func) (info->stream, "(");
      (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
      (*info->fprintf_func) (info->stream, ")");
      return 4;
    }
    break;
    case 0x7c000000: {
      switch (insn & 0x7fe) {
        case 0x0: {
          (*info->fprintf_func) (info->stream, "%-7s","cmp");
          (*info->fprintf_func) (info->stream, "%d",get_BF(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RB(insn));
          return 4;
        }
        break;
        case 0x32e: {
          (*info->fprintf_func) (info->stream, "%-7s","sthx");
          (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RB(insn));
          return 4;
        }
        break;
        case 0x2e: {
          (*info->fprintf_func) (info->stream, "%-7s","lwzx");
          (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RB(insn));
          return 4;
        }
        break;
        case 0x1d6: {
          (*info->fprintf_func) (info->stream, "%-7s","mullw");
          (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RB(insn));
          return 4;
        }
        break;
        case 0x2a6: {
          (*info->fprintf_func) (info->stream, "%-7s","mfspr");
          (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
          (*info->fprintf_func) (info->stream, ",%d",get_SPRN(insn));
          return 4;
        }
        break;
        case 0x430: {
          (*info->fprintf_func) (info->stream, "%-7s","srw");
          (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RB(insn));
          return 4;
        }
        break;
        case 0x12e: {
          (*info->fprintf_func) (info->stream, "%-7s","stwx");
          (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RB(insn));
          return 4;
        }
        break;
        case 0x378: {
          if ((get_RB(insn) == get_RS(insn))) {
            (*info->fprintf_func) (info->stream, "%-7s","mr");
            (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
            (*info->fprintf_func) (info->stream, ",");
            (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
            return 4;
          }
          (*info->fprintf_func) (info->stream, "%-7s","or");
          (*info->fprintf_func) (info->stream, "r%d",get_RA(insn));
          (*info->fprintf_func) (info->stream, ",");
          (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
          (*info->fprintf_func) (info->stream, ",");
          (*info->fprintf_func) (info->stream, "r%d",get_RB(insn));
          return 4;
        }
        break;
        case 0x214: {
          (*info->fprintf_func) (info->stream, "%-7s","add");
          (*info->fprintf_func) (info->stream, "r%d",get_RT(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RA(insn));
          (*info->fprintf_func) (info->stream, ",r%d",get_RB(insn));
          return 4;
        }
        break;
        case 0x3a6: {
          if ((get_SPRN(insn) == 0x9)) {
            (*info->fprintf_func) (info->stream, "%-7s","mtctr");
            (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
            return 4;
          }
          (*info->fprintf_func) (info->stream, "%-7s","mtspr");
          (*info->fprintf_func) (info->stream, "r%d",get_RS(insn));
          (*info->fprintf_func) (info->stream, ",%d",get_SPRN(insn));
          return 4;
        }
        break;
        default:
        (*info->fprintf_func) (info->stream, ".long 0x%lx",insn);
        return 4;
      }
    }
    break;
    default:
    (*info->fprintf_func) (info->stream, ".long 0x%lx",insn);
    return 4;
  }
  (*info->fprintf_func) (info->stream, ".long 0x%lx",insn);
  return 4;
}

static int print_insn (bfd_vma memaddr, struct disassemble_info *info,int bigendian)
{
  bfd_byte buffer[4];
  unsigned long insn;
  int status;
  
  status = (*info->read_memory_func) (memaddr, buffer, 4, info);
  if (status != 0) {
    (*info->memory_error_func) (status, memaddr, info);
    return -1;
  }
  if (bigendian) {
    insn = bfd_getb32 (buffer);
  } else {
    insn = bfd_getl32 (buffer);
  }
  return disassemble_insn(memaddr,insn,info)
  ;}

int print_insn_little_powerpc(bfd_vma memaddr, struct disassemble_info *info)
{
  return print_insn(memaddr,info,0);
}

int print_insn_big_powerpc(bfd_vma memaddr, struct disassemble_info *info)
{
  return print_insn(memaddr,info,1);
}

int print_insn_rs6000(bfd_vma memaddr, struct disassemble_info *info)
{
  return print_insn(memaddr,info,1);
}

void print_ppc_disassembler_options (FILE *stream ATTRIBUTE_UNUSED) { }

