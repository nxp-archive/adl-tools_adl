// Test assembler alias
// Check whether alias operands are correctly copied when alias has different set of operands

define (core = rubber) {
  archs = rubber; 
  instrtables = (
                 other
                 );
}



define (arch = rubber) {

  bit_endianness = little;
  instr_endianness = little;
  data_endianness = little;

  attrs = (
           log_as_reg 
           );
        
  //##############################################################################
  // Instruction Fields
  //##############################################################################

  define (instrfield = STM_G0)
    {
      width = 1;
      display = dec;
      pseudo = true;
      enumerated = ("","g0,");
    }
  define (instrfield = STM_G1)
    {
      width = 1;
      display = dec;
      pseudo = true;
      enumerated = ("","g1,");
    }
  define (instrfield = STM_G2)
    {
      width = 1;
      display = dec;
      pseudo = true;
      enumerated = ("","g2,");
    }
  define (instrfield = STM_G3)
    {
      width = 1;
      display = dec;
      pseudo = true;
      enumerated = ("","g3,");
    }

  define (instrfield = STM_MASK_4) {
    """
  """;
    display = hex;
    width = 4;
    pseudo = true;
  } 

  define (instrfield = G1)
    {
      display = dec;
      pseudo = true;
      width = 2; 
      enumerated = ("g0","g1","g2","g3");
    }
  define (instrfield = G2)
    {
      display = dec;
      pseudo = true;
      width = 2; 
      enumerated = ("g0","g1","g2","g3");
    }
  define (instrfield = G3)
    {
      display = dec;
      pseudo = true;
      width = 2; 
      enumerated = ("g0","g1","g2","g3");
    }
  define (instrfield = G4)
    {
      display = dec;
      pseudo = true;
      width = 2; 
      enumerated = ("g0","g1","g2","g3");
    }

  define (instrfield = Is16)
    {
      display = signed_dec;
      pseudo = true;
      width = 16;
      is_signed = true;
      value = 0;
    }

  //==============================================================================
	
  //##############################################################################
  // Registers
  //##############################################################################

  define (reg = CIA) {
    """
  Current instruction address
  """;
    attrs = cia;
  }

  define (reg = NIA) {
    """
  Next instruction address
  """;
    attrs = nia;
  }

  //============================================================================== 

  //##############################################################################
  // Instructions
  //##############################################################################

  define (instr = done)
    {
      width = 64;
      fields = (
                (bits(63,0),0)
                );
      syntax = ("done");
      action =  {
        halt(); 
      };
    }

  define (instr = stm)
    {
      width = 64;  
      fields = (
                (bits(63,60),b0000),
                (bits(59,54),b111100), (bits(53,38),Is16), (bits(37,4),0),
                (bits(3,0),STM_MASK_4)
                );
      dsyntax = ("stm [sp%f],%f%f%f%f (%f)",Is16,STM_G0(STM_MASK_4),STM_G1(STM_MASK_4>>1),STM_G2(STM_MASK_4>>2),STM_G3(STM_MASK_4>>3),STM_MASK_4);
      action = {
      };
    }

  define (instr = stm_1)
    {
      syntax = ("stm [sp],%f",G1);
      alias = stm(Is16(0),STM_MASK_4((1UL<<G1)));
    }
  define (instr = stm_2)
    {
      syntax = ("stm [sp],%f,%f",G1,G2);
      alias = stm(Is16(0),STM_MASK_4((1UL<<G1)|(1UL<<G2)));
    }
  define (instr = stm_3)
    {
      syntax = ("stm [sp],%f,%f,%f",G1,G2,G3);
      alias = stm(Is16(0),STM_MASK_4((1UL<<G1)|(1UL<<G2)|(1UL<<G3)));
    }
  define (instr = stm_4)
    {
      syntax = ("stm [sp],%f,%f,%f,%f",G1,G2,G3,G4);
      alias = stm(Is16(0),STM_MASK_4((1UL<<G1)|(1UL<<G2)|(1UL<<G3)|(1UL<<G4)));
    }

  define (instr = stm_1_imm)
    {
      syntax = ("stm [sp%f],%f",Is16,G1);
      alias = stm(Is16(Is16),STM_MASK_4((1UL<<G1)));
    }
  define (instr = stm_2_imm)
    {
      syntax = ("stm [sp%f],%f,%f",Is16,G1,G2);
      alias = stm(Is16(Is16),STM_MASK_4((1UL<<G1)|(1UL<<G2)));
    }
  define (instr = stm_3_imm)
    {
      syntax = ("stm [sp%f],%f,%f,%f",Is16,G1,G2,G3);
      alias = stm(Is16(Is16),STM_MASK_4((1UL<<G1)|(1UL<<G2)|(1UL<<G3)));
    }
  define (instr = stm_4_imm)
    {
      syntax = ("stm [sp%f],%f,%f,%f,%f",Is16,G1,G2,G3,G4);
      alias = stm(Is16(Is16),STM_MASK_4((1UL<<G1)|(1UL<<G2)|(1UL<<G3)|(1UL<<G4)));
    }
   
  //============================================================================== 

  //##############################################################################
  // Assembler
  //##############################################################################
  
  define (assembler) {
    comments = ("//", "#");
    line_comments = ("//", "#");
    instr_separators = (";");
    line_separators = ("\n");
    asm_instrtables = (other);
    disasm_instrtables = (other);
  }
  
  
  //==============================================================================


}
