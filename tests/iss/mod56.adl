//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//

//
// Another model with an MMU, this one with two tables:  A fully-associative one and
// a 2-way set associative one.  This one models multi-hit side effects.  If multiple
// hits are found across lookups or within lookups, action code is executed.
//
// In addition, we test the idea of a mmu-wide miss-handler restarting a
// translation, so that information can be placed into a TLB, then re-used.  In
// this case, based upon register values, an entry can be inserted into the CAM
// if a miss occurs.
// 

#import "mod1.adl"

define (arch = ppc_mmu) {

  attrs = (translation_attr,load,store);

  //
  // Registers.
  //

  // For testing, change the size to a non-power-of-2 size.
  defmod (regfile=GPR) {
    size = 30;
  }

  define (reg=PID0) {
  }

  define (reg=PID1) {
  }

  define (reg=ESR) {
    """
    Exception syndrome register.
    """;
  }

  define (reg=DEAR) {}

  define (reg=HDBCR0) {
    """
    Hardware debug control register 0.
    """;

    define (field=REALMODE) {
      bits = 0;
    }
    // If non-zero, then on a miss, take data from MAS registers and insert into
    // the TLB (type, set, and way are all set via the MAS registers).
    define (field=USEMAS) {
      bits = 1;
    }
  }

  define (reg=MAS0) {
    """
    Memory assist register 0.
    """;
    define (field=EPN) {
      bits=(0,23);
    }
    define (field=TID) {
      bits=(24,29);
    }
    define (field=V) {
      bits=30;
    }
    define (field=TS) {
      bits=31;
    }
  }

  define (reg=MAS1) {
    """
    Memory assist register 1.
    """;
    define (field=RPN) {
      bits=(0,23);
    }
    define (field=SIZE) {
      bits=(24,29);
    }
    define (field=TLBSEL) {
      bits = 30;
    }
    define (field=NV) {
      bits = 31;
    }
  }

  define (reg=MAS2) {
    """
    Memory assist register 2.
    """;
    define (field=SX) {
      bits=0;
    }
    define (field=SW) {
      bits=1;
    }
    define (field=SR) {
      bits=2;
    }
    define (field=UX) {
      bits=3;
    }
    define (field=UW) {
      bits=4;
    }
    define (field=UR) {
      bits=5;
    }
    define (field=WIMG) {
      bits=(6,9);
    }
    define (field=Set) {
      bits=(20,27);
    }
    define (field=Way) {
      bits=(28,31);
    }
  }

  define (reg=MSR) {
    """
    Machine state register.
    """;
    define (field=PR) {
      bits = 9;
    }
    define (field=IR) {
      bits = 10;
    }
    define (field=DR) {
      bits = 11;
    }
  }

  define (reg=SRR0) {
    """
    Save-restore register 0.
    """;
  }

  define (reg=SRR1) {
    """
    Save-restore register 1.
    """;
  }

  define (reg=IVPR) {
    """
    Interrupt-vector prefix register.
    """;
  }

  define (reg=IVOR1) {
    """
    Interrupt-vector offset register 1.
    """;
  }

  define (reg=IVOR6) {
    """
    Interrupt-vector offset register 6.
    """;
  }

  define (reg=IVOR7) {
    """
    Interrupt-vector offset register 7.
    """;
  }

  define (reg=IVOR13) {}

  define (reg=IVOR14) {}

  define (reg=HitReg) {
    """
    Tracks MMU TlbCam hits.
    """;
  }

  invalid_entry_read = func(unsigned id,unsigned index) {
    ESR(4,4) = 1;
    raiseException(Program);
    return 0;  // Shouldn't be necessary...
  };
  
  invalid_entry_write = func(unsigned id,unsigned index,bits<32> value) {
    ESR(4,4) = 1;
    raiseException(Program);
  };

  define (regfile=SPR) {
    size=1024;
    define (entry=62) { reg = ESR; }
    define (entry=63) { reg = DEAR; }
    define (entry=100) { reg = HDBCR0; }
    define (entry=26)  { reg = SRR0; }
    define (entry=27)  { reg = SRR1; }
    define (entry=200) { reg=MAS0; }
    define (entry=201) { reg=MAS1; }
    define (entry=202) { reg=MAS2; }
  }


  //
  // Instructions.
  //

  define (instr=rfi) {
    fields=(OPCD(19),RS,RA,RB,XO(50));
    action = {
      MSR = SRR1;
      NIA = SRR0;
    };
  }

  void populateMasRegFromEntry(const TlbBase_t &t)
  {
    MAS0.EPN  = t.EPN;
    MAS0.TID  = t.TID;
    MAS0.V    = t.V;
    MAS0.TS   = t.TS;
      
    MAS1.RPN  = t.RPN;
    MAS1.SIZE = t.SIZE;
      
    MAS2.SX   = t.SX;
    MAS2.SW   = t.SW;
    MAS2.SR   = t.SR;
    MAS2.UX   = t.UX;
    MAS2.UW   = t.UW;
    MAS2.UR   = t.UR;
    MAS2.WIMG = t.WIMG;
  }

  void populateMasRegs(int set,int way, bool use_cam) {
    if (use_cam) {
      var t = TlbCam(set,way);
      populateMasRegFromEntry(t);
    } else {
      var t = Tlb4k(set,way);
      populateMasRegFromEntry(t);
      MAS1.NV   = Tlb4k(set).NV;
    }
  }

  define (instr=tlbre) {
    fields=(OPCD(31),XO(946));
    action = {
      var set = MAS2.Set;
      var way = MAS2.Way;
      bool use_cam = MAS1.TLBSEL.uint32();
      populateMasRegs(set.uint32(),way.uint32(),use_cam);
    };
  }

  void setTlbEntry(TlbBase_t &t)
  {
    t.EPN  = MAS0.EPN;
    t.TID  = MAS0.TID;
    t.V    = MAS0.V; 
    t.TS   = MAS0.TS;
        
    t.RPN  = MAS1.RPN;
    t.SIZE = MAS1.SIZE;
        
    t.SX   = MAS2.SX;
    t.SW   = MAS2.SW;
    t.SR   = MAS2.SR;
    t.UX   = MAS2.UX;
    t.UW   = MAS2.UW;
    t.UR   = MAS2.UR;
    t.WIMG = MAS2.WIMG;  
  }

  define (instr=tlbwe) {
    fields=(OPCD(31),XO(978));
    action = {
      var set = MAS2.Set;
      var way = MAS2.Way;
      bool use_cam = MAS1.TLBSEL.uint32();

      int num_sets, num_ways;
      if (use_cam) {
        TlbCam_t t;
      
        setTlbEntry(t);
        
        TlbCam(set,way) = t;

        num_sets = TlbCam.num_sets();
        num_ways = TlbCam.num_ways();
      } else {
        Tlb4k_t t;
      
        setTlbEntry(t);

        Tlb4k(set).NV = MAS1.NV;        
        Tlb4k(set,way) = t;

        num_sets = Tlb4k.num_sets();
        num_ways = Tlb4k.num_ways();
      }
      info (1,"Wrote to lookup with ",num_sets," sets and ",num_ways," ways.");
    };
  }

  //
  // Decode miss handler.
  // 
  decode_miss = func (addr_t ea,unsigned) {
    ESR.set(4);
    raiseException(Program);
  };

  //
  // Program interrupt.
  // 
  define (exception=Program) {
    action = {
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR(0,15),IVOR6(16,31));
    };
  }

  define (exception=ProtectionFault) {
    action = {
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR(0,15),IVOR7(16,31));
    };
  }

  define (exception=ITlb) {
    define (field=DEAR) { bits = 32; }
    action = func (ITlb_t info) {
      DEAR = info.DEAR;
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR(0,15),IVOR14(16,31));
    };
  }

  define (exception=DTlb) {
    define (field=DEAR) { bits = 32; }
    action = func (DTlb_t info) {
      DEAR = info.DEAR;
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR(0,15),IVOR13(16,31));
    };
  }

  define (exception=MachineCheck) {
    define (field=DEAR) { bits = 32; }
    action = func (MachineCheck_t info) {    
      DEAR = info.DEAR;
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR(0,15),IVOR1(16,31));
    };
  }

  define (mmu) {

    both_enable = { return (HDBCR0.REALMODE == 0); };

    define (lookup=TlbOrig) {
      interface = true;
      define (wayfield=TID) {
        bits = 6;
      }
      define (wayfield=SIZE) {
        bits = 6;
      }
      define (wayfield=V) {
        bits = 1;
      }
      define (wayfield=TS) {
        bits = 1;
      }
      define (wayfield=RPN) {
        bits = 24;
      }
      define (wayfield=EPN) {
        """
        Example documentation string for an MMU field.
        """;
        bits = 24;
      }
      define (wayfield=SX) {
        bits=1;
      }
      define (wayfield=SW) {
        bits=1;
      }
      define (wayfield=SR) {
        bits=1;
      }
      define (wayfield=UX) {
        bits=1;
      }
      define (wayfield=UW) {
        bits=1;
      }
      define (wayfield=UR) {
        bits=1;
      }
      define (wayfield=WIMG) {
        bits = 4;
        attrs = translation_attr;
      }
    }

    define(lookup=TlbBase) {

      inherit = TlbOrig;
      interface = true;
      
      test = Compare(V,1);
      test = Compare(TS, ((Instr) ? MSR.IR : MSR.DR) );
      test = Compare(TID,0,PID0,PID1);      
      test = AddrComp(EPN);

      sizescale = 2;
      sizeshift = 10;

      realpage = RPN;

      exec_perm = func(TlbBase_t t,addr_t ea,unsigned seq) {
        if ( ((MSR.PR == 0) ? t.SX : t.UX) == 0) {
          raiseException(ProtectionFault);
        }
      };

      multi_hit = func (TransType,addr_t ea,unsigned) {
        MachineCheck_t mc;
        mc.DEAR = ea;
        raiseException(mc);
      };
    }

    define (lookup=TlbCam) {
      
      inherit = TlbBase;

      define (array) {
        entries = 16;
      }

      //      priority = 0;

      size      = SIZE;
      sizetype  = BitSize;

    }

    define (lookup=Tlb4k) {
      inherit = TlbBase;

      define (setfield=NV) {
        bits = 1;
      }

      define (array) {
        entries = 256;
        set_assoc = 4;
      }

      //      priority = 1;

      size = 4096;

    }

    instr_miss = func(addr_t ea,unsigned) {
      ITlb_t itlb;
      itlb.DEAR = ea;
      raiseException(itlb);
      return false;
    };

    data_miss = func(addr_t ea,unsigned) {
      // Use MAS reg data on a miss if HDBCR0.USEMAS == 1, otherwise throw an
      // exception.
      if (HDBCR0.USEMAS == 1) {
        var set = MAS2.Set;
        var way = MAS2.Way;
        bool use_cam = MAS1.TLBSEL.uint32();
        
        if (use_cam) {
          TlbCam_t t;
          
          setTlbEntry(t);
          
          TlbCam(set,way) = t;
        } else {
          Tlb4k_t t;
          
          setTlbEntry(t);
          
          Tlb4k(set).NV = MAS1.NV;        
          Tlb4k(set,way) = t;
        }
        // We want to restart the translation process.
        return true;
      }
      DTlb_t dtlb;
      dtlb.DEAR = ea;
      raiseException(dtlb);
      return false;
    };

    multi_hit = func (TransType,addr_t ea,unsigned) {
      MachineCheck_t mc;
      mc.DEAR = ea;
      raiseException(mc);
    };

  }

}

define (core = P) {
  archs = (MiniPPC,ppc_mmu);
}
