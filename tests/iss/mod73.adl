//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// A simple example of using an external resource to perform actions and store
// data.  The resource Foo is used to do all math calculations.  The resource
// Bar exists soley to test an "external" resource (one declared as a pointer).
//

#include "mod73-extres.h"

define (arch = MiniPPC) {

  //
  // Registers.
  //

  define (reg=CIA) {
    """
      Current instruction address.
      """;
    attrs = cia;

  }

  define (reg=NIA) {
    """
      Next instruction address.
      """;
    attrs = nia;
  }

  define (regfile=GPR) {
    """
      General purpose registers.
      """;
    size = 32;
    prefix = r;
  }

  //
  // Instruction fields.
  //

  define (instrfield=OPCD) {
    """
Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO) {
    """
Extended opcode.
    """;
    bits = (21,30);
  }

  define (instrfield=RA) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RB) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RT) {
    """
Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RS) {
    """
Field used to specify a General Purpose Register as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=D) {
    """
Immediate field used to specify a 16-bit signed two's complement integer
which is sign-extended to 64-bits.
    """;
    bits = (16,31);
    display = dec;
    is_signed = true;
  }

  define (instrfield=SI) {
    """
Signed immediate field for arithmetic operations.
    """;
    bits = (16,31);
    display = dec;
    is_signed = true;
  }

  //
  // External resources.
  //

  define (ext_resource=foo) {
    objtype = Foo;
    constr_args = (1,2,3); // Just to test constructor arguments.
    reset = true;
  }

  define (ext_resource=bar) {
    objtype = Bar;
    external = true;
    reset = true;
  }

  //
  // Instructions.
  //

  define (instr=add) {
    fields=(OPCD(31),RT,RA,RB,XO(266));
    action = {
      GPR(RT) = foo.add(GPR(RA).uint32(),GPR(RB).uint32());
    };
  }

  define (instr=addi) {
    fields=(OPCD(14),RT,RA,SI);
    action = {      
      GPR(RT) = foo.add(GPR(RA).uint32(),SI.uint32());
    };
  }

  define (instr=mullw) {
    fields=(OPCD(31),RT,RA,RB,XO(235));
    action = {
      // This should always be 0, since we never set the pointer.
      if (bar) {
        error(1,"Expected bar to be 0.");
      }
      GPR(RT) = foo.multiply(GPR(RA).uint32(),GPR(RB).uint32());
    };
  }

  // Loads an operation count into Foo.
  define (instr=lhz) {
    fields=(OPCD(40),RT,RA,D);
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);
      var addr = b + D;
      foo.set_op_count(Mem(addr,4).uint32());
    };
  }

  define (instr=lwz) {
    fields=(OPCD(32),RT,RA,D);
    syntax = ("%i %f,%f(%f)",RT,D,RA);
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);
      var addr = b + D;
      GPR(RT) = Mem(addr,4);
    };
  }

  // Stores the operation count, rather than a halfword.
  define (instr=sth) {
    fields=(OPCD(44),RS,RA,D);
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);
      var addr = b + D;
      Mem(addr,4) = bits<32>(foo.op_count());
    };
  }

  define (instr=stw) {
    fields=(OPCD(36),RS,RA,D);
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);
      var addr = b + D;
      Mem(addr,4) = GPR(RS);
    };
  }

  // Special instruction:  This is used for simulation purposes and is
  // not a PPC instruction.
  define (instr=halt) {
    width = 32;
    fields=(OPCD(0));
    action = {
      halt();
    };
  }

}

define (core = P) {
  archs = MiniPPC;
}
