//
// Example of a model where the encoding differs only on
// the second word for 64-bit instructions.  This means that
// we have to skip over the first word when creating the
// encoding tree.
//

define (arch foo) {

  define (reg=PC) {
    attrs = (cia,nia);
  }

  define (regfile=GPR) {
    size = 32;
  }

  bit_endianness = little;

  define (instrfield=PR) {
    width = 2;
    pseudo = true;
  }
  
  define (instrfield=s32) {
    width = 32;
    pseudo = true;
    is_signed = true;
  }

  define (instrfield=Pn) {
    width = 3;
    pseudo = true;
  }

  define (instrfield=Da) {
    width = 5;
    pseudo = true;
  }

  define (instrfield=SG) {
    width = 1;
    pseudo = true;
  }

  define (instrfield=Dn) {
    width = 5;
    pseudo = true;
  }

  define (instr=add) {
    fields=(
            (bits(0),b0),
            (bits(1),b0),
            (bits(2),b0),
            (bits(3),b0),
            (bits(4),b0),
            (bits(5),b1),
            (bits(6),b0),
            (bits(7),b0),
            (bits(8),b1),
            (bits(9),b1),
            (bits(10),b1),
            (bits(11),b0),
            (bits(12),PR(0)),
            (bits(13),PR(1)),
            (bits(14),SG),
            (bits(15),b1),
            (bits(16),b1),
            (bits(17),b1),
            (bits(18),b1),
            (bits(19),s32(0)),
            (bits(20),s32(1)),
            (bits(21),s32(2)),
            (bits(22),s32(3)),
            (bits(23),s32(4)),
            (bits(24),s32(5)),
            (bits(25),s32(6)),
            (bits(26),s32(7)),
            (bits(27),s32(8)),
            (bits(28),s32(9)),
            (bits(29),s32(10)),
            (bits(30),s32(11)),
            (bits(31),b0),
            (bits(32),s32(12)),
            (bits(33),s32(13)),
            (bits(34),s32(14)),
            (bits(35),s32(15)),
            (bits(36),s32(16)),
            (bits(37),s32(17)),
            (bits(38),s32(18)),
            (bits(39),s32(19)),
            (bits(40),s32(20)),
            (bits(41),s32(21)),
            (bits(42),s32(22)),
            (bits(43),s32(23)),
            (bits(44),s32(24)),
            (bits(45),s32(25)),
            (bits(46),s32(26)),
            (bits(47),b0),
            (bits(48),Dn(0)),
            (bits(49),Dn(1)),
            (bits(50),Dn(2)),
            (bits(51),Dn(3)),
            (bits(52),Dn(4)),
            (bits(53),s32(27)),
            (bits(54),s32(28)),
            (bits(55),s32(29)),
            (bits(56),s32(30)),
            (bits(57),s32(31)),
            (bits(58),b1),
            (bits(59),b1),
            (bits(60),b1),
            (bits(61),b1),
            (bits(62),b1),
            (bits(63),b0));
    action = {
      GPR(Dn) = GPR(Dn) + s32;
    };
  }

  define (instr=add_) {
    alias = add(Dn(Dn),s32(s32),PR(0),SG(0));
    syntax = ("add %f,%f",Dn,s32);
  }

  define (instr=and) {
    fields=(
            (bits(0),b0),
            (bits(1),b0),
            (bits(2),b0),
            (bits(3),b0),
            (bits(4),b0),
            (bits(5),b1),
            (bits(6),b1),
            (bits(7),b0),
            (bits(8),b1),
            (bits(9),b0),
            (bits(10),b1),
            (bits(11),b1),
            (bits(12),PR(0)),
            (bits(13),PR(1)),
            (bits(14),SG),
            (bits(15),b1),
            (bits(16),b1),
            (bits(17),b1),
            (bits(18),b1),
            (bits(19),s32(0)),
            (bits(20),s32(1)),
            (bits(21),s32(2)),
            (bits(22),s32(3)),
            (bits(23),s32(4)),
            (bits(24),s32(5)),
            (bits(25),s32(6)),
            (bits(26),s32(7)),
            (bits(27),s32(8)),
            (bits(28),s32(9)),
            (bits(29),s32(10)),
            (bits(30),s32(11)),
            (bits(31),b0),
            (bits(32),s32(12)),
            (bits(33),s32(13)),
            (bits(34),s32(14)),
            (bits(35),s32(15)),
            (bits(36),s32(16)),
            (bits(37),s32(17)),
            (bits(38),s32(18)),
            (bits(39),s32(19)),
            (bits(40),s32(20)),
            (bits(41),s32(21)),
            (bits(42),s32(22)),
            (bits(43),s32(23)),
            (bits(44),s32(24)),
            (bits(45),s32(25)),
            (bits(46),s32(26)),
            (bits(47),b0),
            (bits(48),Dn(0)),
            (bits(49),Dn(1)),
            (bits(50),Dn(2)),
            (bits(51),Dn(3)),
            (bits(52),Dn(4)),
            (bits(53),s32(27)),
            (bits(54),s32(28)),
            (bits(55),s32(29)),
            (bits(56),s32(30)),
            (bits(57),s32(31)),
            (bits(58),Da(0)),
            (bits(59),Da(1)),
            (bits(60),Da(2)),
            (bits(61),Da(3)),
            (bits(62),Da(4)),
            (bits(63),b0));
    action = {
      GPR(Dn) = GPR(Da) & s32;
    };
  }

  define (instr=and_) {
    alias = and(Da(Da),Dn(Dn),s32(s32),PR(0),SG(0));
    syntax = ("and %f,%f,%f",Dn,Da,s32);
  }

  define (instr=cmple) {
    fields=(
            (bits(0),b0),
            (bits(1),b0),
            (bits(2),b0),
            (bits(3),b0),
            (bits(4),b0),
            (bits(5),b0),
            (bits(6),b1),
            (bits(7),b0),
            (bits(8),b1),
            (bits(9),b0),
            (bits(10),b1),
            (bits(11),b1),
            (bits(12),PR(0)),
            (bits(13),PR(1)),
            (bits(14),SG),
            (bits(15),b1),
            (bits(16),b1),
            (bits(17),b1),
            (bits(18),b1),
            (bits(19),s32(0)),
            (bits(20),s32(1)),
            (bits(21),s32(2)),
            (bits(22),s32(3)),
            (bits(23),s32(4)),
            (bits(24),s32(5)),
            (bits(25),s32(6)),
            (bits(26),s32(7)),
            (bits(27),s32(8)),
            (bits(28),s32(9)),
            (bits(29),s32(10)),
            (bits(30),s32(11)),
            (bits(31),b0),
            (bits(32),s32(12)),
            (bits(33),s32(13)),
            (bits(34),s32(14)),
            (bits(35),s32(15)),
            (bits(36),s32(16)),
            (bits(37),s32(17)),
            (bits(38),s32(18)),
            (bits(39),s32(19)),
            (bits(40),s32(20)),
            (bits(41),s32(21)),
            (bits(42),s32(22)),
            (bits(43),s32(23)),
            (bits(44),s32(24)),
            (bits(45),s32(25)),
            (bits(46),s32(26)),
            (bits(47),b0),
            (bits(48),Pn(0)),
            (bits(49),Pn(1)),
            (bits(50),Pn(2)),
            (bits(51),b1),
            (bits(52),b1),
            (bits(53),s32(27)),
            (bits(54),s32(28)),
            (bits(55),s32(29)),
            (bits(56),s32(30)),
            (bits(57),s32(31)),
            (bits(58),Da(0)),
            (bits(59),Da(1)),
            (bits(60),Da(2)),
            (bits(61),Da(3)),
            (bits(62),Da(4)),
            (bits(63),b0));
    action = {
      GPR(Pn) = (GPR(Da) <= s32) ? 1 : 0;
    };
  }

  define (instr=halt) {
    fields = (
              (bits(0),b0),
              (bits(1),b0),
              (bits(2),b0),
              (bits(3),b0),
              (bits(4),b0),
              (bits(5),b0),
              (bits(6),b0),
              (bits(7),b0),
              (bits(8),b0),
              (bits(9),b0),
              (bits(10),b0),
              (bits(11),b0),
              (bits(12),b0),
              (bits(13),b0),
              (bits(14),b0),
              (bits(15),b0),
              (bits(16),b0),
              (bits(17),b0),
              (bits(18),b0),
              (bits(19),b0),
              (bits(20),b0),
              (bits(21),b0),
              (bits(22),b0),
              (bits(23),b0),
              (bits(24),b0),
              (bits(25),b0),
              (bits(26),b0),
              (bits(27),b0),
              (bits(28),b0),
              (bits(29),b0),
              (bits(30),b0),
              (bits(31),b0),
              (bits(32),b0),
              (bits(33),b0),
              (bits(34),b0),
              (bits(35),b0),
              (bits(36),b0),
              (bits(37),b0),
              (bits(38),b0),
              (bits(39),b0),
              (bits(40),b0),
              (bits(41),b0),
              (bits(42),b0),
              (bits(43),b0),
              (bits(44),b0),
              (bits(45),b0),
              (bits(46),b0),
              (bits(47),b0),
              (bits(48),b0),
              (bits(49),b0),
              (bits(50),b0),
              (bits(51),b0),
              (bits(52),b0),
              (bits(53),b0),
              (bits(54),b0),
              (bits(55),b0),
              (bits(56),b0),
              (bits(57),b0),
              (bits(58),b0),
              (bits(59),b0),
              (bits(60),b0),
              (bits(61),b0),
              (bits(62),b0),
              (bits(63),b0));
    action = { halt(); };
  }

  define (instr=cmple_) {
    alias = cmple(Da(Da),Pn(Pn),s32(s32),PR(0),SG(0));
    syntax = ("cmple %f,%f,%f",Pn,Da,s32);
  }

}

define (core=sc) {
  archs = foo;
}
