//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//

//
// Tests the use of aliased register files.
//


define (arch = mixed) {

  // Various helper routines.

  void setCrField(bits<3> field,bits<32> x,bits<32> y) {
    var cr = CR;
    bits<4> r = 
      ( (x.signedLT(y)) ? 0x8 : 0) |
      ( (x.signedGT(y)) ? 0x4 : 0) |
      ( (x == y)        ? 0x2 : 0) ;
      
    cr.set(4*field,4*field+3,r);
    CR = cr;
  }

  //
  // Registers.
  //

  define (reg=CIA) {
    """
    Current instruction address.
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address.
    """;
    attrs = nia;
  }

  define (reg=CR) {
    """
    The condition register.
    """;
  }

  define (regfile=GPR) {
    """
    General purpose registers.
    """;
    size = 32;
  }

  define (regfile=rGPR) {
    """
    Upper and lower halves of GPR for use by MIXED instructions.
    """;
    size = 16;
    define (read) {
      alias = GPR;
      regs = ((0,7),(24,31));
    }
    define (write) {
      alias = GPR;
      regs = ((0,7),(24,31));
    }
  }

  define (regfile=aGPR) {
    """
    Alternate GPRs for MIXED:  Middle block of 16 registers.
    """;
    size = 16;
    define (read) {
      alias = GPR;
      regs = ((8,23));
    }
    define (write) {
      alias = GPR;
      regs = ((8,23));
    }
  }


  //
  // Instruction fields.
  //

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=OPCD5) {
    """
    Primary opcode.
    """;
    bits = (0,4);
  }

  define (instrfield=OPCD8) {
    """
    Primary opcode.
    """;
    bits = (0,7);
  }

  define (instrfield=XO) {
    """
    Extended opcode.
    """;
    bits = (21,30);
  }

  define (instrfield=XO2) {
    bits = (16,20);
  }

  define (instrfield=XO16) {
    """
    Extended opcode.
    """;
    bits = (6,7);
  }

  define (instrfield=BO16) {
    """
    Field used to specify options for the Branch Conditional instructions.
    """;
    bits = (5,5);
  }

  define (instrfield=BI16) {
    """
    Field used to specify a bit in the Condition Register to be used
    as the condition of a Branch Conditional instruction.
    """;
    bits = (6,7);
  }

  define (instrfield=BD8) {
    """
    Immediate field specifying a 14-bit signed two's complement branch displacement
    which is concatenated on the right with 0b00 and sign-extended.
    """;
    bits = (8,15);
  }

  define (instrfield=RA) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
  }
  define (instrfield=RB) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
  }
  define (instrfield=RT) {
    """
    Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
  }
  define (instrfield=RS) {
    bits = (6,10);
  }
  define (instrfield=SI) {
    """
    Signed immediate field for arithmetic operations.
    """;
    bits = (16,31);
  }
  define(instrfield=UI) {
    bits = (21,31);
  }

  define (instrfield=RY) {
    bits = (8,11);
  }
  define (instrfield=RX) {
    bits = (12,15);
  }

  define (instrfield=ARY) {
    bits = (8,11);
  }
  define (instrfield=ARX) {
    bits = (12,15);
  }

  //
  // Instructions.
  //

  define (instr=add) {
    fields=(OPCD(31),RT,RA,RB,XO(266));
    action = {
      GPR(RT) = GPR(RA) + GPR(RB);
    };
  }

  define (instr=addi) {
    fields=(OPCD(14),RT,RA,SI);
    action = {
      if (RA == 0) {
        GPR(RT) = signExtend(SI,32);
      } else {
        GPR(RT) = GPR(RA) + signExtend(SI,32);
      }
    };
  }

  define (instr=se_add) {
    width = 16;
    fields=(OPCD(1),RY,RX);
    action = {
      rGPR(RX) = rGPR(RX) + rGPR(RY);
    };
  }

  define (instr=se_mfar) {
    width = 16;
    fields=(OPCD8(3),ARY,RX);
    action = {
      rGPR(RX) = aGPR(ARY);
    };
  }

  define (instr=se_mtar) {
    width = 16;
    fields=(OPCD8(2),RY,ARX);
    action = {
      aGPR(ARX) = rGPR(RY);
    };
  }

  define (instr="subf.") {
    fields=(OPCD(0x1f),RT,RA,RB,XO(0x28));
    action = func() {
      GPR(RT) = GPR(RB) - GPR(RA);
       setCrField(0,GPR(RT),0);
    };
  }

  define (instr=se_bc) {
    width=16;
    fields=(OPCD5(0x1c),BO16,BI16,BD8);
    action = func() {
      bool cond_ok = (CR(BI16) == BO16);
      if (cond_ok) {
        NIA = CIA + signExtend(concat(BD8,zero(1)),32);
      }
    };
  }

  define (instr=e_ori) {
    fields=(OPCD(6),RS,RA,XO2(26),UI);
    action = {
      GPR(RS) = GPR(RA) | UI;
    };
  }

  // Special instruction:  This is used for simulation purposes and is
  // not a PPC instruction.
  define (instr=halt) {
    fields=(OPCD8(0));
    action = {
      halt();
    };
  }

}

define (core = P) {
  archs = mixed;
}
