// Test assember for instruction field syntax 
// Note: This example encodes the DaDb field (without DaDa)
// Also makes sure that bigger fields, in this case a 31-bit field with a shift,
// can be encoded.

define (arch = miniSC){

  bit_endianness = little;

  attrs = (one_word);

  define (regfile=D) 
    {
      size   = 16;
      width  = 40;
      prefix = d;
    }

  define (reg=PC) 
    {
      attrs = cia;	
      serial = true;
    }

  define (reg=NPC)		
    {  
      attrs = nia;
      serial = true;
    }


  define (instrfield = DaDb) 	
    { 
      width = 7; 	// number of  input  bits 
      size = 8; 	// number of  output bits
      ref = D; 
      pseudo = true;
      define (instrfield=JJJJJ) 
        { 
          bits = (4,0); 
          // Last two entries purposefully omitted to make sure that we can handle
          // an incompletely specified table.
          table = ((0,4),(0,5),(0,6),(0,7),(1,4),(1,5),(1,6),(1,7), 
                   (2,4),(2,5),(2,6),(2,7),(3,4),(3,5),(3,6),(3,7), 
                   (0,0),(0,1),(0,2),(0,3),(4,4),(4,5),(4,6),(4,7),
                   (1,2),(1,3),(5,6),(5,7),(2,2),(2,3),reserved/*,(6,6),(6,7)*/);
        }
	
      fields = ( 6,JJJJJ(1),5,JJJJJ(0) );
      syntax = ("%f,%f",Da,Db);
	
      define(instrfield=Da) {
        size = 4;
        fields = (3,0);
      }	
      define(instrfield=Db) {
        size = 4;
        fields = (7,4);
      }	

    }
  define (instrfield=Da_minus_Db) {
    alias = DaDb;
    syntax = ("%f,-%f",Da,Db);
  }
  define (instrfield=DaL_DbH) {
    alias = DaDb;
    syntax = ("%f.L,%f.H",Da,Db);
  }
  define (instrfield=DaH_DbL) {
    alias = DaDb;
    syntax = ("%f.H,%f.L",Da,Db);
  }
  define (instrfield=FFF) 		
    {
      width = 4;	
      ref = D;
      pseudo = true;
    }


  define (instrfield=imm) {
    width = 2;
    pseudo = true;
  } 
  define (instrfield=kk) 
    {
      width = 2;
      size = 16;	
      ref = D;
      pseudo = true;
      define(instrfield = JJ) {
        bits = (0);
        table = ((0,2,4,6),(1,3,5,7));
      }
      fields = (1,JJ(3),1,JJ(2),1,JJ(1),1,JJ(0));
      syntax = ("%f:%f:%f:%f",Da,Db,Dc,Dd);

      define(instrfield = Da) {
        size = 4;
        fields = (3,0);
      }
      define(instrfield = Db) {
        size = 4;
        fields = (7,4);
      }
      define(instrfield = Dc) {
        size = 4;
        fields = (11,8);
      }
      define(instrfield = Dd) {
        size = 4;
        fields = (15,12);
      }
    
    }

  define (instrfield=Label) {
    width = 31;
    shift = 1;
    pseudo = true;
  }
  define (instrfield=XX) {
    width = 2;
    assembler = true;
    pseudo = true;
    value = 0;
  }
  define (instrfield=YY) {
    width = 2;
    assembler = true;
    pseudo = true;
    value = 0;
  }


  define (instrfield=OPCD) 	
    {
      width  = variable; 
      pseudo = true;
    }


  define(instr=add1) 
    { 
      fields =((bits(4,0),DaDb(4,0)),  
               (bits(6,5),0x2),  
               (bits(9,7),FFF(2,0)),
               (bits(13,10),0xB),
               (bits(14),reserved),
               (bits(15),b0),
               (bits(16),FFF(3)),
               (bits(18,17),DaDb(6,5)),
               (bits(31,19),b0));
      attrs = one_word;
      syntax = ("add %f,%f",symmetric(DaDb),FFF);
      action = {};
    }
  define(instr=add2) 
    { 
      fields =((bits(0),0x1),  
               (bits(5,1),DaDb(4,0)),  
               (bits(6),0x1),  
               (bits(9,7),FFF(2,0)),
               (bits(13,10),0xB),
               (bits(14),reserved),
               (bits(15),b0),
               (bits(16),FFF(3)),
               (bits(18,17),DaDb(6,5)),
               (bits(31,19),b1));
      attrs = one_word;
      syntax = ("add %f,%f",Da_minus_Db,FFF,DaDb(Da_minus_Db));
      action = {};
    }

  define(instr=add3) 
    { 
      fields =((bits(4,0),DaDb(4,0)),  
               (bits(6,5),0x3),  
               (bits(9,7),FFF(2,0)),
               (bits(13,10),0xB),
               (bits(14),reserved),
               (bits(15),b0),
               (bits(16),FFF(3)),
               (bits(18,17),DaDb(6,5)),
               (bits(31,19),b0));
      attrs = one_word;
      syntax = ("add %f,%f",DaL_DbH,FFF,DaDb(DaL_DbH));
      action = {};
    }
  define(instr=add4) 
    { 
      fields =((bits(0),0x1),  
               (bits(5,1),DaDb(4,0)),  
               (bits(6),0x0),  
               (bits(9,7),FFF(2,0)),
               (bits(13,10),0xB),
               (bits(14),reserved),
               (bits(15),b0),
               (bits(16),FFF(3)),
               (bits(18,17),DaDb(6,5)),
               (bits(31,19),b1));
      attrs = one_word;
      syntax = ("add %f,%f",DaH_DbL,FFF,DaDb(DaH_DbL));
      action = {};
    }



  define(instr = mv) {
    attrs = one_word;
    fields = ((bits(1,0),kk),
              (bits(5,2),FFF),
              (bits(31,6),0x3F));
    syntax = ("%i %f,%f",kk,FFF);
    action = {};
  }
  define (instr=mv_sp) {
    attrs = one_word;
    fields = ((bits(1,0),0),
              (bits(5,2),FFF),
              (bits(31,6),0x3a));
    syntax = ("mv sp,%f",FFF);
    action = {};
 
  }

  define (instr=jmp) {
    attrs = other;
    fields = (
              (bits(34,4),Label),
              (bits(1,0),XX),
              (bits(3,2),YY),
              (bits(39,35),0x1a)
              );
    syntax = ("jmp (%f)",Label);
    action = {};
  }

  define (instr=jmp0) {
    syntax = ("%i");
    alias = jmp(Label(0));
  }


  define(instr = doen) {
    attrs = one_word;
    fields = ((bits(1,0),imm),
              (bits(5,2),FFF),
              (bits(15,6),0x3a));
    syntax = ("%i %f,%f",imm,FFF);
    action = {};
  }
  define(instr = doen0) {
    attrs = one_word;
    alias = doen(imm(0),FFF(FFF));
    syntax = ("doen0 %f",FFF);
  }; 
  define(instr = doen1) {
    attrs = one_word;
    alias = doen(imm(1),FFF(FFF));
    syntax = ("doen1 %f",FFF);
  }; 
  define(instr = doen2) {
    attrs = one_word;
    alias = doen(imm(2),FFF(FFF));
    syntax = ("doen2 %f",FFF);
  }; 
  define(instr = doen3) {
    attrs = one_word;
    alias = doen(imm(3),FFF(FFF));
    syntax = ("doen3 %f",FFF);
  }; 

  define (assembler) {
    line_separators = ";";
  }
}
define (core = SC)
{
	instrtables = (other,one_word);
	archs = miniSC;
}

