//
// Test attribute inheritance for shorthand instructions
//

define (core = rubber) {
  archs = rubber; 
}

define (arch = rubber) {


  //##############################################################################
  // Parameters
  //##############################################################################

  bit_endianness = little;
     
  //==============================================================================

  //##############################################################################
  // Attributes
  //##############################################################################
   
  attrs = ( micro );

  //============================================================================== 


  //##############################################################################
  // Registers
  //##############################################################################

  define (reg=CIA) {
    """
    Current instruction address
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address
    """;
    attrs = nia;
  }

  //============================================================================== 


  //##############################################################################
  // Instructions
  //##############################################################################
 
  define (instr = foo) {  
    width = 32;  
    fields = (
              (bits(23,20),b0000), (bits(19,16),b0001), (bits(15,12),b1000)
              );
    syntax = ("foo");
    attrs = (micro);
    action =  { };
    asm_rules = (ASM_R1);    
  }  
 
  define (instr = foo1) {     
    syntax = ("foo1");
    alias = foo();
    inherit_attrs = true; 
    asm_rules = (ASM_R1);    
  }
  
  define (instr = foo2) {     
    syntax = ("foo2");
    alias = foo();
    attrs = (micro);
    asm_rules = (ASM_R1);    
  }  
 
  define (instr = done) { 
    width = 32;  
    fields = ((bits(31,0),0));
    syntax = ("done");
    action =  { 
      disp("done\n"); 
      halt(); 
    };
    asm_rules = (ASM_R1);
  }  
   
  //============================================================================== 

  //##############################################################################
  // Assembler
  //##############################################################################
  
  define (assembler) {
    comments = ("//", "#", ";");
    line_comments = ("//", "#", ";");
    line_separators = ("\n");

    define (rule = ASM_R1) {
      action = func (InstrInfo ii) {
        if (ii.instrHasAttr(micro)) {
          info(1, "This is a micro instruction.");
        }
        else {
          info(1, "This is not a micro instruction.");
        }
      };
    }
    
  }

  //============================================================================== 


}



