// Test shorthand instructions with width over 32 bits 
// Check whether the immediate values are correctly patched into the opcode

define (core = rubber) {
  archs = rubber; 
  instrtables = (other);
}

define (arch = rubber) {

  bit_endianness = little;
  instr_endianness = little;
  data_endianness = little;
 
  
//==============================================================================

//##############################################################################
// Attributes
//##############################################################################

attrs = (log_as_reg);
         
//============================================================================== 



//##############################################################################
// Registers
//##############################################################################

  define (reg=cIA) {
    """
    Current instruction address
    """;
    attrs = cia;
    serial = true;
  }

  define (reg=nIA) {
    """
    Next instruction address
    """;
    attrs = nia;
    serial = true;
  }

  define (regfile = a) {
    attrs = (log_as_reg);
    width = 10;
    size = 4;
  }  

  
//##############################################################################
// Instruction Fields excluding instruction-type ones
//##############################################################################

  define(instrfield=AA){
    display = dec;
    pseudo = true;
    width = 2;    
  }

  define(instrfield=AM){
    display = dec;
    pseudo = true;
    width = 2;    
  }
  
  define(instrfield=MODE){
    display = dec;
    pseudo = true;
    width = 2;
    enumerated = ("a","b","c","d");
  } 
  
 
//##############################################################################
// Assembler
//##############################################################################
  
  define (assembler) {
    comments = ("//", "#", ";");
    line_comments = ("//", "#", ";");
    line_separators = ("\n"); // In additional to new-line separator, default is ";"
    asm_instrtables = (other);
    disasm_instrtables = (other);  
  }
  
  
//##############################################################################
// Instructions
//##############################################################################  

  define (instr = done){
    width = 64;
    fields = ((bits(63,0),0));  
    syntax = ("done");
    action={ 
            halt(); 
           };
  }  

  define (instr = st_aX_aY_mode) {
    width = 64;
    fields = ((bits(63,60),b1111),
             (bits(14,11),b0101),(bits(10,9),AA),
             (bits(6,5),AM),(bits(8,7),MODE)
             );
    syntax = ("st [a%f]+a%f,%f", AA, AM, MODE);
    action = { 
             };    
  }    
  
  define (instr = st_aX_aY_a) { 
    syntax = ("sta [a%f]+a%f", AA, AM);
    alias = st_aX_aY_mode(AA(AA),AM(AM),MODE(0));
  }  
  
  define (instr = st_aX_aY_b) {
    syntax = ("stb [a%f]+a%f", AA, AM);
    alias = st_aX_aY_mode(AA(AA),AM(AM),MODE(1));
  }  

  define (instr = st_aX_aY_c) { 
    syntax = ("stc [a%f]+a%f", AA, AM);
    alias = st_aX_aY_mode(AA(AA),AM(AM),MODE(2));
  }  

  define (instr = st_aX_aY_d) { 
    syntax = ("std [a%f]+a%f", AA, AM);
    alias = st_aX_aY_mode(AA(AA),AM(AM),MODE(3));
  }  
  
}  // End of arch spec

















