// Test patchInstr(macro, micro, shift)

define (core = rubber) {
  archs = rubber; 
  instrtables = (other, instr_opV, instr_opZ);
}

define (arch = rubber) {


//##############################################################################
// Parameters
//##############################################################################

  bit_endianness = little;
  instr_endianness = little;

//==============================================================================

//##############################################################################
// Attributes
//##############################################################################
   
    attrs = (log_as_reg, 
             instr_macro, instr_opV, instr_opZ
            );

//============================================================================== 


//##############################################################################
// Registers
//##############################################################################

  define (reg=CIA) {
    """
    Current instruction address
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address
    """;
    attrs = nia;
  }

  define (regfile = a) { 
    attrs = (log_as_reg);
    width = 10;
    size = 4;
  }  
  
//============================================================================== 


//##############################################################################
// Instruction Fields
//##############################################################################

  define(instrfield=AA){
    display = dec;
    pseudo = true;
    width = 2;    
  }

  define(instrfield=Imme4){
    display = dec;
    pseudo = true;
    width = 4; 
  } 
  
  define(instrfield=opV) {
    display = hex;
    pseudo = true;
    width = 18;
    type = instr;
    ref = instr_opV;
  }

  define(instrfield=opZ) {
    display = hex;
    pseudo = true;
    width = 2;
    type = instr;
    ref = instr_opZ;
  }
   
  
//============================================================================== 

//##############################################################################
// Instructions
//##############################################################################

  define (instr = mv){ 
    width = 64;
    fields = (
              (bits(55,48),b11001100),
              (bits(47,46),AA), (bits(43,40),Imme4),
              (bits(21,4),opV), (bits(1,0),opZ)
             );
    syntax = ("mv a%f,%f", AA, Imme4);
    attrs = (instr_macro);     
    action={ 
            a(AA) = Imme4;
            run(opV, opZ);
           };    
  }
 
  define (instr = mvv){  
    width = 18;
    fields = (
              (bits(17,16),b11), 
              (bits(15,14),AA), (bits(11,8),Imme4),
              (bits(7,0),0)
             );
    syntax = ("mvv a%f,%f", AA, Imme4);
    attrs = (instr_opV);    
    action={
            a(AA) = Imme4;
           };
  }

  define (instr = emptyV){  
    width = 18;
    fields = (
              (bits(17,0),0)
             );
    syntax = ("empty");
    attrs = (instr_opV);    
    action={};
  }
  
    define (instr = Z1){  
    width = 2;
    fields = (
             (bits(1,0),b10)
             );
    syntax = ("z1");
    attrs = (instr_opZ);    
    action={
            a(1) = a(1) + 1;
           };
  }  
  
  define (instr = Z0){  
    width = 2;
    fields = (
             (bits(1,0),b01)
             );
    syntax = ("z0");
    attrs = (instr_opZ);    
    action={
            a(0) = a(0) + 1;
           };
  }

  define (instr = emptyZ){  
    width = 2;
    fields = (
             (bits(1,0),0)
             );
    syntax = ("empty");
    attrs = (instr_opZ);    
    action={};
  }
  
 
  define (instr = done){ 
    width = 64;
    fields = ((bits(63,0),0));  
    syntax = ("done");
    attrs = (instr_macro);
    action={ 
            halt(); 
           };
  }  

//============================================================================== 

//##############################################################################
// Assembler
//##############################################################################
  
  parallel_execution = 1;
  define (assembler) {
    comments = ("//", "#");
    line_comments = ("//", "#");
    packet_grouping = ("\n");
    line_separators = ("\n");
    asm_instrtables = (other, instr_opV, instr_opZ);
    disasm_instrtables = (other, instr_opV, instr_opZ);    
  }
  
//============================================================================== 

//##############################################################################
// Post-packet Assembly Hooks
//##############################################################################

  post_packet_asm = func(InstrBundle b) {
    InstrBundle newb;
    InstrInfo ii;

    if (b.size() == 1) { 
        if (b[0].instrHasAttr(instr_macro)) {
            newb.push_back(b[0]);
        } 
        else {
            error(1,"Incorrect instruction formation: ", b.size());
        }
    } 
    
    if (b.size() == 2) { 
        if (b[0].instrHasAttr(instr_macro) && b[1].instrHasAttr(instr_opV)) {
            newb.push_back(patchInstr(b[0], b[1], 4));
        } 
        else if (b[0].instrHasAttr(instr_macro) && b[1].instrHasAttr(instr_opZ)) {
            newb.push_back(patchInstr(b[0], b[1], 0));
        }         
        else {
            error(1,"Incorrect instruction formation: ", b.size());
        }
    }     
     
    if (b.size() == 3) { 
        if (b[0].instrHasAttr(instr_macro) && b[1].instrHasAttr(instr_opV) && b[2].instrHasAttr(instr_opZ)) {
            ii = patchInstr(b[0], b[1], 4);
            ii = patchInstr(ii, b[2], 0);
            newb.push_back(ii);
        } 
        else {
            error(1,"Incorrect instruction formation: ", b.size());
        }
    }   

    if (b.size() < 1 || b.size() > 3)   error(1,"Incorrect instruction formation: ", b.size());
    
    b = newb;
  };

//==============================================================================


}  // End of core spec



