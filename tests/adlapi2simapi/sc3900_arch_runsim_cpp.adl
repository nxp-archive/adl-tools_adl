# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch_runsim.adl"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch_runsim.adl"





# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 1
# 30 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl"
define (arch = sc3900) {


# 1 "/vobs/vb_dp_arch/ADLsim/general/common.adl" 1
define (parm = max2_undefined_behaviour ) {
 options = (type3800,type3400);


 constant=true;
 value = type3800;
}

define (parm = chip_version ) {
 options = (sc3400,sc3450,sc3850,sc5);


 constant=true;
 value = sc5;
}
# 32 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
attrs = (Type1, Type2, Type3, Type4, Type11,Type12, Type13, Type14,branch_target,bmu,one_word,two_word,three_word,tw_prefix,esg_prefix,instr_tbl_PFX,instr_tbl_MOVE,instr_tbl_MOVEL_DRS,instr_tbl_MOVEL_DRD,instr_tbl_MOVE_ISV,instr_tbl_MOVE_ISV_PCU,instr_tbl_MOVEL_EXT,instr_tbl_MOVEC,instr_tbl_MOVE_MEM,instr_tbl_MOVE_AAM,instr_tbl_MOVE_AAM_MEM,instr_tbl_MOVEP,instr_tbl_MOVEP_MEM,instr_tbl_MAC,instr_tbl_DAU,instr_tbl_DAU_Tbit,instr_tbl_DAU_Pbit,instr_tbl_DAU_ACS2H,instr_tbl_DAU_ACS2L,instr_tbl_DAU_SAD4,instr_tbl_DAU_ASR,instr_tbl_DAU_SEARCH,instr_tbl_MPY,instr_tbl_DLU,instr_tbl_DLU_excep,instr_tbl_DBS,instr_tbl_DBS_DnNoSrc,instr_tbl_DBS_DSH,instr_tbl_DBS_DSH_SAT,instr_tbl_AAU,instr_tbl_AAU_Tbit,instr_tbl_AAU_MMA,instr_tbl_BMU,instr_tbl_BMU_BMTSTxPCU,instr_tbl_BMU_BMTSTxR,instr_tbl_BMU_BMTSTxDMem,instr_tbl_ACH,instr_tbl_COF,instr_tbl_COF_RTS,instr_tbl_APC,instr_tbl_STK_ext,instr_tbl_STK,instr_tbl_ALC,instr_tbl_ALC_ARS,instr_tbl_ALC_IMM,instr_tbl_ALC_IMM_DS,instr_tbl_ALC_IMM_RF,instr_tbl_ALC_DRS,addr_gen,DBGInstr,two_cycles,synchr_instrs,true_block_instr,false_block_instr,NopInstr,sc3900_instr,non_architectural,sc3900_to_remove,doc_hidden,doc_no_code);
# 65 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
attrs = (prefix,serial_one_word,serial_two_word,serial_three_word,serial_four_word,DCMP,DMPY,DSHFT,DBIT,DARIT,LARIT,LCMP,LLOG,LMREG,LMV,LSTK,LSCH,LDCH,IARIT,ICMP,ILGC,IMREG,PCOF,PLP,PMS,PRFX,V2,V3,V4,V5,V6,V6D,V7);



bit_endianness = little;
# 81 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
blk = (lsu, pcu, ipu, dalu, lsu_ipu);



define (parm = dalu0) { options = (true,false) ; value = true;}
define (parm = dalu1) { options = (true,false) ; value = true;}
define (parm = dalu2) { options = (true,false) ; value = true;}
define (parm = dalu3) { options = (true,false) ; value = true;}


define (instrfield=aaa)

{
 width = 3;
 prefix = true;
 pseudo = true;
 attrs = doc_hidden;
}
# 251 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (reloc=R_SC3900_AbsAdd31_1_1) { value=51; width = 48; }
define (reloc=R_SC3900_RRelAdd4_1_1) { value=52; width = 48; }
define (reloc=R_SC3900_RelAdd15_4_4_4) { value=53; width = 48; }
define (reloc=R_SC3900_RelAdd16_1_1) { value=54; width = 32; }
define (reloc=R_SC3900_RelAdd16_t1_1_1) { value=55; width = 48; }
define (reloc=R_SC3900_RelAdd20_1_1) { value=56; width = 32; }
define (reloc=R_SC3900_RelAdd20_t1_1_1) { value=57; width = 48; }
define (reloc=R_SC3900_RelAdd7_1_1) { value=58; width = 32; }
define (reloc=R_SC3900_RelAdd7_t1_1_1) { value=59; width = 48; }
define (reloc=R_SC3900_S15_0_0) { value=60; width = 48; }
define (reloc=R_SC3900_S16_0_0) { value=61; width = 48; }
define (reloc=R_SC3900_U5_0_0) { value=62; width = 32; }
define (reloc=R_SC3900_s10_0_0) { value=63; width = 32; }
define (reloc=R_SC3900_s10_t1_0_0) { value=64; width = 32; }
define (reloc=R_SC3900_s15_0_0) { value=65; width = 48; }
define (reloc=R_SC3900_s15_t7_0_0) { value=66; width = 48; }
define (reloc=R_SC3900_s16_0_0) { value=67; width = 48; }
define (reloc=R_SC3900_s16_t3_0_0) { value=68; width = 48; }
define (reloc=R_SC3900_s16_t5_0_0) { value=69; width = 64; }
define (reloc=R_SC3900_s32_0_0) { value=70; width = 64; }
define (reloc=R_SC3900_s32_t1_0_0) { value=71; width = 48; }
define (reloc=R_SC3900_s32_t2_0_0) { value=72; width = 48; }
define (reloc=R_SC3900_s32_t4_0_0) { value=73; width = 48; }
define (reloc=R_SC3900_u16_0_0) { value=74; width = 48; }
define (reloc=R_SC3900_u16_t3_0_0) { value=75; width = 32; }
define (reloc=R_SC3900_u3_0_0) { value=76; width = 32; }
define (reloc=R_SC3900_u32_0_0) { value=77; width = 48; }
define (reloc=R_SC3900_u32_t2_0_0) { value=78; width = 48; }
define (reloc=R_SC3900_u3_t2_0_0) { value=79; width = 32; }
define (reloc=R_SC3900_u4_0_0) { value=80; width = 32; }
define (reloc=R_SC3900_u5_0_0) { value=81; width = 32; }
define (reloc=R_SC3900_u5_t0_0_0) { value=82; width = 48; }
define (reloc=R_SC3900_u5_t2_0_0) { value=83; width = 32; }
define (reloc=R_SC3900_u5_t3_0_0) { value=84; width = 32; }
define (reloc=R_SC3900_u6_0_0) { value=85; width = 32; }
define (reloc=R_SC3900_u7_0_0) { value=86; width = 48; }
define (reloc=R_SC3900_u8_0_0) { value=87; width = 48; }
define (reloc=R_SC3900_u4dyn_0_0) { value=88; width = 32; }
define (reloc=R_SC3900_u4dyn2_0_0) { value=89; width = 32; }
define (reloc=R_SC3900_u9dyn_0_0) { value=90; width = 32; }
define (reloc=R_SC3900_u10dyn_0_0) { value=91; width = 32; }
define (reloc=R_SC3900_s32dyn_0_0) { value=92; width = 64; }
define (reloc=R_SC3900_s32dyn2_0_0) { value=93; width = 64; }
define (reloc=R_SC3900_u5dyn_0_0) { value=94; width = 16; }
define (reloc=R_SC3900_u5dyn2_0_0) { value=95; width = 16; }
define (reloc=R_SC3900_u5dyn3_0_0) { value=96; width = 16; }
define (reloc=R_SC3900_u5dyn4_0_0) { value=97; width = 16; }
# 337 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (exception = Privelege) { action = {};}
define (exception = Overflow) { action = {};}
define (exception = IllegalAddress) { action = {};}

parallel_execution = 8 ;






define (parm=EndianMode)

{
 options = (Big, Little);
 value = Big;
}




define (parm=LegalPC)

{
 options = (true,false);
 value = true;
}


define (parm=exception_condition)



{
 options = (true,false);
 value = false;
}

define (parm=exception_overflow)


{
 options = (true,false);
 value = false;
}
# 391 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (parm=EMR_LOW)



{
 options = (true,false);
 value = false;
}


define (parm=clear_SR_PE)


{
 options = (true,false);
 value = false;
}

define (parm=set_SR_PE)


{
 options = (enable,disable);
 value = disable;
}


define (parm=prefix_grouping) {
  options = (true,false);
 value = false;
}

define (parm=decode_mode) {

  options = (prefix_mode,esg_mode,usual_mode);
 value = prefix_mode;
}

define (parm=carry_update) {

  options = (ifa_even,ifa_odd);
 value = ifa_even;
}

define (parm=ignore_lpmarkA) {

  options = (a_not_ignore,a_delay_slot,a_double_delay_slot);
 value = a_not_ignore;
}

define (parm=ignore_lpmarkB) {

  options = (b_not_ignore,b_delay_slot,b_double_delay_slot);
 value = b_not_ignore;
}

define (regfile=LoopEndAddress)
{
   size = 4;
   width = 32;
   attrs = (non_architectural,doc_hidden);
}



define (regfile=Lpst)
{
 size = 4;
 define (entry=0) { reg = LpstFlag; }
 define (entry=1) { reg = LpstAddr; }
 define (entry=2) { reg = LpstIdx; }
 attrs = doc_hidden;
}

define (reg = LpstFlag) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = LpstAddr) {

   width = 32;
   attrs = doc_hidden;
}

define (reg = LpstIdx) {

   width = 2;
   enumerated = (L0,L1,L2,L3);
   serial = true;
   reset = L0;
   attrs = doc_hidden;
}


define (regfile=LpstSq)
{
 size = 4;
 define (entry=0) { reg = LpstSqFlag; }
 define (entry=1) { reg = LpstSqAddr; }
 define (entry=2) { reg = LpstSqIdx; }
 attrs = doc_hidden;
}

define (reg = LpstSqFlag) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = LpstSqAddr) {

   width = 32;
   attrs = doc_hidden;
}

define (reg = LpstSqIdx) {

   width = 2;
   enumerated = (L0,L1,L2,L3);
   serial = true;
   reset = L0;
   attrs = doc_hidden;
}


define (regfile=Lpend)
{
 size = 4;
 define (entry=0) { reg = LpendFlag; }
 define (entry=1) { reg = LpendCof; }
 define (entry=2) { reg = LpendIdx; }
 attrs = doc_hidden;
}

define (reg = LpendFlag) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = LpendCof) {

   width = 1;
   enumerated = (NotTaken,Taken);
   serial = true;
   reset = NotTaken;
   attrs = doc_hidden;
}

define (reg = LpendIdx) {

   width = 2;
   enumerated = (L0,L1,L2,L3);
   serial = true;
   reset = L0;
   attrs = doc_hidden;
}


define (regfile=LpendSq)
{
 size = 4;
 define (entry=0) { reg = LpendSqFlag; }
 define (entry=1) { reg = LpendSqCof; }
 define (entry=2) { reg = LpendSqIdx; }
 attrs = doc_hidden;
}

define (reg = LpendSqFlag) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = LpendSqCof) {

   width = 1;
   enumerated = (NotTaken,Taken);
   serial = true;
   reset = NotTaken;
   attrs = doc_hidden;
}

define (reg = LpendSqIdx) {

   width = 2;
   enumerated = (L0,L1,L2,L3);
   serial = true;
   reset = L0;
   attrs = doc_hidden;
}



define (regfile=LpmarkA)
{
 size = 4;
 define (entry=0) { reg = LpmarkaFlag; }
 define (entry=1) { reg = LpmarkaCof; }
 define (entry=2) { reg = LpmarkaIdx; }
 attrs = doc_hidden;
}

define (reg = LpmarkaFlag) {


   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = LpmarkaCof) {

   width = 1;
   enumerated = (NotTaken,Taken);
   serial = true;
   reset = NotTaken;
   attrs = doc_hidden;
}

define (reg = LpmarkaIdx) {

   width = 2;
   enumerated = (L0,L1,L2,L3);
   serial = true;
   reset = L0;
   attrs = doc_hidden;
}

define (regfile=LpmarkB)
{
 size = 4;
 define (entry=0) { reg = LpmarkbFlag; }
 define (entry=1) { reg = LpmarkbCof; }
 define (entry=2) { reg = LpmarkbIdx; }
 attrs = doc_hidden;
}

define (reg = LpmarkbFlag) {


   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = LpmarkbCof) {

   width = 1;
   enumerated = (NotTaken,Taken);
   serial = true;
   reset = NotTaken;
   attrs = doc_hidden;
}

define (reg = LpmarkbIdx) {

   width = 2;
   enumerated = (L0,L1,L2,L3);
   serial = true;
   reset = L0;
   attrs = doc_hidden;
}

define (regfile=LpmarkM)
{
 size = 4;
 define (entry=0) { reg = LpmarkmFlag; }
 define (entry=1) { reg = LpmarkmCof; }
 define (entry=2) { reg = LpmarkmIdx; }
 attrs = doc_hidden;
}

define (reg = LpmarkmFlag) {


   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;

}

define (reg = LpmarkmCof) {

   width = 1;
   enumerated = (NotTaken,Taken);
   serial = true;
   reset = NotTaken;
   attrs = doc_hidden;
}

define (reg = LpmarkmIdx) {

   width = 2;
   enumerated = (L0,L1,L2,L3);
   serial = true;
   reset = L0;
   attrs = doc_hidden;
}

define (regfile=LpmarkI)
{
 size = 4;
 define (entry=0) { reg = LpmarkiFlag; }
 define (entry=1) { reg = LpmarkiCof; }
 define (entry=2) { reg = LpmarkiIdx; }
 attrs = doc_hidden;
}

define (reg = LpmarkiFlag) {


   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = LpmarkiCof) {

   width = 1;
   enumerated = (NotTaken,Taken);
   serial = true;
   reset = NotTaken;
   attrs = doc_hidden;
}

define (reg = LpmarkiIdx) {

   width = 2;
   enumerated = (L0,L1,L2,L3);
   serial = true;
   reset = L0;
   attrs = doc_hidden;
}

define (reg = LpmarksFlag) {

   width = 3;
   enumerated = (L0,L1,L2,L3,False);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = DoenFlag) {

   width = 3;
   enumerated = (L0,L1,L2,L3,False);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = DoenSqFlag) {

   width = 3;
   enumerated = (L0,L1,L2,L3,False);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}


define (reg = CofValid) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;

   define (write) {
      action = func(bits<1> x)
      {
  CofValid=x;



      };
   }
   attrs = doc_hidden;
}
# 804 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (reg = CoreArch) {




   reset = 0x3900;

   attrs = doc_hidden;
}

define (reg = CofTaken) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = CofExec) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = CofCond) {

   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}

define (reg = CofNonCond) {

   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}


define (reg = DelayedCof) {

   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}


define (reg = SubInstr) {

   width = 2;
   enumerated = (not_sub,regular,regular_2nd_cycle,delayed);
   serial = true;
   reset = not_sub;
   attrs = doc_hidden;
}

define (reg = SubInstrHelper) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = RTInstr) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = TrapInstr) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = NoBtb) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = TF_RTS) {

   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}

define (reg = INVALID_ENTRY) {

   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}

define (reg = PreCalc) {

   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}

define (reg = CondVLES) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}

define (reg = CondInstrStatus) {

   reset = 0;
   serial = true;
   attrs = doc_hidden;
}

define (reg = Stop) {

   width = 1;
   enumerated = (False,True);
   serial = true;
   reset = False;
   attrs = doc_hidden;
}
# 983 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (parm=NonSequentialShortLoop) {

 options = (true,false);
 value = false;
}

define (parm=medium_loop_enabled) {

 options = (true,false);
 value = false;
}

define (parm=nl_state) {

 options = (true,false);
 value = false;
}

define (parm=cond_skip_flag) {

 options = (true,false);
 value = false;
}

define (parm=cond_flag) {

 options = (true,false);
 value = false;
}


define (parm=jsrd_occured) {

      options = (true,false);
      value = false;
}

define (parm=SP_128bit_instr_occured) {

      options = (true,false);
      value = false;
}

define (parm=lpab_active) {


 options = (loop0,loop1,loop2,loop3,none);
 value = none;
}
# 1058 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (instrfield=lpmarkA)

{
 width = 1;
 prefix = true;
 pseudo = true;
 enumerated = ("","lpmarka");
 value = "";
 attrs = doc_hidden;
}

define (instrfield=lpmarkB)

{
 width = 1;
 prefix = true;
 pseudo = true;
 enumerated = ("","lpmarkb");
 value = "";
 attrs = doc_hidden;
}
define (instrfield=lpmarkM)

{
 width = 1;
 prefix = true;
 pseudo = true;
 enumerated = ("","lpmarkm");
 value = "";
 attrs = doc_hidden;
}
define (instrfield=lpmarkI)

{
 width = 1;
 prefix = true;
 pseudo = true;
 enumerated = ("","lpmarki");
 value = "";
 attrs = doc_hidden;
}
define (instrfield=lpmarkS)

{
 width = 1;
 prefix = true;
 pseudo = true;
 enumerated = ("","lpmarks");
 value = "";
 attrs = doc_hidden;
}




decode_miss = func(addr_t, unsigned) {
  info (4,"decode miss");
  halt();
};






define (reg = Cof_instr) {

   width = 1;
   enumerated = (Taken,NotTaken);
   reset = NotTaken;
   serial = true;
   attrs = doc_hidden;
   define (write) {
      action = func(bits<1> x)
      {
  Cof_instr=x;
  if (Cof_instr==Cof_instr::Taken) {
     CofTaken=CofTaken::True;
  } else {
     CofTaken=CofTaken::False;
  }
      };
   }
}


define (reg = Fetch) {
   width = 2;
   enumerated = (Normal,DelaySlot,DoubleDelaySlot,Jump);
   reset = Normal;
   serial = true;
   attrs = doc_hidden;
}

define (reg = END_OF_VLES) {

   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}

define (reg = SPECULATED_VLES) {


   width = 1;
   enumerated = (False,True);
   reset = False;
   serial = true;
   attrs = doc_hidden;
}

define (reg = SPECULATED_VLES_IFC) {


   width = 1;
   enumerated = (False,True);
   reset = False;
   serial = true;
   attrs = doc_hidden;
}

define (reg = ProfEn) {


   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}

define (reg = NOP_DETECTION) {

   width = 1;
   enumerated = (False,True);
   reset = False;
   attrs = doc_hidden;
}
# 1211 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (reg=num_of_inst) {
  width = 16;
  reset = 0;
  serial = true;
  attrs = doc_hidden;
}

define (reg=DEBUG) {
  width = 1;
  reset = 0;
  serial = true;
  attrs = doc_hidden;
}


define (reg=SR)
{
 """
 Status Register
 """;

 reset = 0x03E40000;
 attrs = doc_no_code;

 define (field = C)
 {
  bits=0;
 }
 define (field = (T,P0))
 {
  bits=1;
 }
 define (field = SM)
 {
  bits=2;
 }
 define (field = RM)
 {
  bits=3;
 }
 define (field = SCM)
 {
  bits=(5,4);
 }
 define (field = S)
 {
  bits=6;
 }
 define (field = SM2)
 {
  bits=7;
 }
# 1281 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 define (field = W20)
 {
  bits=12;
 }

 define (field = ASPA)
 {
  bits=13;
 }


 define (field = PE)



 {
  bits=17;
 }
 define (field = EXP)
 {
  bits=18;
 }
 define (field = DI)
 {
  bits=19;
 }
 define (field = OVE)
 {
  bits=20;
 }
 define (field = I)
 {
  bits=(25,21);
 }
 define (field = LF0)
 {
  bits=27;
  attrs = doc_hidden;
 }
 define (field = LF1)
 {
  bits=28;
  attrs = doc_hidden;
 }
 define (field = LF2)
 {
  bits=29;
  attrs = doc_hidden;
 }
 define (field = LF3)
 {
  bits=30;
  attrs = doc_hidden;
 }
 define (field = SLF)
 {
  bits=31;
  attrs = doc_hidden;
 }
 define (field = P5)
 {
  bits=27;
 }
 define (field = P4)
 {
  bits=28;
 }
 define (field = P3)
 {
  bits=29;
 }
 define (field = P2)
 {
  bits=30;
 }
 define (field = P1)
 {
  bits=31;
 }
 define (field =LF)
 {
  bits = (30,27);
  attrs = doc_hidden;
 }

 define (field=H)
 {
  bits=(31,16);
 }
 define (field=L)
 {
  bits=(15,0);
 }




 define (read)
 {
  action =
  {
   var user_mask = ( (ThisReg & 0xFC03FFFF) | 0x00020000);
   if (ThisReg(17) == 1) { return user_mask; }
   else { return ThisReg; }
  };
 }
# 1432 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 define (write) {
    action = func(ValueBundle v) {
       info(4,"PC_ST_VLES= "<< hex <<PC_ST_VLES);

       uint32_t s = v.size();
       uint32_t tmp_sr = SR.uint32();
       uint32_t prev_sr = tmp_sr;
       uint32_t t_mask = 0x00000002;
# 1448 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
       tmp_sr = tmp_sr& (~t_mask);
       bool write_2tbit = false;



       for(uint32_t i=0 ; i < s; ++i) {
   uint32_t tmp_val = v[i].value().uint32();

   uint32_t mask = (v[i].mask().uint32())&0xfffffffd;
   uint32_t mask_tbit = (v[i].mask().uint32())&t_mask;

   if (!write_2tbit) {
      write_2tbit = (mask_tbit!=0)?true:false;
   }
   tmp_sr = ((tmp_val&mask) | (tmp_sr& (~mask)));
   tmp_sr = (tmp_sr) | (tmp_val&mask_tbit);
# 1484 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
       }

       tmp_sr = (write_2tbit)? tmp_sr : (tmp_sr|(prev_sr&t_mask));
# 1506 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
       if (SR.PE == 1)
       {
   if ( clear_SR_PE==true )
   {
      ThisReg = (tmp_sr & 0xFC03FFFF);
      clear_SR_PE = false;
   }
   else {
      ThisReg = (tmp_sr & 0xFC03FFFF) | 0x00020000;
   }
       }
       else
       {

   if ( set_SR_PE==enable )
   {


      if ((tmp_sr&0x00020000)!=0) {
         ThisReg = ( (tmp_sr & 0xFC03FFFF) | 0x00020000);


      }
      else {
         ThisReg = tmp_sr;
      }
      set_SR_PE = disable;
   }
   else {
      ThisReg = tmp_sr & 0xFFFDFFFF;
   }
       }

    };
 }
}


define (reg=EMR)
{
 """
 Exception and Mode Register
 """;

 attrs = doc_no_code;

 serial = true;


 define (field = ILIN)
 {
  bits=0;
 }
 define (field = ILST)
 {
  bits=1;
 }
 define (field = DOVF)
 {
  bits=2;
 }
 define (field = NMID)
 {
  bits=3;
 }
 define (field = ILPR)
 {
  bits=4;
 }
 define (field = BEM)
 {
  bits=16;
  readonly=true;
 }
 define (field = GP0)
 {
  bits=17;
  readonly=true;
 }
 define (field = GP1)
 {
  bits=18;
  readonly=true;
 }
 define (field = GP2)
 {
  bits=19;
  readonly=true;
 }
 define (field = GP3)
 {
  bits=20;
  readonly=true;
 }
 define (field = GP4)
 {
  bits=21;
  readonly=true;
 }
 define (field = GP5)
 {
  bits=22;
  readonly=true;
 }
 define (field = GP6)
 {
  bits=23;
  readonly=true;
 }

 define (field = SDD)
 {
  bits=24;
 }
 define (field = EAP)
 {
  bits=25;
 }
 define (field = MEM)
 {
  bits=26;
  readonly=true;
 }

 define (field=H)
 {
  bits=(31,16);
 }
 define (field=L)
 {
  bits=(15,0);
 }
# 1650 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 reset = 0x00010000;






 define (read)
 {
  action =
  {
   bits <32> emr_exception_mask = 0x07ff00ff;
   bits <32> emr_user_mask = 0x00000004;

   if (IsUserMode() ) { return (EMR & emr_user_mask ); }
   else { return EMR & emr_exception_mask; }
  };
 }

 define (write)
 {
  action = func (bits<32> x)
  {
   bits<32> emr_bigendian_mask;
   if (EMR.BEM==1) { emr_bigendian_mask = 0x00010000; }
   else { emr_bigendian_mask = 0; }

   bits <32> emr_exception_mask;
   emr_exception_mask = 0x030000ff;






   bits <32> emr_user_mask = 0x00000004;

   if ( exception_condition == true || EMR_LOW == true || exception_overflow==true)


   {
    if ( IsUserMode() ) { EMR = x & emr_user_mask| emr_bigendian_mask; }

    else { EMR = x & emr_exception_mask | emr_bigendian_mask; }
    exception_condition = false;
    EMR_LOW = false;
    exception_overflow =false;
   }
   else



   {

    if ( IsUserMode() )
    {

       EMR = (( ~(x&ThisReg) )& ThisReg & emr_user_mask );
    }
    else
    {
     EMR.L = ( ( ~(x(15,0)&ThisReg(15,0)) )& ThisReg(15,0) ) & emr_user_mask(15,0);
     EMR.H = ( (x(31,16)) & (emr_exception_mask(31,16)) ) | 0x0001;
    }
   }

  };
 }

}


define (reg=PC)
{
 """
 Program Counter
 """;
 attrs = doc_no_code;

 attrs = cia;


 define (write)
 {
  action = func (bits<32> x)
  {
   if (x(0)==1) { LegalPC = false; }
   else { PC = x; }




  };
 }

 serial = true;
}

define (reg=NPC)
{
 """
 Next Program Counter
 """;
 attrs = nia;
 serial = true;
 attrs = doc_hidden;
 attrs = branch_target;


 define (write)
 {
  action = func (bits<32> x)
  {
   if (x(0)==1) {
      info(4,"NPC!!, LegalPC = false, unaligned access");
      LegalPC = false;
      NPC = x&0xfffffffe;

   }
   else { NPC = x; }




  };
 }

}

define (reg=NVPC)


{
 """
 Next Program Counter
 """;
 serial = true;
 attrs = doc_hidden;
 attrs = branch_target;
}


define (reg=PC_ST_VLES)
{
 """
 Program Counter Start VLES
 """;
 attrs = doc_hidden;



 define (write)
 {
  action = func (bits<32> x)
  {
   if (x(0)==1) { LegalPC = false; }
   else { PC_ST_VLES = x; }




  };
 }

}

define (reg=PC_DISASM_END)
{

   width = 32;
   reset = 0;
   serial = true;
   attrs = doc_hidden;
}
define (reg=PC_DISASM_START)
{

   width = 32;
   reset = 0;
   serial = true;
   attrs = doc_hidden;
}

define (reg=LPMARK_SM_INDEX)
{

   width = 32;
   reset = 0;
   serial = true;
   attrs = non_architectural;
   attrs = doc_hidden;
}

define (reg=LPMARK_REFETCH_INDEX)
{

   width = 32;
   reset = 0;
   serial = true;
   attrs = non_architectural;
   attrs = doc_hidden;
}

define (reg=TF_COF_INDEX)
{

   width = 32;
   reset = 0xffff;
   attrs = doc_hidden;
}

define (reg=TF_COF_DES)
{

   width = 32;
   reset = 0;
   attrs = doc_hidden;
   define (write)
   {
      action = func (bits<32> x)
      {
  if (x(0)==1) {
     info(4,"TF_COF_DES!!, LegalPC = false, unaligned access");
     LegalPC = false;
     TF_COF_DES = x&0xfffffffe;
  }
  else {
     TF_COF_DES = x;
  }
      };
   }
}

define (reg=TF_COF_SRC)
{

   width = 32;
   reset = 0;
   attrs = doc_hidden;
   define (write)
   {
      action = func (bits<32> x)
      {
  if (x(0)==1) {
     info(4,"TF_COF_SRC!!, LegalPC = false, unaligned access");
     LegalPC = false;
     TF_COF_SRC = x&0xfffffffe;
  }
  else {
     TF_COF_SRC = x;
  }
      };
   }
}


define (regfile=RAS)
{



   size = 32;


   width = 32;
}

define (reg=RASV)
{
   width = 32;
   reset = 0;
   attrs = doc_hidden;
}

define (reg=RAS_SIZE)
{

   width = 32;




   reset = 6;

   attrs = doc_hidden;
}


define (reg=BTR0)
{
 """
 Back Trace Register
 """;

 width = 32;
 serial = true;
 attrs = doc_no_code;

 define (write) {
    action = func(bits<32> x)
    {
       BTR0=x;
       S_BTR0=x;
    };
 }
}

define (reg=S_BTR0)
{
   attrs = doc_hidden;
 """
 Shadow Back Trace Register
 """;


 width = 32;
}


define (reg=BTR1)
{

 """
 Back Trace Register
 """;

 width = 32;
 serial = true;
 attrs = doc_no_code;

 define (write) {
    action = func(bits<32> x)
    {
       BTR1=x;
       S_BTR1=x;
    };
 }
}

define (reg=S_BTR1)
{
   attrs = doc_hidden;
 """
 Shadow Back Trace Register
 """;

 width = 32;
}


define (reg=DSPC)

{
 """
 Delay Slot Program Counter
 """;
        serial = true;
 attrs = doc_hidden;
 attrs = branch_target;
 define (write) {
 action = func(bits<32> x)
  {
   if (x(0)==1) { LegalPC = false; }
   else { DSPC = x; }

  };
       }
}

define (reg=LOOPSTPC)

{
      attrs = doc_hidden;
 define (write) {
 action = func(bits<32> x)
  {
   if (x(0)==1) { LegalPC = false; }
   else { LOOPSTPC = x; }
  };
       }
}


define (reg=VBA)
{
 """
 Vector Base Address Register
 """;
 attrs = doc_no_code;


 define (field = low)


 {
  bits = (11,0);
  readonly = true;

 }

 define (field = high)
 {
  bits=(31,12);
 }

 define (read) {
  action =
  {
   if ( IsUserMode() )
   {
    EMR_LOW = true;
    EMR.ILPR=1;


    return ThisReg;
   }
   else {
      return (ThisReg & 0xFFFFF000);
   }
  };
 }
 define (write) {
  action = func (bits<32> x) {
   if ( IsUserMode() )
   {
    EMR_LOW = true;
    EMR.ILPR=1;

   }
   else {
      ThisReg = (x & 0xFFFFF000);
   }
  };
 }
}


define (reg=GCR)
{
 """
 General Configuration Register
 """;

 width = 32;
 attrs = doc_no_code;


 define (field = BAM0)
 {
  bits=0;
 }
 define (field = BAM1)
 {
  bits=1;
 }
 define (field = BAM2)
 {
  bits=2;
 }
 define (field = BAM)
 {
  bits = (2,0);
 }
 define (field = AS0)
 {
  bits=12;
 }
 define (field = AS1)
 {
  bits=13;
 }
 define (field = AS2)
 {
  bits=14;
 }
 define (field = AS3)
 {
  bits=15;
 }

 define (write) {
    action = func (bits<32> x) {






       ThisReg = (x & 0x0000F007);
    };
 }

}

define (reg=IDCR)
{
 """
 Implementation Dependent Configuration Register
 """;

 width = 32;
 attrs = doc_no_code;


 define (field = DSO)
 {
  bits=0;
 }
 define (field = DBTB)
 {
  bits=1;
 }






 define (field = DSIAO)
 {
  bits=3;
  """ Disable Speculative IFx AGU operations """;
 }


 reset=0;

 define (read) {
  action =
  {
   if ( IsUserMode() )
   {
    EMR_LOW = true;
    EMR.ILPR = 1;


    return ThisReg;
   }
   else {
      return (IDCR & 0x0000000f);
   }
  };
 }
 define (write) {
  action = func (bits<32> x) {
   if ( IsUserMode() )
   {
    EMR_LOW = true;
    EMR.ILPR=1;

   }
   else {
      IDCR = (x & 0x0000000f);
   }
  };
 }
}






define (regfile=SA)
{
 size = 4;
 width = 32;
 prefix = SA;
 serial = true;

 attrs = doc_hidden;

}

define (regfile=LC)
{
 size = 4;
 width = 32;
 prefix = LC;
}






define (regfile=D)
{

 size = 64;
 width = 40;
 prefix = d;

 define (field=H)
 {
  bits=(31,16);
 }
 define (field=L)
 {
  bits=(15,0);
 }
 define (field=E)
 {
  bits=(39,32);
 }
 define (field=HH)
 {
  bits=(31,24);
 }
 define (field=HL)
 {
  bits=(23,16);
 }
 define (field=LH)
 {
  bits=(15,8);
 }
 define (field=LL)
 {
  bits=(7,0);
 }
 define (field=WH)
 {
  bits =((39,36),(31,16));
 }
 define (field=WL)
 {
  bits=((35,32),(15,0));
 }
 define (field=IL)
 {
  bits=(31,0);
 }
}


define (regfile=L)



{
 size = 64;
 width = 1;
 prefix = l;
 attrs = doc_hidden;
}
# 2339 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (regfile=R)
{

 size = 32;
 width = 32;
 prefix = r;

 define (field=H)
 {
  bits=(31,16);
 }
 define (field=L)
 {
  bits=(15,0);
 }
}
define (reg=NSP_COF_DIFF) {
  width = 32;
  reset = 0;
  serial = true;
  attrs = doc_hidden;

}
define (reg=NSP_ARITH_DIFF) {
  width = 32;
  reset = 0;
  serial = true;
  attrs = doc_hidden;

}
define (reg=NSP_DIFF_DELAYED) {
  width = 32;
  reset = 0;
  serial = true;
  attrs = doc_hidden;

}
define (reg=ESP_COF_DIFF) {
  width = 32;
  reset = 0;
  serial = true;
  attrs = doc_hidden;

}
define (reg=ESP_ARITH_DIFF) {
  width = 32;
  reset = 0;
  serial = true;
  attrs = doc_hidden;

}
define (reg=ESP_DIFF_DELAYED) {
  width = 32;
  reset = 0;
  serial = true;
  attrs = doc_hidden;

}

define (reg=SP)
{
 """
 Stack Pointer
 """;
 attrs = doc_hidden;
 define (read) {
  action =
  {
     bits<32> tmp = SP_dummy;
   if (SR.EXP==1) { return ESP; }
      else { return NSP; }
  };
 }


 define (write)
 {
  action = func (bits<32> x) {
   SP_dummy=1;
   if (SR.EXP==1) { ESP=x; }
      else { NSP=x; }
  };
 }
}


define (reg=NSP)
{
 """
 Normal-Mode Stack Pointer
 """;
 attrs = doc_no_code;
 define (read) {
  action =
  {
      bits<32> tmp = SP_dummy;
   return (NSP & 0xFFFFFFF8) ;
  };
 }

 define (write)
 {
  action = func (bits<32> x) {
   SP_dummy=1;
   NSP = (x & 0xFFFFFFF8) ;
   S_NSP = (x & 0xFFFFFFF8) ;




  };
 }
}

define (reg=ESP)
{
 """
 Exception-Mode Stack Pointer
 """;
 attrs = doc_no_code;


 define (read) {
  action =
  {
     bits<32> tmp = SP_dummy;
   return (ESP & 0xFFFFFFF8) ;






  };
 }
 define (write)
 {
  action = func (bits<32> x) {
   SP_dummy=1;
   ESP = (x & 0xFFFFFFF8) ;
   S_ESP = (x & 0xFFFFFFF8) ;
# 2489 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
  };
 }
}

define (reg=SP_dummy)
{

   width = 32;
   reset = 0;
   attrs = doc_hidden;

}

define (reg=S_NSP)
{
   attrs = doc_hidden;
   serial = true;

   define (read) {
      action =
      {
  return (S_NSP & 0xFFFFFFF8) ;
      };
   }

   define (write)
   {
      action = func (bits<32> x) {
  S_NSP = (x & 0xFFFFFFF8) ;
      };
   }
}

define (reg=S_ESP)
{
   attrs = doc_hidden;
   serial = true;

   define (read) {
      action =
      {
  return (S_ESP & 0xFFFFFFF8) ;
      };
   }

   define (write)
   {
      action = func (bits<32> x) {
  S_ESP = (x & 0xFFFFFFF8) ;
      };
   }
}


define (regfile=B)
{
 size = 8;
 width = 32;

   define (read) {
        alias = R;
        regs = ((8,15));
     }
     define (write) {
         alias = R;
        regs = ((8,15));
     }
        prefix = b;

}

define (regfile=N)
{
   size = 4;
   width = 32;
   prefix = n;

 define (read) {
        alias = R;
        regs = ((16,19));
     }
     define (write) {
         alias = R;
        regs = ((16,19));
     }

   attrs = doc_hidden;

}

define (regfile=M)
{
 size = 4;
 width = 32;
 prefix = m;

 define (read) {
        alias = R;
        regs = ((24,27));
     }
     define (write) {
         alias = R;
        regs = ((24,27));
     }

}


define (reg=MCTL)
{
 width = 32;
 reset = 0;

 define (field=AM_R)
 {
  indexed=4;
 }
}



invalid_entry_read = func(unsigned id,unsigned index) {
   info(4,"invalid_entry_read, index= "<< index);
   INVALID_ENTRY = INVALID_ENTRY::True;
   return 0;
};

invalid_entry_write = func(unsigned id,unsigned index,bits<32> value) {
    info(4,"invalid_entry_write, index= "<< index);
    INVALID_ENTRY = INVALID_ENTRY::True;
};
# 2637 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (instrfield=Enc1)
{
 width = 16;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=Enc2)
{
 width = 32;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=Enc3)
{
 width = 48;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield = Enc4)
{
   width = 64;
   pseudo = true;
   attrs = doc_hidden;
}





define (parm = nop_prefix) {
   options = (true,false);
 value = false;
}


define (parm = prefix_size) {
   options = (pfx0,pfx1,pfx2,pfx3);
 value = pfx0;
}



define (parm = SP_update) {

 options = (no_update,sp_update_p8,sp_update_p16,sp_update_m8,sp_update_m16,nsp_update_p8,

               nsp_update_p16,nsp_update_m8,nsp_update_m16);
 value = no_update;
}



define (parm = SP_32bit_instr_occured) {
        options = (true,false);
 value = false;
}


define (parm = SP_64bit_instr_occured) {
        options = (true,false);
 value = false;
}
# 2710 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
   define (parm = SRUpdated) {
   options = (true,false);
   value = false;
}

void incr_prefix_size() {
  switch(prefix_size) {
    case pfx0 : prefix_size = pfx1; break;
    case pfx1 : prefix_size = pfx2; break;
    case pfx2 : prefix_size = pfx3; break;
    default : error(1,"cannot increment prefix_size"); break;
  }
}

void decr_prefix_size() {
  switch(prefix_size) {
    case pfx3 : prefix_size = pfx2; break;
    case pfx2 : prefix_size = pfx1; break;
    case pfx1 : prefix_size = pfx0; break;
    default : error(1,"cannot decrement prefix_size"); break;
  }
}

void update_prefix_size(int i) {
  switch (i) {
    case 2:incr_prefix_size(); incr_prefix_size(); break;
    case 1:incr_prefix_size(); break;
    case -1:decr_prefix_size(); break;
    case -2:decr_prefix_size(); decr_prefix_size(); break;
    default: error(1,"cannot update prefix_size"); break;
  }
}

unsigned get_prefix_size() {
   switch(prefix_size) {
    case pfx0 : return 0;
    case pfx1 : return 1;
    case pfx2 : return 2;
    case pfx3 : return 3;
    default: error(1,"Illegal prefix size");
      return 0;
   }
}

void reset_prefix_size() {
  prefix_size = pfx0;
}


define (parm = agu0) {
    options = (true,false);
    value = true;
}

define (parm = agu1) {
    options = (true,false);
    value = true;
}

define (parm = instr_pos) {
        options = (instr0,instr1,instr2,instr3,instr4,instr5,instr6,instr7,instr8,instr9);
 value = instr0;
}


void incr_instr_pos() {
   ;
   info(1,"instr_pos= "<<instr_pos);
   switch(instr_pos) {
    case instr0: instr_pos = instr1; break;
    case instr1: instr_pos = instr2; break;
    case instr2: instr_pos = instr3; break;
    case instr3: instr_pos = instr4; break;
    case instr4: instr_pos = instr5; break;
    case instr5: instr_pos = instr6; break;
    case instr6: instr_pos = instr7; break;
    case instr7: instr_pos = instr8; break;
    case instr8: instr_pos = instr9; break;

    default : info(1,"cannot increment instruction position,instr_pos= "<<instr_pos);break;
   }
};


void reset_instr_pos() {
   ;
   instr_pos = instr0;
}


int get_instr_pos() {
    return (int) instr_pos;
}


define (instrfield=ESG)
{
 indexed = 1;
 prefix = true;
 pseudo = true;
 action = func(unsigned Index) {
   unsigned pos = (10 - Index + get_prefix_size())%6;
   ThisField = bits(pos,pos);
 };
 attrs = doc_hidden;
}

define (instrfield=OPCD)
{
 width = variable;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=Src1)
{
 width = 6;
 pseudo = true;
}

define (instrfield=Src2)
{
 width = 6;
 pseudo = true;
}

define (instrfield=Src3)
{
 width = 6;
 pseudo = true;
}
define (instrfield=Src4)
{
 width = 6;
 pseudo = true;
}

define (instrfield=Src5)
{
 width = 6;
 pseudo = true;
}

define (instrfield=Src6)
{
 width = 6;
 pseudo = true;
}

define (instrfield=SrcAcc1)
{
 width = 6;
 pseudo = true;
}

define (instrfield=SrcAcc2)
{
 width = 6;
 pseudo = true;
}

define (instrfield=Src_4bits)
{
 width = 4;
 pseudo = true;
}

define (instrfield=Res)
{
 width = 6;
 pseudo = true;
}

define (instrfield=Res1)
{
 width = 6;
 pseudo = true;
}

define (instrfield=Res2)
{
 width = 6;
 pseudo = true;
}
define (instrfield=Res3)
{
 width = 6;
 pseudo = true;
}
define (instrfield=Res4)
{
 width = 6;
 pseudo = true;
}

define (instrfield=G_Src1)
{
 width = 4;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=G_Src2)
{
 width = 4;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=G_Res)
{
 width = 4;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=MediumLoopFlag)


{
 width = 1;
 parm = true;
 attrs = doc_hidden;
}

define (instrfield=ShiftSize)


{
 width = 3;
 parm = true;
}

define (instrfield=Config)


{
 width = 4;
 parm = true;
}

define (instrfield=Subtraction)

{
 width = 1;
 parm = true;
}

define (instrfield=Saturation)

{
 width = 1;
 parm = true;
}

define (instrfield=Fractional)

{
 width = 1;
 parm = true;
}


define (instrfield=Config_HWLOOPS)


{
 width = 1;
 parm = true;
}

define (instrfield=HWLOOPS_SEQUENTIAL)

{
 width = 1;
 parm = true;
}

define (instrfield=R_Src1)
{
 width = 5;
 pseudo = true;
}

define (instrfield=R_Src2)
{
 width = 5;
 pseudo = true;
}

define (instrfield=R_Src3)
{
 width = 5;
 pseudo = true;
}
define (instrfield=R_Src4)
{
 width = 5;
 pseudo = true;
}
define (instrfield=R_Src5)
{
 width = 5;
 pseudo = true;
}
define (instrfield=R_Src6)
{
 width = 5;
 pseudo = true;
}



define (instrfield=R_Res)
{
 width = 5;
 pseudo = true;
}

define (instrfield=R_Res2)
{
 width = 5;
 pseudo = true;
}

define (instrfield=R_Res3)
{
 width = 5;
 pseudo = true;
}

define (instrfield=R_Res4)
{
 width = 5;
 pseudo = true;
}

define (instrfield=immu)
{
 width = 32;
 pseudo = true;
 is_signed=false;
}

define (instrfield=immu1)
{
 width = 32;
 pseudo = true;
 is_signed=false;
}
define (instrfield=immu2)
{
 width = 32;
 pseudo = true;
 is_signed=false;
}


define (instrfield=imms)
{
 width = 32;
 pseudo = true;
 is_signed=true;
}

define (instrfield=imms1)
{
 width = 32;
 pseudo = true;
 is_signed=true;
}


define (instrfield=imms2)
{
 width = 32;
 pseudo = true;
 is_signed=true;
}


define (instrfield=s5)
{
 width = 5;
 pseudo = true;
 is_signed=true;






}

define (instrfield=s_imm)
{
 width = 32;
 pseudo = true;
 is_signed=true;
 attrs = doc_hidden;
}

define (instrfield=u5)
{
 width = 5;
 pseudo = true;







 reloc = R_SC3900_u5_0_0;

}

define (instrfield=u5_t0)
{
 width = 5;
 pseudo = true;
 doc_title = "u5";




 reloc = R_SC3900_u5_t0_0_0;



}

define (instrfield=u5_t2)
{
 width = 5;
 pseudo = true;
 doc_title = "u5";




 reloc = R_SC3900_u5_t2_0_0;


}

define (instrfield=u5_t3)
{
 width = 5;
 pseudo = true;
 doc_title = "u5";




 reloc = R_SC3900_u5_t3_0_0;


}

define (instrfield=u5n_0_0)



{
 width = 5;
 pseudo = true;






 attrs = doc_hidden;

}

define (instrfield=w_u5)
{
 width = 5;
 pseudo = true;






 attrs = doc_hidden;
}

define (instrfield=u7)

{
   width = 7;
   pseudo = true;
   is_signed = false;




 reloc = R_SC3900_u7_0_0;


}

define (instrfield=u8)

{
   width = 8;
   pseudo = true;
   is_signed = false;




 reloc = R_SC3900_u8_0_0;


}



define (instrfield=FFF)



{

 width = 6;
 ref = D;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=JJJ)



{
 width = 6;
 ref = D;
 pseudo = true;
 attrs = doc_hidden;
}


define (instrfield=RRR)



{
 width = 5;
 ref = R;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=qqq)



{
 width = 5;
 ref = R;
 pseudo = true;
 attrs = doc_hidden;
}


define (instrfield=zzz)
{
 width = 3;
 pseudo = true;
 ref = zxTable;
 attrs = doc_hidden;

}

define (instrfield=ZZZ)
{
 width = 3;
 pseudo = true;
 ref = ZxTable;
 attrs = doc_hidden;
}

define (instrfield=ppp)
{
 width = 3;
 pseudo = true;
 ref = zxTable;
 attrs = doc_hidden;

}

define (instrfield=PPP)
{
 width = 3;
 pseudo = true;
 ref = ZxTable;
 attrs = doc_hidden;
}

define (instrfield=EEE)
{
 width = 3;
 pseudo = true;
 ref = C51Table;
 attrs = doc_hidden;
}

define (instrfield=eee)
{
 width = 3;
 pseudo = true;
 ref = C52Table;
 attrs = doc_hidden;
}


define (instrfield=Da)

{
   """
   Source data register
   """;
 width = 6;
 ref = D;
 pseudo = true;
}

define (instrfield=Db)

{
   """
   Source data register
   """;

 width = 6;
 ref = D;
 pseudo = true;
}

define (instrfield=Dc)

{
   """
   Source data register
   """;

 width = 6;
 ref = D;
 pseudo = true;
}

define (instrfield=Dd)

{
   """
   Source data register
   """;

 width = 6;
 ref = D;
 pseudo = true;
}

define (instrfield=Ds)

{
   """
   Source data register
   """;

 width = 6;
 ref = D;
 pseudo = true;
}

define (instrfield=Dm)

{
   """
   Destination data register
   """;

 width = 6;
 ref = D;
 pseudo = true;
}

define (instrfield=Dn)

{
   """
   Destination data register
   """;
 width = 6;
 ref = D;
 pseudo = true;
}

define (instrfield=Ra)

{
   """
   Source address register
   """;

 width = 5;
 ref = R;
 pseudo = true;
}

define (instrfield=Rb)

{
   """
   Source address register
   """;

 width = 5;
 ref = R;
 pseudo = true;
}

define (instrfield=Rc)

{
   """
   Source address register
   """;

 width = 5;
 ref = R;
 pseudo = true;
}

define (instrfield=Rd)

{
   """
   Source address register
   """;

 width = 5;
 ref = R;
 pseudo = true;
}

define (instrfield=Rn)

{
   """
   Pointer/Destination address register
   """;

 width = 5;
 ref = R;
 pseudo = true;
}

define (instrfield=Rm)

{
   """
   Destination address register
   """;
 width = 5;
 ref = R;
 pseudo = true;
}


define (instrfield=Rk)
{
   """
   Source pointer address register
   """;
   width = 4;
   size = 5;

   blk = lsu;



   ref = R;
   pseudo = true;
   enumerated = ("r0","r1","r2","r3","r4","r5","r6","r7","r16","r17","r18","r19","r20","r21","r22","r23");

   define(instrfield=Rk_tmp) {
      bits = (3,0);
      table = ( (0),(1),(2),(3),(4),(5),(6),(7),(16),(17),(18),(19),(20),(21),(22),(23));
   }
   fields = (Rk_tmp(0));
}


define (instrfield=xSP)
{
   width = 2;
   pseudo = true;
   enumerated = ("nsp","esp");
}

define (instrfield=PM)
{
   width = 1;
   pseudo = true;
   enumerated = ("+","-");
}
# 3545 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (instrfield=Pn)
{
   """
   Predicate destination bit
   """;

 width = 3;
 pseudo = true;
 enumerated = ("p0","p1","p2","p3","p4","p5");
}

define (instrfield=Pa)
{
   """
   Predicate source bit
   """;

 width = 3;
 pseudo = true;
 enumerated = ("p0","p1","p2","p3","p4","p5");
}

define (instrfield=Pb)
{
   """
   Predicate source bit
   """;

 width = 3;
 pseudo = true;
 enumerated = ("p0","p1","p2","p3","p4","p5");
}

define (instrfield=P_Src1)
{
 width = 3;
 pseudo = true;
}

define (instrfield=P_Src2)
{
 width = 3;
 pseudo = true;
}

define (instrfield=P_Res)
{
 width = 3;
 pseudo = true;
}

define (instrfield=P_Res1)
{
 width = 3;
 pseudo = true;
}
define (instrfield=P_Res2)
{
 width = 3;
 pseudo = true;
}


define (regfile = C51Table)
{
   attrs = doc_hidden;
 size = 8;
 width = 64;
 define (entry=0) {
         define (read) {
            action = func() {
              return concat(B(0),B(1));
            };
          }
          define (write) {
            action = func (bits<64> x) {
     B(1) = x(31,0);
     B(0) = x(63,32);
               };
         }
      syntax = "b0:b1";
      }
 define (entry=1) {
         define (read) {
            action = func() {
              return concat( B(2), B(3) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     B(3) = x(31,0);
     B(2) = x(63,32);
               };
         }
      syntax = "b2:b3";
      }


 define (entry=2) {
         define (read) {
            action = func() {
              return concat( B(4),B(5) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     B(5) = x(31,0);
     B(4) = x(63,32);
               };
         }
      syntax = "b4:b5";
      }


 define (entry=3) {
         define (read) {
            action = func() {
              return concat( B(6),B(7) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     B(7) = x(31,0);
     B(6) = x(63,32);
               };
         }
      syntax = "b6:b7";
      }

 define (entry=4) {
         define (read) {
            action = func() {
              return concat( N(0),N(1) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     N(1) = x(31,0);
     N(0) = x(63,32);
               };
         }
      syntax = "n0:n1";
      }


 define (entry=5) {
         define (read) {
            action = func() {
              return concat( N(2),N(3) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     N(3) = x(31,0);
     N(2) = x(63,32);
               };
         }
      syntax = "n2:n3";
      }


 define (entry=6) {
         define (read) {
            action = func() {
              return concat( M(0),M(1) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     M(1) = x(31,0);
     M(0) = x(63,32);
               };
         }
      syntax = "m0:m1";
      }



 define (entry=7) {
         define (read) {
            action = func() {
              return concat( M(2),M(3) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     M(3) = x(31,0);
     M(2) = x(63,32);
               };
         }
      syntax = "m2:m3";
      }



}

define (regfile = C52Table)
{
   attrs = doc_hidden;
 size = 8;
 width = 64;
 define (entry=0) {
         define (read) {
            action = func() {
              return concat( IDCR, VBA);
            };
          }
          define (write) {
            action = func (bits<64> x) {
     VBA = x(31,0);
     IDCR = x(63,32);
               };
         }
      syntax = "idcr:vba";
      }
# 3777 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 define (entry=3) {
         define (read) {
            action = func() {
              return concat( GCR,MCTL );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     MCTL = x(31,0);
     GCR = x(63,32);
               };
         }
      syntax = "gcr:mctl";
      }

 define (entry=4) {
         define (read) {
            action = func() {
              return concat( SA(0),LC(0) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     LC(0) = x(31,0);
     SA(0) = x(63,32);
               };
         }
      syntax = "sa0:lc0";
      }



 define (entry=5) {
         define (read) {
            action = func() {
              return concat( SA(1),LC(1) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     LC(1) = x(31,0);
     SA(1) = x(63,32);
               };
         }
      syntax = "sa1:lc1";
      }


 define (entry=6) {
         define (read) {
            action = func() {
              return concat( SA(2),LC(2) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     LC(2) = x(31,0);
     SA(2) = x(63,32);
               };
         }
      syntax = "sa2:lc2";
      }



 define (entry=7) {
         define (read) {
            action = func() {
              return concat( SA(3),LC(3) );
            };
          }
          define (write) {
            action = func (bits<64> x) {
     LC(3) = x(31,0);
     SA(3) = x(63,32);
               };
         }
      syntax = "sa3:lc3";
      }

}




define (instrfield=MMM)

{
 width = 3;
 pseudo = true;
 enumerated = ("+n0)", ")-", ")", ")+", ")+n0", ")+n1", ")+n2", ")+n3");
}
# 3882 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (instrfield=MM)

{
 width = 3;
 pseudo = true;
 enumerated = (")+",")-","+n0)",")");
}



define (instrfield=mm)

{
 width = 2;
 pseudo = true;
 enumerated = (")+n0", ")+n1", ")+n2", ")+n3");
}



define (instrfield=DDDD)

{
 width = 4;
 pseudo = true;
 ref = C3Table;
 attrs = doc_hidden;
}


define (instrfield=CCCC)

{
 width = 4;
 pseudo = true;
 ref = C2Table;
 attrs = doc_hidden;
}

define (instrfield=TTTT)



{
 width = 4;
 pseudo = true;
 ref = C6Table1;
 attrs = doc_hidden;
}



define (instrfield=CCC)

{
 width = 3;
 pseudo = true;
 ref = C1Table;
 attrs = doc_hidden;
}

define (instrfield=uuu)




{
 width = 6;
 ref = D;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=jjj)



{
 width = 6;
 ref = D;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=highbitvit)

{
 width = 2;
 ref = D;
 pseudo = true;
 enumerated = ("d0,d6","d0,d14","d8,d6","d8,d14");
 attrs = doc_hidden;
}

define (instrfield=highbitvit2)

{
 width = 2;
 ref = D;
 pseudo = true;
 enumerated = ("d4,d2","d4,d10","d12,d2","d12,d10");
 attrs = doc_hidden;
}

define (instrfield=highbitvsl)


{
 width = 1;
 ref = D;
 pseudo = true;
 enumerated = ("d1:d3","d9:d11");
 attrs = doc_hidden;
}

define (instrfield=highbitvsl2)



{
 width = 1;
 ref = D;
 pseudo = true;
 enumerated = ("d2:d6:d1:d3","d10:d14:d9:d11");
 attrs = doc_hidden;
}

define (instrfield=doenmbit)

{
 width = 1;
 pseudo = true;
 attrs = doc_hidden;
}


define (instrfield=a32)

{
 width = 32;
 pseudo = true;
 is_signed=false;







}

define (instrfield=w_a32)

{
 width = 32;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=l_a32)

{
 width = 32;
 pseudo = true;






 attrs = doc_hidden;


}

define (instrfield=a32_label)

{
 width = 32;
 pseudo = true;
 is_signed=false;

 addr=abs;






 attrs = doc_hidden;

}


define (instrfield=a20)

{
        width = 20;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;






 attrs = doc_hidden;
}

define (instrfield=a14)

{
        width = 14;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;



 attrs = doc_hidden;
}
define (instrfield=s16_t186)

{
   width = 16;
   pseudo = true;
   is_signed = true;



   attrs = doc_hidden;
}

define (instrfield=a5)

{
        width = 5;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;



 attrs = doc_hidden;
}

define (instrfield=a6v2)

{
        width = 6;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;



 attrs = doc_hidden;
}

define (instrfield=a6)

{
        width = 6;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;



 attrs = doc_hidden;
}

define (instrfield=a16_rs17)

{
        width = 16;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;



 attrs = doc_hidden;
}

define (instrfield=a16_rst17)

{
        width = 16;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;



 attrs = doc_hidden;
}

define (instrfield=a16_t77)

{
        width = 16;
        pseudo = true;
        is_signed=true;
        addr=pc;






 attrs = doc_hidden;

}

define (instrfield=a16)

{
 width = 16;
 pseudo = true;
 is_signed=true;
 attrs = doc_hidden;
}

define (instrfield=a16_label_t6)



{
 width = 16;
 pseudo = true;
 is_signed=true;
 addr=pc;
        shift=1;






 attrs = doc_hidden;
}

define (instrfield=w_a16)






{
 width = 16;
 pseudo = true;
 is_signed=false;






 attrs = doc_hidden;


}


define (instrfield=l_a16)

{
 width = 16;
 pseudo = true;
 is_signed=false;






 attrs = doc_hidden;


}

define (instrfield=ua16)

{
 width = 16;
 pseudo = true;
 attrs = doc_hidden;
}



define (instrfield=a16_label)

{
        width = 16;
        pseudo = true;
        is_signed=true;
        addr=pc;
        shift=1;

        attrs = doc_hidden;
}


define (instrfield=a10)

{
 width = 10;
 pseudo = true;
 attrs = doc_hidden;
}
define (instrfield=a10_label)

{
   width = 10;
   pseudo = true;
   is_signed=true;
   addr=pc;
   shift=1;






   attrs = doc_hidden;

}


define (instrfield=a8)

{
   width = 8;
   pseudo = true;
   is_signed=true;
   addr=pc;
   shift=1;






   attrs = doc_hidden;

}

define (instrfield=sa16)

{
   width = 16;
   pseudo = true;
   is_signed = true;
   attrs = doc_hidden;
}
# 4362 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (instrfield=s7)

{
   width = 7;
   pseudo = true;
   is_signed = true;







}


define (instrfield=s32)

{
   width = 32;
   pseudo = true;
   is_signed = true;







   reloc = R_SC3900_s32_0_0;

}

define (instrfield=s32_t1)

{
   width = 32;
   pseudo = true;
   is_signed = true;
   doc_title = "s32";




   reloc = R_SC3900_s32_t1_0_0;

}

define (instrfield=s32_t2)

{
   width = 32;
   pseudo = true;
   is_signed = true;
   doc_title = "s32";




   reloc = R_SC3900_s32_t2_0_0;


}
define (instrfield=s32_t4)

{
   width = 32;
   pseudo = true;
   is_signed = true;
   doc_title = "s32";




   reloc = R_SC3900_s32_t4_0_0;


}


define (instrfield=u32)

{
 width = 32;
 pseudo = true;
 is_signed = false;
# 4459 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 reloc = R_SC3900_u32_0_0;

}

define (instrfield=u32_t2)

{
 width = 32;
 pseudo = true;
 is_signed = false;
 doc_title = "u32";




 reloc = R_SC3900_u32_t2_0_0;


}
define (instrfield=u6)

{
 width = 6;
 pseudo = true;
# 4493 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 reloc = R_SC3900_u6_0_0;



}

define (instrfield=w_u6)

{
 width = 6;
 pseudo = true;






 attrs = doc_hidden;

}

define (instrfield=l_u6)

{
 width = 6;
 pseudo = true;






 attrs = doc_hidden;

}

define (instrfield=U6)

{
 width = 6;
 pseudo = true;







}
# 4550 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (instrfield=e_u2)

{
   width = 2;
   is_signed = false;
   pseudo = true;
   attrs = doc_hidden;
}
# 4591 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (instrfield=u4)

{
 width = 4;
 pseudo = true;
# 4606 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
      reloc = R_SC3900_u4_0_0;

}

define (instrfield=u3)

{
 width = 3;
 pseudo = true;




 reloc = R_SC3900_u3_0_0;

}

define (instrfield=u3_t2)

{
 width = 3;
 pseudo = true;
 doc_title = "u3";




 reloc = R_SC3900_u3_t2_0_0;

}
# 4655 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (instrfield=w_u3)

{
 width = 3;
 pseudo = true;






 attrs = doc_hidden;
}

define (instrfield=l_u3)

{
 width = 3;
 pseudo = true;






 attrs = doc_hidden;

}



define (instrfield=U5)

{
        width = 5;
        pseudo = true;




 reloc = R_SC3900_U5_0_0;

}


define (instrfield=u12)

{
        width = 12;
        pseudo = true;
}

define (instrfield=u16)

{
 width = 16;
 pseudo = true;
 is_signed = false;
# 4723 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 reloc = R_SC3900_u16_0_0;


}

define (instrfield=u16_t3)

{
 width = 16;
 pseudo = true;
 is_signed = false;
 doc_title = "u16";




 reloc = R_SC3900_u16_t3_0_0;

}

define (instrfield=u16_t72)
{
 width = 16;
 pseudo = true;
 is_signed=false;






 attrs = doc_hidden;
}


define (instrfield=u16_t28)



{
 width = 16;
 pseudo = true;
 is_signed = false;







 attrs = doc_hidden;

}

define (instrfield=s16)

{
 width = 16;
 pseudo = true;
 is_signed = true;
# 4794 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 reloc = R_SC3900_s16_0_0;

}

define (instrfield=s16_t3)

{
 width = 16;
 pseudo = true;
 is_signed = true;
 doc_title = "s16";





 reloc = R_SC3900_s16_t3_0_0;

}

define (instrfield=s16_t5)

{
 width = 16;
 pseudo = true;
 is_signed = true;
 doc_title = "s16";





 reloc = R_SC3900_s16_t5_0_0;


}

define (instrfield=S16)

{
 width = 16;
 pseudo = true;
 is_signed = true;





 reloc = R_SC3900_S16_0_0;

}

define (instrfield=S16_t4)

{
 width = 16;
 pseudo = true;
 is_signed = true;

}

define (instrfield=s16_t2)



{
 width = 16;
 pseudo = true;
 is_signed = true;







 attrs = doc_hidden;

}
define (instrfield=s16n_0_0)



{
 width = 16;
 pseudo = true;
 is_signed = true;






 attrs = doc_hidden;
}


define (instrfield=w_s16)

{
 width = 16;
 pseudo = true;
 is_signed = true;






 attrs = doc_hidden;
}

define (instrfield=s15)

{
 width = 15;
 pseudo = true;
 is_signed = true;
# 4922 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
   reloc = R_SC3900_s15_0_0;

}

define (instrfield=s15_t7)

{
 width = 15;
 pseudo = true;
 is_signed = true;
 doc_title = "s15";
# 4943 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
   reloc = R_SC3900_s15_t7_0_0;

}

define (instrfield=S15)

{
 width = 15;
 pseudo = true;
 is_signed = true;




 reloc = R_SC3900_S15_0_0;

}


define (instrfield=w_s15)

{
 width = 15;
 pseudo = true;
 is_signed = true;






 attrs = doc_hidden;
}

define (instrfield=l_s15)

{
 width = 15;
 pseudo = true;
 is_signed = true;






 attrs = doc_hidden;

}

define (instrfield=s13)

{
 width = 13;
 pseudo = true;
 is_signed = true;
}

define (instrfield=nn)

{
 width = 2;
 pseudo = true;
}

define (instrfield=n)

{
 width = 2;
 pseudo = true;
}

define (instrfield=AAAAA)

{
 width = 5;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=HighDes)

{
 width = 1;
 pseudo = true;
 attrs = doc_hidden;
}

define (instrfield=HighSrc)

{
 width = 1;
 pseudo = true;
 attrs = doc_hidden;
}



define (instrfield=RelAdd4)
{
        width = 4;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;




}

define (instrfield=RRelAdd4)
{
        width = 4;
        pseudo = true;
 is_signed = false;




  reloc = R_SC3900_RRelAdd4_1_1;

}



define (instrfield=RelAdd7)
{
        width = 7;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;
# 5084 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
       reloc = R_SC3900_RelAdd7_1_1;

}

define (instrfield=RelAdd7_t1)
{
        width = 7;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;
 doc_title = "RelAdd7";
# 5104 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
       reloc = R_SC3900_RelAdd7_t1_1_1;

}

define (instrfield=RelAdd10)
{
        width = 10;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;




}


define (instrfield=RelAdd16)
{
        width = 16;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;







  reloc = R_SC3900_RelAdd16_1_1;

}


define (instrfield=RelAdd16_t1)
{
        width = 16;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;
 doc_title = "RelAdd16";
# 5157 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
  reloc = R_SC3900_RelAdd16_t1_1_1;


}

define (instrfield=RelAdd20)
{
        width = 20;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;







  reloc = R_SC3900_RelAdd20_1_1;


}

define (instrfield=RelAdd20_t1)
{
        width = 20;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=1;
 doc_title = "RelAdd20";
# 5197 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
  reloc = R_SC3900_RelAdd20_t1_1_1;


}



define (instrfield=RelAdd15_4)
{
        width = 15;
        pseudo = true;
 is_signed = true;
        addr=pc;
        shift=4;

  reloc = R_SC3900_RelAdd15_4_4_4;

}
# 6181 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
define (regfile=ZxTable)

{
   attrs = doc_hidden;
 width = 32;
 size = 8;

 define (entry=0) { reg = N(0); syntax = "n0";}
 define (entry=1) { reg = N(1); syntax = "n1";}
 define (entry=2) { reg = N(2); syntax = "n2";}
 define (entry=3) { reg = N(3); syntax = "n3";}

 define (entry=7) {
          define (read) {
            action = func() {
        bits<32> tmp = SP_dummy;
              if (SR.EXP==1) { return ESP; }
               else { return NSP; }
            };
          }
          define (write) {
            action = func (bits<32> x) {

       SP_dummy =1;
       if (SR.EXP==1) { S_ESP = x; }
       else { S_NSP = x; }
               };
         }
    syntax = "sp";
      }
# 6222 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
}


define (regfile=zxTable)

{
   attrs = doc_hidden;
 width = 32;
 size = 8;

 define (entry=0) { reg = N(0); syntax = "n0";}
 define (entry=1) { reg = N(1); syntax = "n1";}
 define (entry=2) { reg = N(2); syntax = "n2";}
 define (entry=3) { reg = N(3); syntax = "n3";}
 define (entry=6) { reg = PC_ST_VLES; syntax = "pc";}
 define (entry=7) {
          define (read) {
            action = func() {
     bits<32> tmp = SP_dummy;
              if (SR.EXP==1) { return ESP; }
               else { return NSP; }
            };
          }
          define (write) {
            action = func (bits<32> x) {
        SP_dummy =1;
       if (SR.EXP==1) { S_ESP = x; }
       else { S_NSP = x; }
               };
         }
    syntax = "sp";
      }
}




define (regfile=C1Table)

{
   attrs = doc_hidden;
 width = 32;
 size = 8;

 define (entry=0) { reg = EMR; syntax = "emr"; }
 define (entry=1) { reg = VBA; syntax = "vba"; }
 define (entry=2) { reg = IDCR; syntax = "idcr"; }
 define (entry=3) { reg = GCR; syntax = "gcr"; }
 define (entry=5) { reg = SR; syntax = "sr"; }
 define (entry=7) { reg = MCTL; syntax = "mctl"; }
}


define (regfile=C2Table)


{
   attrs = doc_hidden;
 width = 32;
 size = 16;

 define (entry=0) { reg = EMR; syntax = "emr"; }
 define (entry=1) { reg = VBA; syntax = "vba"; }
 define (entry=2) { reg = IDCR; syntax = "idcr"; }
# 6295 "/vobs/vb_dp_arch/ADLsim/general/common.adl"
 define (entry=5) { reg = SR; syntax = "sr"; }
 define (entry=7) { reg = MCTL; syntax = "mctl"; }
 define (entry=8) { reg = SA(0); syntax = "sa0";}
 define (entry=9) { reg = LC(0); syntax = "lc0";}
 define (entry=10) { reg = SA(1); syntax = "sa1";}
 define (entry=11) { reg = LC(1); syntax = "lc1";}
 define (entry=12) { reg = SA(2); syntax = "sa2";}
 define (entry=13) { reg = LC(2); syntax = "lc2";}
 define (entry=14) { reg = SA(3); syntax = "sa3";}
 define (entry=15) { reg = LC(3); syntax = "lc3";}
}


define (regfile=C3Table)

{
   attrs = doc_hidden;
 width = 32;
 size = 16;

 define (entry=0) { reg = B(0); }
 define (entry=1) { reg = B(1); }
 define (entry=2) { reg = B(2); }
 define (entry=3) { reg = B(3); }
 define (entry=4) { reg = B(4); }
 define (entry=5) { reg = B(5); }
 define (entry=6) { reg = B(6); }
 define (entry=7) { reg = B(7); }
 define (entry=8) { reg = N(0); }
 define (entry=9) { reg = N(1); }
 define (entry=10) { reg = N(2); }
 define (entry=11) { reg = N(3); }
 define (entry=12) { reg = M(0); }
 define (entry=13) { reg = M(1); }
 define (entry=14) { reg = M(2); }
 define (entry=15) { reg = M(3); }
}

define (regfile=C6Table1)



{
   attrs = doc_hidden;
 width = 32;
 size = 16;

 define (entry=0) { reg = IDCR; syntax = "idcr"; }
 define (entry=1) { reg = VBA; syntax = "vba"; }
 define (entry=5) { reg = SR; syntax = "sr"; }
 define (entry=6) { reg = GCR; syntax = "gcr"; }
 define (entry=7) { reg = MCTL; syntax = "mctl"; }
 define (entry=8) { reg = SA(0); syntax = "sa0";}
 define (entry=9) { reg = LC(0); syntax = "lc0";}
 define (entry=10) { reg = SA(1); syntax = "sa1";}
 define (entry=11) { reg = LC(1); syntax = "lc1";}
 define (entry=12) { reg = SA(2); syntax = "sa2";}
 define (entry=13) { reg = LC(2); syntax = "lc2";}
 define (entry=14) { reg = SA(3); syntax = "sa3";}
 define (entry=15) { reg = LC(3); syntax = "lc3";}
}

define (regfile=C6Table2)


{
   attrs = doc_hidden;
 width = 32;
 size = 16;

 define (entry=0) { reg = IDCR; syntax = "idcr"; }
 define (entry=1) { reg = VBA; syntax = "vba"; }
 define (entry=5) { reg = SR; syntax = "sr"; }
 define (entry=6) { reg = GCR; syntax = "gcr"; }
 define (entry=8) { reg = SA(0); syntax = "sa0";}
 define (entry=9) { reg = LC(0); syntax = "lc0";}
 define (entry=10) { reg = SA(1); syntax = "sa1";}
 define (entry=11) { reg = LC(1); syntax = "lc1";}
 define (entry=12) { reg = SA(2); syntax = "sa2";}
 define (entry=13) { reg = LC(2); syntax = "lc2";}
 define (entry=14) { reg = SA(3); syntax = "sa3";}
 define (entry=15) { reg = LC(3); syntax = "lc3";}
}



unsigned first_available_dalu() {
   info(4,"first_available_dalu");
  if (dalu0) {
     info(4,"dalu0");
    dalu0 = false;
    return 0;
  } else if (dalu1) {
     info(4,"dalu1");
    dalu1 = false;
    return 1;
  } else if (dalu2) {
     info(4,"dalu2");
    dalu2 = false;
    return 2;
  } else if (dalu3) {
     info(4,"dalu3");
    dalu3 = false;
    return 3;
  } else {
    error(1,"Too many dalu block requested in the VLES");
    return 0;
  }
}
# 34 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl" 1
# 26 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
unsigned find_which_execution_dalu_unit() {

  if (dalu0==true) {

    dalu0=false;
    return 0;
  } else if (dalu1==true) {

    dalu1=false;
    return 1;
  } else if (dalu2==true) {

    dalu2=false;
    return 2;
  } else if (dalu3==true) {
     dalu3=false;

    return 3;
  } else {
    error(1,"Too many dalu block requested in the VLES");
    return 4;
  }
}


define (instrfield = PR_Hi_Bits)
{
   width = 8;
   indexed = 1;
   prefix = true;
   pseudo = true;
   value = 0;
   type=CondExec;

   action = func(unsigned) {
      unsigned pos = get_instr_pos();
      ThisField = bits(pos,pos);
   };


}

define (instrfield = DALU_HI_REG)
{
   prefix = true;
   pseudo = true;

   indexed = 3;
   value = 0;
   type = HighRegister;

   action = func(unsigned) {
      unsigned pos = find_which_execution_dalu_unit();
      ThisField = bits((pos+1)*3-1,pos*3);
   };
}


define (instrfield=HighRegister)
{
 indexed = 3;
 pseudo = true;
 prefix = true;

}


define (instrfield=VLES_LEN)

{
 width = 4;
 prefix = true;
 pseudo = true;
 value = 0;
}

define (instrfield = CondExec)
{
   pseudo = true;
   prefix = true;
   indexed = 1;
   value = 0;
}


define(instr = OneWord)
{
   fields = ((bits(15,0), Enc1),
     (bits(16,16),CondExec),
     (bits(19,17),HighRegister));

   pseudo = true;
}

define(instr = TwoWords)
{
   fields = ((bits(31,0), Enc2),
     (bits(32,32),CondExec),
     (bits(35,33),HighRegister));
   pseudo = true;
}

define(instr = ThreeWords)
{
   fields = ((bits(47,0), Enc3),
     (bits(48,48),CondExec),
     (bits(51,49),HighRegister));
   pseudo = true;
}

define(instr = FourWords)
{
   fields = ((bits(63,0), Enc4),
     (bits(64,64),CondExec),
     (bits(67,65),HighRegister));
   pseudo = true;
}



define (reg=cnd0)

{
 width = 2;
 serial=true;
 attrs = doc_hidden;
}
define (reg=cnd1)

{
 width = 2;
 serial=true;
 attrs = doc_hidden;
}
define (reg=cnd2)

{
 width = 2;
 serial=true;
 attrs = doc_hidden;
}
define (reg=cnd3)

{
 width = 2;
 serial=true;
 attrs = doc_hidden;
}
define (reg=cnd4)

{
 width = 2;
 serial=true;
 attrs = doc_hidden;
}
define (reg=cnd5)

{
 width = 2;
 serial=true;
 attrs = doc_hidden;
}

define (reg=cnd6)

{
 width = 2;
 serial=true;
 attrs = doc_hidden;
}

define (instrfield=PR_Src)

{
 width = 3;
 pseudo = true;
}

define (instrfield=PR)

{
   width = 3;
   pseudo = true;
   assembler = true;
   value = 0;
}

define (instrfield=PRx)

{
 width = 3;
 pseudo = true;
 assembler = true;
}


define (instrfield=X)
{
 width = 1;
 pseudo = true;
 enumerated = ("l", "h");
}

define (instrfield=Y)
{
 width = 1;
 pseudo = true;
 enumerated = ("l", "h");
}


define (instrfield=xx)

{
 width = 2;
 pseudo = true;
 enumerated = ("aa", "as", "sa", "ss");
}

define (instrfield=yy)

{
 width = 2;
 pseudo = true;
 enumerated = ("aa", "as", "sa", "ss");
}


define (instrfield=xxxx)

{
 width = 4;
 pseudo = true;
 enumerated = ("aaaa", "aaas", "aasa", "aass","asaa", "asas", "assa", "asss","saaa", "saas", "sasa", "sass","ssaa", "ssas", "sssa", "ssss");
}

define (instrfield=yyyy)

{
 width = 4;
 pseudo = true;
 enumerated = ("aaaa", "aaas", "aasa", "aass","asaa", "asas", "assa", "asss","saaa", "saas", "sasa", "sass","ssaa", "ssas", "sssa", "ssss");
}


define (instrfield=byte_sel4)
{
   width = 4;
   pseudo = true;
   is_signed = false;
}

define (instrfield=ebit3)
{
   width = 3;
   pseudo = true;
   is_signed = false;
}

define (instrfield=sbit3)
{
   width = 3;
   pseudo = true;
   is_signed = false;
}



define (instrfield=CND0)

{
 width = 2;
 prefix = true;
 pseudo = true;

 enumerated = ("ifa","iff","ift");
 value = "ifa";
 attrs = doc_hidden;
}
define (instrfield=CND1)

{
 width = 2;
 prefix = true;
 pseudo = true;

 enumerated = ("ifa","iff","ift");
 value = "ifa";
 attrs = doc_hidden;

}
define (instrfield=CND2)

{
 width = 2;
 prefix = true;
 pseudo = true;

 enumerated = ("ifa","iff","ift");
 value = "ifa";
 attrs = doc_hidden;
}
define (instrfield=CND3)

{
 width = 2;
 prefix = true;
 pseudo = true;

 enumerated = ("ifa","iff","ift");
 value = "ifa";
 attrs = doc_hidden;
}
define (instrfield=CND4)

{
 width = 2;
 prefix = true;
 pseudo = true;

 enumerated = ("ifa","iff","ift");
 value = "ifa";
 attrs = doc_hidden;
}
define (instrfield=CND5)

{
 width = 2;
 prefix = true;
 pseudo = true;

 enumerated = ("ifa","iff","ift");
 value = "ifa";
 attrs = doc_hidden;
}

define (instrfield=CND6)

{
 width = 2;
 prefix = true;
 pseudo = true;

 enumerated = ("ifa","iff","ift");
 value = "ifa";
 attrs = doc_hidden;
}

define (parm=prefix_vles) {
   options = (true,false);
   value = false;
}


define (instrfield=CTRL)

{
 width = 5;
 pseudo = true;
 ref = CtrlTable;
}

define (instrfield=CTRLab)

{
 width = 5;
 pseudo = true;
 ref = CTRLabTable;
}





define (regfile=CTRLabTable)
{
 width = 32;
 size = 64;
 attrs = doc_no_code;
# 498 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
 define (entry=7) {
    define (read) {
       action = func() {
   return concat( IDCR, VBA);
       };
    }
    define (write) {
       action = func (bits<64> x) {
   VBA = x(31,0);
   IDCR = x(63,32);
       };
    }
    syntax = "idcr:vba";
 }

 define (entry=8) {
    define (read) {
       action = func() {
   return concat( GCR,MCTL );
       };
    }
    define (write) {
       action = func (bits<64> x) {
   MCTL = x(31,0);
   GCR = x(63,32);
       };
    }
    syntax = "gcr:mctl";
 }

 define (entry=9) {
    define (read) {
       action = func() {
   return concat( BTR0, BTR1);
       };
    }
    define (write) {
       action = func (bits<64> x) {
   BTR1 = x(31,0);
   BTR0 = x(63,32);
       };
    }
    syntax = "btr0:btr1";
 }

 define (entry=10) {
    define (read) {
       action = func() {
   return concat( LC(0),LC(1) );
       };
    }
    define (write) {
       action = func (bits<64> x) {
   LC(1) = x(31,0);
   LC(0) = x(63,32);
       };
    }
    syntax = "lc0:lc1";
 }
 define (entry=11) {
    define (read) {
       action = func() {
   return concat( LC(2),LC(3) );
       };
    }
    define (write) {
       action = func (bits<64> x) {
   LC(3) = x(31,0);
   LC(2) = x(63,32);
       };
    }
    syntax = "lc2:lc3";
 }
}

define (regfile=CtrlTable)

{
 width = 32;
 size = 32;

 define (entry=0) { reg = M(0); syntax = "m0"; }
 define (entry=1) { reg = M(1); syntax = "m1"; }
 define (entry=2) { reg = M(2); syntax = "m2"; }
 define (entry=3) { reg = M(3); syntax = "m3"; }
 define (entry=4) { reg = LC(0); syntax = "lc0"; }
 define (entry=5) { reg = LC(1); syntax = "lc1"; }
 define (entry=6) { reg = LC(2); syntax = "lc2"; }
 define (entry=7) { reg = LC(3); syntax = "lc3"; }
 define (entry=8) { reg = MCTL; syntax = "mctl"; }
 define (entry=9) { reg = EMR; syntax = "emr"; }
 define (entry=10) { reg = VBA; syntax = "vba"; }
 define (entry=11) { reg = SR; syntax = "sr"; }
 define (entry=12) { reg = IDCR; syntax = "idcr"; }
 define (entry=13) { reg = GCR; syntax = "gcr"; }
 define (entry=14) { reg = BTR0; syntax = "btr0"; }
 define (entry=15) { reg = BTR1; syntax = "btr1"; }
 define (entry=16) { reg = ESP; syntax = "esp"; }
 define (entry=17) { reg = NSP; syntax = "nsp"; }
 define (entry=18) { reg = PC; syntax = "pc"; }
}



define (instrfield=Rab) {


 width = 5;
    size = 10;

     blk = dalu;
     ref = R;
 pseudo = true;
 syntax = ("%f:%f",Ra,Rb);
     define(instrfield=Ra_Rb) {
  bits = (4,0);

  table = ((0,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,0));
     }

 fields = (Ra_Rb(1),Ra_Rb(0));

 define(instrfield=Ra) {
    size = 5;
    fields = (4,0);
 }

 define(instrfield=Rb) {
    size = 5;
    fields = (9,5);
 }

}






define (instrfield=Dab) {
# 646 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
 width = 6;
    size = 12;


     blk = dalu;
     ref = D;
 pseudo = true;
 syntax = ("%f:%f",Da,Db);
     define(instrfield=Da_Db) {
# 663 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
  bits = (5,0);

  table = ((0,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,32),(32,33),(33,34),(34,35),(35,36),(36,37),(37,38),(38,39),(39,40),(40,41),(41,42),(42,43),(43,44),(44,45),(45,46),(46,47),(47,48),(48,49),(49,50),(50,51),(51,52),(52,53),(53,54),(54,55),(55,56),(56,57),(57,58),(58,59),(59,60),(60,51),(61,62),(62,63),(63,0));



     }


 fields = (Da_Db(1),Da_Db(0));
# 682 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
     define(instrfield=Da) {
      size = 6;







   fields = (5,0);

     }
  define(instrfield=Db) {
   size = 6;







   fields = (11,6);


    }
}



define (instrfield = Dab_e) {
  alias = Dab;
  syntax = ("%f.e:%f.e",Da,Db);
}


define (instrfield=Dac) {
# 726 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
 width = 6;
    size = 12;


     blk = dalu;
     ref = D;
 pseudo = true;
 syntax = ("%f:%f",Da,Dc);
     define(instrfield=Da_Dc) {






  bits = (5,0);

  table = ((0,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,32),(32,33),(33,34),(34,35),(35,36),(36,37),(37,38),(38,39),(39,40),(40,41),(41,42),(42,43),(43,44),(44,45),(45,46),(46,47),(47,48),(48,49),(49,50),(50,51),(51,52),(52,53),(53,54),(54,55),(55,56),(56,57),(57,58),(58,59),(59,60),(60,51),(61,62),(62,63),(63,0));



     }


 fields = (Da_Dc(1),Da_Dc(0));
# 760 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
     define(instrfield=Da) {
      size = 6;







   fields = (5,0);

     }
  define(instrfield=Dc) {
   size = 6;







   fields = (11,6);


    }
}



define (instrfield = Dac_e) {
  alias = Dac;
  syntax = ("%f.e:%f.e",Da,Dc);
}



define (instrfield=Dcd) {
# 805 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
 width = 6;
    size = 12;


     blk = dalu;
     ref = D;
 pseudo = true;
 syntax = ("%f:%f",Dc,Dd);
     define(instrfield=Dc_Dd) {
# 822 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
  bits = (5,0);

  table = ((0,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,32),(32,33),(33,34),(34,35),(35,36),(36,37),(37,38),(38,39),(39,40),(40,41),(41,42),(42,43),(43,44),(44,45),(45,46),(46,47),(47,48),(48,49),(49,50),(50,51),(51,52),(52,53),(53,54),(54,55),(55,56),(56,57),(57,58),(58,59),(59,60),(60,51),(61,62),(62,63),(63,0));



     }


 fields = (Dc_Dd(1),Dc_Dd(0));
# 841 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
     define(instrfield=Dc) {
      size = 6;







   fields = (5,0);

     }
  define(instrfield=Dd) {
   size = 6;







   fields = (11,6);


    }
}



define (instrfield = Dcd_e) {
  alias = Dcd;
  syntax = ("%f.e:%f.e",Dc,Dd);
}


define (instrfield=Def) {
# 885 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
 width = 6;
    size = 12;


     blk = dalu;
     ref = D;
 pseudo = true;
 syntax = ("%f:%f",De,Df);
     define(instrfield=De_Df) {
# 902 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
  bits = (5,0);

  table = ((0,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,32),(32,33),(33,34),(34,35),(35,36),(36,37),(37,38),(38,39),(39,40),(40,41),(41,42),(42,43),(43,44),(44,45),(45,46),(46,47),(47,48),(48,49),(49,50),(50,51),(51,52),(52,53),(53,54),(54,55),(55,56),(56,57),(57,58),(58,59),(59,60),(60,51),(61,62),(62,63),(63,0));



     }


 fields = (De_Df(1),De_Df(0));
# 921 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
     define(instrfield=De) {
      size = 6;







   fields = (5,0);

     }
  define(instrfield=Df) {
   size = 6;







   fields = (11,6);


    }
}


define (instrfield=Dmn) {
# 958 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
 width = 6;
    size = 12;


     blk = dalu;
     ref = D;
 pseudo = true;
 syntax = ("%f:%f",Dm,Dn);
     define(instrfield=Dm_Dn) {
# 975 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
  bits = (5,0);

  table = ((0,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,32),(32,33),(33,34),(34,35),(35,36),(36,37),(37,38),(38,39),(39,40),(40,41),(41,42),(42,43),(43,44),(44,45),(45,46),(46,47),(47,48),(48,49),(49,50),(50,51),(51,52),(52,53),(53,54),(54,55),(55,56),(56,57),(57,58),(58,59),(59,60),(60,51),(61,62),(62,63),(63,0));


     }


 fields = (Dm_Dn(1),Dm_Dn(0));
# 993 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
     define(instrfield=Dm) {
      size = 6;







   fields = (5,0);

     }
  define(instrfield=Dn) {
   size = 6;







   fields = (11,6);


    }
}

define (instrfield = Dmn_e) {
  alias = Dmn;
  syntax = ("%f.e:%f.e",Dm,Dn);
}

define (instrfield=Dqr) {
# 1034 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
 width = 6;
    size = 12;


     blk = dalu;
     ref = D;
 pseudo = true;
 syntax = ("%f:%f",Dq,Dr);
     define(instrfield=Dq_Dr) {
# 1051 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
  bits = (5,0);

  table = ((0,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,32),(32,33),(33,34),(34,35),(35,36),(36,37),(37,38),(38,39),(39,40),(40,41),(41,42),(42,43),(43,44),(44,45),(45,46),(46,47),(47,48),(48,49),(49,50),(50,51),(51,52),(52,53),(53,54),(54,55),(55,56),(56,57),(57,58),(58,59),(59,60),(60,51),(61,62),(62,63),(63,0));


     }


 fields = (Dq_Dr(1),Dq_Dr(0));
# 1069 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
     define(instrfield=Dq) {
      size = 6;







   fields = (5,0);

     }
  define(instrfield=Dr) {
   size = 6;







   fields = (11,6);


    }
}



define (regfile=P)
{
   size = 8;
   width = 1;
   prefix = p;
   attrs = doc_hidden;
}


define (instrfield=Pmn) {


 width = 3;
    size = 6;
 pseudo = true;
 ref = P;
 syntax = ("%f:%f",Pm,Pn);
     define(instrfield=Pm_Pn) {
  bits = (2,0);

  table = ((0,1),(1,2),(2,3),(3,4),(4,5),(0,0),(1,1),(2,2));
     }

 fields = (Pm_Pn(1),Pm_Pn(0));

     define(instrfield=Pm) {
      size = 3;
  fields = (2,0);
     }
 define(instrfield=Pn) {
      size = 3;
  fields = (5,3);
     }
}
# 1213 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
define (instrfield=Dpqrs) {
   width = 6;
   size = 24;
   blk = dalu;
   ref = D;
   pseudo = true;
   syntax = ("%f:%f:%f:%f",Dp,Dq,Dr,Ds);

   define(instrfield=Dp_Dq_Dr_Ds) {
      bits = (2,0);
      table = ( (0,1,2,3),(4,5,6,7),(8,9,10,11),(12,13,14,15),(0,1,10,11),(4,5,14,15),(8,9,2,3),(12,13,6,7));
   }

 fields = (5,4,3,Dp_Dq_Dr_Ds(3),5,4,3,Dp_Dq_Dr_Ds(2),5,4,3,Dp_Dq_Dr_Ds(1),5,4,3,Dp_Dq_Dr_Ds(0));

 define(instrfield=Dp) {
    size = 6;
    fields = (5,0);
 }
 define(instrfield=Dq) {
    size = 6;
    fields = (11,6);
 }
 define(instrfield=Dr) {
    size = 6;
    fields = (17,12);
 }
 define(instrfield=Ds) {
    size = 6;
    fields = (23,18);
 }

}



define (instrfield=Dabcd) {







 width = 6;
    size = 24;

     blk = dalu;
     ref = D;
 pseudo = true;
        syntax = ("%f:%f:%f:%f",Da,Db,Dc,Dd);
     define(instrfield=Da_Db_Dc_Dd) {






  bits = (5,0);

  table = ( (0,1,2,3),(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8),(6,7,8,9),(7,8,9,10),(8,9,10,11),(9,10,11,12),(10,11,12,13),(11,12,13,14),(12,13,14,15),(13,14,15,16),(14,15,16,17),(15,16,17,18),(16,17,18,19), (17,18,19,20) ,(18,19,20,21),(19,20,21,22),(20,21,22,23),(21,22,23,24),(22,23,24,25),(23,24,25,26),(24,25,26,27),(25,26,27,28),(26,27,28,29),(27,28,29,30),(28,29,30,31),(29,30,31,32),(30,31,32,33),(31,32,33,34),(32,33,34,35),(33,34,35,36),(34,35,36,37),(35,36,37,38),(36,37,38,39), (37,38,39,40),(38,39,40,41),(39,40,41,42),(40,41,42,43),(41,42,43,44),(42,43,44,45),(43,44,45,46),(44,45,46,47), (45,46,47,48),(46,47,48,49), (47,48,49,50),(48,49,50,51),(49,50,51,52),(50,51,52,53),(51,52,53,54),(52,53,54,55),(53,54,55,56),(54,55,56,57),(55,56,57,58),(56,57,58,59), (57,58,59,60) ,(58,59,60,61),(59,60,61,62),(60,61,62,63),(61,62,63,0),(62,63,0,1),(63,0,1,2));

     }






 fields = (Da_Db_Dc_Dd(3),Da_Db_Dc_Dd(2),Da_Db_Dc_Dd(1),Da_Db_Dc_Dd(0));


 define(instrfield=Da) {
      size = 6;




         fields = (5,0);


     }
     define(instrfield=Db) {
      size = 6;




         fields = (11,6);

     }
 define(instrfield=Dc) {
      size = 6;




         fields = (17,12);

     }
     define(instrfield=Dd) {
      size = 6;




         fields = (23,18);

     }

}

define (instrfield = Dabcd_e) {
  alias = Dabcd;
  syntax = ("%f.e:%f.e:%f.e:%f.e",Da,Db,Dc,Dd);
}

define (instrfield = Dabcd_2) {
  alias = Dabcd;
  syntax = ("%f::%f",Da,Dd);
}


define (instrfield=Rabcd) {


 width = 5;
    size = 20;
     blk = lsu;
     ref = R;
 pseudo = true;
        syntax = ("%f:%f:%f:%f",Ra,Rb,Rc,Rd);
     define(instrfield=Ra_Rb_Rc_Rd) {
  bits = (4,0);

  table = ( (0,1,2,3),(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8),(6,7,8,9),(7,8,9,10),(8,9,10,11),(9,10,11,12),(10,11,12,13),(11,12,13,14),(12,13,14,15),(13,14,15,16),(14,15,16,17),(15,16,17,18),(16,17,18,19), (17,18,19,20) ,(18,19,20,21),(19,20,21,22),(20,21,22,23),(21,22,23,24),(22,23,24,25),(23,24,25,26),(24,25,26,27),(25,26,27,28),(26,27,28,29),(27,28,29,30),(28,29,30,31),(29,30,31,0),(30,31,0,1),(31,0,1,2));
     }


 fields = (Ra_Rb_Rc_Rd(3),Ra_Rb_Rc_Rd(2),Ra_Rb_Rc_Rd(1),Ra_Rb_Rc_Rd(0));

 define(instrfield=Ra) {
      size = 5;
         fields = (4,0);
     }
     define(instrfield=Rb) {
      size = 5;
  fields = (9,5);
     }
 define(instrfield=Rc) {
      size = 5;
         fields = (14,10);
     }
     define(instrfield=Rd) {
      size = 5;
         fields = (19,15);
     }
}

define (instrfield=NF)
{
        width = 1;
        pseudo = true;
 is_signed = true;

}




define (instrfield=AbsAdd31)

{
 width = 31;
 pseudo = true;
 is_signed=false;
 addr=abs;





 reloc = R_SC3900_AbsAdd31_1_1;

}

define (instrfield=s10)

{
   width = 10;
   pseudo = true;
   is_signed = true;





   reloc = R_SC3900_s10_0_0;

}

define (instrfield=s10_t1)

{
   width = 10;
   pseudo = true;
   is_signed = true;
   doc_title = "s10";






   reloc = R_SC3900_s10_t1_0_0;

}
# 1444 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
decode_retry = func(addr_t, unsigned) {





   if (getCurrentInstrTable() == prefix) {
      info(4,"decode_retry - Prefix");
      decode_mode = usual_mode;
      ;
      return true;

   } else {
      info(4,"decode_retry - Not Prefix - False!");
      return false;

   }

   if (num_of_inst > 0) {
      num_of_inst = num_of_inst-1;
   }

};

void packet_suffix() {
   prefix_vles = false;
   decode_mode = prefix_mode;
   dalu0 = true;
   dalu1 = true;
   dalu2 = true;
   dalu3 = true;
}

post_fetch = func(unsigned instr_size) {
# 1513 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
   bool end_of_set = false;





   if (decode_mode == prefix_mode){
      decode_mode = usual_mode;
      num_of_inst = num_of_inst+1;
   } else {

      switch (getCurrentInstrTable()) {
  case serial_one_word : end_of_set = is_end_of_set(PC.uint32(),1); break;
  case serial_two_word : end_of_set = is_end_of_set(PC.uint32(),2); break;
  case serial_three_word: end_of_set = is_end_of_set(PC.uint32(),3); break;
  case serial_four_word: end_of_set = is_end_of_set(PC.uint32(),4); break;
  case prefix: break;
  default: error(1,"ERROR IN POST_EXEC SERIAL");
      }
# 1543 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
      if (end_of_set) {
  setPacketPosition(0);
  num_of_inst=0;
  setCurrentInstrTable(prefix);

  ;
      } else {
  num_of_inst = num_of_inst+1;

      }
   }




   NPC = PC + instr_size;


  if (cond_skip_flag==true) {
     info(4,"Enter cond_skip_flag ");

     cond_skip_flag=false;
     skip_instruction();
  }

   if (SubInstr == SubInstr::regular_2nd_cycle) {
      info(4,"Skip instr -> regular_2nd_cycle");
      skip_instruction();
   }

};


pre_fetch = func() {

   cond_flag = false;

   if (getPacketPosition()==0) {


      CofValid = CofValid::False;
      CofNonCond = CofNonCond::False;
      Cof_instr = Cof_instr::NotTaken;
      CofExec = CofExec::False;
      CondVLES = CondVLES::False;
      CofCond = CofCond::False;
      DelayedCof = DelayedCof::False;
      PreCalc = PreCalc::False;

      TF_RTS = TF_RTS::False;
      TF_COF_INDEX = 0xffff;
      LPMARK_SM_INDEX = 0;
      LPMARK_REFETCH_INDEX = 0;
      INVALID_ENTRY = INVALID_ENTRY::False;

      if ((SubInstr == SubInstr::regular_2nd_cycle) && (SubInstrHelper == SubInstrHelper::False) ) {
  SubInstr = SubInstr::not_sub;
  SubInstrHelper = SubInstrHelper::True;
      } else if ((SubInstr == SubInstr::regular) && (SubInstrHelper == SubInstrHelper::False) ) {
  SubInstr = SubInstr::regular_2nd_cycle;
  SubInstrHelper = SubInstrHelper::True;
  CofValid = CofValid::True;
  Cof_instr = Cof_instr::Taken;
      } else if (SubInstr == SubInstr::delayed) {
  info(4,"SubInstr moved from delayed to regular");
  SubInstr = SubInstr::regular;
  SubInstrHelper = SubInstrHelper::True;
      }

      TrapInstr = TrapInstr::False;
      RTInstr = RTInstr::False;
      LpmarkaFlag = LpmarkaFlag::False;
      LpmarkaCof = LpmarkaCof::NotTaken;
      LpmarkbFlag = LpmarkbFlag::False;
      LpmarkbCof = LpmarkbCof::NotTaken;
      LpmarkmFlag = LpmarkmFlag::False;
      LpmarkmCof = LpmarkmCof::NotTaken;
      LpmarkiFlag = LpmarkiFlag::False;
      LpmarkiCof = LpmarkiCof::NotTaken;
      LpmarksFlag = LpmarksFlag::False;
      DoenFlag = DoenFlag::False;
      DoenSqFlag = DoenSqFlag::False;
      NoBtb = NoBtb::False;
      PreCalc = PreCalc::False;

      LpstFlag = LpstFlag::False;
      LpstSqFlag = LpstSqFlag::False;
      LpendFlag = LpendFlag::False;
      LpendSqFlag = LpendSqFlag::False;
      LpendCof = LpendCof::NotTaken;
      LpendSqCof = LpendSqCof::NotTaken;


   }

   unsigned int cnd=0;
   if (prefix_vles) {
      switch (num_of_inst.uint32()) {
  case 1: cnd=cnd0.uint32(); break;
  case 2: cnd=cnd1.uint32(); break;
  case 3: cnd=cnd2.uint32(); break;
  case 4: cnd=cnd3.uint32(); break;
  case 5: cnd=cnd4.uint32(); break;
  case 6: cnd=cnd5.uint32(); break;
  case 7: cnd=cnd6.uint32(); break;

      }
   }
   unsigned pos = num_of_inst.uint32();

   if (cnd!=0) {
      CondVLES=CondVLES::True;
      cond_flag = true;
   }

   if (!((cnd == 0) || ((SR.T==1) && (cnd==2)) || ((SR.T==0) && (cnd==1)))) {
      info(4,"Pre_fetch, cond_skip_flag=true ");
      cond_skip_flag=true;
      CondInstrStatus(pos,pos)=0;
   } else {
      CondInstrStatus(pos,pos)=1;
   }
# 1691 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
   if (decode_mode == prefix_mode) {
      setCurrentInstrTable(prefix);
   } else {
      unsigned instr_size = calc_instr_size(PC.uint32());
      switch(instr_size) {
  case 1:
     setCurrentInstrTable(serial_one_word);
     break;
  case 2:
     setCurrentInstrTable(serial_two_word);
     break;
  case 3:
     setCurrentInstrTable(serial_three_word);
     break;
  case 4:
     setCurrentInstrTable(serial_four_word);
     break;
  default:
     setCurrentInstrTable(serial_four_word);
     error(1,"Illegal instr_size");
      }
   }


};


bool is_end_of_set(uint32_t pc, unsigned cur_instr_size) {
   bits<16> a = Mem(pc,2);
   bits<16> b = Mem(pc+2,2);
   bits<16> c = Mem(pc+4,2);
   bits<16> d = Mem(pc+6,2);

   switch (cur_instr_size) {
      case 1: return (a(14)==1); break;
      case 2: return (b(14)==1); break;
      case 3: return (c(14)==1); break;
      case 4: return (d(14)==1); break;
      default: error(1,"is_end_of_set, Illegal instr_size");
        return false;
        break;
   }
}

unsigned calc_instr_size(uint32_t pc) {

   bits<16> a = Mem(pc,2);
   bits<16> b = Mem(pc+2,2);
   bits<16> c = Mem(pc+4,2);
   bits<16> d = Mem(pc+6,2);

   if (a(15)==1) {
      return 1;
   } else if (b(15)==1) {
      return 2;
   } else if (c(15)==1) {
      return 3;
   } else if (d(15)==1) {
      return 4;
   } else {
      return 0;
   }
# 1767 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_variant1.adl"
}
# 35 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/general/functions.adl" 1
# 18 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<1> LnComputation (bits<40> data)
{
 if (SR.SM==0)
 {
  return(LnComputation_nochk ( data));

 }
 else { return 0; }
}

bits<1> LnComputation_nochk (bits<40> data)
{
   bits <40> mask;
   bits <2> scale_mode = SR.SCM;
   switch (scale_mode.uint32())
   {
      case 0: mask = 0xff80000000ull; break;
      case 1: mask = 0xff00000000ull; break;
      case 2: mask = 0xffc0000000ull; break;
      case 3: mask = 0xff80000000ull;break;



      default:
       break;
   }

   if ( ((data & mask)==mask) || ((data & mask)==0)) {
      info (1,"2 nir data=" << hex << data << " mask=" << mask);
      return(0);
   }

   return(1);
}

bits<1> LnComputation_special_instr (bits<40> data)
{
   if (SR.SM==1) {
      bits <40> mask = 0xff80000000ull;
      if ( ((data & mask)==mask) || ((data & mask)==0)) {
  return(0);
      }
      return(1);
   }
   else {
      return(LnComputation_nochk(data));
   }
}
# 75 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void set_emr_dovf()
{
   EMR_LOW = true;
   EMR.DOVF = 1;
}
# 89 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void set_emr_ilpr()
{
   EMR_LOW = true;
   EMR.ILPR = 1;
}
# 104 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void clear_emr_nmid()
{
   EMR_LOW = true;
   EMR.NMID = 0;
}
# 124 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> sat_moves(bits<1> Lbit, bits<40> val)
{
  if (Lbit==1) {
   if ( val(39)==1 ) {
        val = 0xff80000000ull;
   } else {
       val = 0x007fffffffull;
   }
  }
  return (val);
}
# 154 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> scale(bits<6> dnum ,bits<1> Lbit)
{

   bits<41> dval = signExtend(D(dnum),41);

   int sm = ( (SR.SM==1) ? 0 : (SR.SCM).uint32() );
   bits<32> scaled = 0;

  switch(sm) {
  case 0:
    scaled = (((dval & 0x40000000) >> 30) ^
       ((dval & 0x20000000) >> 29));
    break;
  case 1:
    scaled = (((dval & 0x80000000) >> 31) ^
        ((dval & 0x40000000) >> 30));
    dval = dval>>1;
    break;
  case 2:
    scaled = (((dval & 0x20000000) >> 29) ^
       ((dval & 0x10000000) >> 28));
    dval = (Lbit==1) ? dval : dval<<1;
    break;
  case 3:

    scaled = (((dval & 0x40000000) >> 30) ^
       ((dval & 0x20000000) >> 29));
    break;
  default:
    break;

  }


  if ( (SR.SM==1) ) {
    scaled = (((dval & 0x40000000) >> 30) ^
       ((dval & 0x20000000) >> 29));
  }

  if ( (scaled!=0) && (Lbit==0) ) { SR.S = 1; }

  info(4,"scale function, return val= "<<hex<<dval(39,0));
  return (dval(39,0));
# 231 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
}
# 246 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<41> scale_mover(bits<41> d_v, bits<1> SR_SM)
{
  bits<32> scaled = 0;
  int sm = ( (SR_SM==1) ? 0 : (SR.SCM).uint32() );
  bits<42> dval = signExtend(d_v,42);


  switch(sm) {
  case 0:


 break;
  case 1:


 dval = dval>>1;
 break;
  case 2:


 dval = dval<<1;
 break;
  case 3:
 dval = dval>>2;


 break;
  default:
 break;

  }

  return (dval(40,0));

}
# 300 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void saturation32 (bits<41> data, bits<6> des)
{
# 320 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
 if ( SR.SM != 0 )
 {
     saturation32_nochk (data,des);

 }
 else
 {
  D(des) = data(39,0);
 }
}
# 348 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void saturation32_noovf (bits<41> data, bits<6> des)
{

   if ( SR.SM != 0 )
   {
      saturation32_nochk_noovf(data,des);
   }
   else
   {
      D(des) = data(39,0);
   }
}
# 379 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void saturation32_nochk (bits<41> data, bits<6> des)
{

 bool excep = false;
 if ( (data(40)==0) && (data(39)==1) )
 {
    D(des) = 0x007FFFFFFFull;
    excep = true;
 }
 else if ( (data(40)==1) && (data(39)==0) )
 {
    D(des) = 0xFF80000000ull;
    excep = true;
 }
 else if ( (data(39)==1) && (data(39,32)!=0xff) )
 {
    D(des) = 0xFF80000000ull;
    excep = true;
 }
 else if ( (data(39)==1) && (data(31)==0) )
 {
    D(des) = 0xFF80000000ull;
    excep = true;
 }
 else if ( (data(39)==0) && (data(31)==1) )
 {
    D(des) = 0x007FFFFFFFull;
    excep = true;
 }
 else if (data.signedGT(0x0007FFFFFFFull))
 {
    D(des) = 0x007FFFFFFFull;
    excep = true;
 }

 if (excep)
 {
    set_emr_dovf();




 }
 else
 {
    D(des) = data(39,0);
 }
}

bits<40> saturation32_basic (bits<41> data)
{
   info(4,"saturation32_basic, data= " << hex << data );
   info(4,"data(40)= " << hex << data(40),"data(39)= " << hex << data(39) );
 if (data(39,0)==0)
    return(0);
 else if ( (data(40)==0) && (data(39)==1) )
 {
    return ( 0x007FFFFFFFull);
 }
 else if ( (data(40)==1) && (data(39)==0) )
 {
    return( 0xFF80000000ull);
 }
 else if ( (data(39)==1) && (data(39,32)!=0xff) )
 {
    return ( 0xFF80000000ull);
 }
 else if ( (data(39)==1) && (data(31)==0) )
 {
    return (0xFF80000000ull);
 }
 else if ( (data(39)==0) && (data(31)==1) )
 {
    return (0x007FFFFFFFull);
 }
 else if (data.signedGT(0x0007FFFFFFFull))
 {
    return ( 0x007FFFFFFFull);
 }
        else {
    return(data(39,0));
 }
}
# 476 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> saturation8_nochk (bits<40> data)
{
   if (data.signedGT(0xff)) {
      exception_overflow = true;
      EMR.DOVF = 1;
      return 0x00000000ffull;
   }
   else return data;

}
# 504 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void saturation32_nochk_noovf (bits<41> data, bits<6> des)
{

   bits<40> tmp=data(39,0);
   if ( (data(40)==0) && (data(39)==1) )
   {
      tmp = 0x007FFFFFFFull;
   }
   else if ( (data(40)==1) && (data(39)==0) )
   {
      tmp = 0xFF80000000ull;
   }
   else if ( (data(39)==1) && (data(39,32)!=0xff) )
   {
      tmp = 0xFF80000000ull;
   }
   else if ( (data(39)==1) && (data(31)==0) )
   {
      tmp = 0xFF80000000ull;
   }
   else if ( (data(39)==0) && (data(31)==1) )
   {
      tmp = 0x007FFFFFFFull;
   }

   D(des) = tmp;
}
# 549 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<16> saturation16 (bits<40> data)
{
   bool exception_ovflow = false;
   bits <16> reg = data(15,0);
   bits <40> neg_sat = 0xFFFFFF8000ull;
   bits <40> pos_sat = 0x0000007FFFull;
   if (SR.SM2 != 0)
   {
      if ( data.signedLT(neg_sat) )
      {
  reg = 0x8000;
  exception_ovflow = true;
      }
      else if ( data.signedGT(pos_sat) )
      {
  reg = 0x7FFF;
  exception_ovflow = true;
      }
      if ( exception_ovflow)
      {
  set_emr_dovf();

      }
   }
   else if( (data.signedLT(neg_sat) ) || ( data.signedGT(pos_sat) ) )
   {

      set_emr_dovf();
   }
   return reg;
}
# 594 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<16> saturation16_noexception(sbits<40> data, bool always_sat = false)
{
 sbits <16> val = data(15,0);


 if ((SR.SM2 != 0) || (always_sat==true)) {
    info(1," , sat data = " << data);
    val = saturation16_nochk(data);
        }
 return val;
}
# 621 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<16> saturation16_nochk(sbits<40> data)
{
 sbits <16> val = data(15,0);
 sbits <40> neg_sat = 0xFFFFFF8000ull;
 sbits <40> pos_sat = 0x0000007FFFull;



 if (data.signedLT(neg_sat)) {
    val = 0x8000;
    EMR_LOW = true;
    EMR.DOVF = 1;
 }
 else if (data.signedGT(pos_sat) )
 {
    val = 0x7FFF;
    EMR_LOW = true;
    EMR.DOVF = 1;
 }
    info(1," , 3 val = " << hex << val);
 return val;
}
# 659 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<20> saturation20_nochk(bits<40> data)
{
 bits <20> val = data(19,0);
 bits <40> neg_sat = 0xFFFFFF8000ull;
 bits <40> pos_sat = 0x0000007FFFull;
 if ( data.signedLT(neg_sat) ) {
    val = 0xf8000;
    exception_overflow = true;
    EMR.DOVF = 1;
 }
 else if ( data.signedGT(pos_sat) )
 {
    val = 0x07FFF;
    exception_overflow = true;
    EMR.DOVF = 1;
 }
 return val;
}
# 693 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void Borrow (bits<41> dest, bits<40> src0, bits<40> src1)

{
 bits<1> tmp=0;
 if ( (dest & (0x08000000000ull))==0 ) {
  if ( ( (src0 & 0x8000000000ull)!=0) && ((src1 & (0x8000000000ull))==0) ) {
                        tmp = 1;
  }
 }
 else
 {
  if ( ( (src0 & 0x8000000000ull)!=0) || ((src1 & 0x8000000000ull) == 0) ) {
                        tmp = 1;
  }
 }
 SR.C = tmp;
}
# 730 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
sbits<41> overflow40( bits<41> reg)
{
 sbits<41> reg2 = signExtend( reg.get<40>(39,0),41);
 info(4,"overflow40,reg2= "<<hex<<reg2,"reg= "<<hex<<reg);
 if ( reg2 != reg ) {





    info(4,"overflow40!! - set_emr_dovf ");
    set_emr_dovf();

    if (SR.SM==1) {
       if (reg(40)==1) {
   return (0x18000000000ull);
       } else {
   return (0x7fffffffffull);
       }
    } else {
       return (reg2);
    }

 } else {
    return (reg2);
 }
}
# 773 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
int is_msb_changed(bits<40> reg, int shift)
{
   bits<1> prev_msb = reg(39);
   bits<1> new_msb = reg(39-shift);
   if (prev_msb!=new_msb) {
      set_emr_dovf();
      return 1;
   }
   else return 0;
}
# 797 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bool overflow20( bits<21> reg)
{
   sbits<21> reg2 = signExtend( reg.get<20>(19,0),21);
   if ( reg2 != reg ) {
      return true;
      set_emr_dovf();
   }
   else return false;
}
# 822 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bool overflow_shift_left( bits<40> Dval, bits<6> shift)
{

   if ((shift==0) || (Dval==0)) return false;
   if (shift>39) return true;
   bool overflow = false;
   bits<40> mask =0xffffffffffull;
   mask >>= (40-shift);
   mask <<= (40-shift);
   bits<40> check_mask = mask & Dval;

   if ( check_mask == 0 ) {
      if (Dval(39-shift)==1)
     overflow = true;
   }
   else
   {
     if ( check_mask == mask ) {
    if (Dval(39-shift)==0)
     overflow = true;
  }
      else overflow = true;
   }
   return overflow;
}

bool overflow_shift_left_32( bits<32> Dval, bits<6> shift)
{

   if ((shift==0) || (Dval==0)) return false;
   if (shift>31) return true;
   bool overflow = false;
   bits<32> mask =0xffffffff;
   mask >>= (32-shift);
   mask <<= (32-shift);
   bits<32> check_mask = mask & Dval;

   if ( check_mask == 0 ) {
      if (Dval(31-shift)==1)
     overflow = true;
   }
   else
   {
     if ( check_mask == mask ) {
    if (Dval(31-shift)==0)
     overflow = true;
  }
      else overflow = true;
   }
   return overflow;
}
# 891 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> saturation32_shift(bool ovf,bits<1> sat_direction,bits<40> dval,bool always_sat=false)
{
   bits <40> neg_val = (0xFF80000000ull);
   bits <40> pos_val = (0x007fffffffull);
   bool saturation = false;
   if (ovf) { saturation = true; }
   if ( (SR.SM != 0 || always_sat) )
   {
      if (!ovf) {



  info(1,"saturation32_shift, dval: "<<hex<<dval);
  if ( dval.signedGT(pos_val) || dval.signedLT(neg_val) ) saturation = true;
      }
      if (saturation) {


  dval = (sat_direction==1) ? neg_val : pos_val;
      }
   }
   if (saturation) set_emr_dovf();
   return dval;
}
# 933 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<16> saturation16_shift(bool ovf,bits<1> sat_direction,bits<32> dval, bool always_sat=false)
{
   bits <32> neg_val = (0xFFFF8000);
   bits <32> pos_val = (0x00007fff);


   bool saturation = ovf;
   if ( (SR.SM2 != 0) || (always_sat == true) ) {






    if (saturation) {
     dval = (sat_direction==1) ? neg_val : pos_val;
    }
   }
   if (saturation) set_emr_dovf();
   return dval(15,0);
}

bits<20> saturation20_shift(bool ovf,bits<1> sat_direction,bits<32> dval)
{

   if (ovf) set_emr_dovf();
   return dval(19,0);
}
# 1042 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> multiple_bit_shift(bits<6> FFF,bits<7> shift,bool shift_direction,bool saturation,bool always_sat=false)
{
   bits<40> val;
   bits<40> ret_val;
   bits<7> neg_val = (~shift)+1;
   bits<7> shift_s = (shift(6)==0) ? shift : (neg_val);
   bits<6> abs_shift = ( zeroExtend(shift_s,8).signedGT(40) ) ? 40 : shift_s ;
   bool shift_left = ( (shift_direction && (shift(6)==0)) || (!shift_direction && (shift(6)==1)) );
   bits<40> orig_val = D(FFF);
   info (4,"abs_shift="<< hex << abs_shift);
   info (4,"shift_left="<< hex << shift_left);

   if ( !shift_left )
   {
   info (1,"shift_s="<< hex << shift_s);

      if ( shift_s > 39 ) {
  ret_val = ( D(FFF)(39)==0 ) ? 0x0 : 0xffffffffffull ;
  if (shift_s==0x40) SR.C=0;
  else SR.C = D(FFF)(39);
      }
      else {
  val = D(FFF) >> abs_shift;
  val = slice_signExtend( val, (39-abs_shift) );
  if (saturation) {
     ret_val = saturation32_shift(false,D(FFF)(39),val,always_sat);
  }
  else {
     ret_val = val;
  }
  SR.C = (abs_shift==0) ? 0 : D(FFF)(abs_shift-1);
      }
   }
   else
   {
      if(abs_shift>=40)
      {
  set_emr_dovf();

      }

      bool ovf = overflow_shift_left(orig_val,abs_shift);
      val = D(FFF)<<abs_shift;


      if (saturation) {
     ret_val = saturation32_shift(ovf,D(FFF)(39),val,always_sat);
      }
      else {
  ret_val = val;
  if (ovf) set_emr_dovf();
      }


      SR.C = (abs_shift==0) ? 0: D(FFF)(40-abs_shift);
   }
   return ret_val;
}


bits<32> multiple_bit_shift_long(bits<6> FFF,bits<7> shift,bool shift_direction,bool saturation)
{
   bits<32> val;
   bits<32> ret_val;
   bits<7> neg_val = (~shift)+1;
   bits<7> shift_s = (shift(6)==0) ? shift : (neg_val);
   bits<6> abs_shift = ( zeroExtend(shift_s,8).signedGT(32) ) ? 32 : shift_s ;
   bool shift_left = ( (shift_direction && (shift(6)==0)) || (!shift_direction && (shift(6)==1)) );
   bits<32> orig_val = D(FFF)(31,0);

   if ( !shift_left )
   {
      if ( shift_s > 31 ) {
  ret_val = ( D(FFF)(31)==0 ) ? 0x0 : 0xffffffffffull ;
  if (shift_s==0x40) { SR.C = 0; }
  else { SR.C = D(FFF)(31); }
      }
      else {
  val = D(FFF) >> abs_shift;
  val = slice_signExtend( val, (31-abs_shift) );
  if (saturation) {
     ret_val = saturation32_shift(false,D(FFF)(31),val);
  }
  else {
     ret_val = val;
  }
  SR.C = (abs_shift==0) ? 0 : D(FFF)(abs_shift-1);
      }
   }
   else
   {
      if(abs_shift>=32)
      {
  set_emr_dovf();

      }

      bool ovf = overflow_shift_left(orig_val,abs_shift);
      val = D(FFF)<<abs_shift;


      if (saturation) {
     ret_val = saturation32_shift(ovf,D(FFF)(31),val);
      }
      else {
  ret_val = val;
  if (ovf) set_emr_dovf();
      }


      SR.C = (abs_shift==0) ? 0: D(FFF)(32-abs_shift);
   }
   return ret_val;
}




bits<40> f_inst_asrr(bits<6> FFF,bits<7> shift)
{
  int sc;

  bits<80> result,carry;
  bits<80> tval1 = signExtend(D(FFF),80);
  bits<32> shift_count = zeroExtend(shift,32);
  if(shift_count(6)==1)
  {

    info(4,"Enter left shift");
    shift_count|=~(0x000000007full);
    shift_count=(0-shift_count);
    sc=shift_count.uint32();
    info(4,"shift_count"<<hex<<shift_count);
    if(shift_count.signedGE(40))
    {
       info(4,"set_emr_dovf,shift_count=40; ");
       set_emr_dovf();
       shift_count=40;
    }
    else
    {
      bits<40> mask, upper_bits;
      mask=1;
      mask=0-mask;
      mask <<= ((39 - shift_count.uint32()));
      upper_bits=tval1&mask;
      info(4,"upper_bits= "<<hex<<upper_bits);
      if(upper_bits==0||upper_bits==mask)
 ;
      else
      {
  set_emr_dovf();
      }
    }


    result=tval1 << shift_count.uint32();
    carry=1;
    carry <<=40;

    if((sc !=64)&&((result&carry)!=0))
    {
       SR.C=1;
    }
    else
    {
       SR.C=0;
    }
  }
  else
  {

     carry=1;
     carry <<= ((shift_count.uint32())-1);

     if(shift_count.signedGT(40))
     {
 shift_count=40;
     }

     result=tval1>>shift_count.uint32();
     if((shift_count!=0)&&((tval1&carry)!=0))
     {
 SR.C=1;
     }
     else
     {
 SR.C=0;
     }
  }
  return (result(39,0));
}

bits<40> f_inst_asllsi(bits<6> FFF,bits<32> shift_count,bool saturate_always = false)
{
   info(4,"f_inst_asllsi,shift_count= "<<hex<<shift_count);
   bits<80> result,mask;
   bits<80> src = signExtend(D(FFF),80);
   bits<32> carry,sign,temp_count;
   bits<64> pos_sat = 0x7fffffff;
   bits<64> neg_sat = ~pos_sat;
   bool Overflow=false;

   if(src(39)==1) {
      sign=1;
   }
   else {
      sign=0;
   }
   info(4,"signe= "<<sign);

   if(shift_count.signedGT(40))
   {
      if(shift_count==0x40) {
  carry=0;
      }
      else {
  if((src&0x1)!=0) {
     carry=1;
  }
  else {
     carry=0;
  }
      }
   }
   else if(shift_count==0) {
      carry=0;
   } else if(((src>>(40-shift_count.uint32()))&0x1)!=0) {
      carry=1;
   } else {
      carry=0;
   }
   if(shift_count!=0)
   {
      mask=1;
      mask=0-mask;
      mask <<=40;
      result=src;
      temp_count=shift_count;
      info(4,"temp_count= "<<hex<<temp_count);
      while(temp_count!=0)
      {
  info(4,"temp_count= "<<hex<<temp_count);
  result <<=1;
  temp_count=temp_count-1;


  if(!Overflow)
  {
     info(4,"result= "<<hex<<result, "mask= "<<hex<<mask);
     if ((result&mask)==0||(result&mask)==mask)
        ;
     else
     {
        info(4,"Overflow=true");
        Overflow=true;
        set_emr_dovf();
     }
  }
      }
   }
  else { result=src; }
   if(shift_count.signedGE(40)||
  ((result(39)==1)&&(sign==0))||
  ((result(39)==0)&&(sign==1)))
   {
      Overflow=true;
      set_emr_dovf();
   }
   if((SR.SM!=0|| saturate_always==true)&& src!=0)
   {







      bits<9> extbits = result(39,31);
      info(4,"extbits= "<<hex<<extbits, ",Overflow= "<<Overflow);
      if( (Overflow) ||((extbits!=0)&&(extbits!=0x1ff)))
      {
  if(sign!=0) {
     result=neg_sat;
  } else {
     result=pos_sat;
  }
  if(!Overflow)
  {
     set_emr_dovf();
  }
      }
   }
   if(carry!=0)
   {
      SR.C=1;
   }
   else
   {
      SR.C=0;
   }
   return (result(39,0));
}






bits<40> f_inst_asrrsi(bits<6> FFF,bits<32> shift_count,bool saturate_always = false)
{
  bits<80> result,ext_byte,mask;
  bits<80> src = signExtend(D(FFF),80);
  bits<32> carry,sign;
  bits<64> pos_sat = 0x7fffffff;
  bits<64> neg_sat = ~pos_sat;

  if(src(39)==1) {
     sign=1;
  } else {
     sign=0;
  }

  if(shift_count.signedGT(40))
  {
     if(shift_count==0x40) {
 carry=0;
     } else {
 carry=sign;
     }
     shift_count=40;
  }
  else
  {
     if(shift_count==0) {
 carry=0;
     } else if(((src>>(shift_count-1))&0x1)!=0) {
 carry=1;
     } else {
 carry=0;
     }
  }
  if(shift_count!=0)
  {
     result=src>>shift_count.uint32();

     mask=1;
     mask=0-mask;
     mask <<= (40-shift_count.uint32());
     if(sign!=0) {
 result|=mask;
     } else {
 result&=~mask;
     }
  }
  else {result=src;}
  if(SR.SM==1|| saturate_always==true)
  {
     ext_byte=result>>31;
     ext_byte&=0x03ff;
     if( (ext_byte!=0)&& (ext_byte!=0x3ff))
     {
 if(sign!=0) {
    result=neg_sat;
 } else {
    result=pos_sat;
 }
 set_emr_dovf();
     }
  }
  if(carry!=0)
  {
     SR.C=1;
  }
  else
  {
     SR.C=0;
  }

  return (result);
}





bits<32> multiple_bit_shift_agu(bits<5> R_entry,bits<6> shift,bool shift_direction,bool saturation)
{
   bits<32> val;
   bits<32> ret_val;
   bits<6> neg_val = (~shift)+1;
   bits<6> shift_s = (shift(5)==0) ? shift : (neg_val);
   bits<5> abs_shift = ( zeroExtend(shift_s,7).signedGT(32) ) ? 32 : shift_s ;
   bool shift_left = ( (shift_direction && (shift(5)==0)) || (!shift_direction && (shift(5)==1)) );
   bits<32> orig_val = R(R_entry);
   info (1,"abs_shift="<< hex << abs_shift);
   info (1,"shift_left="<< hex << shift_left);

   if ( !shift_left )
   {
   info (1,"shift_s="<< hex << shift_s);
      if ( shift_s > 31 ) {
     val = ( R(R_entry)(31)==0 ) ? 0x0 : 0xffffffff;
  info (1,"dd  val="<< hex << val);





     ret_val = val;


      }
      else {
  val = R(R_entry) >> abs_shift;
  val = slice_signExtend( val, (31-abs_shift) );
  if (saturation) {
     ret_val = saturation32_shift(false,R(R_entry)(31),signExtend(val,40));
  }
  else {
     ret_val = val;
  }

      }
   }
   else
   {
      bool ovf = overflow_shift_left_32(orig_val,abs_shift);

      val = R(R_entry)<<abs_shift;
   info (1,"val="<< hex << val );
   info (1,"saturation="<< hex << saturation );
      if (saturation) {
     ret_val = saturation32_shift(ovf,R(R_entry)(31),signExtend(val,40));
      }
      else {
  ret_val = val;
  if (ovf) { set_emr_dovf(); }
      }

   }
   return ret_val;
}
# 1502 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void multiple_bit_shift2(bits<6> des,bits<6> src, bits<6> shift,bool shift_direction, bool always_sat = false)
{
   bits<32> val;
   sbits<6> local_shift = (SR.W20 == 0) ? signExtend(shift(4,0),6) : shift;
   bits<7> neg_val = (~local_shift)+1;
   bits<7> abs_shift ;
   abs_shift = (local_shift(5)==0) ? (bits<7>)local_shift : neg_val;

   if ((SR.W20==0) || (always_sat==true)) {
    abs_shift = ( abs_shift.signedGT(16) ) ? 16 : abs_shift ;
   } else {
      abs_shift = ( abs_shift.signedGT(20) ) ? 20 : abs_shift ;
   }



   bool shift_left = ( (shift_direction && (shift(5)==0)) || (!shift_direction && (shift(5)!=0)) );

   if ((SR.W20==0)|| (always_sat==true)) {
  D(des).E=0;
 }

   if ( !shift_left )
   {
   if ((SR.W20==0) || (always_sat==true)) {
    D(des).L = signExtend(D(src).L,32) >> abs_shift;
    D(des).H = signExtend(D(src).H,32) >> abs_shift;
   } else {
    D(des).WL = signExtend(D(src).WL,40) >> abs_shift;
    D(des).WH = signExtend(D(src).WH,40) >> abs_shift;
   }
   }
   else
   {


      bool ovf;
      sbits<40> shift_val,shift_val_2;
   sbits<20> shift_cut20;
   sbits<16> shift_cut16;
      if ((SR.W20 == 0)|| (always_sat==true)) {
    shift_val = signExtend(D(src).L,40) << abs_shift;
    shift_cut16 = (shift_val & 0xffff);
  shift_val_2 = signExtend(shift_cut16,40);
    ovf = (shift_val != shift_val_2);
  D(des).L = saturation16_shift(ovf,D(src)(15),shift_val, always_sat);

    shift_val = signExtend(D(src).H,40) << abs_shift;
    shift_cut16 = (shift_val & 0xffff);
  shift_val_2 = signExtend(shift_cut16,40);
    ovf = (shift_val != shift_val_2);
  D(des).H = saturation16_shift(ovf,D(src)(31), shift_val, always_sat);
   } else {
    shift_val = signExtend(D(src).WL,40) << abs_shift;
    shift_cut20 = (shift_val & 0xfffff);
  shift_val_2 = signExtend(shift_cut20,40);
    ovf = (shift_val != shift_val_2);
  if (ovf) { set_emr_dovf(); }
  info (1,"yy shift_val=" << hex << shift_val << " shift_val_2=" << shift_val_2 << " ovf="<< ovf);

    D(des).WL = shift_val(19,0);
    shift_val = signExtend(D(src).WH,40) << abs_shift;
    shift_cut20 = (shift_val & 0xfffff);
  shift_val_2 = signExtend(shift_cut20,40);
    ovf = (shift_val != shift_val_2);
  if (ovf) set_emr_dovf();
  info (1,"xx shift_val=" << hex << shift_val << " shift_val_2=" << shift_val_2 << " ovf="<< ovf);

        D(des).WH = shift_val(19,0);
   }

   }
}
# 1610 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> multiple_bitwise_shift(bits<6> FFF,bits<7> shift,bool shift_direction)
{
   bits<40> ret_val;
   bits<7> neg_val = (~shift)+1;
   bits<7> shift_s = (shift(6)==0) ? shift : (neg_val);
   bool big = (zeroExtend(shift_s,8).signedGT(40))?true:false;
   bits<6> abs_shift = ( big==true ) ? 40 : shift_s ;
   bool shift_left = ( (shift_direction && (shift(6)==0)) || (!shift_direction && (shift(6)==1)) );
   if ( !shift_left )
   {
      ret_val = D(FFF)>>abs_shift;
      SR.C = ((abs_shift==0)||(big&&shift_direction)) ? 0 : D(FFF)(abs_shift-1);
   }
   else
   {
      ret_val = D(FFF)<<abs_shift;
      SR.C = ((abs_shift==0) || (shift==0x40)) ? 0: D(FFF)(40-abs_shift);
   }
   return ret_val;

}



bits<32> multiple_bitwise_shift_agu(bits<5> entry,bits<7> shift,bool shift_direction)
{
   bits<32> ret_val;
   bits<7> neg_val = (~shift)+1;
   bits<7> shift_s = (shift(6)==0) ? shift : (neg_val);
   bool big = ( zeroExtend(shift_s,8).signedGT(32) )?true:false;
   bits<6> abs_shift = ( big==true ) ? 32 : shift_s ;
   bool shift_left = ( (shift_direction && (shift(6)==0)) || (!shift_direction && (shift(6)==1)) );
   if ( !shift_left )
   {
      ret_val = R(entry)>>abs_shift;

   }
   else
   {
      ret_val = R(entry)<<abs_shift;

   }
   return ret_val;

}
# 1673 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void extract_f(bits<6> FFF, bits<6> jjj, bits<6> width_s, bits<6> offset_s, bool sign_extension)
{
# 1701 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
  bits<40> result,tval1,tval2,tval3,offset,width;
  offset = zeroExtend(offset_s,40);
  width = zeroExtend(width_s,40);
  tval1 = D(jjj);
  if(offset.signedGE(40))
  {
    result=0;
  }
  else
  {
    int circle_shift=0;
    if((offset + width).signedGT(40))
    {
      circle_shift=width.uint32();
      width=40-offset;
    }
    else if(width==0)
    {
      width=1;
    }
    tval2=1;
    tval2 <<=width;
    tval2 -=1;
    result=(tval1>>offset.uint32())&tval2;

    if(circle_shift)
    {
      result|=tval1 << width.uint32();
      width=circle_shift;

      tval2=1;
      tval2 <<=width.uint32();
      tval2 -=1;
      result&=tval2;
    }

    tval3=1;
    tval3 <<= (width.uint32() - 1);

    if((result&tval3)!=0)
    {
      tval2=~tval2;
      result|=tval2;
    }
  }
  D(FFF) = result;
}



void extractu_f(bits<6> FFF, bits<6> jjj, bits<6> width_s, bits<6> offset_s, bool sign_extension)
{
  bits<40> result,tval1,tval2,offset,width;
  offset = zeroExtend(offset_s,40);
  width = zeroExtend(width_s,40);
  tval1 = D(jjj);
  if(offset.signedGE(40))
  {
    result=0;
  }
  else
  {
    if(width==0)
    {
       result=(tval1>>offset.uint32())&1;
       if(result!=0)
       {

   result=0;
   result=0-result;
       }
    }
    else
    {
       int circle_shift=0;
       if((offset + width).signedGT(40))
       {
   circle_shift=width.uint32();
   width=40-offset;
       }
       tval2=1;
       tval2 <<=width;
       tval2 -=1;
       result=(tval1>>offset.uint32())&tval2;

       if(circle_shift)
       {
   result|=tval1 << width.uint32();
   width=circle_shift;

   tval2=1;
   tval2 <<=width.uint32();
   tval2 -=1;
   result&=tval2;
       }
    }
  }
  D(FFF) = result;
}
# 1819 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<80> Shift_Left_Dalu( bits<40> src, int shift )
{

 if (shift)
 {
  shift = (shift<=40) ? shift : 40;
  var tmp = src<<shift;



  bits<80> extended_temp = signExtend(tmp,80);
  SR.C = extended_temp(40,40);

  return extended_temp;
 }
 else
 {
  SR.C = 0;
  return signExtend(src,80);
 }
}
# 1859 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> Shift_Right_Dalu( bits<40> src, int shift )
{
 if (shift)
 {
  shift = (shift<=40)? shift:40;
  bits <40> tmp = src>>shift;

  info (1,"before=" << hex <<tmp <<" number=" << 40 -shift-1 );
  tmp = slice_signExtend(tmp,40 -shift-1);
  info (1,"after" << hex <<tmp );
  SR.C = (shift) ?( src(shift-1,shift-1) ) : 0;
  return tmp;
 }
 return src;
}
# 1894 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void csSAT( bits<40> src, bits<6> FFF )
{
 if (SR.SM != 0)
 {
  if ( D(FFF).signedGT(0x7fffffff) || D(FFF).signedLT(0x80000000) )
  {
   if ( src(39) != 0 )
   {
    D(FFF) = (0xff80000000ull);

    exception_overflow = true;
    EMR.DOVF = 1;
   }
   else if ( src != 0)
   {
    D(FFF) = (0x007fffffffull);

    exception_overflow = true;
    EMR.DOVF = 1;
   }
  }
 }
}
# 1945 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> round(sbits <41> val)
{
 int a;
   sbits<41> rval = 0, tmp;
 bits<41> rmask;
   sbits<41> sum;
 exception_overflow = false;

   if (!SR.SM ) { a = SR.SCM.uint32() ;}
 else { a = 0; }

   switch (a) {
     case 0:
        rval = (0x8000);
        break;
     case 1:
        rval = (0x10000);
        break;
     case 2:
        rval = (0x4000);
        break;
     case 3:
        rval = (0x8000);
        break;
   }

   rmask = (rval << 1) - 1;
    tmp = val & rmask;
 sbits <40> satsum;

   if (SR.RM != 0)
 {
      if ( tmp.signedGE(rval) )
  {
     info (1,"val=" << hex << val << " rval=" << rval);
     sum = val + (rval << 1);
     info (1,"sum=" << hex << sum);
  }
  else
  {
     sum = val;
  }
   }
 else
 {

  info(1,"Nir: tmp= " << hex << tmp, " val: "<<hex<<val);

  if (tmp.signedLT(rval)) {


    sum = val;
   info(1,"Nir6: sum= " << hex << sum, " val: "<<hex<<val << " rval= " << rval);
  } else if (tmp.signedGT(rval)) {


     sum = val + (rval << 1);
   info(1,"Nir7: sum= " << hex << sum, " val: "<<hex<<val << " rval= " << rval);
  } else if ((val & (rval << 1)) != 0) {
   sum = val + (rval << 1);
   info(1,"Nir8: sum= " << hex << sum, " val: "<<hex<<val << " rval= " << rval);
  } else {
   sum = val;

   info(1,"Nir9: sum= " << hex << sum, " val: "<<hex<<val << " rval= " << rval);
  }
   }

 sum = sum & ~rmask;
 sbits <16> tryme;

 bits<41> tmp_ovf = overflow40(sum&(~rmask));

 info(4," sum= " << hex << sum, " val: "<<hex<<val, ", tmp_ovf: "<<hex<<tmp_ovf);
# 2031 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
 int is_ovf =1;
 if ((tmp_ovf==0x18000000000ull) || (tmp_ovf==0x7fffffffffull)) { is_ovf=2; }
 satsum = ll_saturate_mpy(sum,0,is_ovf);
# 2052 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
 return (satsum & ~rmask);
}



bits<41> f_inst_rnd_mpy(bits<41> tval1)
{

  int convr= (SR.RM == 0)? 1 : 0;
  int scale_mode;
  if (!SR.SM ) { scale_mode = SR.SCM.uint32() ;}
  else { scale_mode = 0; }

  sbits<41> result, tval2;




  bits<41> MAXD = 0x0000000ffff;
  bits<41> MAXDP1 = 0x00000010000;
  bits<41> SIGNBIT = 0x00000008000;

  switch ( scale_mode )
  {
    default:
    case 0:
      result=tval1 + SIGNBIT;
      if(convr&&(!(result&MAXD)))
      {
 tval2=MAXDP1|MAXD;
 result&=~tval2;
      }
      tval2=MAXD;
      result&=~tval2;
      break;
    case 2:
      result=tval1 + (SIGNBIT>>1);
      if(convr&&(!(result&(MAXD>>1))))
      {
 tval2=MAXD;
 result&=~tval2;
      }
      tval2=(MAXD>>1);
      result&=~tval2;
      break;
    case 1:
      result=tval1 + (SIGNBIT << 1);
      if(convr&&(!(result&(MAXDP1|MAXD))))
      {
 tval2=(MAXD << 2)|3;
 result&=~tval2;
      }
      tval2=(MAXDP1|MAXD);
      result&=~tval2;
      break;
  }
  int is_ovf = (set_OVF(result))? 2: 1;

  return (ll_saturate_mpy(result, 1,is_ovf));


}



int set_OVF(bits<41> dv)
{
  int ext_bits;
  dv>>=16 + 16;
  ext_bits= (dv&0x180).uint32();
  if(ext_bits==0x100||ext_bits==0x80)
  {
     set_emr_dovf();
     return 1;
  }
  return 0;

}

bits<41> ll_saturate(bits<41> rval,int roundit)
{
   if ( SR.SM != 0 ) {
      rval = ll_saturate_nochk(rval,roundit);
   }
   return rval;
}

bits<41> ll_saturate_nochk(bits<41> rval,int roundit)
{
      sbits<41> ebits, tval1;
      int scale_mode = SR.SCM.uint32();
      ebits=tval1=rval;
      ebits=(ebits>>((16 * 2) - 2));

      if (!SR.SM ) { scale_mode = SR.SCM.uint32() ;}
      else { scale_mode = 0; }

      if(scale_mode==0)
      {
  ebits>>=1;
  ebits&=0x1ff;
  if((ebits&0x100)!=0)
  {
     ebits|=0x200;
  }
      }
      else if(scale_mode==1)
      {
  ebits>>=2;
  ebits&=0xff;
  if((ebits&0x80)!=0)
  {
     ebits|=0x300;
  }
      }
      else
      {
  ebits&=0x3ff;
      }

      if((ebits==0x3ff)||(ebits==0))
  ;
      else
      {
  set_emr_dovf();
  if((ebits&0x100)!=0)
  {
     tval1=0x7fffffff;
     tval1=~tval1;
  }
  else
  {
     tval1=(roundit)?0x7fff0000:0x7fffffff;
  }
  rval=tval1;
      }
   return rval;


}




bits<40> saturate(bits<41> val)
{

 bits <40> temp = val(39,0);
 bits <41> neg_val = (0xFFF80000000ull);
 bits <41> pos_val = (0x0007fffffffull);
   if ( SR.SM != 0)
 {
      if ( val.signedLT(neg_val) && (val(39)==1) )
  {
         temp = neg_val;
   set_emr_dovf();
   info(4,"saturate");


      }
  else if ( val.signedGT(pos_val) && (val(39)==0) )
   {
         temp = pos_val;
   set_emr_dovf();
   info(4,"saturate  ");


      }
   }
 return temp;
}


bits<40> ll_saturate_mpy(bits<41> val,int roundit, int is_ovf=0)

{
  info(4,"ll_saturate_mpy");
  if(SR.SM!=0)
  {



    bits<41> ebits=val;
    ebits=(ebits>>((16 * 2) - 1));
    ebits&=0x1ff;


    if((ebits==0x1ff)||(ebits==0))
      ;
    else
    {

       bits<41> current_OVF= is_ovf ? (is_ovf-1) : 0;
       bits<41> bit39=(ebits&0x0100)>>8;




       set_emr_dovf();
       if ( (current_OVF^bit39)!=0 )

       {
   val=0x0007fffffff;
   val=~val;
       }
       else
       {
   val=(roundit)?0x7fff0000:0x7fffffff;
       }
       return val(39,0);
    }
  }
  return val(39,0);
}



bits<40> ll_saturate_mpy_nochk(bits<41> val,int roundit, int is_ovf=0)
{
    bits<41> ebits=val;
    ebits=(ebits>>((16 * 2) - 1));
    ebits&=0x1ff;

    if((ebits==0x1ff)||(ebits==0))
      ;
    else
    {
       bits<41> current_OVF= is_ovf ? (is_ovf-1) : 0;
       bits<41> bit39=(ebits&0x0100)>>8;
       set_emr_dovf();
       if ( (current_OVF^bit39)!=0 )
       {
   val=0x0007fffffff;
   val=~val;
       }
       else
       {
   val=(roundit)?0x7fff0000:0x7fffffff;
       }
       return val(39,0);
    }
   return val(39,0);
}


bits<40> finish_rnd(sbits<42> tval1)
{

  int convr= (SR.RM == 0)? 1 : 0;
  int scale_mode;
  if (!SR.SM ) { scale_mode = (SR.SCM).uint32() ;}
  else { scale_mode = 0; }


  sbits<42> result, tval2, mask;

  mask=0x00FFFFFFFFFFull;




  sbits<42> MAXD = 0x0000000ffffull;
  sbits<42> MAXDP1 = 0x00000010000ull;
  sbits<42> SIGNBIT = 0x00000008000ull;

  switch ( scale_mode )
  {
    default:
    case 0:
      result=tval1 + SIGNBIT;
      if(convr&&((result&MAXD)==0))
      {
 tval2=MAXDP1|MAXD;
 result&=~tval2;
      }
      tval2=MAXD;
      result&=~tval2;
      break;
    case 2:
      result=tval1 + (SIGNBIT>>1);
      if(convr&&((result&(MAXD>>1))==0))
      {
 tval2=MAXD;
 result&=~tval2;
      }
      tval2=(MAXD>>1);
      result&=~tval2;
      break;
    case 1:
      result=tval1 + (SIGNBIT << 1);
      if(convr&&((result&(MAXDP1|MAXD))==0))
      {
 tval2=(MAXD << 2)|3;
 result&=~tval2;
      }
      tval2=(MAXDP1|MAXD);
      result&=~tval2;
      break;
  }
  int is_ovf = (set_OVF(result))? 2: 1;

  if( ((result>>39)&0x001)!=0 ) {
   result|=~mask;
  } else {
   result&=mask;
  }
  return (ll_saturate_mpy(result, 1,is_ovf));

}


bits<40> saturate_noovf(bits<40> val)
{

 bits <40> temp = val;
 bits <40> neg_val = (0xFF80000000ull);
 bits <40> pos_val = (0x007fffffffull);
 bits <40> mask = 0x0f80000000ull;
 info(4," saturate_noovf: val= " << hex << val);
 bits <40> res = mask&temp;
 info(4," saturate_noovf: res= " << hex << res);
 if ( (res!=mask) && (res!=0) )
 {
    if ( val(35,35)==1 ) {
       temp = neg_val;
    } else {
       temp = pos_val;
    }
 }
 return temp;
}
# 2402 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<41> round16(sbits <40> val, bits<1> rnd_mod)
{


   sbits<41> rval = (0x08000);
   bits<41> tmp;
   bits<41> rmask;
   sbits<41> sum;

   rmask = (rval << 1) - 1;
   tmp = val & rmask;
   sbits <40> satsum;

   if (rnd_mod==1)
   {

      if ( tmp.signedGE(rval) )
      {

  sum = val + (rval << 1);

      }
      else
      {
  sum = val;
      }
   }
   else
   {



      if (tmp.signedLT(rval)) {


  sum = val;

      } else if (tmp.signedGT(rval)) {


  sum = val + (rval << 1);

      } else if ((val & (rval << 1)) != 0) {
  sum = val + (rval << 1);

      } else {
  sum = val;


      }
   }

   sum = sum & ~rmask;

   return sum;
# 2466 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
}
# 2485 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<41> round8(sbits <40> val, bits<1> rnd_mod)
{


   sbits<41> rval = (0x0800000);
   bits<41> tmp;
   bits<41> rmask;
   sbits<41> sum;

   rmask = (rval << 1) - 1;
   tmp = val & rmask;
   sbits <40> satsum;

   if (rnd_mod==1)
   {

      if ( tmp.signedGE(rval) )
      {
  info (4,"val=" << hex << val << " rval=" << rval);
  sum = val + (rval << 1);
  info (4,"sum=" << hex << sum);
      }
      else
      {
  sum = val;
      }
   }
   else
   {



      if (tmp.signedLT(rval)) {


  sum = val;

      } else if (tmp.signedGT(rval)) {


  sum = val + (rval << 1);

      } else if ((val & (rval << 1)) != 0) {
  sum = val + (rval << 1);

      } else {
  sum = val;


      }
   }

   sum = sum & ~rmask;

   return sum;
# 2549 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
}


bool set_scaling_bit(bits<16> value)
{

   bits<16> set = ((value&0x2000)>>13)^((value&0x4000)>>14);
   if (SR.S==0) {
      if (set!=0) {
  SR.S = 1;
  return true;
      }
      else return false;
   }
   return false;
}
# 2688 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
 bits<32> EAtable(bits<3> ea, bits<5> n, bits<3> shift, bits<5> R_ptr=8, bits<1> config=0)
{
        if (ea==0) { PreCalc = PreCalc::True; }
 bits <32> Rn_initial = R(n);

 bits <32> R_tmp,Rn_new;
 bits <4> AM = MCTL.AM_R(n(2,0).uint32());
 bits <32> force_lsb = 0xFFFFFFFF;
 force_lsb <<= (shift);







 bits <32> offset = increase_size(ea,shift,R_ptr,config);

 sbits<32> soffset = (sbits<32>)offset;
 bits<4> mode = AM;
 bits<32> low = zeroExtend(n,32);
 if (low.signedGT(7)) { mode = 0; }
 bool off_sign = ( preshift(ea)(31)!=0 ) ? true : false;
 bits <1> decr = (ea.uint32()==1) ? 1 : 0;


 switch (mode.uint32()) {
    case 0x0:

       R_tmp = (soffset) + R(n);
       break;
    case 0x1:
       {

   bits <32> Rn_reversed = bitreverse( R(n) );
   if (decr==1) soffset = soffset-1;
   bits <32> rev_soffset = bitreverse(soffset);
   R_tmp = (sbits<32>)Rn_reversed + (sbits<32>)rev_soffset + (bits<32>)decr;
   R_tmp = ( bitreverse(R_tmp) );
   R_tmp &= force_lsb;
       break;
       }
    case 0xc:
    case 0xd:
    case 0xe:
    case 0xf:
       {

   R_tmp = soffset + R(n);
   bits <32> mrev = ~M(AM(1,0));
   R_tmp &= M(AM(1,0));
   R_tmp |= (R(n) & mrev);
   break;
       }
    case 0x8:
    case 0x9:
    case 0xa:
    case 0xb:
       {







   bits<32> modulus = M(AM(1,0));
   bits<32> up_bound = B(n(2,0))+modulus;
   bits<32> adr1 = (sbits<32>)soffset + R(n);
   bits<32> adr2 = adr1;
   bits<32> cond;

   if (!off_sign){
      cond = adr1-up_bound;
      adr2 -= modulus;
      R_tmp = ( (cond(31)!=0) ? adr1:adr2);
   } else {
      cond = adr1-B(n(2,0));
      adr2 += modulus;
      R_tmp = ( (cond(31)!=0) ? adr2:adr1);
   }
   break;
       }
    default:
       R_tmp = (soffset) + R(n);
 }



 if (ea.uint32()!=0)
 {
    if (ea.uint32()!=2) {
       R(n) = R_tmp;
    }
    Rn_new = Rn_initial;
 }
 else
 {
    Rn_new = R_tmp;
 }


 return (Rn_new);
}
# 2829 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<3> ea_2EA( bits<3> ea_value)
{
 bits<3> EA_value = 0;
 switch ( ea_value.uint32() )
 {
  case 0: EA_value = 3;
   break;
  case 1: EA_value = 1;
   break;
  case 2: EA_value = 0;
   break;
  case 3: EA_value = 2;
   break;
         case 4: EA_value = 4;
   break;
  default: break;
 }
 return EA_value;
}
# 2870 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<32> Address_by_MCTL( bits<5> n, bits<32> value, bits<1> table, bits<1> decr, bits<32> access_width,bits<32> _preshift)
{

   bits<32> rval = R(n);
   bits<32> offset = value;
   bits <4> AM = MCTL.AM_R(n(2,0));
   bits<32> address = 0;
   sbits<32> soffset = (sbits<32>)offset;
   bits<4> mode = AM;
   if ((zeroExtend(n,32)).signedGT(7)) { mode=0; }
   bool off_sign = ( _preshift(31)!=0 ) ? true : false;


   if( (decr==1) && (mode.uint32() != 1) ) {

    off_sign = !off_sign;
    soffset = (sbits<32>)0x0-(sbits<32>)offset;
    offset = 0-offset;
  }

  switch (mode.uint32()) {
    case 0x0:

      address = rval + (soffset);
      break;
    case 0x1:
      {

 bits<32> rval_rev = 0, offset_rev = 0, addr_rev;
        rval_rev = bitreverse(rval);


 if (decr==1) offset = ~(offset);
 offset_rev = bitreverse(offset);
 addr_rev = rval_rev + offset_rev + decr;
 address = bitreverse(addr_rev);
 address &= (0-access_width);
      break;
      }
    case 0xc:
    case 0xd:
    case 0xe:
    case 0xf:
      {

 sbits<32> mrev;
 address = (soffset )+rval;
 mrev = ~( M(AM(1,0)) );
 address &= M(AM(1,0));
        address |= (rval & mrev);
 break;
      }
    case 0x8:
    case 0x9:
    case 0xa:
    case 0xb:
      {

 bits<32> modulus = M(AM(1,0));

 bits<32> up_bound = B(n(2,0))+modulus;
 bits<32> adr1 = (sbits<32>)soffset + rval;
 bits<32> adr2 = adr1;
 bits<32> cond;
 if (!off_sign){
    cond = adr1-up_bound;
    adr2 -= modulus;
    address = ( (cond(31)!=0) ? adr1:adr2);
 } else {
    cond = adr1-B(n(2,0));
    adr2 += modulus;
    address = ( (cond(31)!=0) ? adr2:adr1);
 }
 break;
      }
    default:
      address = rval + (soffset);
  }
  return address;
}
# 2968 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<32> Address_by_mctl2( bits<3> n, bits<32> value, bits<1> decr, bits<32> access_width,bits<32> _preshift)
{
   bits<32> rval = R(n);
   bits<32> offset = value;
   bits <4> AM = MCTL.AM_R(n(2,0));
   bits<32> address = 0;
   sbits<32> soffset = (sbits<32>)offset;
   bits<4> mode = AM;

   bool off_sign = ( _preshift(31)!=0 ) ? true : false;


   if( (decr==1) && (mode.uint32() != 1) ) {

    off_sign = !off_sign;
    soffset = (sbits<32>)0x0-(sbits<32>)offset;
    offset = 0-offset;
  }

  switch (mode.uint32()) {
    case 0x0:

      address = rval + (soffset);
      break;
    case 0x1:
      {

 bits<32> rval_rev = 0, offset_rev = 0, addr_rev;
        rval_rev = bitreverse(rval);


 if (decr==1) offset = ~(offset);
 offset_rev = bitreverse(offset);
 addr_rev = rval_rev + offset_rev + decr;
 address = bitreverse(addr_rev);
 address &= (0-access_width);
      break;
      }
    case 0xc:
    case 0xd:
    case 0xe:
    case 0xf:
      {

 sbits<32> mrev;
 address = (soffset )+rval;
 mrev = ~( M(AM(1,0)) );
 address &= M(AM(1,0));
        address |= (rval & mrev);
 break;
      }
    case 0x8:
    case 0x9:
    case 0xa:
    case 0xb:
      {

 bits<32> modulus = M(AM(1,0));

 bits<32> up_bound = B(n(2,0))+modulus;
 bits<32> adr1 = (sbits<32>)soffset + rval;
 bits<32> adr2 = adr1;
 bits<32> cond;
 if (!off_sign){
    cond = adr1-up_bound;
    adr2 -= modulus;
    address = ( (cond(31)!=0) ? adr1:adr2);
 } else {
    cond = adr1-B(n(2,0));
    adr2 += modulus;
    address = ( (cond(31)!=0) ? adr2:adr1);
 }
 break;
      }
    default:
      address = rval + (soffset);
  }
  return address;
}
# 3067 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<32> increase_size(bits<3> ea_increase, bits<3> shift, bits<5> R_ptr, bits<1> config)

{
 bits <32> increase;
 switch (ea_increase.uint32())
 {
         case 0: increase = (R_ptr!=8)?R(R_ptr):N(0);break;
  case 1: increase = 0xFFFFFFFF;break;
  case 2: increase = 0x00000000;break;
  case 3: increase = 0x00000001;break;
  case 4: increase = (R_ptr!=8)?R(R_ptr):N(0);break;
  case 5: increase = N(1);break;
  case 6: increase = N(2);break;
  case 7: increase = N(3); break;
 }
 return (increase<<shift.uint32());
}
# 3121 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<32> preshift(bits<3> ea_increase)
{
 bits <32> increase;
 switch (ea_increase.uint32())
 {
  case 0: increase = N(0);break;
  case 1: increase = 0xFFFFFFFF;break;
  case 2: increase = 0x00000000;break;
  case 3: increase = 0x00000001;break;
  case 4: increase = N(0);break;
  case 5: increase = N(1);break;
  case 6: increase = N(2);break;
  case 7: increase = N(3); break;
 }
 return (increase);
}
# 3149 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<32> bitreverse(bits<32> src)
{
   bits<32> ret(0);
   bits<32> tmp = src.swap_bytes();
   ret =((tmp&0x80808080) >> 7)|
        ((tmp&0x40404040) >> 5)|
        ((tmp&0x20202020) >> 3)|
        ((tmp&0x10101010) >> 1)|
        ((tmp&0x08080808) << 1)|
        ((tmp&0x04040404) << 3)|
        ((tmp&0x02020202) << 5)|
        ((tmp&0x01010101) << 7);
   return ret;
}
# 3193 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<6> NumberOfOnes(bits<40> reg)
{
 bits <6> num_of_ones=0;
 bits <40> mask = 0x8000000000ull;
 while ( (mask & reg) != 0)
 {
  num_of_ones += 1;
  mask >>= 1;
 }
 return (num_of_ones);
}
# 3219 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<5> NumberOfOnes32(bits<32> reg)
{
 bits <5> num_of_ones=0;
 bits <32> mask = 0x80000000;
 while ( (mask & reg) != 0)
 {
  num_of_ones += 1;
  mask >>= 1;
 }
 return (num_of_ones);
}
# 3246 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<6> NumberOfNonConsecutiveOnes32(bits<32> reg)
{
 bits <6> num_of_ones=0;
 bits <32> mask = 0x80000000;
 int i;
 for (i=1;i<33;i++)
 {
    if ( (mask & reg) != 0) num_of_ones = num_of_ones+1;
    mask >>= 1;
 }
 return (num_of_ones);
}
# 3275 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<8> WrExtWord(bits<40> reg1, bits<40> reg2)
{
 bits <40> sum = signExtend( reg1(39,16), 40) + signExtend( reg2(39,16), 40);
 return ( sum(23,16) );
}
# 3295 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bool IsUserMode()
{
 if ( (SR.EXP == 0) && (SR.PE == 1) ) { return true; }
 else { return false; }
}
# 3312 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bool IsNormalMode()
{
 if ( (SR.EXP == 0) && (SR.PE == 0) ) { return true; }
 else { return false; }
}
# 3330 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bool SupervisorLevel()
{
 if ( ((SR.EXP==0)||(SR.EXP==1)) && (SR.PE == 0) ) { return true; }
 else { return false; }
}
# 3351 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> ABSd(bits<40> reg)
{
 return (reg(39)==1) ? ( (~reg) + 1 ) : reg;
}

bits<32> ABS32(bits<32> reg)
{
 return (reg(31)==1) ? ( (~reg) + 1 ) : reg;
}
# 3376 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<16> ABSword(bits<16> val)
{
        bits<16> neg_val = (~val) + 1;
 return (val(15)==1) ? neg_val : val;
}

bits<20> ABS20(bits<20> val)
{
    bits<20> neg_val = (~val) + 1;
 return (val(19)==1) ? neg_val : val;
}
# 3402 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<9> ABSbyte(bits<9> val)
{
        bits<9> neg_val = (~val) + 1;
 return (val(8)==1) ? neg_val : val;
}
# 3425 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<1> DaluSignedGreater(bits<40> Dn, bits<40> Da)
{
 bits<41> subt = signExtend(Dn,41) + signExtend( (~Da+1),41);
 if ( (subt(40 +1) == 0) && (subt!=0) ) { return 1; }
 else { return 0; }
}
# 3448 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<1> AguSignedGreater (bits<32> Rx, bits<32> rx)
{
 bits<33> subt = signExtend(Rx,33) + signExtend( (~rx+1),33);
 if ( (subt(32 +1) == 0) && (subt!=0) ) { return 1; }
 else { return 0; }
}
# 3468 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> slice_signExtend(bits<40> b, bits<6> start) {
   bits<40> mask(0xffffffffffull);
   mask >>= start;
   mask <<= start;
   if (b(start)==1) {
     return b|mask;
   } else {
     return b& (~mask);
   }
}
# 3492 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<16> slice_signExtend16(bits<16> b, bits<4> start) {
   bits<16> mask(0xffff);
   mask >>= start;
   mask <<= start;
   if (b(start)==1) {
     return b|mask;
   } else {
     return b& (~mask);
   }
}
# 3522 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> slice_write_dalu(bits<40> des, bits<40> dsrc, bits<6> end, bits<6> start)
{
 bits<40> mask = 0xffffffffffull;
 mask <<= 40-(end-start);
 mask >>= 40-(end);
 mask = ~mask;
 dsrc <<= 40-(end-start);
 dsrc >>= 40-(end);
 return ( (des & mask) | dsrc);
}
# 3551 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<40> modulo_slice(bits<40> dsrc, bits<6> width, bits<6> offset)
{
   bits<40> mask1 = 0xffffffffffull;
   mask1 &= dsrc;
   mask1 >>= offset;
   bits<40> mask2 = 0xffffffffffull;
   mask2 &= dsrc;
   mask2 <<= (40-offset);
   bits<40> slice = mask1|mask2;
   slice <<= (40-width);
   slice >>= (40-width);

   return slice;
}
# 3581 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void write_mem_2DTable(bits<32> addr, bits<6> des, int width)
{
 switch (width)
 {
  case 1:
    D(des) = signExtend( Mem(addr,1), 40);
    L(des) = 0;
   break;
  case 2:
    D(des) = signExtend( Mem(addr,2), 40);
    L(des) = 0;
   break;
  case 4:
    D(des) = signExtend( Mem(addr,4), 40);
    L(des) = 0;
   break;

  default: break;
 }
}

void write_mem_2RTable(bits<32> addr, bits<5> des, int width)
{
 switch (width)
 {
  case 1:
    R(des) = signExtend( Mem(addr,1), 32);
   break;
  case 2:
    R(des) = signExtend( Mem(addr,2), 32);
   break;
  case 4:
    R(des) = signExtend( Mem(addr,4), 32);
   break;

  default: break;
 }
}




void write_mem_2DTable_zeroextend(bits<32> addr, bits<6> des, int width)


{
 switch (width)
 {
  case 1:
    D(des) = zeroExtend( Mem(addr,1), 40);
    L(des) = 0;
   break;
  case 2:
    D(des) = zeroExtend( Mem(addr,2), 40);
    L(des) = 0;
   break;
  case 4:
    D(des) = zeroExtend( Mem(addr,4), 40);
    L(des) = 0;
   break;

  default: break;
 }
}


void write_mem_2RTable_zeroextend(bits<32> addr, bits<5> des, int width)
{
 switch (width)
 {
  case 1:
    R(des) = zeroExtend( Mem(addr,1), 32);
          break;
  case 2:
    R(des) = zeroExtend( Mem(addr,2), 32);
   break;
  case 4:
    R(des) = zeroExtend( Mem(addr,4), 32);
   break;

  default: break;
 }
}
# 3682 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void write_DTable_2mem(bits<32> addr, bits<6> src, int width)
{

 switch (width)
 {
  case 1: Mem(addr,1) = D(src)(7,0);
   break;
  case 2: Mem(addr,2) = D(src)(15,0);
   break;
  case 4: Mem(addr,4) = D(src)(31,0);
   break;


  default: break;
 }
}

void write_RTable_2mem(bits<32> addr, bits<5> src, int width)
{
 switch (width)
 {
  case 1: Mem(addr,1) = R(src)(7,0);
   break;
  case 2: Mem(addr,2) = R(src)(15,0);
   break;
  case 4: Mem(addr,4) = R(src)(31,0);
   break;


  default: break;
 }
}
# 3730 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void write_mem_2C3Table(bits<32> addr, bits<6> des, int width)
{
 switch (width)
 {
  case 1:
    C3Table(des) = signExtend( Mem(addr,1), 32);

   break;
  case 2:
    C3Table(des) = signExtend( Mem(addr,2), 32);

   break;
  case 4:
    C3Table(des) = signExtend( Mem(addr,4), 32);

   break;

  default: break;
 }
}
# 3765 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void write_mem_2C3Table_zeroextend(bits<32> addr, bits<6> des, int width)


{
 switch (width)
 {
    C3Table(des) = zeroExtend( Mem(addr,1), 32);

   break;
  case 2:
    C3Table(des) = zeroExtend( Mem(addr,2), 32);

   break;
  case 4:
    C3Table(des) = zeroExtend( Mem(addr,4), 32);

   break;

  default: break;
 }
}
# 3802 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void write_C3Table_2mem(bits<32> addr, bits<6> src, int width)
{
 switch (width)
 {
  case 1: Mem(addr,1) = C3Table(src)(7,0);
   break;
  case 2: Mem(addr,2) = C3Table(src)(15,0);
   break;
  case 4: Mem(addr,4) = C3Table(src)(31,0);
   break;
  default: break;
 }
}
# 3830 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
uint32_t FindActiveLoop()
{

   return ( SR.LF(3) != 0 ) ? 3 : ( SR.LF(2) != 0 ) ? 2 : ( SR.LF(1) != 0 ) ? 1 : ( SR.LF(0) != 0 ) ? 0 : 4;
}

bool IsMoreThanOneActiveLoop()
{
   bits<4> sr_lf=SR.LF;
   info(4,"IsMoreThanOneActiveLoop, sr_lf= "<< hex<<sr_lf);
   int i,num_of_active_loop=0;
   bits <4> mask = 0x8;
   for (i=1;i<=4;i++)
   {
      if ((mask&sr_lf)!=0) { num_of_active_loop += 1; }

      mask >>= 1;
   }
   info(4,"num_of_active_loop= " << num_of_active_loop );
   if (num_of_active_loop>1) return true;
   else return false;
}
# 3868 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
uint32_t FindNextActiveLoop()
{

 if ( SR.LF(3)==1 ) {
    if (SR.LF(2)==1) {
       return 2; }
    else {
       if (SR.LF(1)==1) {
   return 1;
       }
       else { return 0; }
    }
 }
 else {
    if ( SR.LF(2) == 1 ) {
       if (SR.LF(1)==1) { return 1; }
       else { return 0; }
    }
    else { return 0; }
 }
}
# 3905 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void set_SR_LF( bits<2> flag)
{
 switch ( flag.uint32() ) {
   case 0: SR.LF0 = 1;
      break;
   case 1: SR.LF1 = 1;
      break;
   case 2: SR.LF2 = 1;
      break;
   case 3: SR.LF3 = 1;
      break;
          default: break;
 }
}
# 3935 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void clear_SR_LF( uint32_t flag)
{
 switch ( flag ) {
   case 0: SR.LF0 = 0;
      break;
   case 1: SR.LF1 = 0;
      break;
   case 2: SR.LF2 = 0;
      break;
   case 3: SR.LF3 = 0;
      break;
          default: break;
 }
 SR.SLF = 0;
}
# 3964 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void check_exception_DxTable(bits<6> entry)
{
      if ( IsUserMode() )
      {
     if (entry(4,0)==2)
     {
  EMR_LOW = true;
  EMR.ILPR=1;

     }
      }

}
bool check_legal_C2Table(bits<4> entry)
{
      bool val = 1;
   if ( IsUserMode() )
      {
     if (entry(3,0)==2)
     {
  EMR_LOW = true;
  EMR.ILPR=1;

  val = 0;
     }
      }

     return(val);
}

bool check_legal_C6Table(bits<4> entry)
{
      bool val = 1;
      if ( IsUserMode() )
      {
     if (entry(3,0)==0)
     {
  EMR_LOW = true;
  EMR.ILPR=1;

  val = 0;
     }
      }

     return(val);
}



bool check_legal_C5Table(bits<4> entry)
{
      bool val = 1;
   if ( IsUserMode() )
      {
     if (entry(3,0)==1)
     {
  EMR_LOW = true;
  EMR.ILPR=1;

  val = 0;
     }
      }

     return(val);
}

bool check_legal_C52Table(bits<4> entry)
{
      bool val = 1;
      if ( IsUserMode() )
      {
     if (entry(3,0)==0)
     {
  EMR_LOW = true;
  EMR.ILPR=1;

  val = 0;
     }
      }

     return(val);
}
# 4059 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void mem_write_xsr()
{
   bits<32> ARITH_DIFF = 0;
   if (SR.EXP == 1) {
      ARITH_DIFF = ESP_ARITH_DIFF;
   } else {
      ARITH_DIFF = NSP_ARITH_DIFF;
   }

   if (SP_128bit_instr_occured) {
      SP_64bit_instr_occured = false;
      SP_32bit_instr_occured = false;
      ARITH_DIFF = 0;
      set_cof_sp(8);
   }

   if (SP_64bit_instr_occured || SP_32bit_instr_occured) {


      bits<64> mem_update = concat(NPC,SR);
      Mem(SP+8,8) = mem_update;
      SP_update = sp_update_p16;
   }
   else {


      bits<64> mem_update = concat(NPC,SR);
      Mem(SP+ ARITH_DIFF,8) = mem_update;
      SP_update = sp_update_p8;
   }
   SP_32bit_instr_occured = true;
}


void mem_write_pushn_even(bits<32> val)
{
   if (SP_64bit_instr_occured) {
      Mem(NSP+8,4) = val;
      SP_update = nsp_update_p16;
      if (jsrd_occured) {
  SP_128bit_instr_occured = true;
      }
   }
   else {
      Mem(NSP,4) = val;
      SP_update = nsp_update_p8;
   }
   SP_32bit_instr_occured = true;
}

void mem_write_pushn_odd(bits<32> val)
{
   if (SP_64bit_instr_occured) {
      Mem(NSP+12,4) = val;
      SP_update = nsp_update_p16;
      if (jsrd_occured) {
  SP_128bit_instr_occured = true;
      }
   }
   else {
      Mem(NSP+4,4) = val;
      SP_update = nsp_update_p8;
   }
   SP_32bit_instr_occured = true;
}

void mem_write_push_even(bits<32> val)
{
   if (SP_64bit_instr_occured) {
      Mem(SP+8,4) = val;
      SP_update = sp_update_p16;
      if (jsrd_occured) {
  SP_128bit_instr_occured = true;
      }
   }
   else {
      Mem(SP,4) = val;
      SP_update = sp_update_p8;
   }
   SP_32bit_instr_occured = true;
}

void mem_write_push_odd(bits<32> val)
{
   if (SP_64bit_instr_occured) {
      Mem(SP+12,4) = val;
      SP_update = sp_update_p16;
      if (jsrd_occured) {
  SP_128bit_instr_occured = true;
      }
   }
   else {
      Mem(SP+4,4) = val;
      SP_update = sp_update_p8;
   }
   SP_32bit_instr_occured = true;
}



bits <32> mem_write_pop(bits <4> odd)
{
   bits <32> val;
   if (SP_64bit_instr_occured) {
      val = Mem(SP-16+(odd<<2),4);
      SP_update = sp_update_m16;
   }
   else {
      val = Mem(SP-8+(odd<<2),4);
      SP_update = sp_update_m8;
   }
   SP_32bit_instr_occured = true;
   return(val);
}

bits <32> mem_write_popn(bits <4> odd)
{
   bits <32> val;

   if (SP_64bit_instr_occured) {
      val = Mem(NSP-16+(odd<<2),4);
      SP_update = nsp_update_m16;
   }
   else {
      val = Mem(NSP-8+(odd<<2),4);
      SP_update = nsp_update_m8;
   }
   SP_32bit_instr_occured = true;
   return(val);
}


bits <64> mem_pop_rte()
{
   bits <64> val;
   if (SP_32bit_instr_occured ||SP_64bit_instr_occured) {
      val = Mem(SP-16,8);
      SP_update = sp_update_m16;
   }
   else {
      val = Mem(SP-8,8);
      SP_update = sp_update_m8;
   }
   return(val);
}

bits <64> mem_read_stack_64bits()
{
   bits <64> val;
   if (SP_32bit_instr_occured ||SP_64bit_instr_occured) {
      val = Mem(SP-16,8);
      SP_update = sp_update_m16;
   }
   else {
      val = Mem(SP-8,8);
      SP_update = sp_update_m8;
   }
   return(val);
}

bits <32> mem_pop_rts()
{
   bits <32> val;
   if (SP_32bit_instr_occured ||SP_64bit_instr_occured) {
      val = Mem(SP-16,4);
      SP_update = sp_update_m16;
   }
   else {
      val = Mem(SP-8,4);
      SP_update = sp_update_m8;
   }
   return(val);
}
# 4251 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits <64> mem_write_popn2l()
{
   bits <64> val;
   if (SP_64bit_instr_occured || SP_32bit_instr_occured ) {
      val = Mem(NSP-16,8);
      SP_update = nsp_update_m16;
   }
   else {
      val = Mem(NSP-8,8);
      SP_update = nsp_update_m8;
   }
   SP_64bit_instr_occured = true;
   return(val);
}


bits <64> mem_write_pop2l()
{
   bits <64> val;
   if (SP_64bit_instr_occured || SP_32bit_instr_occured ) {
      val = Mem(SP-16,8);
      SP_update = sp_update_m16;
   }
   else {
      val = Mem(SP-8,8);
      SP_update = sp_update_m8;
   }
   SP_64bit_instr_occured = true;
   return(val);
}
# 4300 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void mem_write_pushn2l(bits<64> val)
{
   if (SP_64bit_instr_occured || SP_32bit_instr_occured ) {
      Mem(NSP+8,8) = val;
      SP_update = nsp_update_p16;
      if (jsrd_occured) {
  SP_128bit_instr_occured = true;
      }
   }
   else {
      Mem(NSP,8) = val;
      SP_update = nsp_update_p8;
   }
   SP_64bit_instr_occured = true;
}

void mem_write_push2l(bits<64> val)
{
   if (SP_64bit_instr_occured || SP_32bit_instr_occured ) {
      Mem(SP+8,8) = val;
      SP_update = sp_update_p16;
      if (jsrd_occured) {
  SP_128bit_instr_occured = true;
      }
   }
   else {
      Mem(SP,8) = val;
      SP_update = sp_update_p8;
   }
   SP_64bit_instr_occured = true;
}
# 4347 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<8> extension_update_low(bits<17> val)
{
   if ( val(16)==1 ) return (0xf0);
   else return (0xff);

}
# 4362 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<8> extension_update_sub(bits<8> src1ext, sbits<20> src2l,sbits<20> src1l, sbits<20> src2h,sbits<20> src1h,sbits<20> result1, sbits<20> result2, bool IfLowPart, bool is_saturated)
{
   bits<20> MAXD = 0x0ffff;
   bits<8> temp_ext;
   info(4,"src2l= "<<hex<<src2l," src1l= "<<hex<<src1l);
   info(4," src2h= "<<hex<<src2h," src1h= "<<hex<<src1h);
   info(4," result1= "<<hex<<result1," result2= "<<hex<<result2);
   if(src1ext == 0xff)
   {
      if(IfLowPart)
      {
  sbits<32> temp = 0;
  if( (src2l & MAXD) !=0 ) { temp = ((result1>>16)&0x0f) | ((result2>>16)&0x0f); }
  else { temp = (((src1l & MAXD) + (MAXD + 0xf0000)) & 0xf0000) >> 16; }
  if (((src2l&MAXD) <= (src1l & MAXD)) ^ is_saturated)
  { temp = 0; }
  temp_ext = src1ext & 0xf0;
  temp_ext = (temp_ext | temp(7,0));
  return temp_ext;
      }
      else
      {
  bits<32> temp = 0;
  if((src2h & MAXD)!= 0) {temp = (((result1>>16)&0x0f) | ((result2>>16)&0x0f)) << 4; }
  else {temp = (((src1h & MAXD) + (MAXD + 0xf0000)) & 0xf0000) >> 12; }
  if(((src2h & MAXD) <= (src1h & MAXD)) ^ is_saturated)
  { temp = 0; }
  temp_ext = src1ext & 0xf;
  temp_ext = (temp_ext | temp(7,0));
  return temp_ext;
      }
   }
   else
   {
      temp_ext = ((result1>>16)&0x0f)|((result2>>(12))&0x0f0);
      info(4,"temp_ext= "<< hex<<temp_ext);



      if(IfLowPart)
      {
  if(((src2l & MAXD) > (src1l & MAXD)) ^ is_saturated){

     temp_ext = temp_ext|0x0f;
     return (temp_ext);

  }
  else {
     temp_ext = temp_ext&0xf0;
     return (temp_ext);

  }
      }
      else
      {
  if(((src2h & MAXD) > (src1h & MAXD)) ^ is_saturated) {
     temp_ext = temp_ext|0xf0;
      return (temp_ext);

  }
  else {
     temp_ext = temp_ext&0x0f;
     return (temp_ext);
  }

      }
   }
}
# 4446 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<8> extension_update_high(bits<17> val)
{
   if ( val(16)==1 ) return (0xff);
   else return (0x0f);

}

bits<8> extension_update_high_sub(bits<17> val)
{
   if ( val(16)==0 ) return (0x0f);
   else return (0xff);

}

bits<8> extension_update_neg2(bits<17> valh, bits<17> vall)
{
   if ( (valh(16)==0) && (vall(16)==0)) return (0xff);
   else if ( valh(16)==0 ) return (0xff);
   else if ( vall(16)==0 ) return (0xff);
   else return (0xff);

}
# 4478 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<8> extension_update_add(bits<17> valh, bits<17> vall)
{
   if ( valh(16)==1 && vall(16)==1) return (0x00);
   else if ( valh(16)==1 ) return (0x0f);
   else if ( vall(16)==1 ) return (0xf0);
   else return (0xff);

}

bits<8> extension_update_mixed(bits<17> valh, bits<17> vall)
{
   if ( valh(16)==1 && vall(16)==0) return (0x00);
   else if ( valh(16)==1 && vall(16)==1 ) return (0x0f);
   else if ( valh(16)==0 && vall(16)==0 ) return (0xf0);
   else return (0xff);

}

bits<8> extension_update_mixed_xx(bits<17> valh, bits<17> vall)
{
   if ( valh(16)==1 && vall(16)==0) return (0x00);

   else if ( valh(16)==0 && vall(16)==0 ) return (0x0f);
   else if ( valh(16)==1 && vall(16)==1 ) return (0x0f);
   else return (0xff);

}
# 4521 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<5> vtrace_index(bits<32> dval, bits<32> m,bits<32> n)
{
   bits<32> shift = 31-(m+n);
   dval >>= shift;
   return ( dval(4,0) );
}
# 4539 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void trap_f()
{
   SR.EXP = 1;
   SR.PE = 0;
   SR.C = 0;
   SR.T = 0;
   SR.S = 0;
   SR.SLF = 0;
   SR.LF = 0;
   SR.I = 0x1f;
}

define (parm = cond_exec) {
  options = (c0,c1,c2,c3,c4,c5,c6,c7);
  value = c0;
}

define (parm = update_carry) {
  options = (no_update_carry,w1,w2,w3,w4,w5,w6,w7,w8);
  value = no_update_carry;
}

define (parm = bit12) {
  options = (false,true);
  value = true;
}



void reset_cond_exec() {
  cond_exec = c0;
  nl_state = false;
};


void update_arith_sp(int32_t x) {


  if (SR.EXP == 1) {
     SP_dummy = SP_dummy;
    if (x>0) {
      ESP_ARITH_DIFF = ESP_ARITH_DIFF + x;
    } else {
      ESP_ARITH_DIFF = ESP_ARITH_DIFF - (-x);
    }
  } else {
    update_arith_nsp(x);
  }
}

void update_arith_sp2(bits<32> x) {




   if (SR.EXP == 1) {

      ESP_ARITH_DIFF = ESP_ARITH_DIFF + x;
   } else {

      NSP_ARITH_DIFF = NSP_ARITH_DIFF + x;
   }


}

void update_arith_esp(int32_t x) {
   SP_dummy = SP_dummy;
  if (x>0) {
    ESP_ARITH_DIFF = ESP_ARITH_DIFF + x;
  } else {
    ESP_ARITH_DIFF = ESP_ARITH_DIFF - (-x);
  }
}

void update_arith_nsp(int32_t x) {
   SP_dummy = SP_dummy;
  if (x>0) {
    NSP_ARITH_DIFF = NSP_ARITH_DIFF + x;
  } else {
    NSP_ARITH_DIFF = NSP_ARITH_DIFF - (-x);
  }
}

void set_cof_sp(int32_t x) {

 if (SR.EXP == 1) {
    ESP_COF_DIFF = x;
  } else {
    NSP_COF_DIFF = x;
  }
}

void set_cof_delayed_sp(int32_t x) {

  if (SR.EXP == 1) {
    ESP_DIFF_DELAYED = x;
  } else {
    NSP_DIFF_DELAYED = x;
  }
}


void init_lpmarks() {





   bit12 = true;
}
# 4728 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void set_ignore_lpmarks() {

    if (ignore_lpmarkA == a_double_delay_slot) {
 ignore_lpmarkA = a_delay_slot;
 LpmarkaFlag = LpmarkaFlag::False;

    }
    else if (ignore_lpmarkA == a_delay_slot) {
       ignore_lpmarkA = a_not_ignore;
 LpmarkaFlag = LpmarkaFlag::False;

    }
    if (ignore_lpmarkB == b_double_delay_slot) {
 ignore_lpmarkB = b_delay_slot;
 LpmarkbFlag = LpmarkbFlag::False;

    }
    else {
      if (ignore_lpmarkB == b_delay_slot) {
       ignore_lpmarkB = b_not_ignore;
 LpmarkbFlag = LpmarkbFlag::False;

      }
    }

}


int lpmarks_mode() {




        SRUpdated = false;
 uint32_t active_loop = FindActiveLoop();
 bool sr_slf = (SR.SLF==1)? true : false;

 if ( (LpmarkaFlag == LpmarkaFlag::True) && ( LpmarkbFlag== LpmarkbFlag::True) ) {
    if ( LC(active_loop).signedGT(1) ) {
       LpmarkbFlag = LpmarkbFlag::False;

    }
    else {
       LC(active_loop) = 0;
       clear_SR_LF(active_loop);
       SRUpdated = true;
       SR.SLF = 0;
       sr_slf = false;
       LpmarkaFlag = LpmarkaFlag::False;

    }
 }
 active_loop = (SRUpdated) ? FindNextActiveLoop() :FindActiveLoop();

 if ( (LpmarkaFlag == LpmarkaFlag::False) && (LpmarkbFlag == LpmarkbFlag::True) ) {
   if ( (SR(27 +active_loop,27 +active_loop))==1 && (!sr_slf) ) {
      if ( LC(active_loop).signedGT(1) ) {
       return 1;
      }
      else {
       return 2;
      }
   }
   else {
     if ( (SR(27 +active_loop,27 +active_loop)==1) && (sr_slf) ) {
       if ( LC(active_loop).signedGT(1) ) {

     info (1,"lpmark 5");
     return 5;
       } else {
     info (1,"lpmark 6");
     return 6;
       }
     }
     else {
        error(1," Not supposed to get here - LPMARKS");
        return 0;
     }
   }
 }
 else {
   if ( (LpmarkaFlag == LpmarkaFlag::True) && (LpmarkbFlag == LpmarkbFlag::False) ) {
     if ( (SR(27 +active_loop,27 +active_loop)==1) && (!sr_slf) ) {
        if ( LC(active_loop).signedGT(1) ) {
    return 3;
        }
        else {
    return 4;
        }
     }
     else {
        if ( (SR(27 +active_loop,27 +active_loop)==1) && (sr_slf) ) {
    if ( LC(active_loop).signedGT(1) ) {
       return 7;
    }
    else {
       return 8;
    }
        }
        else {
    error(1," Not supposed to get here - LPMARKS");
    return 0;
        }
     }
   }
   else {
      error(1," Not supposed to get here - LPMARKS");
      return 0;
   }
 }
}


void update_lpab_active(uint32_t active_loop)
{
   switch(active_loop)
   {
      case 0: lpab_active = loop0; break;
      case 1: lpab_active = loop1; break;
      case 2: lpab_active = loop2; break;
      case 3: lpab_active = loop3; break;
      default: break;
   }
}

uint32_t last_lpb_active()
{
   uint32_t lp_active;
   if (lpab_active == loop0) lp_active=0;
   else if (lpab_active == loop1) lp_active=1;
   else if (lpab_active == loop2) lp_active=2;
   else if (lpab_active == loop3) lp_active=3;
   else (lp_active= FindActiveLoop());
   lpab_active = none;
   return lp_active;
}


void set_lpst_idx(uint32_t index, bool seqential) {
   if (seqential) {
      switch (index) {
  case 0: LpstSqIdx = LpstSqIdx::L0; break;
  case 1: LpstSqIdx = LpstSqIdx::L1; break;
  case 2: LpstSqIdx = LpstSqIdx::L2; break;
  case 3: LpstSqIdx = LpstSqIdx::L3; break;
      }
   } else {
      switch (index) {
  case 0: LpstIdx = LpstIdx::L0; break;
  case 1: LpstIdx = LpstIdx::L1; break;
  case 2: LpstIdx = LpstIdx::L2; break;
  case 3: LpstIdx = LpstIdx::L3; break;
      }
   }
}

void set_lpend_idx(uint32_t index, bool seqential) {
   if (seqential) {
      switch (index) {
  case 0: LpendSqIdx = LpendSqIdx::L0; break;
  case 1: LpendSqIdx = LpendSqIdx::L1; break;
  case 2: LpendSqIdx = LpendSqIdx::L2; break;
  case 3: LpendSqIdx = LpendSqIdx::L3; break;
      }
   } else {
      switch (index) {
  case 0: LpendIdx = LpendIdx::L0; break;
  case 1: LpendIdx = LpendIdx::L1; break;
  case 2: LpendIdx = LpendIdx::L2; break;
  case 3: LpendIdx = LpendIdx::L3; break;
      }
   }
}


void set_lpmarks_flag(uint32_t index) {
   switch (index) {
      case 0: LpmarksFlag = LpmarksFlag::L0; break;
      case 1: LpmarksFlag = LpmarksFlag::L1; break;
      case 2: LpmarksFlag = LpmarksFlag::L2; break;
      case 3: LpmarksFlag = LpmarksFlag::L3; break;
   }
}

void set_lpmarka_idx(uint32_t index) {
   switch (index) {
      case 0: LpmarkaIdx = LpmarkaIdx::L0; break;
      case 1: LpmarkaIdx = LpmarkaIdx::L1; break;
      case 2: LpmarkaIdx = LpmarkaIdx::L2; break;
      case 3: LpmarkaIdx = LpmarkaIdx::L3; break;
   }
}

void set_lpmarkm_idx(uint32_t index) {
   switch (index) {
      case 0: LpmarkmIdx = LpmarkmIdx::L0; break;
      case 1: LpmarkmIdx = LpmarkmIdx::L1; break;
      case 2: LpmarkmIdx = LpmarkmIdx::L2; break;
      case 3: LpmarkmIdx = LpmarkmIdx::L3; break;
   }
}

void set_lpmarkb_idx(uint32_t index) {
   switch (index) {
      case 0: LpmarkbIdx = LpmarkbIdx::L0; break;
      case 1: LpmarkbIdx = LpmarkbIdx::L1; break;
      case 2: LpmarkbIdx = LpmarkbIdx::L2; break;
      case 3: LpmarkbIdx = LpmarkbIdx::L3; break;
   }
}

void set_lpmarki_idx(uint32_t index) {
   switch (index) {
      case 0: LpmarkiIdx = LpmarkiIdx::L0; break;
      case 1: LpmarkiIdx = LpmarkiIdx::L1; break;
      case 2: LpmarkiIdx = LpmarkiIdx::L2; break;
      case 3: LpmarkiIdx = LpmarkiIdx::L3; break;
   }
}


bool lpmarka_active(bool lpab_set) {

   uint32_t active_loop = FindActiveLoop();



   if ((SR.SLF == 1) && (active_loop!=4)) {
      LPMARK_SM_INDEX(active_loop,active_loop) = 1;
   } else if (active_loop!=4) {
      LPMARK_REFETCH_INDEX(active_loop,active_loop) = 1;
   }

   if (LC(active_loop).signedGT(1) ) {

      LC(active_loop) = LC(active_loop)-1;
      NVPC = (SR.SLF == 1) ? PC_ST_VLES : SA(active_loop);
      LpmarkaCof = LpmarkaCof::Taken;
      set_lpmarka_idx(active_loop);
      CofValid = CofValid::True;
      Cof_instr = Cof_instr::Taken;


      return (1);






   } else {
      clear_SR_LF(active_loop);
      LC(active_loop) = 0;
      SR.SLF = 0;
      LpmarkaCof = LpmarkaCof::NotTaken;
      set_lpmarka_idx(active_loop);

      return (0);
   }
}

void lpmark_cof_handler(uint32_t index) {
   if (LpmarkbFlag == LpmarkbFlag::True) {
      LpmarkbCof = LpmarkbCof::Taken;
      set_lpmarkb_idx(index);
   } else if (LpmarkmFlag == LpmarkmFlag::True) {
      LpmarkmCof = LpmarkmCof::Taken;
      set_lpmarkm_idx(index);
   } else {
      LpmarkiCof = LpmarkiCof::Taken;
      set_lpmarki_idx(index);
   }
}

void lpmark_index_handler(uint32_t index) {
   if (LpmarkbFlag == LpmarkbFlag::True) {
      LpmarkbCof = LpmarkbCof::NotTaken;
      set_lpmarkb_idx(index);
   } else if (LpmarkmFlag == LpmarkmFlag::True) {
      set_lpmarkm_idx(index);
      LpmarkmCof = LpmarkmCof::NotTaken;
   } else {
      set_lpmarki_idx(index);
      LpmarkiCof = LpmarkiCof::NotTaken;
   }
}

void lpmarkb_active(bool sr_slf, uint32_t active_loop) {
   if (sr_slf) {
      if (LC(active_loop).signedGT(1) ) {
  LC(active_loop) = LC(active_loop)-1;
  Fetch = Fetch::Jump;

  DSPC = PC_ST_VLES;
  lpmark_cof_handler(active_loop);
  CofTaken = CofTaken::True;
      } else {
  clear_SR_LF(active_loop);
  LC(active_loop) = 0;

  SR.SLF = 0;
  lpmark_index_handler(active_loop);
      }
   } else {
      if (LC(active_loop).signedGT(1) ) {
  LC(active_loop) = LC(active_loop)-1;
  Fetch = Fetch::DelaySlot;
  DSPC = SA(active_loop);
  lpmark_cof_handler(active_loop);
  CofTaken = CofTaken::True;
      } else {
  LC(active_loop) = 0;

  update_lpab_active(active_loop);
  clear_SR_LF(active_loop);
  lpmark_index_handler(active_loop);
  ignore_lpmarkA = a_double_delay_slot;
      }
   }


   if (((sr_slf) || (LpmarkmFlag == LpmarkmFlag::True)) && (active_loop!=4) ) {
      LPMARK_SM_INDEX(active_loop,active_loop) = 1;
   } else if ((active_loop!=4) && (LpmarkmFlag == LpmarkmFlag::False) && (!sr_slf)) {
      LPMARK_REFETCH_INDEX(active_loop,active_loop) = 1;
   }
}

void push_entry2ras() {
   uint32_t ras_s = RAS_SIZE.uint32();
   if (RASV.signedGE(ras_s-1)) { RASV = RAS_SIZE; }
   else { RASV = RASV+1; }
   for (uint32_t i=(ras_s-1);i>0;i--) {
      RAS(i)=RAS(i-1);
   }
   RAS(0) = NPC;
}

void pop_entry_fromras(bool is_delayed) {
   uint32_t ras_s = RAS_SIZE.uint32();
   if (is_delayed) {
      DSPC = RAS(0);
   } else {
      NVPC = RAS(0);
   }
   for (uint32_t i=0;i<(ras_s-1);i++) {
      RAS(i)=RAS(i+1);
   }
   RASV = RASV-1;
}


post_packet = func() {
# 5110 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
   if (SubInstr == SubInstr::regular_2nd_cycle) {
      info(4," Post packet, SubInstr= regular_2nd_cycle ");
      mem_write_xsr();


      push_entry2ras();




      CofExec = CofExec::True;
      SubInstrHelper = SubInstrHelper::False;
      Cof_instr = Cof_instr::Taken;
      jsrd_occured = false;
      SP_128bit_instr_occured = false;

   }





   if (TrapInstr == TrapInstr::True) {

      CofExec = CofExec::True;
      Mem(ESP,4) = NPC;
      Mem(ESP+4,4) = SR;

      update_arith_esp(+8);

   }



   if (Fetch == Fetch::Normal) {
      uint32_t active_loop = FindActiveLoop();
      if (active_loop!=4) {

  if ((LpmarkaFlag == LpmarkaFlag::True) && (LpmarkbFlag == LpmarkbFlag::True)) {

     uint32_t next_active_loop = FindNextActiveLoop();
     bool IsMoreThanOneActive = (lpab_active==none) ? IsMoreThanOneActiveLoop() : true;
     int inner_loop_busy = lpmarka_active(true);





     if ( (inner_loop_busy == 0) && (IsMoreThanOneActive) ) {




        lpmarkb_active(false,next_active_loop);

     }
  } else if (LpmarkaFlag == LpmarkaFlag::True) {
     info (4,"(LpmarkaFlag == LpmarkaFlag::True)");
     lpmarka_active(false);
  } else if (LpmarkbFlag == LpmarkbFlag::True || LpmarkmFlag == LpmarkmFlag::True || LpmarkiFlag == LpmarkiFlag::True) {
     info (4,"(LpmarkB::True) || LpmarkM == LpmarkM::True || LpmarkI == LpmarkI::True");
     bool sr_slf = (SR.SLF==1) ? true : false;
     lpmarkb_active(sr_slf,active_loop);
  }
      }
      } else if (Fetch == Fetch::DoubleDelaySlot) {
  Fetch = Fetch::DelaySlot;
      } else if (Fetch == Fetch::DelaySlot) {
  Fetch = Fetch::Jump;
      } else if (Fetch == Fetch::Jump) {
  if ( (SubInstr== SubInstr::not_sub) || (SubInstr == SubInstr::regular_2nd_cycle) ) {
     info(4,"Fetch::Jump, NPC = DSPC = "<<hex<<DSPC);
     NPC = DSPC;
     Fetch = Fetch::Normal;
     CofExec = CofExec::True;
     Cof_instr = Cof_instr::NotTaken;
  }
      }

      if (Cof_instr == Cof_instr::Taken) {
   info(4,"Entered post_packet,Cof_instr=Taken , NVPC: " << hex << NVPC, " PC_ST_VLES: "<<hex<<PC_ST_VLES);
   NPC = NVPC;


   CofExec = CofExec::True;
       }


      if ((SubInstr != SubInstr::regular) || (SubInstr == SubInstr::regular && SP_128bit_instr_occured)) {

  if (SubInstr == SubInstr::regular && SP_128bit_instr_occured) {
     ESP_COF_DIFF = 0;
     NSP_COF_DIFF = 0;
  }
  bits<32> ESP_DIFF = ESP_COF_DIFF + ESP_ARITH_DIFF;
  bits<32> NSP_DIFF = NSP_COF_DIFF + NSP_ARITH_DIFF;




  ESP_ARITH_DIFF = 0;
  NSP_ARITH_DIFF = 0;
  if (ESP_DIFF.uint32() >> 31) {
     ESP_DIFF = 0 - ESP_DIFF;
     if (ESP_DIFF%8==4) {
        ESP_DIFF = ESP_DIFF+4;
     }
     ESP_DIFF = 0 - ESP_DIFF;
  } else {
     if (ESP_DIFF%8==4) {
        ESP_DIFF = ESP_DIFF+4;
     }
  }

  if (NSP_DIFF.uint32() >> 31) {
     NSP_DIFF = 0 - NSP_DIFF;
     if (NSP_DIFF%8==4) {
        NSP_DIFF = NSP_DIFF+4;
     }
     NSP_DIFF = 0 - NSP_DIFF;
  } else {
     if (NSP_DIFF%8==4) {
        NSP_DIFF = NSP_DIFF+4;
     }
  }

  info(4,"ESP= "<<hex<<ESP);
  info(4,"S_ESP= "<<hex<<S_ESP);
  info(4,"ESP_DIFF= "<<hex<<ESP_DIFF);
  info(4,"ESP_COF_DIFF= "<<hex<<ESP_COF_DIFF);
  info(4,"ESP_DIFF_DELAYED= "<<hex<<ESP_DIFF_DELAYED);
  info(1,"NSP= "<<hex<<NSP);
  info(1,"S_NSP= "<<hex<<S_NSP);



  ESP=S_ESP + ESP_DIFF;
  ESP_COF_DIFF = ESP_DIFF_DELAYED;
  ESP_DIFF_DELAYED=0;
  NSP=S_NSP + NSP_DIFF;
  NSP_COF_DIFF = NSP_DIFF_DELAYED;
  NSP_DIFF_DELAYED=0;

  switch (SP_update) {
     case sp_update_p8: SP_update = no_update; SP_32bit_instr_occured=false;SP_64bit_instr_occured=false; break;
     case sp_update_p16: SP_update = no_update; SP_32bit_instr_occured=false;SP_64bit_instr_occured=false; break;
     case sp_update_m8: SP_update = no_update; SP_32bit_instr_occured=false; SP_64bit_instr_occured=false;break;
     case sp_update_m16: SP_update = no_update; SP_32bit_instr_occured=false;SP_64bit_instr_occured=false; break;
     case nsp_update_p8: SP_update = no_update; SP_32bit_instr_occured=false; SP_64bit_instr_occured=false; break;
     case nsp_update_p16: SP_update = no_update; SP_32bit_instr_occured=false;SP_64bit_instr_occured=false; break;
     case nsp_update_m8: SP_update = no_update; SP_32bit_instr_occured=false; SP_64bit_instr_occured=false; break;
     case nsp_update_m16: SP_update = no_update; SP_32bit_instr_occured=false;SP_64bit_instr_occured=false; break;
     case no_update: break;
     default: break;
  }
      }


      if (SubInstr == SubInstr::regular) {



  SubInstrHelper = SubInstrHelper::False;
  NPC = PC_ST_VLES;
      }



      END_OF_VLES = END_OF_VLES::True;
      init_lpmarks();



      PC_DISASM_START = NPC;
      PC_DISASM_END = next_vles_end_pc(NPC);




      info(4,"PC_DISASM_START = "<<hex<<PC_DISASM_START);
      info(4,"PC_DISASM_END = "<<hex<<PC_DISASM_END);



      if (NonSequentialShortLoop == true) {
  LOOPSTPC = NPC;
  NonSequentialShortLoop = false;
      }


      PC_ST_VLES = NPC;







      if (NPC == 0xfffffffe) {
       ;
  halt();
      }


      packet_suffix();

      info(1,"eop");
      info(4,"eop");

};


bits<32> next_vles_end_pc(bits<32> pc_start_next)
{

   bits<16> a = Mem(pc_start_next,2);

   bits<32> words_counter = 0;
   while (a(15,14)!=0x3) {
      words_counter=words_counter+1;
      a = Mem(pc_start_next+words_counter*2,2);


   }
   words_counter=words_counter+1;

   return (pc_start_next+(words_counter*2));
}

bits<20> add_sod(sbits<20> a_ext, sbits<20> b_ext, bool always_sat = false)
{
   sbits<21> tmp,result;
   tmp = result = a_ext + b_ext;
   result = signExtend(saturation16_noexception(result),20,always_sat);
   if(result==tmp )
   {
      b_ext|=0x0f0000;
      result= (a_ext&0x0ffff) + b_ext;

   }
   return result(19,0);
}


bits<20> sub_sod(sbits<20> a_ext, sbits<20> b_ext, bool always_sat = false)
{
   sbits<21> tmp,result;
   tmp = result = b_ext - a_ext;
   result = signExtend(saturation16_noexception(result),20,always_sat);
   if(result==tmp )
   {
      result= (b_ext&0x0ffff) - (a_ext&0x0ffff);
   }
   return result(19,0);
}

bool set_W20_OVF(sbits<21> result_W20)
{
  bits<2> bits_19_20 = (result_W20 & 0x180000)>>19;
  if((bits_19_20 != 0x3) && (bits_19_20 != 0))
  {
    set_emr_dovf();
    return true;
  }
  else
  {
     return false;
  }

}


void add_word(bits<6> des, bits<6> src1, bits<6> src2, bool IfLowPart, bool is_switch)
{
   sbits<20> src1l, src1h, src2l, src2h;
   sbits<21> result1, result2, tmp1, tmp2;
   bits<20> MAXD = 0x0ffff;
   bits<20> mask_op=0xf0000;
   if((!is_switch) && (IfLowPart) )
   {
      src1l=signExtend(D(src2).L,20);
      src1h=signExtend(D(src2).H,20);
      src2l=signExtend(D(src1).L,20);
      src2h=0;
   }
   else if ((!is_switch) && (!IfLowPart))
   {
      src1h=signExtend(D(src2).H,20);
      src1l=signExtend(D(src2).L,20);
      src2h=signExtend(D(src1).H,20);
      src2l=0;
   }
   else if ((is_switch) && (!IfLowPart))
   {
      src1l=signExtend(D(src2).L,20);
      src1h=signExtend(D(src2).H,20);
      src2h=signExtend(D(src1).L,20);
      src2l=0;
   } else if ((is_switch) && (IfLowPart)){
      info(4," add.w D.H,D.L ");
      src1l=signExtend(D(src2).L,20);
      src1h=signExtend(D(src2).H,20);
      src2l=signExtend(D(src1).H,20);
      src2h=0;
   }


   result1=src1l + src2l;
   result2=src1h + src2h;
   info(4," result1= "<<hex<<result1);
   info(4," result2= "<<hex<<result2);
   tmp1=result1;
   tmp2=result2;
   if(IfLowPart)
   {
      result1 = signExtend(saturation16_noexception(result1),20);
      if(result1==tmp1)
      {
  result1=(src1l&MAXD) + ((src2l&MAXD)|mask_op);
      }
      result2|=mask_op;
   }
   else
   {
      result2 = signExtend(saturation16_noexception(result2),20);
      if(result2==tmp2)
  result2=(src1h&MAXD) + ((src2h&MAXD)|mask_op);
      result1|=mask_op;
   }
   D(des).L = result1(15,0);
   D(des).H = result2(15,0);
   D(des).E = concat(result2(19,16),result1(19,16));
   L(des) = 0;
}




int sc3800_scale(bits<42> *dval)
{
   bits<16> hi, lo;
   bits<10> extension;
   int last_shifted_bit=0;
   int scaling_mode = (SR.SM==1) ? 0 : (SR.SCM).uint32();
   bits<42> value = *dval;
   info(4,"sc3800_scale, *dval= "<<hex<< (*dval) );
   hi = value(31,16);
   lo = value(15,0);
   extension = value(41,32);
   info(4,"sc3800_scale! extension= "<<hex<<extension," hi= "<<hex<<hi," lo= "<<hex<<lo );
   info(4,"scaling_mode= "<<scaling_mode );



 switch(scaling_mode) {
  case 0:


 break;
  case 1:




      last_shifted_bit=(lo&1).uint32();
      lo>>=1;
      if((hi&1)!=0)
      {
  lo|=(0x8000);
      }
      hi>>=1;
      if((extension&1)!=0)
      {
  hi|=(0x8000);
      }
      extension>>=1;
      extension|=((extension&0x80)!=0)? 0x80 : 0x0;


 break;
  case 2:



      last_shifted_bit=((extension&0x80)>>7).uint32();
      extension = extension<<1;
      if((hi&(0x8000))!=0)
      {
  extension=extension+1;
  hi&=0x7fff;
      }


      hi <<=1;
      if((lo&(0x8000))!=0)
      {
  hi=hi+1;
  lo&=0x7fff;
      }
      lo <<=1;
      info(4,"case2, extension= "<<hex<<extension," hi= "<<hex<<hi," lo= "<<hex<<lo );



 break;
  case 3:

 last_shifted_bit= (lo&3).uint32();
 lo>>=2;
 if((hi&3)!=0)
 {
    lo|=(hi&3)<<14;
 }
 hi>>=2;
 if((extension&3)!=0)
 {
    hi|=(extension&3)<<14;
 }
 extension>>=2;
 extension|=((extension&0xc0)!=0)? 0xc0 : 0x0;



 break;
  default:
 break;

  }


 value = concat(extension,hi,lo);

 (*dval) = value;
 return(last_shifted_bit);
}



int sc3800_saturate( bits<42> *val, bool f_word, int shifted_up_bit)
{
 bits<10> ext_left_with_bit_31;

 int saturation_occur=0;
 int scaling_mode = (SR.SCM).uint32();
 bits<42> dval = *val;
 bits<10> extension = dval(41,32);
 bits<16> high_val = dval(31,16);

 info(4,"sc3800_saturate, shifted_up_bit= "<< shifted_up_bit,", *val= "<<hex<<(*val));

 info(4,"scaling_mode= "<<scaling_mode);
 if (scaling_mode!=2)
 {
  shifted_up_bit = ((extension&0x80)>>7).uint32();
  if(shifted_up_bit!=0) {
   ext_left_with_bit_31= ((extension&0xff)|0x100);
  } else {
     ext_left_with_bit_31= (extension&0xff);
  }
 }
 else
 {
  shifted_up_bit = ((extension&0x100)>>8).uint32();

  ext_left_with_bit_31= (extension&0x1ff);
 }

 info(4,"ext_left_with_bit_31= "<<hex<<ext_left_with_bit_31);



 ext_left_with_bit_31 = (ext_left_with_bit_31<<1) | (high_val&0x8000)>>15;



 info(4,"ext_left_with_bit_31= "<<hex<<ext_left_with_bit_31);

 if((ext_left_with_bit_31!=0) && (ext_left_with_bit_31!= 0x3ff))
 {
  dval(31,16)= (shifted_up_bit!=0) ? 0x8000 : 0x7fff;
  saturation_occur=1;
  if(f_word) {
     dval(15,0)= (shifted_up_bit!=0) ? 0x0 : 0xffff;
  }
 }
 *val = signExtend(dval(31,0),42);
 return(saturation_occur);
}



void sc3800_round( bits<42> *val,bool conv_rnd, bool f_word_op, int shifted_down_bit)
{
 bits<16> ext_left;
 bits<8> bit_23, bit_15;
 bits<32> round_res_with_bit_23,round_res_with_bit_15;
 bits<42> value = (*val);
 bits<10> extension = value(41,32);
 bits<16> hi = value(31,16);
 bits<16> low = value(15,0);

 int scaling_mode = (SR.SM==1) ? 0 : (SR.SCM).uint32();
        info(4,"sc3800_round! value= "<<hex<<value);
 info(4,"scaling_mode = "<<scaling_mode, ", shifted_down_bit= "<<shifted_down_bit);
 switch(scaling_mode) {
    case 0:
       shifted_down_bit = 0;
       break;
    case 1:

       shifted_down_bit = (shifted_down_bit<<1)&2;
       break;
    case 2:

       shifted_down_bit = 0;
       break;
    case 3:

       shifted_down_bit &=3;
       break;
    default:
       break;

 }

 info(4,"sc3800_round!,scaling_mode = "<<scaling_mode, ", shifted_down_bit= "<<shifted_down_bit);
 ext_left= extension&0x3ff;
 info(4,"ext_left= "<<hex<<ext_left);
 if(f_word_op==true)
 {


  if((conv_rnd==true) && ((hi&0x1)==0) && (low==0x8000) && (shifted_down_bit==0)) {
   bit_15 = 0;
   info(4,"bit_15 = 0");
  }
  else {
   bit_15 = (low&0x8000)>>15;
   info(4,"bit_15 = "<<hex<<bit_15);
  }

  round_res_with_bit_15 = zeroExtend(value(40,16),32) ;
  info(4,"round_res_with_bit_15 = "<<hex<<round_res_with_bit_15);
  if((round_res_with_bit_15!= 0x7fffff)&&
   (!((round_res_with_bit_15== 0xffffff)&&(scaling_mode==2||scaling_mode==0))))
   round_res_with_bit_15+= bit_15;

  info(4,"round_res_with_bit_15 = "<<hex<<round_res_with_bit_15);
  value(31,16)= round_res_with_bit_15(15,0);
  value(41,32)= round_res_with_bit_15(25,16);
 }
 else
 {


    if((conv_rnd==true) && ((hi&0x100)==0) && ((hi&0xff)==0x80) &&(low==0) && (shifted_down_bit==0)) {

       bit_23 = 0;
    } else {
       bit_23 = (hi&0x80)>>7;
    }

    round_res_with_bit_23 = zeroExtend(value(40,24),32);
    info(4,"round_res_with_bit_23 = "<<hex<<round_res_with_bit_23);

    if((round_res_with_bit_23!= 0x7fff)&& (!((round_res_with_bit_23== 0xffff)&&(scaling_mode==2||scaling_mode==0)))) {
       round_res_with_bit_23+= bit_23;
    }
    info(4,"round_res_with_bit_23 = "<<hex<<round_res_with_bit_23);
    value(31,24)= round_res_with_bit_23(7,0);
    value(41,32)= round_res_with_bit_23(17,8);
 }
 *val = value;
}


void sc3800_scale_two_20bit_ops(bits<10> extension, bits<32> *scale_bit_L, bits<32> *scale_bit_H, bits<32> *srcL, bits<32> *srcH)
{
  bits<32> one_bit_sign=0x80000, two_bit_sign=0xc0000;
  int scaling_mode = (SR.SM2==1) ? 0 : (SR.SCM).uint32();

  switch(scaling_mode) {
     case 0:
 break;
     case 1:

 *scale_bit_L = *srcL&1;
 *scale_bit_H = *srcH&1;

 *srcL>>=1;
 *srcL|=((extension&0x8)!=0)? one_bit_sign : 0;
 *srcH>>=1;
 *srcH|=((extension&0x80)!=0)? one_bit_sign : 0;
 break;
     case 2:

 *scale_bit_L = (*srcL&0x80000)>>19;
 *scale_bit_H = (*srcH&0x80000)>>19;

 *srcL<<=1;
 *srcH<<=1;
 break;
     case 3:

 *scale_bit_L = *srcL&3;
 *scale_bit_H = *srcH&3;

 *srcL>>=2;
 *srcL|=((extension&0x8)!=0)? two_bit_sign : 0;
 *srcH>>=2;
 *srcH|=((extension&0x80)!=0)? two_bit_sign : 0;
 break;
     default:
 break;

  }

}




void sc3800_round_two_20bit_ops( bool f_word_op ,bool conv_rnd,bits<32> *scale_bit_L,bits<32> *scale_bit_H,bits<32> *srcL,bits<32> *srcH)
{
   bits<16> add_bit;
   bits<32> shifted_down_bitL = *scale_bit_L;
   bits<32> shifted_down_bitH = *scale_bit_H;
   int scaling_mode = (SR.SM2==1) ? 0 : (SR.SCM).uint32();

   info(4,"sc3800_round_two_20bit_ops!, scaling_mode= "<<scaling_mode);
   switch(scaling_mode) {
      case 0:
  shifted_down_bitL = 0;
  shifted_down_bitH = 0;
  break;
      case 1:

  shifted_down_bitL = (shifted_down_bitL<<1)&2;
  shifted_down_bitH = (shifted_down_bitH<<1)&2;
  break;
      case 2:

  shifted_down_bitL = 0;
  shifted_down_bitH = 0;
  break;
      case 3:

  shifted_down_bitL &=3;
  shifted_down_bitH &=3;
  break;
      default:
  break;

   }



   if(f_word_op)
   {
      if(conv_rnd && ((*srcL&0x1)==0) && (shifted_down_bitL==0x2)) {
  add_bit = 0;
      } else {
  add_bit = (shifted_down_bitL>>1)&1;
      }
      if((*srcL!= 0x7ffff) && (!((*srcL== 0xfffff)&&(scaling_mode==2)))) {
  *srcL = *srcL + add_bit;
      }
      if(conv_rnd && !(*srcH&0x1) && (shifted_down_bitH==0x2)) {
  add_bit = 0;
      } else {
  add_bit = (shifted_down_bitH>>1)&1;
      }
      if((*srcH!= 0x7ffff) && (!((*srcH== 0xfffff)&&(scaling_mode==2)))) {
  *srcH = *srcH + add_bit;
      }
   }
   else
   {

      if (conv_rnd && ((*srcL&0x00000100)==0) && ((*srcL&0x000000ff)==0x00000080) && (shifted_down_bitL==0)) {
  add_bit = 0;
      } else {
  add_bit = (*srcL&0x00000080)>>7;
      }

      if(((*srcL&(~0x000ff))!=0x7ff00) && ((*srcL&(~0x000ff))!=0xfff00)) {
  *srcL = *srcL + (add_bit<<8);
      }
      if(conv_rnd && !(*srcH&0x100) && ((*srcH&0xff)==0x80) && (shifted_down_bitH==0)) {
  add_bit = 0;
      } else {
  add_bit = (*srcH&0x00000080)>>7;
      }

      if (((*srcH&(~0x000ff))!=0x7ff00) && ((*srcH&(~0x000ff))!=0xfff00)) {
  *srcH = *srcH + (add_bit<<8);
      }
   }
}



int sc3800_saturate_two_20bit_ops(bits<42> *val, bool f_word_op ,bool conv_rnd,bits<32> *scale_bit_L,bits<32> *scale_bit_H,bits<32> *srcL,bits<32> *srcH,bool MOVERL_4F, bool MOVERH_4F )
{
 bits<8> H_sign_bit,L_sign_bit;
 bits<32> saturation_bits, scaleL,scaleH;
 int saturation_occur=0;
 int scaling_mode = (SR.SM2==1) ? 0 : (SR.SCM).uint32();

 if(scaling_mode!=2)
 {
  scaleL = (*srcL & 0x80000)>>19;
  scaleH = (*srcH & 0x80000)>>19;
 }
 else
 {
  scaleL = *scale_bit_L &1;
  scaleH = *scale_bit_H &1;
 }


 if(!MOVERL_4F)
 {
  saturation_bits = ((*srcH & 0x1f8000)>>15);
  H_sign_bit = scaleH;
  if(saturation_bits!=0 && saturation_bits!=0x3f)
  {
     *srcH= (H_sign_bit!=0) ? 0x8000 : 0x7fff;
     saturation_occur++;
  }
 }


 if(!MOVERH_4F)
 {
  saturation_bits = ((*srcL & 0x1f8000)>>15);
  L_sign_bit = scaleL;
  if(saturation_bits!=0 && saturation_bits!=0x3f)
  {
     *srcL= (L_sign_bit!=0) ? 0x8000 : 0x7fff;
     saturation_occur++;
  }
 }

 bits<32> val1 = concat((*srcH)(15,0),(*srcL)(15,0));
 *val = signExtend(val1,42);
 return (saturation_occur);
}


int saturate16_sc3800(bits<40> *rval)
{
 int rc = 0;
 if(SR.SM2!=0)
 {
  bits<40> tval,sign_bit,max_pos,max_neg,result;
  max_pos=0x00007fff;
  max_neg=~max_pos;
  result = *rval;
  tval=(*rval & 0x0000018000ull)>>15;
  sign_bit = (*rval & 0x0000010000ull)>>16;
  if(tval!=0x0 && tval!=0x3)
  {
   if(sign_bit==0)
   {
    result=max_pos;
    set_emr_dovf();
    rc = 1;
   }
   else
   {
    result=max_neg;
    set_emr_dovf();
    rc = 2;
   }
  }
  *rval=result;
 }
 return rc;
}


int saturate16_nocheck(sbits<41> *rval)
{
   int rc = 0;
   sbits<41> tval,sign_bit,max_pos,max_neg,result;
   max_pos=0x00000007fff;
   max_neg=~max_pos;
   result = *rval;
   tval=(*rval & 0x00000018000ull)>>15;
   sign_bit = (*rval & 0x00000010000ull)>>16;
   if(tval!=0x0 && tval!=0x3)
   {
      if(sign_bit==0)
      {
  result=max_pos;
  set_emr_dovf();
  rc = 1;
      }
      else
      {
  result=max_neg;
  set_emr_dovf();
  rc = 2;
      }
   }
   *rval=result;
   return rc;
}


bits<32> MULT_RND16(bits<32> val1, bits<32> val2)
{
   info(4,"MULT_RND16, val1= "<<hex<<val1,", val2= "<<hex<<val2);
   int SIGNBIT = 0x8000L;
   int result;
   result= (val1.int32()*val2.int32());
   result+= (result&(SIGNBIT>>1));
   result>>=15;
   return result;
# 5940 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
}


void set_doen_flag(bits<2> index,bits<1> sequential=0)
{
   if (sequential==0) {
      switch (index.uint32()) {
  case 0: DoenFlag = DoenFlag::L0; break;
  case 1: DoenFlag = DoenFlag::L1; break;
  case 2: DoenFlag = DoenFlag::L2; break;
  case 3: DoenFlag = DoenFlag::L3; break;
      }
   } else {
      switch (index.uint32()) {
  case 0: DoenSqFlag = DoenSqFlag::L0; break;
  case 1: DoenSqFlag = DoenSqFlag::L1; break;
  case 2: DoenSqFlag = DoenSqFlag::L2; break;
  case 3: DoenSqFlag = DoenSqFlag::L3; break;
      }
   }
}

void fictive_pac_accesses()
{
   bits<32> xxx;
   xxx = SR;
   xxx = SP;
   if (SR.EXP == 1) {
     ESP = ESP;
   } else {
      NSP = NSP;
   }
}
# 5990 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void set_SR_PR(bits<3> flag)
{
 switch ( flag.uint32() ) {
   case 0: SR.P0 = 1;
      break;
   case 1: SR.P1 = 1;
      break;
   case 2: SR.P2 = 1;
      break;
   case 3: SR.P3 = 1;
      break;
   case 4: SR.P4 = 1;
      break;
   case 5: SR.P5 = 1;
      break;
          default: error(1," Not supposed to get here - set_SR_PR");
     break;
 }
}

void SetByVal_SR_PR(bits<3> flag,bits<1> value)
{
 switch ( flag.uint32() ) {
   case 0: SR.P0 = value;
      break;
   case 1: SR.P1 = value;
      break;
   case 2: SR.P2 = value;
      break;
   case 3: SR.P3 = value;
      break;
   case 4: SR.P4 = value;
      break;
   case 5: SR.P5 = value;
      break;
          default: error(1," Not supposed to get here - set_SR_PR");
     break;
 }
}
# 6044 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void clear_SR_PR( bits<3> flag)
{
   switch ( flag.uint32() ) {
   case 0: SR.P0 = 0;
      break;
   case 1: SR.P1 = 0;
      break;
   case 2: SR.P2 = 0;
      break;
   case 3: SR.P3 = 0;
      break;
   case 4: SR.P4 = 0;
      break;
   case 5: SR.P5 = 0;
      break;
          default: error(1," Not supposed to get here - clear_SR_PR");
     break;
 }
}

bits<1> get_SR_PR( bits<3> flag)
{
   bits<1> pr_bit;
   switch ( flag.uint32() ) {
   case 0: pr_bit = SR.P0;
      break;
   case 1: pr_bit = SR.P1;
      break;
   case 2: pr_bit = SR.P2;
      break;
   case 3: pr_bit = SR.P3;
      break;
   case 4: pr_bit = SR.P4;
      break;
   case 5: pr_bit = SR.P5;
      break;
          default: error(1," Not supposed to get here - get_SR_PR");
     break;
 }
   return (pr_bit);
}


bits<16> maxm(bits<16> Dm_l, bits<16> Da_l, bits<16> Db_l, bits<16> Da_h, bits<16> Db_h, int *index)
{
   bits<16> abs_Da_l = ABSword(Da_l);
   bits<16> abs_Db_l = ABSword(Db_l);
   bits<16> abs_Dm_l = ABSword(Dm_l);
   bits<16> abs_Da_h = ABSword(Da_h);
   bits<16> abs_Db_h = ABSword(Db_h);
   bits<16> max;
   int max_index=4;

   if (abs_Da_l > abs_Db_l) {
      if (abs_Da_l > abs_Dm_l) {
  if (abs_Da_l > abs_Da_h) {
     if (abs_Da_l > abs_Db_h) {
        max = Da_l;
        max_index = 1;
     } else {
        max = Db_h;
        max_index = 2;
     }
  } else {
     if (abs_Da_h > abs_Db_h) {
        max = Da_h;
        max_index = 0;
     } else {
        max = Db_h;
        max_index = 2;
     }
  }
      } else {
  if (abs_Dm_l > abs_Da_h) {
     if (abs_Dm_l > abs_Db_h) {
        max = Dm_l;
     } else {
        max = Db_h;
        max_index = 2;
     }
  } else {
     if (abs_Da_h > abs_Db_h) {
        max = Da_h;
        max_index = 0;
     } else {
        max = Db_h;
        max_index = 2;
     }
  }
      }
   } else {
      if (abs_Db_l > abs_Dm_l) {
  if (abs_Db_l > abs_Da_h) {
     if (abs_Db_l > abs_Db_h) {
        max = Db_l;
        max_index = 3;
     } else {
        max = Db_h;
        max_index = 2;
     }
  } else {
     if (abs_Da_h > abs_Db_h) {
        max = Da_h;
        max_index = 0;
     } else {
        max = Db_h;
        max_index = 2;
     }
  }
      } else {
  if (abs_Dm_l > abs_Da_h) {
     if (abs_Dm_l > abs_Db_h) {
        max = Dm_l;
     } else {
        max = Db_h;
        max_index = 2;
     }
  } else {
     if (abs_Da_h > abs_Db_h) {
        max = Da_h;
        max_index = 0;
     } else {
        max = Db_h;
        max_index = 2;
     }
  }
      }
   }

   switch (max_index) {
      case 0: if (max==abs_Da_h) {
   *index = max_index;
       } else {
   *index = (max==Dm_l) ? 4 : (max==Db_l) ? 3 : (max==Db_h) ? 2 : (max==Da_l) ? 1 : max_index;
   max = abs_Da_h;
       }
       break;
      case 1: if (max==abs_Da_l) {
   *index = max_index;
       } else {
          *index = (max==Dm_l) ? 4 : (max==Db_l) ? 3 : (max==Db_h) ? 2 : (max==Da_h) ? 0 : max_index;
   max = abs_Da_l;
       }
       break;
      case 2: if (max==abs_Db_h) {
   *index = max_index;
       } else {
   *index = (max==Dm_l) ? 4 : (max==Db_l) ? 3 : (max==Da_l) ? 1 : (max==Da_h) ? 0 : max_index;
   max = abs_Db_h;
       }
       break;
      case 3: if (max==abs_Db_l) {
   *index = max_index;
       } else {
   *index = (max==Dm_l) ? 4 : (max==Db_h) ? 2 : (max==Da_l) ? 1 : (max==Da_h) ? 0 : max_index;
   max = abs_Db_l;
       }
       break;
      case 4: if (max==abs_Dm_l) {
   *index = max_index;
       } else {
   *index = (max==Da_h) ? 0 : (max==Db_l) ? 3 : (max==Db_h) ? 2 : (max==Da_l) ? 1 : max_index;
   max = abs_Dm_l;
       }
       break;
   }
   return max;
}





bits<16> max_5inputs(bits<16> Dm_l, bits<16> Da_l, bits<16> Db_l, bits<16> Da_h, bits<16> Db_h, int *index)
{
   bits<16> max;
   int max_index=4;

   if (Dm_l.signedGE(Db_l)) {
      if (Dm_l.signedGE(Db_h)) {
  if (Dm_l.signedGE(Da_l)) {
     if (Dm_l.signedGE(Da_h)) {
        max = Dm_l;
     } else {
        max = Da_h;
        max_index = 0;
     }
  } else {
     if (Da_l.signedGE(Da_h)) {
        max = Da_l;
        max_index = 1;
     } else {
        max = Da_h;
        max_index = 0;
     }
  }
      } else {
  if (Db_h.signedGE(Da_l)) {
     if (Db_h.signedGE(Da_h)) {
        max = Db_h;
        max_index = 2;
     } else {
        max = Da_h;
        max_index = 0;
     }
  } else {
     if (Da_l.signedGE(Da_h)) {
        max = Da_l;
        max_index = 1;
     } else {
        max = Da_h;
        max_index = 0;
     }
  }
      }
   } else {
      if (Db_l.signedGE(Db_h)) {
  if (Db_l.signedGE(Da_l)) {
     if (Db_l.signedGE(Da_h)) {
        max = Db_l;
        max_index = 3;
     } else {
        max = Da_h;
        max_index = 0;
     }
  } else {
     if (Da_l.signedGE(Da_h)) {
        max = Da_l;
        max_index = 1;
     } else {
        max = Da_h;
        max_index = 0;
     }
  }
      } else {
  if (Db_h.signedGE(Da_l)) {
     if (Db_h.signedGE(Da_h)) {
        max = Db_h;
        max_index = 2;
     } else {
        max = Da_h;
        max_index = 0;
     }
  } else {
     if (Da_l.signedGE(Da_h)) {
        max = Da_l;
        max_index = 1;
     } else {
        max = Da_h;
        max_index = 0;
     }
  }
      }
   }

   *index = max_index;
   return max;

}


bits<16> min_5inputs(bits<16> Dm_l, bits<16> Da_l, bits<16> Db_l, bits<16> Da_h, bits<16> Db_h, int *index)
{
   bits<16> min;
   int min_index=4;

   if (Dm_l.signedLE(Db_l)) {
      if (Dm_l.signedLE(Db_h)) {
  if (Dm_l.signedLE(Da_l)) {
     if (Dm_l.signedLE(Da_h)) {
        min = Dm_l;
     } else {
        min = Da_h;
        min_index = 0;
     }
  } else {
     if (Da_l.signedLE(Da_h)) {
        min = Da_l;
        min_index = 1;
     } else {
        min = Da_h;
        min_index = 0;
     }
  }
      } else {
  if (Db_h.signedLE(Da_l)) {
     if (Db_h.signedLE(Da_h)) {
        min = Db_h;
        min_index = 2;
     } else {
        min = Da_h;
        min_index = 0;
     }
  } else {
     if (Da_l.signedLE(Da_h)) {
        min = Da_l;
        min_index = 1;
     } else {
        min = Da_h;
        min_index = 0;
     }
  }
      }
   } else {
      if (Db_l.signedLE(Db_h)) {
  if (Db_l.signedLE(Da_l)) {
     if (Db_l.signedLE(Da_h)) {
        min = Db_l;
        min_index = 3;
     } else {
        min = Da_h;
        min_index = 0;
     }
  } else {
     if (Da_l.signedLE(Da_h)) {
        min = Da_l;
        min_index = 1;
     } else {
        min = Da_h;
        min_index = 0;
     }
  }
      } else {
  if (Db_h.signedLE(Da_l)) {
     if (Db_h.signedLE(Da_h)) {
        min = Db_h;
        min_index = 2;
     } else {
        min = Da_h;
        min_index = 0;
     }
  } else {
     if (Da_l.signedLE(Da_h)) {
        min = Da_l;
        min_index = 1;
     } else {
        min = Da_h;
        min_index = 0;
     }
  }
      }
   }

   *index = min_index;
   return min;

}
# 6423 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void GetSourcesPortions(bits<6> d_src1, bits<16> *Src1, bits<6> d_src2,bits<16> *Src2, bits<2> config)
{
   switch (config.uint32())
   {
      case 0: *Src1 = D(d_src1).H; *Src2 = D(d_src2).H; break;
      case 1: *Src1 = D(d_src1).H; *Src2 = D(d_src2).L; break;
      case 2: *Src1 = D(d_src1).L; *Src2 = D(d_src2).H; break;
      case 3: *Src1 = D(d_src1).L; *Src2 = D(d_src2).L; break;
      default:
       error(1," Not supposed to get here - GetSourcesPortions function");
       break;
   }

}
# 6446 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
void GetSourcesPortions20(bits<6> d_src1, bits<20> *Src1, bits<6> d_src2,bits<20> *Src2, bits<2> config)
{
   switch (config.uint32())
   {
      case 0: *Src1 = D(d_src1).WH; *Src2 = D(d_src2).WH; break;
      case 1: *Src1 = D(d_src1).WH; *Src2 = D(d_src2).WL; break;
      case 2: *Src1 = D(d_src1).WL; *Src2 = D(d_src2).WH; break;
      case 3: *Src1 = D(d_src1).WL; *Src2 = D(d_src2).WL; break;
      default:
       error(1," Not supposed to get here - GetSourcesPortions20 function");
       break;
   }

}


bits<40> round_sat_on(sbits <41> val)
{
 int a;
   sbits<41> rval = 0, tmp;
 bits<41> rmask;
   sbits<41> sum;
 exception_overflow = false;

   a = (SR.SCM).uint32();

   switch (a) {
     case 0:
        rval = (0x8000);
        break;
     case 1:
        rval = (0x10000);
        break;
     case 2:
        rval = (0x4000);
        break;
     case 3:
        rval = (0x8000);
        break;
   }

   rmask = (rval << 1) - 1;
    tmp = val & rmask;
 sbits <40> satsum;

   if (SR.RM != 0)
 {
      if ( tmp.signedGE(rval) )
  {
     sum = val + (rval << 1);
  }
  else
  {
     sum = val;
  }
   }
 else
 {
  if (tmp.signedLT(rval)) {
    sum = val;
  } else if (tmp.signedGT(rval)) {
     sum = val + (rval << 1);
  } else if ((val & (rval << 1)) != 0) {
     sum = val + (rval << 1);
  } else {
     sum = val;
  }
   }

 sum = sum & ~rmask;
 sbits <16> tryme;

 bits<41> tmp_ovf = overflow40_sat_on(sum&(~rmask));

 int is_ovf =1;
 if ((tmp_ovf==0x18000000000ull) || (tmp_ovf==0x7fffffffffull)) { is_ovf=2; }
 satsum = ll_saturate_mpy_nochk(sum,0,is_ovf);

 return (satsum & ~rmask);
}

sbits<41> overflow40_sat_on( bits<41> reg)
{
   sbits<41> reg2 = signExtend( reg.get<40>(39,0),41);
   if ( reg2 != reg ) {
      set_emr_dovf();
      if (reg(40)==1) {
  return (0x18000000000ull);
      } else {
  return (0x7fffffffffull);
      }

   } else {
      return (reg2);
   }
}

bits<20> ssodffcc_high (bits<6> d_src1, bits<6> d_src2, bits<3> config )
{
   bits<20> high_calc;
   bool always_sat = true;
   switch (config.uint32()) {
      case 0: high_calc = add_sod(signExtend(D(d_src1).H,20),signExtend(D(d_src2).H,20),always_sat); break;
      case 1: high_calc = add_sod(signExtend(D(d_src1).L,20),signExtend(D(d_src2).H,20),always_sat); break;
      case 2: high_calc = add_sod(signExtend(D(d_src1).H,20),signExtend(D(d_src2).H,20),always_sat); break;
      case 3: high_calc = sub_sod(signExtend(D(d_src1).L,20),signExtend(D(d_src2).H,20),always_sat); break;
      case 4: high_calc = sub_sod(signExtend(D(d_src1).H,20),signExtend(D(d_src2).H,20),always_sat); break;
      case 5: high_calc = add_sod(signExtend(D(d_src1).L,20),signExtend(D(d_src2).H,20),always_sat); break;
      case 6: high_calc = sub_sod(signExtend(D(d_src1).H,20),signExtend(D(d_src2).H,20),always_sat); break;
      case 7: high_calc = sub_sod(signExtend(D(d_src1).L,20),signExtend(D(d_src2).H,20),always_sat); break;
      default: error(1," Not supposed to get here - ssodffcc_high"); break;
   }
   return high_calc;
}

bits<20> ssodffcc_low (bits<6> d_src1, bits<6> d_src2, bits<3> config )
{
   bits<20> low_calc;
   bool always_sat = true;
   switch (config.uint32()) {
      case 0: low_calc = add_sod(signExtend(D(d_src1).L,20),signExtend(D(d_src2).L,20),always_sat); break;
      case 1: low_calc = add_sod(signExtend(D(d_src1).H,20),signExtend(D(d_src2).L,20),always_sat); break;
      case 2: low_calc = sub_sod(signExtend(D(d_src1).L,20),signExtend(D(d_src2).L,20),always_sat); break;
      case 3: low_calc = add_sod(signExtend(D(d_src1).H,20),signExtend(D(d_src2).L,20),always_sat); break;
      case 4: low_calc = add_sod(signExtend(D(d_src1).L,20),signExtend(D(d_src2).L,20),always_sat); break;
      case 5: low_calc = sub_sod(signExtend(D(d_src1).H,20),signExtend(D(d_src2).L,20),always_sat); break;
      case 6: low_calc = sub_sod(signExtend(D(d_src1).L,20),signExtend(D(d_src2).L,20),always_sat); break;
      case 7: low_calc = sub_sod(signExtend(D(d_src1).H,20),signExtend(D(d_src2).L,20),always_sat); break;
      default: error(1," Not supposed to get here - ssodffcc_low"); break;

   }
   return low_calc;

}
# 6635 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<32> extracta_f(bits<5> Ra, bits<5> width_s, bits<5> offset_s)
{

  bits<32> result,tval1,tval2,tval3,offset,width;
  offset = zeroExtend(offset_s,32);
  width = zeroExtend(width_s,32);
  tval1 = R(Ra);
  if(offset.signedGE(32))
  {
    result=0;
  }
  else
  {
    int circle_shift=0;
    if((offset + width).signedGT(32))
    {
      circle_shift=width.uint32();
      width=32-offset;
    }
    else if(width==0)
    {
      width=1;
    }
    tval2=1;
    tval2 <<=width;
    tval2 -=1;
    result=(tval1>>offset.uint32())&tval2;

    if(circle_shift)
    {
      result|=tval1 << width.uint32();
      width=circle_shift;

      tval2=1;
      tval2 <<=width.uint32();
      tval2 -=1;
      result&=tval2;
    }

    tval3=1;
    tval3 <<= (width.uint32() - 1);

    if((result&tval3)!=0)
    {
      tval2=~tval2;
      result|=tval2;
    }
  }
  return (result);
}



bits<32> extractua_f(bits<5> Ra, bits<5> width_s, bits<5> offset_s)
{
  bits<32> result,tval1,tval2,offset,width;
  offset = zeroExtend(offset_s,32);
  width = zeroExtend(width_s,32);
  tval1 = R(Ra);
  if(offset.signedGE(32))
  {
    result=0;
  }
  else
  {
    if(width==0)
    {
       result=(tval1>>offset.uint32())&1;
       if(result!=0)
       {

   result=0;
   result=0-result;
       }
    }
    else
    {
       int circle_shift=0;
       if((offset + width).signedGT(32))
       {
   circle_shift=width.uint32();
   width=32-offset;
       }
       tval2=1;
       tval2 <<=width;
       tval2 -=1;
       result=(tval1>>offset.uint32())&tval2;

       if(circle_shift)
       {
   result|=tval1 << width.uint32();
   width=circle_shift;

   tval2=1;
   tval2 <<=width.uint32();
   tval2 -=1;
   result&=tval2;
       }
    }
  }
  return (result);
}
# 6758 "/vobs/vb_dp_arch/ADLsim/general/functions.adl"
bits<32> slice_write_agu(bits<32> des, bits<32> dsrc, bits<5> end, bits<5> start)
{
 bits<32> mask = 0xffffffff;
 mask <<= 32-(end-start);
 mask >>= 32-(end);
 mask = ~mask;
 dsrc <<= 32-(end-start);
 dsrc >>= 32-(end);
 return ( (des & mask) | dsrc);
}

void manipulate_sources_MAC4xxxxyyyyRI(bits<4> xxxx,bits<41> *Dal_16b,bits<41> *Dah_16b,bits<41> *Dbl_16b,bits<41> *Dbh_16b,bits<41> *Dcl_16b,bits<41> *Dch_16b,bits<41> *Ddl_16b,bits<41> *Ddh_16b)
{
   switch ( xxxx.uint32() )
    {
       case 0: break;
       case 1: *Dbl_16b = (0-*Dbl_16b);
        break;
       case 2: *Dbh_16b = (0-*Dbh_16b);
        break;
       case 3: *Dbl_16b = (0-*Dbl_16b);
        *Dbh_16b = (0-*Dbh_16b);
        break;
       case 4: *Dal_16b = (0-*Dal_16b);
        break;
       case 5: *Dal_16b = (0-*Dal_16b);
        *Dbl_16b = (0-*Dbl_16b);
        break;
       case 6: *Dal_16b = (0-*Dal_16b);
        *Dbh_16b = (0-*Dbh_16b);
        break;
       case 7: *Dal_16b = (0-*Dal_16b);
        *Dbl_16b = (0-*Dbl_16b);
        *Dbh_16b = (0-*Dbh_16b);
        break;
       case 8: *Dah_16b = (0-*Dah_16b);
        break;
       case 9: *Dah_16b = (0-*Dah_16b);
        *Dbl_16b = (0-*Dbl_16b);
        break;
       case 10: *Dah_16b = (0-*Dah_16b);
        *Dbh_16b = (0-*Dbh_16b);
        break;
       case 11: *Dah_16b = (0-*Dah_16b);
        *Dbl_16b = (0-*Dbl_16b);
        *Dbh_16b = (0-*Dbh_16b);
        break;
       case 12: *Dah_16b = (0-*Dah_16b);
        *Dal_16b = (0-*Dal_16b);
        break;
       case 13: *Dah_16b = (0-*Dah_16b);
        *Dal_16b = (0-*Dal_16b);
        *Dbl_16b = (0-*Dbl_16b);
        break;
       case 14: *Dah_16b = (0-*Dah_16b);
        *Dal_16b = (0-*Dal_16b);
        *Dbh_16b = (0-*Dbh_16b);
        break;
       case 15: *Dah_16b = (0-*Dah_16b);
        *Dal_16b = (0-*Dal_16b);
        *Dbl_16b = (0-*Dbl_16b);
        *Dbh_16b = (0-*Dbh_16b);
        break;

       default: error(1," Not supposed to get here - manipulate_sources_MAC4xxxxyyyyRI");
         break;
    }
}


void manipulate_sources_MAC2RI(bits<2> config, bits<41> *Dal_16b, bits<41> *Dah_16b, bits<41> *Dbl_16b, bits<41> *Dbh_16b)
{
    switch ( config.uint32() )
    {
       case 0: break;
       case 1: *Dal_16b = (0-*Dal_16b);
        break;
       case 2: *Dah_16b = (0-*Dah_16b);
        break;
       case 3: *Dal_16b = (0-*Dal_16b);
        *Dah_16b = (0-*Dah_16b);
        break;
       default: error(1," Not supposed to get here - manipulate_sources_MAC2RI");
         break;
    }
}
# 36 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/general/assembler_support.adl" 1
# 125 "/vobs/vb_dp_arch/ADLsim/general/assembler_support.adl"
 define (instrfield = SG) {
    width = 1;
    pseudo = true;
    assembler = true;
    value = 0;
    reserved = true;
 }


 define (instr=lpmarka) {
    syntax = ("lpmarka");
    assembler = {
       lpmarkA[0] = 1;

 };
 }
 define (instr=lpmarkb) {
    syntax = ("lpmarkb");
    assembler = {
       lpmarkB[0] = 1;

   };
 }
define (instr=lpmarkm) {
    syntax = ("lpmarkm");
    assembler = {
       lpmarkM[0] = 1;

   };
 }

define (instr=lpmarki) {
    syntax = ("lpmarki");
    assembler = {
       lpmarkI[0] = 1;

   };
 }

define (instr=lpmarks)
 {
    syntax = ("lpmarks");
    assembler = {
       lpmarkS[0] = 1;
    };
 }




 define (instr=dummy_directive) {
    syntax = ("dummy");
    assembler = {
  num_of_vles=num_of_vles-1;
     };
   }


define (instrfield = NN) {
   width = 4;
    pseudo = true;
   enumerated = (".txt",".bss");
};

define (instrfield = GLB) {
   width = 2;
   pseudo = true;
   enumerated = ("GLOBAL","LOCAL");
 };


 define (instr=section)
 {
    syntax = ("section %f %f",NN,GLB);
    assembler = {
    };
 }


define (assembler) {
    packet_grouping = (("[","]"),"\n");
    comments = ";";
    line_separators = "\n";



    instrtables = (prefix,serial_one_word,serial_two_word,serial_three_word,serial_four_word);

    queue_size = 1;
    line_comments=";";
    explicit_regs = true;
    symbol_chars = ("+","(",")","#","-","<",">");





   define(parm=InstrCnt) {
 type = integer;
 value = 0;
    }


   define(parm=CndExec) {
 type = integer;
 value = 0;
    }
# 240 "/vobs/vb_dp_arch/ADLsim/general/assembler_support.adl"
   define(parm=num_of_vles) {
 type = integer;
 value = 0;
    }

   define(parm=vles_from_last_endloop) {
 type = integer;
 value = 0;
    }
# 410 "/vobs/vb_dp_arch/ADLsim/general/assembler_support.adl"
  }



  post_packet_asm = func(InstrBundle b) {

         InstrCnt = 0;
         vles_from_last_endloop++;
         num_of_vles++;


  SG = 1;
# 466 "/vobs/vb_dp_arch/ADLsim/general/assembler_support.adl"
  };


  post_asm = func(unsigned instr_width) {
    InstrCnt += 1;




  };




  define (instrfield = PR2) { width = 3; pseudo = true; assembler = true; value = 0; }

  pre_asm = func() {
    if (CndExec) {
      PR = CndExec;
      CndExec = 0;
    }
  };



  define (instr = IFP0) {
    syntax = ("ifp0");
    assembler = { CndExec = 1;};
  }
  define (instr = IFP1) {
    syntax = ("ifp1");
    assembler = { CndExec = 2;};
  }
  define (instr = IFP2) {
    syntax = ("ifp2");
    assembler = { CndExec = 3;};
  }
  define (instr = IFP3) {
    syntax = ("ifp3");
    assembler = { CndExec = 4;};
  }
  define (instr = IFP4) {
    syntax = ("ifp4");
    assembler = { CndExec = 5;};
  }
  define (instr = IFP5) {
    syntax = ("ifp5");
    assembler = { CndExec = 6;};
  }
# 37 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2



# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 1
define (instr=sub_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=SUB_Da_Da_Dn)
   {




syntax = ("sub %f,%f",jj,FFF);
   }

   define (instr=SUB_Da_Db_Dn) {

# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUB_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Subtract""";
attrs = (DARIT,V2);
# 21 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2







      alias = sub_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sub %f,%f,%f",Da,Db,Dn);

   }

   define (instr=SUB_Db_Da_Dn)
   {



      blk = dalu;

   }


   action = {




      bits<41> sum = (sbits<41>)D(Src1) - (sbits<41>)D(Src2);
      overflow40(sum);
      Borrow(sum, D(Src2), D(Src1) );
      saturation32(sum,Res);



   };

}




define (instr=ADD_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=ADD_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADD_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Add""";
attrs = (DARIT,V2);
# 75 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = ADD_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "add %f,%f,%f",Da,Db,Dn);

   }

action=
{



      bits <41> sum = (sbits<41>)D(Src1) + (sbits<41>)D(Src2);
      overflow40 ( sum );
      bits<40> Gcarry = Carry( D(Src1), D(Src2), 0);
      SR.C = Gcarry(40 -1);
      saturation32( sum, Res );



};
}





define (instr=ADD_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=ADD_Da_Da_Dn)
{

  alias = ADD_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}


action=
{




    info(4,"Src1= "<< Src1, ", Src2= "<< Src2, ", Res= "<< Res);
   bits <41> sum = (sbits<41>)D(Src1) + (sbits<41>)D(Src2);
   overflow40 ( sum );
   bits<40> Gcarry = Carry( D(Src1), D(Src2), 0);
   SR.C = Gcarry(40 -1);
   saturation32( sum, Res );




};

}



define (instr=neg_family)
{
   fields = (OPCD, Src1, Res);
   blk = dalu;

define (instr=NEG_Dn)
{




}

define (instr=NEG_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NEG_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Negate""";
attrs = (DARIT,V2);
# 159 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = neg_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "neg %f,%f",Da,Dn);

   }

action=
{
# 175 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <41> sum = (sbits<41>)(0x0) - (sbits<41>)D(Src1);
   overflow40 ( sum );
   saturation32( sum, Res );



};

}




define (instr=sat_l_family)
{
   fields = (OPCD, Src1, Res);
   blk = dalu;

define (instr=SAT_L_Dn)
{





}


define (instr=SAT_L_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SAT_L_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Saturate 32Bit Data Register""";
attrs = (DARIT,V2);
# 206 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = sat_l_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "sat.l %f,%f",Da,Dn);

   }

action=
{
# 237 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits<40> pos_val = 0x007fffffffull;
   bits<40> neg_val = 0xff80000000ull;
   bool sat = false;
   if ( (D(Src1).signedGT(pos_val) )) {
      sat = true;
      D(Res) = pos_val;
   }
   else {
      if ( (D(Src1)).signedLT(neg_val) ) {
  sat = true;
  D(Res) = neg_val;
      }
   }

   if (sat) {
      exception_overflow = true;
      EMR.DOVF = 1;
   }




};

}

define (instr=abs_family)
{
   fields = (OPCD, Src1, Res);
   blk = dalu;





   define (instr=ABS_Dn)
   {





   }

   define (instr=ABS_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ABS_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Absolute Value""";
attrs = (DARIT,V2);
# 284 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = abs_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "abs %f,%f",Da,Dn);

   }

action=
{
# 301 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits<41> tmp;
   tmp = signExtend(D(Src1),41);
   if (tmp(39)==1) {
      tmp = ((bits<41>)0x0)-(tmp);
      set_OVF(tmp);
   }
   D(Res) = (ll_saturate(tmp,0))(39,0);







};

}


define (instr=INC_F_Dn_family)
{

  fields = (OPCD, Src1,Res);



  blk = dalu;


define (instr=INC_F_Dn)
{

  alias = INC_F_Dn_family(OPCD(OPCD),Src1(FFF), Res(FFF));
}
define (instr=INCF_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/INCF_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Increments the value in the high portion of the destination data register""";
attrs = (DARIT,V2);
# 338 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = INC_F_Dn_family(OPCD(OPCD),Src1(Da), Res(Dn));
  syntax = ( "incf %f,%f",Da,Dn);
}


action=
{




    bits <41> sum = (sbits<41>)D(Src1) + (sbits<41>)0x0000010000ull;
    overflow40 ( sum );
    bits<40> Gcarry = Carry( D(Src1),(sbits<41>)0x0000010000ull , 0);
    SR.C = Gcarry(40 -1);
    saturation32( sum, Res );




};

}


define (instr=TSTGE_Dn_family)
{

  fields = (OPCD, Src1);



  blk = dalu;


define (instr=TSTGE_Dn)
{

  alias = TSTGE_Dn_family(OPCD(OPCD), Src1(FFF));
}


action=
{






   if ( (D(Src1)(40 -1,40 -1))==0 ) {
      SR.T=1;
   } else {
      SR.T=0;
   }

};

}


define (instr=TSTEQ_Dn_family)
{

  fields = (OPCD, Src1);



  blk = dalu;

define (instr=TSTEQ_Dn)
{

  alias = TSTEQ_Dn_family(OPCD(OPCD), Src1(FFF));
}

action=
{




   if (D(Src1)==0) {
      SR.T=1;
   } else {
      SR.T=0;
   }

};

}


define (instr=TSTGT_Dn_family)
{

  fields = (OPCD, Src1);



  blk = dalu;


define (instr=TSTGT_Dn)
{

  alias = TSTGT_Dn_family(OPCD(OPCD), Src1(FFF));
}


action=
{






   if ( D(Src1).signedGT(0) ) {
      SR.T=1;
   } else {
      SR.T=0;
   }
};

}


define (instr=TSTEQ_L_Dn_family)
{

  fields = (OPCD, Src1);



  blk = dalu;


define (instr=TSTEQ_L_Dn)
{

  alias = TSTEQ_L_Dn_family(OPCD(OPCD), Src1(FFF));
}


action=
{







   if ( D(Src1)(31,0)==0 ) {
      SR.T = 1;
   } else {
      SR.T = 0;
   }

};

}


define (instr=DECGE_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=DECGE_Dn)
{

  alias = DECGE_Dn_family(OPCD(OPCD), Src1(FFF), Res(FFF));
}


action=
{






   bits <40> imm = 0x0000000001ull;
   bits <41> sub = (sbits<41>)D(Src1) - (sbits<41>)imm;
   overflow40 ( sub );
   Borrow(sub, imm, D(Src1) );
   D(Res) = sub(39,0);



   SR.T = (sub.signedGE(0)) ? 1 : 0;
};

}


define (instr=DECEQ_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=DECEQ_Dn)
{

  alias = DECEQ_Dn_family(OPCD(OPCD), Src1(FFF), Res(FFF));
}


action=
{




   bits <40> imm = 0x0000000001ull;
   bits <41> sub = (sbits<41>)D(Src1) - (sbits<41>)imm;
   overflow40 ( sub );
   Borrow(sub, imm, D(Src1) );
   D(Res) = sub(39,0);



   SR.T = (sub==0) ? 1 : 0;
};

}

define (instr=MIN2_Dg_Dh_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MIN2_Dg_Dh)
{


  alias = MIN2_Dg_Dh_family(OPCD(OPCD), Src1(GG.Dg), Src2(GG.Dh), Res(GG.Dh));


}

define (instr=MIN2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MIN2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer Two 16Bit Maximum Signed Values""";
attrs = (DARIT,V3);
# 600 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = MIN2_Dg_Dh_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "min2 %f,%f,%f",Da,Db,Dn);

   }
action=
{





   if (SR.W20 == 0) {
  if (sc5 == sc3400)
  {
    if ( (D(Src1).H).signedLT(D(Src2).H) ) {
     D(Res).H = D(Src1).H;
     D(Res).E = D(Src1).E;
    }
    if ( (D(Src1).L).signedLT(D(Src2).L) )
     D(Res).L = D(Src1).L;
  }
  else {
     if ( (D(Src1).H).signedLT(D(Src2).H) ) {
     D(Res).WH = D(Src1).WH;
    }
    if ( (D(Src1).L).signedLT(D(Src2).L) )
     D(Res).WL = D(Src1).WL;
  }
   } else {
    if ( (D(Src1).WH).signedLT(D(Src2).WH) ) {
     D(Res).WH = D(Src1).WH;
    }
    if ( (D(Src1).WL).signedLT(D(Src2).WL) )
     D(Res).WL = D(Src1).WL;
   }




};

}



define (instr=adc_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;





   define (instr=ADC_Dc_Dd)
   {

   }

   define (instr=ADC_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADC_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Add Long With Carry""";
attrs = (DARIT,V2);
# 663 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = adc_family(OPCD(OPCD), Src1(Da),Src2(Db),Res(Dn));
  syntax = ( "adc %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 681 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <41> sum = (sbits<41>)D(Src1) + (sbits<41>)D(Src2) + zeroExtend(SR.C,41);
   overflow40 (sum);
   bits<40> Gcarry = Carry(D(Src1),D(Src2),SR.C);
   SR.C = Gcarry(40 -1);
   D(Res) = sum(39,0);



};
}



define (instr=sbc_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=SBC_Dc_Dd)
{





}

define (instr=SBC_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SBC_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Subtract With Borrow""";
attrs = (DARIT,V2);
# 714 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = sbc_family(OPCD(OPCD), Src1(Da), Src2(Db),Res(Dn));
  syntax = ( "sbc %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 737 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   sbits<41> dval_pcarry = (sbits<41>)D(Src1)+(sbits<41>)1;
   sbits<41> subtract = (SR.C==0)? (sbits<41>)D(Src1) : dval_pcarry;
   sbits <41> sub = (sbits<41>)(D(Src2)) - (sbits<41>)subtract;
   info (1,"sub=" << hex << sub);
   overflow40 ( sub );
   Borrow(sub,D(Src1) , D(Src2) );
   D(Res) = sub(39,0);





};

}


define (instr=max_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MAX_Dg_Dh)
{





}
define (instr=MAX_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAX_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer Maximum Signed Value""";
attrs = (DARIT,V2);
# 773 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = max_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "max %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 790 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   if ( (D(Src1)).signedGT( D(Src2) ) ) {
      D(Res) = D(Src1);
   } else {
      D(Res) = D(Src2);
   }



};

}

 define (instr=min_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MIN_Dg_Dh)
{





}

define (instr=MIN_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MIN_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer Minimum Signed Value""";
attrs = (DARIT,V2);
# 822 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = min_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "min %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 840 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   if ( (D(Src1)).signedLT(D(Src2)) ) {
      D(Res) = D(Src1);
   } else {
      D(Res) = D(Src2);
   }



};
}


define (instr=maxm_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MAXM_Dg_Dh)
{





}

define (instr=MAXM_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAXM_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer Maximum Absolute Value""";
attrs = (DARIT,V2);
# 872 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = maxm_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "maxm %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 892 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits<40> abs_dg = ABSd(D(Src1));
   bits<40> abs_dh = ABSd(D(Src2));
   if (abs_dg > abs_dh) {
      D(Res) = D(Src1);
   }
   else if (D(Src1) == (0-D(Src2))) {
      D(Res) = abs_dg;
   }



};
}


define (instr=MAX2_Dg_Dh_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MAX2_Dg_Dh)
{


  alias = MAX2_Dg_Dh_family(OPCD(OPCD), Src1(GG.Dg), Src2(GG.Dh), Res(GG.Dh));

}

define (instr=MAX2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAX2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer Two 16Bit Maximum Signed Values""";
attrs = (DARIT,V2);
# 928 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = MAX2_Dg_Dh_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "max2 %f,%f,%f",Da,Db,Dn);

   }

action=
{




   if (SR.W20 == 0) {
      if (sc5 == sc3400)
  {
    if ( (D(Src1).H).signedGT(D(Src2).H) ) {
     D(Res).H = D(Src1).H;
     D(Res).E = D(Src1).E;
    }
    if ( (D(Src1).L).signedGT(D(Src2).L) )
     D(Res).L = D(Src1).L;
  }
  else {
     if ( (D(Src1).H).signedGT(D(Src2).H) ) {
     D(Res).WH = D(Src1).WH;
    }
    if ( (D(Src1).L).signedGT(D(Src2).L) )
     D(Res).WL = D(Src1).WL;
  }
   } else {

    if ((D(Src1).WH).signedGT(D(Src2).WH)) {
     D(Res).WH = D(Src1).WH;
    }
    if ((D(Src1).WL).signedGT( D(Src2).WL) )
     D(Res).WL = D(Src1).WL;
   }



};

}


define (instr=AVGU4_Dg_Dh_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=AVGU4_Dg_Dh_Dn)
{



  alias = AVGU4_Dg_Dh_Dn_family(OPCD(OPCD),Src1(GG.Dg), Src2(GG.Dh), Res(FFF));

}
define (instr=AVGU4_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/AVGU4_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Four Byte Averages""";
attrs = (DARIT,V4);
# 994 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = AVGU4_Dg_Dh_Dn_family(OPCD(OPCD),Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "avgu4 %f,%f,%f",Da,Db,Dn);
}


action=
{




      bits<9> ll = ((bits<9>)D(Src2).LL + (bits<9>)D(Src1).LL + 1)>>1;
      bits<9> lh = ((bits<9>)D(Src2).LH + (bits<9>)D(Src1).LH + 1)>>1;
      bits<9> hl = ((bits<9>)D(Src2).HL + (bits<9>)D(Src1).HL + 1)>>1;
      bits<9> hh = ((bits<9>)D(Src2).HH + (bits<9>)D(Src1).HH + 1)>>1;
      D(Res).LL = ll;
      D(Res).LH = lh;
      D(Res).HL = hl;
      D(Res).HH = hh;





      D(Res).E = 0;
};

}

define (instr=adr_family)
{
   fields = (OPCD,Src1,Src2,Res);
   blk = dalu;




define (instr=ADR_Da_Dn)
{





}

 define (instr=ADR_Da_Db_Dn)
{





}

action=
{
# 1072 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits<42> sum = (sbits<42>)(D(Src2))+(sbits<42>)(D(Src1));
   bits<40> tmp = finish_rnd( sum );
   D(Res) = tmp;



};
}



define (instr=sbr_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=SBR_Da_Dn)
{





}

define (instr=SBR_Da_Db_Dn)
{

}

action=
{







   sbits<41> sub = (sbits<41>)(D(Src2))-(sbits<41>)(D(Src1));
   bits<40> tmp = round(sub);
   D(Res) = tmp;




};

}


define (instr=DIV_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=DIV_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DIV_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Divide Iteration using carry bits""";
attrs = (DARIT,V2);
# 1139 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = DIV_Da_Dn_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "div %f,%f",Da,Dn);

   }


action=
{




    bits <40> tmp;
    bits <40> op1 = (D(Src2) << 1 );
    bits <40> op2 = (D(Src1) & 0xFFFFFF0000ull);
    if (((D(Src2)^D(Src1)) >> 39 ) == 1) {
       tmp = op1 + (bits<40>)SR.C + op2;
    }
    else {
       tmp = op1 + (bits<40>)SR.C - op2;
    }
    if (tmp(39)==0) {

       SR.C = 1;
    }
    else {
       SR.C = 0;
    }
    if ((D(Src2)(39)^D(Src2)(38))==1) set_emr_dovf();
    D(Res) = tmp;



};

}



define (instr=subl_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=SUBL_Da_Dn)
{




}

define (instr=SUBL_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUBL_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Shift Left and Subtract""";
attrs = (DARIT,V2);
# 1201 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = subl_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "subl %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 1233 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
    sbits<64> tval1, tval2, result, mask, bit_40_not39, temp_res, mask_40;
    int is_ovf = 1;
    int save_ovf = 1;
    bool sat_flag=false;
    mask=0xFFFFFFFF;
    mask=(mask<<8)|0xFF;
    mask_40 = 0x80000000;
    mask_40=(mask_40<<8);

    tval1 = signExtend(D(Src1),64);
    tval2 = signExtend(D(Src2),64);
    result=(tval2 * 2);
    bit_40_not39 = 0;


    if((((result>>40)&0x1)!=0) && (((result>>39)&0x1)==0))
       bit_40_not39 = 1;

    set_OVF(result);

    if (((result>>39)&0x1)!=0) {
       result= (result | (~mask));
    } else {
       result = result& mask;
    }

    result = result-tval1;

    if(set_OVF(result))
       save_ovf = is_ovf = 2;
    Borrow(result, D(Src1), D(Src2)<<1);
# 1272 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
    temp_res = result;
    result = ll_saturate_mpy(result,0,is_ovf);

    if((bit_40_not39!=0) && (temp_res!= result))
    {
       if(((temp_res & mask_40)==0) && (is_ovf == 1))
       {
   is_ovf = 2;
       }
       result = temp_res|mask_40;
       sat_flag = true;
    }
    else
    {
       result = temp_res;
    }

    result = ll_saturate_mpy(result,0,is_ovf);

    if( (bit_40_not39!=0) && (sat_flag!=0) && (result == (temp_res | mask_40)))
    {
       result = temp_res;
       result = ll_saturate_mpy(result,0,is_ovf);
    }



    D(Res) = result;




};

}


define (instr=CMPEQ_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2);



  blk = dalu;

define (instr=CMPEQ_Da_Dn)
{

  alias = CMPEQ_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(FFF));
}

action=
{





   if ( D(Src1) == D(Src2)) { SR.T = 1; }
   else { SR.T = 0; }

};

}


define (instr=CMPEQ_L_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2);



  blk = dalu;


define (instr=CMPEQ_L_Da_Dn)
{

  alias = CMPEQ_L_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(FFF));
}


action=
{






   if ( concat(D(Src1).H, D(Src1).L) == concat(D(Src2).H, D(Src2).L) ) {
      SR.T=1;
   }
   else {
      SR.T=0;
   }
};

}


define (instr=CMPGT_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2);



  blk = dalu;


define (instr=CMPGT_Da_Dn)
{

  alias = CMPGT_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(FFF));
}


action=
{






   if ( D(Src2).signedGT( D(Src1) ) ) {
      SR.T = 1;
   }
   else {
      SR.T = 0;
   }
};

}


define (instr=CMPHI_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2);



  blk = dalu;


define (instr=CMPHI_Da_Dn)
{

  alias = CMPHI_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(FFF));
}


action=
{






   bits<33> src1 = zeroExtend(D(Src1)(31,0),40);
   bits<33> src2 = zeroExtend(D(Src2)(31,0),40);
   if ( src2.signedGT( src1) ) {
      SR.T = 1;
   }
   else {
      SR.T = 0;
   }
};

}


define (instr=ASR_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=ASR_Da_Dn)
{

  alias = ASR_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{






      sbits<40> tmp = Shift_Right_Dalu (D(Src1),1);
      saturation32( signExtend(tmp, 41), Res );



};

}


define (instr=RND_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=RND_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/RND_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Round""";
attrs = (DARIT,V2);
# 1497 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = RND_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "rnd %f,%f",Da,Dn);

   }


action=
{




   bits<40> tmp = round( D(Src1) );
   D(Res) = tmp;




};

}


define (instr=TFR_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=TFR_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFR_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer Data Register or Immediate to a Data Register""";
attrs = (DARIT,V2);
# 1537 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = TFR_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "tfr %f,%f",Da,Dn);

   }


action=
{




    D(Res) = D(Src1);



};

}


define (instr=SAT_F_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=SAT_F_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SAT_F_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Saturate Fractional Data Register""";
attrs = (DARIT,V2);
# 1575 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SAT_F_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "sat.f %f,%f",Da,Dn);

   }


action=
{




   bits<40> pos_val = 0x007fffffffull;
   bits<40> neg_val = 0xff80000000ull;
   if ( D(Src1).signedGT(pos_val) ) {
      D(Res) = 0x007fff0000ull;
      set_emr_dovf();
   }
   else if ( D(Src1).signedLT(neg_val) ){
      D(Res) = neg_val;
      set_emr_dovf();

   }
   else {
      D(Res) = D(Src1) & 0xFFFFFF0000ull;
   }




};

}


define (instr=add_imm_family)
{
   fields = (OPCD,immu,Src1,Res);
   blk = dalu;




define (instr=ADD__u5_Dn)
{




   alias = add_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
   syntax = ( "add #%f,%f",u5,FFF);
}

define (instr=INC_V1_Dn)
{




   alias = add_imm_family(OPCD(OPCD), immu(0x1), Src1(FFF), Res(FFF) );
   syntax = ( "inc %f",FFF);
}

define (instr=ADD__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADD__u5_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Add""";
attrs = (DARIT,V2);
# 1645 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2





   alias = add_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "add #%f,%f,%f",u5,Da,Dn);

   }

action=
{
# 1668 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <40> D_imm = zeroExtend(immu,40);
   bits <41> sum = (sbits<41>)D_imm + (sbits<41>)D(Src1);
   overflow40 ( sum );
   bits<40> Gcarry = Carry( D_imm, D(Src1), 0);
   SR.C = Gcarry(40 -1);
   saturation32( sum, Res );



};

}


define (instr=sub__u5_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




define (instr=SUB__u5_Dn)
{




   alias = sub__u5_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
   syntax = ( "sub #%f,%f",u5,FFF);
}

define (instr=SUB__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUB__u5_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Subtract""";
attrs = (DARIT,V2);
# 1703 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2





   alias = sub__u5_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "sub #%f,%f,%f",u5,Da,Dn);

   }

action=
{
# 1725 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <40> imm = zeroExtend(immu,40);
   bits <41> sum = (sbits<41>)D(Src1) - (sbits<41>)imm;
   overflow40 ( sum );
   Borrow( sum,imm,D(Src1) );
   saturation32( sum, Res );



};
}


define (instr=TFR_W_Da_L_Dn_L_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=TFR_W_Da_L_Dn_L)
{

  alias = TFR_W_Da_L_Dn_L_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{




        D(Res).WL = D(Src1).WL;



};

}


define (instr=TFR_W_Da_L_Dn_H_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=TFR_W_Da_L_Dn_H)
{

  alias = TFR_W_Da_L_Dn_H_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{



        D(Res).WH = D(Src1).WL;



};

}


define (instr=TFR_W_Da_H_Dn_L_family)
{

  fields = (OPCD, Src1,Res);



  blk = dalu;


define (instr=TFR_W_Da_H_Dn_L)
{

  alias = TFR_W_Da_H_Dn_L_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{



        D(Res).WL = D(Src1).WH;




};

}


define (instr=TFR_W_Da_H_Dn_H_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=TFR_W_Da_H_Dn_H)
{

  alias = TFR_W_Da_H_Dn_H_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{



        D(Res).WH = D(Src1).WH;



};

}


define (instr=PACK_2W_Dj_Dk_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=PACK_2W_Dj_Dk_Dn)
{

  alias = PACK_2W_Dj_Dk_Dn_family(OPCD(OPCD), Src1(KKK.Dj), Src2(KKK.Dk), Res(FFF));
}


action=
{






   D(Res).WL = signExtend(D(Src1).L,20);
   D(Res).WH = signExtend(D(Src2).L,20);
};

}


define (instr=PACK_2F_Dj_Dk_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=PACK_2F_Dj_Dk_Dn)
{

  alias = PACK_2F_Dj_Dk_Dn_family(OPCD(OPCD),Src1(KKK.Dj), Src2(KKK.Dk), Res(FFF));
}


action=
{



   D(Res).WL = signExtend(D(Src1).H,20);
   D(Res).WH = signExtend(D(Src2).H,20);



};

}


define (instr=DIVP0_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=DIVP0_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DIVP0_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Parallel Divide Iteration, with Bit GCR.AS0""";
attrs = (DARIT,V6);
# 1940 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = DIVP0_Da_Dn_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "divp0 %f,%f",Da,Dn);

   }


action=
{




    bits <40> tmp;
    bits <40> op1 = (D(Src2) << 1 );
    bits <40> op2 = (D(Src1) & 0xFFFFFF0000ull);
    if (((D(Src2)^D(Src1)) >> 39 ) == 1) {
       tmp = op1 + (bits<40>)GCR.AS0 + op2;
    }
    else {
       tmp = op1 + (bits<40>)GCR.AS0 - op2;
    }

    if ((tmp >> 39) == 0) {
       GCR.AS0 = 1;
    } else {
       GCR.AS0 = 0;
    }
    if ((D(Src2)(39)^D(Src2)(38))==1) set_emr_dovf();
    D(Res) = tmp;




};

}


define (instr=DIVP1_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=DIVP1_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DIVP1_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Parallel Divide Iteration, with Bit GCR.AS1""";
attrs = (DARIT,V6);
# 1995 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = DIVP1_Da_Dn_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "divp1 %f,%f",Da,Dn);

   }


action=
{




   bits <40> tmp;
    bits <40> op1 = (D(Src2) << 1 );
    bits <40> op2 = (D(Src1) & 0xFFFFFF0000ull);
    if (((D(Src2)^D(Src1)) >> 39 ) == 1) {
       tmp = op1 + (bits<40>)GCR.AS1 + op2;
    }
    else {
       tmp = op1 + (bits<40>)GCR.AS1 - op2;
    }

    if ((tmp >> 39) == 0) {
       GCR.AS1 = 1;
    } else {
       GCR.AS1 = 0;
    }
    if ((D(Src2)(39)^D(Src2)(38))==1) set_emr_dovf();
    D(Res) = tmp;






};

}


define (instr=DIVP2_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=DIVP2_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DIVP2_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Parallel Divide Iteration, with Bit GCR.AS2""";
attrs = (DARIT,V6);
# 2052 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = DIVP2_Da_Dn_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "divp2 %f,%f",Da,Dn);

   }


action=
{




   bits <40> tmp;
    bits <40> op1 = (D(Src2) << 1 );
    bits <40> op2 = (D(Src1) & 0xFFFFFF0000ull);
    if (((D(Src2)^D(Src1)) >> 39 ) == 1) {
       tmp = op1 + (bits<40>)GCR.AS2 + op2;
    }
    else {
       tmp = op1 + (bits<40>)GCR.AS2 - op2;
    }

    if ((tmp >> 39) == 0) {
       GCR.AS2 = 1;
    } else {
       GCR.AS2 = 0;
    }
    if ((D(Src2)(39)^D(Src2)(38))==1) set_emr_dovf();
    D(Res) = tmp;






};

}


define (instr=DIVP3_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=DIVP3_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DIVP3_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Parallel Divide Iteration, with Bit GCR.AS3""";
attrs = (DARIT,V6);
# 2109 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = DIVP3_Da_Dn_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "divp3 %f,%f",Da,Dn);

   }


action=
{




   bits <40> tmp;
    bits <40> op1 = (D(Src2) << 1 );
    bits <40> op2 = (D(Src1) & 0xFFFFFF0000ull);
    if (((D(Src2)^D(Src1)) >> 39 ) == 1) {
       tmp = op1 + (bits<40>)GCR.AS3 + op2;
    }
    else {
       tmp = op1 + (bits<40>)GCR.AS3 - op2;
    }

    if ((tmp >> 39) == 0) {
       GCR.AS3 = 1;
    } else {
       GCR.AS3 = 0;
    }
    if ((D(Src2)(39)^D(Src2)(38))==1) set_emr_dovf();
    D(Res) = tmp;






};

}


define (instr=ASR2_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=ASR2_Da_Dn)
{

  alias = ASR2_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{




    sbits<21> extval;
    if (SR.W20==0) {
       extval = signExtend(D(Src1).H,21);
       extval = extval>>1;
       D(Res).H = extval(15,0);
       extval = signExtend(D(Src1).L,21);
       extval = extval>>1;
       D(Res).L = extval(15,0);
    } else {
       extval = signExtend(D(Src1).WH,21);
       extval = extval>>1;
       D(Res).WH = extval(19,0);
       extval = signExtend(D(Src1).WL,21);
       extval = extval>>1;
       D(Res).WL = extval(19,0);
    }




    if (SR.W20==0) {
       D(Res).E = 0;
    }
};

}


define (instr=SATU2_B_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=SATU2_B_Da_Dn)
{

  alias = SATU2_B_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{




   bits<16> pos_val = 0x00ff;
   bits<16> neg_val = 0x0000;
   bool sat = false;
   if ( (D(Src1).L).signedGT(pos_val) ) {
      sat = true;
      D(Res).L = pos_val;
   }
   else {
      if ( (D(Src1).L).signedLT(neg_val) ) {
  sat = true;
  D(Res).L = neg_val;
      }
      else {
  D(Res).L = D(Src1).L;
      }
   }
   if ( (D(Src1).H).signedGT(pos_val) ) {
      sat = true;
      D(Res).H = pos_val;
   }
   else {
      if ( (D(Src1).H).signedLT(neg_val) ) {
  sat = true;
  D(Res).H = neg_val;
      }
      else {
  D(Res).H = D(Src1).H;
      }
   }
   if (sat) {
      EMR_LOW = true;
      EMR.DOVF = 1;
   }




   D(Res).E = 0;

};

}


define (instr=CMPEQ_W__u5_Dn_family)
{

  fields = (OPCD, immu, Src1);



  blk = dalu;


define (instr=CMPEQ_W__u5_Dn)
{

  alias = CMPEQ_W__u5_Dn_family(OPCD(OPCD), immu(u5), Src1(FFF));
}


action=
{






       if ( D(Src1) == zeroExtend(immu, 40) ) {
   SR.T=1;
       }
       else {
   SR.T=0;
       }
};

}


define (instr=CMPGT_W__u5_Dn_family)
{

  fields = (OPCD, immu, Src1);



  blk = dalu;


define (instr=CMPGT_W__u5_Dn)
{

  alias = CMPGT_W__u5_Dn_family(OPCD(OPCD), immu(u5),Src1(FFF));
}


action=
{




    bits<40> src = zeroExtend(immu,40);
    if ( D(Src1).signedGT( src ) ) {
       SR.T = 1;
    }
    else {
       SR.T = 0;
    }

};

}



define (instr=add2_family)
{
   fields = (OPCD,Src1,Src2,Res);
   blk = dalu;




define (instr=ADD2_Da_Dn)
{

}

 define (instr=ADD2_Da_Db_Dn)
{

}

action=
{
# 2374 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <21> sumh = (bits<21>)D(Src2).WH + (bits<21>)D(Src1).WH;
   bits <21> suml = (bits<21>)D(Src2).WL + (bits<21>)D(Src1).WL;
   D(Res).WH = sumh(19,0);
   D(Res).WL = suml(19,0);




};

}


define (instr=sub2_family)
{
   fields = (OPCD,Src1,Src2,Res);
   blk = dalu;




define (instr=SUB2_Da_Dn)
{

}

 define (instr=SUB2_Da_Db_Dn)
{

}

action=
{
# 2417 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
    sbits<21> subh = (sbits<21>)D(Src2).WH - (sbits<21>)D(Src1).WH;
    sbits<21> subl = (sbits<21>)D(Src2).WL - (sbits<21>)D(Src1).WL;
    D(Res).WH = subh(19,0);
    D(Res).WL = subl(19,0);




};

}


define (instr=TFRT_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=TFRT_Da_Dn)
{

  alias = TFRT_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{






      if (SR.T==1) {
  D(Res) = D(Src1);



      } else {
  bits<40> tmp = D(Src1);
  tmp = SR.SM;




      }
};

}


define (instr=TFRF_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;

define (instr=TFRF_Da_Dn)
{

  alias = TFRF_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{




    if (SR.T==0) {
       D(Res) = D(Src1);



    } else {
       bits<40> tmp = D(Src1);
       tmp = SR.SM;




    }

};

}


define (instr=iadd_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=IADD_Da_Dn)
{

}

 define (instr=IADD_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IADD_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Addition Not Affected by Saturation """;
attrs = (DARIT,V2);
# 2530 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = iadd_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "iadd %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 2547 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <41> sum = (sbits<41>)D(Src1) + (sbits<41>)D(Src2);
   overflow40 ( sum );
   D(Res) = sum(39,0);
   bits<40> Gcarry = Carry( D(Src1), D(Src2), 0);
   SR.C = Gcarry(40 -1);



};

}


define (instr=isub_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=ISUB_Da_Dn)
{

}

 define (instr=ISUB_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISUB_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Subtraction Not Affected by Saturation""";
attrs = (DARIT,V3);
# 2576 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = isub_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "isub %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 2593 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <41> sub = (sbits<41>)D(Src2) - (sbits<41>)D(Src1);
   overflow40 ( sub );
   D(Res) = sub(39,0);
   Borrow(sub, D(Src1), D(Src2) );



};
}


define (instr=max2vit_family1)
{

   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=MAX2VIT_D4_D2)
   {




   }
   define (instr=MAX2VIT_D12_D2)
   {

   }
   define (instr=MAX2VIT_D4_D10)
   {

   }
   define (instr=MAX2VIT_D12_D10)
   {

   }

   action =
   {
# 2643 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   if ( (D(Src1).H).signedGT(D(Src2).H)) {
      D(Res).WH = D(Src1).WH;
      SR.VF1 = 0;
   }
   else {
      SR.VF1 = 1;
   }
   if ( (D(Src1).L).signedGT( D(Src2).L) ) {
      D(Res).WL = D(Src1).WL;
      SR.VF0 = 0;
   }
   else {
      SR.VF0 = 1;
   }



};

}


define (instr=max2vit_family2)
{

   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=MAX2VIT_D0_D6)
   {




   }
# 2695 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   action =
   {
# 2705 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   if ( (D(Src1).H).signedGT(D(Src2).H)) {
      D(Res).WH = D(Src1).WH;
      SR.VF3 = 0;
   }
   else {
      SR.VF3 = 1;
   }
   if ( (D(Src1).L).signedGT( D(Src2).L) ) {
      D(Res).WL = D(Src1).WL;
      SR.VF2 = 0;
   }
   else {
      SR.VF2 = 1;
   }



};

}



define (instr=SAD4_Dg_Dh_Dn_family)
{

  fields = (OPCD, Src1, Src2, Src3, Res);



  blk = dalu;


define (instr=SAD4_Dg_Dh_Dn)
{


  alias = SAD4_Dg_Dh_Dn_family(OPCD(OPCD), Src1(GG.Dg), Src2(GG.Dh), Src3(FFF), Res(FFF));

}
define (instr=SAD4_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SAD4_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum of Absolute Byte Differences""";
attrs = (DSHFT,V4);
# 2748 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = SAD4_Dg_Dh_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Src3(Dn), Res(Dn));
  syntax = ( "sad4 %f,%f,%f",Da,Db,Dn);
}


action=
{




   bits <9> hh = (bits<9>)D(Src2).HH - (bits<9>)D(Src1).HH;
   bits <9> hl = (bits<9>)D(Src2).HL - (bits<9>)D(Src1).HL;
   bits <9> lh = (bits<9>)D(Src2).LH - (bits<9>)D(Src1).LH;
   bits <9> ll = (bits<9>)D(Src2).LL - (bits<9>)D(Src1).LL;
   hh = ABSbyte(hh);
   hl = ABSbyte(hl);
   lh = ABSbyte(lh);
   ll = ABSbyte(ll);
   bits<10> tmp = lh + ll;
   bits<10> tmp2 = hh + hl;
   bits<17> res = (bits<17>)D(Src3).L + (bits<17>)tmp + (bits<17>)tmp2;
   D(Res) = zeroExtend( res(15,0), 40);



};

}


define (instr=SATU20_B_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=SATU20_B_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SATU20_B_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x20) Unsigned Saturation of Two 20-Bit Values""";
attrs = (DARIT,V6D);
# 2792 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SATU20_B_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "satu20.b %f,%f",Da,Dn);

   }


action=
{




    bits<20> pos_val = 0x000ff;
    bits<20> neg_val = 0x00000;
    bool sat = false;
    if ( (D(Src1).WL).signedGT(pos_val) ) {
       sat = true;
       D(Res).WL = pos_val;
    }
    else {
       if ( (D(Src1).WL).signedLT(neg_val) ) {
   sat = true;
   D(Res).WL = neg_val;
       }
       else {
   D(Res).WL = D(Src1).WL;
       }
    }
    if ( (D(Src1).WH).signedGT(pos_val) ) {
       sat = true;
       D(Res).WH = pos_val;
    }
    else {
       if ( (D(Src1).WH).signedLT(neg_val) ) {
   sat = true;
   D(Res).WH = neg_val;
       }
       else {
   D(Res).WH = D(Src1).WH;
       }
    }
    if (sat) {
       EMR_LOW = true;
       EMR.DOVF = 1;
    }




};

}



define (instr=iadd_imm_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




define (instr=IADD__u5_Dn)
{

   alias = iadd_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
   syntax = ( "iadd #%f,%f",u5,FFF);
}

define (instr=IADD__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IADD__u5_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Addition Not Affected by Saturation """;
attrs = (DARIT,V3);
# 2869 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2





   alias = iadd_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "iadd #%f,%f,%f",u5,Da,Dn);

   }

action=
{
# 2894 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <40> D_imm = zeroExtend(immu,40);
   bits <41> sum = (sbits<41>)D_imm + (sbits<41>)D(Src1);
   overflow40 ( sum );
   D(Res) = sum(39,0);
   bits<40> Gcarry = Carry( D_imm, D(Src1), 0);
   SR.C = Gcarry(40 -1);



};
}



define (instr=isub_imm_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




define (instr=ISUB__u5_Dn)
{

   alias = isub_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
   syntax = ( "isub #%f,%f",u5,FFF);
}

define (instr=ISUB__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISUB__u5_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Subtraction Not Affected by Saturation""";
attrs = (DARIT,V3);
# 2926 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2





   alias = isub_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "isub #%f,%f,%f",u5,Da,Dn);

   }

action=
{
# 2949 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <40> imm = zeroExtend(immu,40);
   bits <41> sub = (sbits<41>)D(Src1) - (sbits<41>)imm;
   overflow40 ( sub );
   D(Res) = sub(39,0);
   Borrow(sub,imm,D(Src1));



};
}



define (instr=add_wll_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=ADD_W_Da_L_Dn_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADD_W_Da_L_Dn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Add 16-Bit or 20-Bit Value""";
attrs = (DARIT,V5);
# 2973 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = add_wll_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "add.w %f.l,%f.l",Da,Dn);

   }

 define (instr=ADD_W_Da_L_Db_L_Dn_L)
{

}

action=
{




    if (SR.W20 == 0) {
       add_word(Res,Src1,Src2,true,false);
# 3001 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
    } else {
       sbits<40> resultL = (sbits<40>)D(Src2).WL + (sbits<40>)D(Src1).WL;
       sbits<40> resultH = (sbits<40>)D(Src2).WH;
       D(Res).WL = resultL;
       set_W20_OVF(resultL);
       set_W20_OVF(resultH);
    }
# 3023 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=add_wlh_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=ADD_W_Da_L_Dn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADD_W_Da_L_Dn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Add 16-Bit or 20-Bit Value""";
attrs = (DARIT,V5);
# 3039 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = add_wlh_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "add.w %f.l,%f.h",Da,Dn);

   }

define (instr=ADD_W_Da_L_Db_H_Dn_H)
{

}

action= {




    if (SR.W20 == 0) {
       add_word(Res,Src1,Src2,false,true);
# 3065 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
    } else {
       sbits<40> resultH = (sbits<40>)D(Src2).WH + (sbits<40>)D(Src1).WL;
       sbits<40> resultL = (sbits<40>)D(Src2).WL;
       D(Res).WH = resultH;
       set_W20_OVF(resultL);
       set_W20_OVF(resultH);
    }
# 3087 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};
}


define (instr=add_whl_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=ADD_W_Da_H_Dn_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADD_W_Da_H_Dn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Add 16-Bit or 20-Bit Value""";
attrs = (DARIT,V5);
# 3102 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = add_whl_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "add.w %f.h,%f.l",Da,Dn);

   }

define (instr=ADD_W_Da_H_Db_L_Dn_L)
{

}

action=
{




    if (SR.W20 == 0) {
       add_word(Res,Src1,Src2,true,true);
# 3129 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
    } else {
       sbits<40> resultL = (sbits<40>)D(Src2).WL + (sbits<40>)D(Src1).WH;
       sbits<40> resultH = (sbits<40>)D(Src2).WH;
       D(Res).WL = resultL;
       set_W20_OVF(resultL);
       set_W20_OVF(resultH);


    }
# 3153 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};
}


define (instr=add_whh_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=ADD_W_Da_H_Dn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADD_W_Da_H_Dn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Add 16-Bit or 20-Bit Value""";
attrs = (DARIT,V5);
# 3168 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2

alias = add_whh_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "add.w %f.h,%f.h",Da,Dn);

   }


 define (instr=ADD_W_Da_H_Db_H_Dn_H)
{

}

action=
{




    if (SR.W20 == 0) {
       add_word(Res,Src1,Src2,false,false);
    } else {
       sbits<40> resultH = (sbits<40>)D(Src2).WH + (sbits<40>)D(Src1).WH;
       sbits<40> resultL = (sbits<40>)D(Src2).WL;
       D(Res).WH = resultH;
       set_W20_OVF(resultL);
       set_W20_OVF(resultH);
    }





};

}


define (instr=SUB_W_Da_L_Dn_L_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SUB_W_Da_L_Dn_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUB_W_Da_L_Dn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Subtract 16-Bit or 20-Bit Value""";
attrs = (DARIT,V5);
# 3218 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SUB_W_Da_L_Dn_L_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "sub.w %f.l,%f.l",Da,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bool is_saturate = false;
       bits <17> sub = (sbits<17>)D(Src2).L - (sbits<17>)D(Src1).L;
       bits <16> temp = saturation16_noexception( signExtend(sub,40) );
       if (temp!=sub(15,0)) { is_saturate = true; }
       D(Res).L = temp;
       bits<20> result2 = 0x0f0000 + D(Src2).H;
       bits<20> result1 = signExtend(sub,20);
       D(Res).E = extension_update_sub(D(Src2).E, D(Src1).L, D(Src2).L, D(Src1).H, D(Src2).H,result1,result2, true,is_saturate);
    } else {
       sbits<40> resultL = (sbits<40>)D(Src2).WL - (sbits<40>)D(Src1).WL;
       sbits<40> resultH = (sbits<40>)D(Src2).WH;
       D(Res).WL = resultL;
       set_W20_OVF(resultL);
       set_W20_OVF(resultH);
    }






};

}


define (instr=SUB_W_Da_L_Dn_H_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SUB_W_Da_L_Dn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUB_W_Da_L_Dn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Subtract 16-Bit or 20-Bit Value""";
attrs = (DARIT,V5);
# 3274 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SUB_W_Da_L_Dn_H_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "sub.w %f.l,%f.h",Da,Dn);

   }


action=
{





     if (SR.W20 == 0) {
       bool is_saturate = false;
       bits <17> sub = (sbits<17>)D(Src2).H - (sbits<17>)D(Src1).L;
       bits <16> temp = saturation16_noexception( signExtend(sub,40) );
       if (temp!=sub(15,0)) { is_saturate = true; }
       D(Res).H = temp;
       bits<20> result2 = 0x0f0000 + D(Src2).L;
       bits<20> result1 = signExtend(sub,20);
       D(Res).E = extension_update_sub(D(Src2).E, D(Src1).H, D(Src2).L, D(Src1).L, D(Src2).H,result2,result1,false,is_saturate);
    } else {
       sbits<40> resultH = (sbits<40>)D(Src2).WH - (sbits<40>)D(Src1).WL;
       sbits<40> resultL = (sbits<40>)D(Src2).WL;
       D(Res).WH = resultH;
       set_W20_OVF(resultL);
       set_W20_OVF(resultH);
    }
# 3322 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=SUB_W_Da_H_Dn_L_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SUB_W_Da_H_Dn_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUB_W_Da_H_Dn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Subtract 16-Bit or 20-Bit Value""";
attrs = (DARIT,V5);
# 3340 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SUB_W_Da_H_Dn_L_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "sub.w %f.h,%f.l",Da,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bool is_saturate = false;
       bits <17> sub = (sbits<17>)D(Src2).L - (sbits<17>)D(Src1).H;
       bits <16> temp = saturation16_noexception( signExtend(sub,40) );
       if (temp!=sub(15,0)) { is_saturate = true; }
       D(Res).L = temp;
       bits<20> result2 = 0x0f0000 + D(Src2).H;
       bits<20> result1 = signExtend(sub,20);
       D(Res).E = extension_update_sub(D(Src2).E, D(Src1).H, D(Src2).L, D(Src1).L, D(Src2).H,result1,result2, true,is_saturate);
    } else {
       sbits<40> resultL = (sbits<40>)D(Src2).WL - (sbits<40>)D(Src1).WH;
       sbits<40> resultH = (sbits<40>)D(Src2).WH;
       D(Res).WL = resultL;
       set_W20_OVF(resultL);
       set_W20_OVF(resultH);


    }
# 3390 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=SUB_W_Da_H_Dn_H_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SUB_W_Da_H_Dn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUB_W_Da_H_Dn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Subtract 16-Bit or 20-Bit Value""";
attrs = (DARIT,V5);
# 3408 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SUB_W_Da_H_Dn_H_family(OPCD(OPCD), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "sub.w %f.h,%f.h",Da,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bool is_saturate = false;
       bits <17> sub = (sbits<17>)D(Src2).H - (sbits<17>)D(Src1).H;
       bits <16> temp = saturation16_noexception( signExtend(sub,40) );
       if (temp!=sub(15,0)) { is_saturate = true; }
       D(Res).H = temp;
       bits<20> result2 = 0x0f0000 + D(Src2).L;
       bits<20> result1 = signExtend(sub,20);
       D(Res).E = extension_update_sub(D(Src2).E, D(Src1).L, D(Src2).L, D(Src1).H, D(Src2).H,result2,result1,false,is_saturate);
    } else {
       sbits<40> resultH = (sbits<40>)D(Src2).WH - (sbits<40>)D(Src1).WH;
       sbits<40> resultL = (sbits<40>)D(Src2).WL;
       D(Res).WH = resultH;
       set_W20_OVF(resultL);
       set_W20_OVF(resultH);
    }
# 3456 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=VTRACE__m__n_Da_Dn_family)
{

  fields = (OPCD, immu, immu2, Src1, Src2, Res);



  blk = dalu;
  doc_title = "vtrace #m,#n,Da,Dn";


define (instr=VTRACE__0__2_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/VTRACE__0__2_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Viterbi Trace Back""";
attrs = (DARIT,V5);
# 3475 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = VTRACE__m__n_Da_Dn_family(OPCD(OPCD), immu(0), immu2(2),Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "vtrace #0,#2,%f,%f",Da,Dn);

   }

define (instr=VTRACE__0__3_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/VTRACE__0__3_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Viterbi Trace Back""";
attrs = (DARIT,V5);
# 3487 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = VTRACE__m__n_Da_Dn_family(OPCD(OPCD), immu(0), immu2(3), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "vtrace #0,#3,%f,%f",Da,Dn);

   }

define (instr=VTRACE__0__4_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/VTRACE__0__4_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Viterbi Trace Back""";
attrs = (DARIT,V5);
# 3499 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = VTRACE__m__n_Da_Dn_family(OPCD(OPCD), immu(0), immu2(4), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "vtrace #0,#4,%f,%f",Da,Dn);

   }

define (instr=VTRACE__1__4_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/VTRACE__1__4_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Viterbi Trace Back""";
attrs = (DARIT,V5);
# 3511 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = VTRACE__m__n_Da_Dn_family(OPCD(OPCD), immu(1), immu2(4), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "vtrace #1,#4,%f,%f",Da,Dn);

   }

define (instr=VTRACE__2__4_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/VTRACE__2__4_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Viterbi Trace Back""";
attrs = (DARIT,V5);
# 3523 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = VTRACE__m__n_Da_Dn_family(OPCD(OPCD), immu(2), immu2(4), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "vtrace #2,#4,%f,%f",Da,Dn);

   }

define (instr=VTRACE__3__4_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/VTRACE__3__4_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Viterbi Trace Back""";
attrs = (DARIT,V5);
# 3535 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = VTRACE__m__n_Da_Dn_family(OPCD(OPCD), immu(3), immu2(4), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "vtrace #3,#4,%f,%f",Da,Dn);

   }

define (instr=VTRACE__4__4_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/VTRACE__4__4_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Viterbi Trace Back""";
attrs = (DARIT,V5);
# 3547 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = VTRACE__m__n_Da_Dn_family(OPCD(OPCD), immu(4), immu2(4), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "vtrace #4,#4,%f,%f",Da,Dn);

   }

define (instr=VTRACE__5__4_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/VTRACE__5__4_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Viterbi Trace Back""";
attrs = (DARIT,V5);
# 3559 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = VTRACE__m__n_Da_Dn_family(OPCD(OPCD), immu(5), immu2(4), Src1(Da), Src2(Dn), Res(Dn));
  syntax = ( "vtrace #5,#4,%f,%f",Da,Dn);

   }




action=
{






   bits<31> tmp = (D(Src2)>>1)(30,0);
   bits<5> index = vtrace_index(D(Src2)(31,0),immu,immu2);
   D(Res) = concat( D(Src2).E, D(Src1)(index,index), tmp);



};

}


define (instr=VTRACE__0__3_Da_Dn_family)
{

  fields = (OPCD, immu, immu2, Src1, Src2, Res);



  blk = dalu;




action=
{






   bits<31> tmp = (D(Src2)>>1)(30,0);
   bits<5> index = vtrace_index(D(Src2)(31,0),immu,immu2);
   D(Res) = concat( D(Src2).E, D(Src1)(index,index), tmp);



};

}


define (instr=VTRACE__0__4_Da_Dn_family)
{

  fields = (OPCD, immu, immu2, Src1, Src2, Res);



  blk = dalu;



action=
{






   bits<31> tmp = (D(Src2)>>1)(30,0);
   bits<5> index = vtrace_index(D(Src2)(31,0),immu,immu2);
   D(Res) = concat( D(Src2).E, D(Src1)(index,index), tmp);




};

}


define (instr=VTRACE__1__4_Da_Dn_family)
{

  fields = (OPCD, immu, immu2, Src1, Src2, Res);



  blk = dalu;




action=
{






   bits<31> tmp = (D(Src2)>>1)(30,0);
   bits<5> index = vtrace_index(D(Src2)(31,0),immu,immu2);
   D(Res) = concat( D(Src2).E, D(Src1)(index,index), tmp);




};

}


define (instr=VTRACE__2__4_Da_Dn_family)
{

  fields = (OPCD, immu, immu2, Src1, Src2, Res);



  blk = dalu;




action=
{






   bits<31> tmp = (D(Src2)>>1)(30,0);
   bits<5> index = vtrace_index(D(Src2)(31,0),immu,immu2);
   D(Res) = concat( D(Src2).E, D(Src1)(index,index), tmp);




};

}


define (instr=VTRACE__3__4_Da_Dn_family)
{

  fields = (OPCD, immu, immu2, Src1, Src2, Res);



  blk = dalu;



action=
{






   bits<31> tmp = (D(Src2)>>1)(30,0);
   bits<5> index = vtrace_index(D(Src2)(31,0),immu,immu2);
   D(Res) = concat( D(Src2).E, D(Src1)(index,index), tmp);




};

}


define (instr=VTRACE__4__4_Da_Dn_family)
{

  fields = (OPCD, immu, immu2, Src1, Src2, Res);



  blk = dalu;



action=
{






   bits<31> tmp = (D(Src2)>>1)(30,0);
   bits<5> index = vtrace_index(D(Src2)(31,0),immu,immu2);
   D(Res) = concat( D(Src2).E, D(Src1)(index,index), tmp);




};

}


define (instr=VTRACE__5__4_Da_Dn_family)
{

  fields = (OPCD, immu, immu2, Src1, Src2, Res);



  blk = dalu;



action=
{




   bits<31> tmp = (D(Src2)>>1)(30,0);
   bits<5> index = vtrace_index(D(Src2)(31,0),immu,immu2);
   D(Res) = concat( D(Src2).E, D(Src1)(index,index), tmp);




};

}


define (instr=ABS2_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=ABS2_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ABS2_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Absolute Values of Two Words""";
attrs = (DARIT,V5);
# 3820 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = ABS2_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "abs2 %f,%f",Da,Dn);

   }


action=
{






    if (SR.W20==1) {
      D(Res).WH = ABS20(D(Src1).WH);
      D(Res).WL = ABS20(D(Src1).WL);
 } else {
      D(Res).E = 0;
      D(Res).H = ABSword(D(Src1).H);
      D(Res).L = ABSword(D(Src1).L);
 }



};

}


define (instr=NEG2_Da_Dn_family)
{

  fields = (OPCD, Src1,Res);



  blk = dalu;


define (instr=NEG2_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NEG2_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x20) Negate Two Words""";
attrs = (DARIT,V5);
# 3867 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = NEG2_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "neg2 %f,%f",Da,Dn);

   }


action=
{




    sbits <20> zero;
    zero=0;
    D(Res).WH = zero - D(Src1).WH;
    D(Res).WL = zero - D(Src1).WL;




};

}


define (instr=SAT2_W_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=SAT2_W_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SAT2_W_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x20) Saturate Two Signed Words""";
attrs = (DARIT,V5);
# 3909 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SAT2_W_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "sat2.w %f,%f",Da,Dn);

   }


action=
{






   D(Res).WL = saturation20_nochk( signExtend( (D(Src1).WL),40) );
   D(Res).WH = saturation20_nochk( signExtend( (D(Src1).WH),40) );



};

}


define (instr=ACS2HL_Da_X_mDa_X_Da_Y_mDa_Y_Dm_Dn_family)
{

  fields = (OPCD, Src1, Src3, Src4, Res, Res2,X,Y);
  blk = dalu;

define (instr=ACS2HL_Da_X_mDa_X_Da_Y_mDa_Y_Dm_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ACS2HL_Da_X_mDa_X_Da_Y_mDa_Y_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),b1),
 (bits(33),b1),
 (bits(34),b1),
 (bits(35),b1),
 (bits(36),b1),
 (bits(37),b1),
 (bits(38),b1),
 (bits(39),b1),
 (bits(40),b1),
 (bits(41),b1),
 (bits(42),Y(0)),
 (bits(43),X(0)),
 (bits(44),b1),
 (bits(45),b1),
 (bits(46),b1),
 (bits(47),b0),
 (bits(48),Dmn(0)),
 (bits(49),Dmn(1)),
 (bits(50),Dmn(2)),
 (bits(51),Dmn(3)),
 (bits(52),Dmn(4)),
 (bits(53),b1),
 (bits(54),b1),
 (bits(55),b1),
 (bits(56),b1),
 (bits(57),b1),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dmn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Add, Compare, and Select High and Low portions (executed in two DMUs simultaneously)""";
attrs = (DARIT,V7);
# 3946 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = ACS2HL_Da_X_mDa_X_Da_Y_mDa_Y_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src3(Dmn.Dm),Src4(Dmn.Dn),Res(Dmn.Dm),Res2(Dmn.Dn),X(X),Y(Y));
  syntax = ( "acs2hl %f.%f,-%f.%f,%f.%f,-%f.%f,%f",Da,X,Da,X,Da,Y,Da,Y,Dmn);
}

action=
{
      bits<32> tmp_btr0= BTR0;
      bits<32> tmp_btr1= BTR1;
      tmp_btr1 >>= 2;

      bits<16> Da_x,Da_y;
      if (X==0) {
  Da_x = D(Src1).L;
      } else {
  Da_x = D(Src1).H;
      }
      if (Y==0) {
  Da_y = D(Src1).L;
      } else {
  Da_y = D(Src1).H;
      }


      bits <17> sum1 = (sbits<17>)D(Src3).H + (sbits<17>)Da_y;
      bits <17> sum2 = (sbits<17>)D(Src4).H + (sbits<17>)Da_x;
      if ( sum1.signedGT(sum2) ) {
  tmp_btr1(30,30) = 0;
  D(Res).H = saturation16_noexception( signExtend(sum1,40) );
      }
      else {
  tmp_btr1(30,30) = 1;
  D(Res).H = saturation16_noexception( signExtend(sum2,40) );
      }
      bits <17> sub1 = (sbits<17>)D(Src3).H - (sbits<17>)Da_y;
      bits <17> sub2 = (sbits<17>)D(Src4).H - (sbits<17>)Da_x;
      if ( sub1.signedGT(sub2) ) {
  tmp_btr1(31,31) = 0;
  D(Res).L = saturation16_noexception( signExtend(sub1,40) );
      }
      else {
  tmp_btr1(31,31) = 1;
  D(Res).L = saturation16_noexception( signExtend(sub2,40) );
      }
      tmp_btr0 >>= 2;
      tmp_btr0(31) = BTR1(1);
      tmp_btr0(30) = BTR1(0);

      BTR0 = tmp_btr0;
      BTR1 = tmp_btr1;

      D(Res).E=0;


      tmp_btr0= BTR0;
      tmp_btr1= BTR1;
      tmp_btr1 >>= 2;

      sum1 = (sbits<17>)D(Src3).L - (sbits<17>)Da_y;
      sum2 = (sbits<17>)D(Src4).L - (sbits<17>)Da_x;
      sub1 = (sbits<17>)D(Src3).L + (sbits<17>)Da_y;
      sub2 = (sbits<17>)D(Src4).L + (sbits<17>)Da_x;

      if ( sum2.signedGT(sum1) ) {
  tmp_btr1(30) = 0;
  D(Res2).H = saturation16_noexception( signExtend(sum2,40) );
      }
      else {
  tmp_btr1(30) = 1;
  D(Res2).H = saturation16_noexception( signExtend(sum1,40) );
      }

      if ( sub2.signedGT(sub1) ) {
  tmp_btr1(31) = 0;
  D(Res2).L = saturation16_noexception( signExtend(sub2,40) );
      }
      else {
  tmp_btr1(31) = 1;
  D(Res2).L = saturation16_noexception( signExtend(sub1,40) );
      }

      tmp_btr0 >>= 2;
      tmp_btr0(31) = BTR1(1);
      tmp_btr0(30) = BTR1(0);

      BTR0 = tmp_btr0;
      BTR1 = tmp_btr1;

      D(Res2).E=0;

};

}

define (instr=ACS2HL_Da_X_mDa_X_mDa_Y_Da_Y_Dm_Dn_family)
{

  fields = (OPCD, Src1, Src3, Src4, Res, Res2,X,Y);
  blk = dalu;

define (instr=ACS2HL_Da_X_mDa_X_mDa_Y_Da_Y_Dm_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ACS2HL_Da_X_mDa_X_mDa_Y_Da_Y_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),b1),
 (bits(33),b1),
 (bits(34),b1),
 (bits(35),b1),
 (bits(36),b1),
 (bits(37),b1),
 (bits(38),b1),
 (bits(39),b1),
 (bits(40),b1),
 (bits(41),b1),
 (bits(42),Y(0)),
 (bits(43),X(0)),
 (bits(44),b1),
 (bits(45),b1),
 (bits(46),b1),
 (bits(47),b0),
 (bits(48),Dmn(0)),
 (bits(49),Dmn(1)),
 (bits(50),Dmn(2)),
 (bits(51),Dmn(3)),
 (bits(52),Dmn(4)),
 (bits(53),b1),
 (bits(54),b1),
 (bits(55),b1),
 (bits(56),b1),
 (bits(57),b1),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dmn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Add, Compare, and Select High and Low portions (executed in two DMUs simultaneously)""";
attrs = (DARIT,V7);
# 4048 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = ACS2HL_Da_X_mDa_X_mDa_Y_Da_Y_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src3(Dmn.Dm),Src4(Dmn.Dn),Res(Dmn.Dm),Res2(Dmn.Dn),X(X),Y(Y));
  syntax = ( "acs2hl %f.%f,-%f.%f,-%f.%f,%f.%f,%f",Da,X,Da,X,Da,Y,Da,Y,Dmn);
}

action=
{
      bits<32> tmp_btr0= BTR0;
      bits<32> tmp_btr1= BTR1;
      tmp_btr1 >>= 2;

      bits<16> Da_x,Da_y;
      if (X==0) {
  Da_x = D(Src1).L;
      } else {
  Da_x = D(Src1).H;
      }
      if (Y==0) {
  Da_y = D(Src1).L;
      } else {
  Da_y = D(Src1).H;
      }


      bits <17> sum1 = (sbits<17>)D(Src3).H - (sbits<17>)Da_y;
      bits <17> sum2 = (sbits<17>)D(Src4).H + (sbits<17>)Da_x;
      if ( sum1.signedGT(sum2) ) {
  tmp_btr1(30,30) = 0;
  D(Res).H = saturation16_noexception( signExtend(sum1,40) );
      }
      else {
  tmp_btr1(30,30) = 1;
  D(Res).H = saturation16_noexception( signExtend(sum2,40) );
      }
      bits <17> sub1 = (sbits<17>)D(Src3).H + (sbits<17>)Da_y;
      bits <17> sub2 = (sbits<17>)D(Src4).H - (sbits<17>)Da_x;
      if ( sub1.signedGT(sub2) ) {
  tmp_btr1(31,31) = 0;
  D(Res).L = saturation16_noexception( signExtend(sub1,40) );
      }
      else {
  tmp_btr1(31,31) = 1;
  D(Res).L = saturation16_noexception( signExtend(sub2,40) );
      }
      tmp_btr0 >>= 2;
      tmp_btr0(31) = BTR1(1);
      tmp_btr0(30) = BTR1(0);

      BTR0 = tmp_btr0;
      BTR1 = tmp_btr1;

      D(Res).E=0;


      tmp_btr0= BTR0;
      tmp_btr1= BTR1;
      tmp_btr1 >>= 2;

      sum1 = (sbits<17>)D(Src3).L + (sbits<17>)Da_y;
      sum2 = (sbits<17>)D(Src4).L - (sbits<17>)Da_x;
      sub1 = (sbits<17>)D(Src3).L - (sbits<17>)Da_y;
      sub2 = (sbits<17>)D(Src4).L + (sbits<17>)Da_x;

      if ( sum2.signedGT(sum1) ) {
  tmp_btr1(30) = 0;
  D(Res2).H = saturation16_noexception( signExtend(sum2,40) );
      }
      else {
  tmp_btr1(30) = 1;
  D(Res2).H = saturation16_noexception( signExtend(sum1,40) );
      }

      if ( sub2.signedGT(sub1) ) {
  tmp_btr1(31) = 0;
  D(Res2).L = saturation16_noexception( signExtend(sub2,40) );
      }
      else {
  tmp_btr1(31) = 1;
  D(Res2).L = saturation16_noexception( signExtend(sub1,40) );
      }

      tmp_btr0 >>= 2;
      tmp_btr0(31) = BTR1(1);
      tmp_btr0(30) = BTR1(0);

      BTR0 = tmp_btr0;
      BTR1 = tmp_btr1;

      D(Res2).E=0;

};

}


define (instr=ACS2HL_mDa_X_Da_X_Da_Y_mDa_Y_Dm_Dn_family)
{

  fields = (OPCD, Src1, Src3, Src4, Res, Res2,X,Y);
  blk = dalu;

define (instr=ACS2HL_mDa_X_Da_X_Da_Y_mDa_Y_Dm_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ACS2HL_mDa_X_Da_X_Da_Y_mDa_Y_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),b1),
 (bits(33),b1),
 (bits(34),b1),
 (bits(35),b1),
 (bits(36),b1),
 (bits(37),b1),
 (bits(38),b1),
 (bits(39),b1),
 (bits(40),b1),
 (bits(41),b1),
 (bits(42),Y(0)),
 (bits(43),X(0)),
 (bits(44),b1),
 (bits(45),b1),
 (bits(46),b1),
 (bits(47),b0),
 (bits(48),Dmn(0)),
 (bits(49),Dmn(1)),
 (bits(50),Dmn(2)),
 (bits(51),Dmn(3)),
 (bits(52),Dmn(4)),
 (bits(53),b1),
 (bits(54),b1),
 (bits(55),b1),
 (bits(56),b1),
 (bits(57),b1),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dmn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Add, Compare, and Select High and Low portions (executed in two DMUs simultaneously)""";
attrs = (DARIT,V7);
# 4151 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = ACS2HL_mDa_X_Da_X_Da_Y_mDa_Y_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src3(Dmn.Dm),Src4(Dmn.Dn),Res(Dmn.Dm),Res2(Dmn.Dn),X(X),Y(Y));
  syntax = ( "acs2hl -%f.%f,%f.%f,%f.%f,-%f.%f,%f",Da,X,Da,X,Da,Y,Da,Y,Dmn);
}

action=
{
      bits<32> tmp_btr0= BTR0;
      bits<32> tmp_btr1= BTR1;
      tmp_btr1 >>= 2;

      bits<16> Da_x,Da_y;
      if (X==0) {
  Da_x = D(Src1).L;
      } else {
  Da_x = D(Src1).H;
      }
      if (Y==0) {
  Da_y = D(Src1).L;
      } else {
  Da_y = D(Src1).H;
      }


      bits <17> sum1 = (sbits<17>)D(Src3).H + (sbits<17>)Da_y;
      bits <17> sum2 = (sbits<17>)D(Src4).H - (sbits<17>)Da_x;
      if ( sum1.signedGT(sum2) ) {
  tmp_btr1(30,30) = 0;
  D(Res).H = saturation16_noexception( signExtend(sum1,40) );
      }
      else {
  tmp_btr1(30,30) = 1;
  D(Res).H = saturation16_noexception( signExtend(sum2,40) );
      }
      bits <17> sub1 = (sbits<17>)D(Src3).H - (sbits<17>)Da_y;
      bits <17> sub2 = (sbits<17>)D(Src4).H + (sbits<17>)Da_x;
      if ( sub1.signedGT(sub2) ) {
  tmp_btr1(31,31) = 0;
  D(Res).L = saturation16_noexception( signExtend(sub1,40) );
      }
      else {
  tmp_btr1(31,31) = 1;
  D(Res).L = saturation16_noexception( signExtend(sub2,40) );
      }
      tmp_btr0 >>= 2;
      tmp_btr0(31) = BTR1(1);
      tmp_btr0(30) = BTR1(0);

      BTR0 = tmp_btr0;
      BTR1 = tmp_btr1;

      D(Res).E=0;


      tmp_btr0= BTR0;
      tmp_btr1= BTR1;
      tmp_btr1 >>= 2;

      sum1 = (sbits<17>)D(Src3).L - (sbits<17>)Da_y;
      sum2 = (sbits<17>)D(Src4).L + (sbits<17>)Da_x;
      sub1 = (sbits<17>)D(Src3).L + (sbits<17>)Da_y;
      sub2 = (sbits<17>)D(Src4).L - (sbits<17>)Da_x;

      if ( sum2.signedGT(sum1) ) {
  tmp_btr1(30) = 0;
  D(Res2).H = saturation16_noexception( signExtend(sum2,40) );
      }
      else {
  tmp_btr1(30) = 1;
  D(Res2).H = saturation16_noexception( signExtend(sum1,40) );
      }

      if ( sub2.signedGT(sub1) ) {
  tmp_btr1(31) = 0;
  D(Res2).L = saturation16_noexception( signExtend(sub2,40) );
      }
      else {
  tmp_btr1(31) = 1;
  D(Res2).L = saturation16_noexception( signExtend(sub1,40) );
      }

      tmp_btr0 >>= 2;
      tmp_btr0(31) = BTR1(1);
      tmp_btr0(30) = BTR1(0);

      BTR0 = tmp_btr0;
      BTR1 = tmp_btr1;

      D(Res2).E=0;

};

}



define (instr=ACS2HL_mDa_X_Da_X_mDa_Y_Da_Y_Dm_Dn_family)
{

  fields = (OPCD, Src1, Src3, Src4, Res, Res2,X,Y);
  blk = dalu;

define (instr=ACS2HL_mDa_X_Da_X_mDa_Y_Da_Y_Dm_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ACS2HL_mDa_X_Da_X_mDa_Y_Da_Y_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),b1),
 (bits(33),b1),
 (bits(34),b1),
 (bits(35),b1),
 (bits(36),b1),
 (bits(37),b1),
 (bits(38),b1),
 (bits(39),b1),
 (bits(40),b1),
 (bits(41),b1),
 (bits(42),Y(0)),
 (bits(43),X(0)),
 (bits(44),b1),
 (bits(45),b1),
 (bits(46),b1),
 (bits(47),b0),
 (bits(48),Dmn(0)),
 (bits(49),Dmn(1)),
 (bits(50),Dmn(2)),
 (bits(51),Dmn(3)),
 (bits(52),Dmn(4)),
 (bits(53),b1),
 (bits(54),b1),
 (bits(55),b1),
 (bits(56),b1),
 (bits(57),b1),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dmn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Add, Compare, and Select High and Low portions (executed in two DMUs simultaneously)""";
attrs = (DARIT,V7);
# 4255 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = ACS2HL_mDa_X_Da_X_mDa_Y_Da_Y_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src3(Dmn.Dm),Src4(Dmn.Dn),Res(Dmn.Dm),Res2(Dmn.Dn),X(X),Y(Y));
  syntax = ( "acs2hl -%f.%f,%f.%f,-%f.%f,%f.%f,%f",Da,X,Da,X,Da,Y,Da,Y,Dmn);
}

action=
{
      bits<32> tmp_btr0= BTR0;
      bits<32> tmp_btr1= BTR1;
      tmp_btr1 >>= 2;

      bits<16> Da_x,Da_y;
      if (X==0) {
  Da_x = D(Src1).L;
      } else {
  Da_x = D(Src1).H;
      }
      if (Y==0) {
  Da_y = D(Src1).L;
      } else {
  Da_y = D(Src1).H;
      }


      bits <17> sum1 = (sbits<17>)D(Src3).H - (sbits<17>)Da_y;
      bits <17> sum2 = (sbits<17>)D(Src4).H - (sbits<17>)Da_x;
      if ( sum1.signedGT(sum2) ) {
  tmp_btr1(30,30) = 0;
  D(Res).H = saturation16_noexception( signExtend(sum1,40) );
      }
      else {
  tmp_btr1(30,30) = 1;
  D(Res).H = saturation16_noexception( signExtend(sum2,40) );
      }
      bits <17> sub1 = (sbits<17>)D(Src3).H + (sbits<17>)Da_y;
      bits <17> sub2 = (sbits<17>)D(Src4).H + (sbits<17>)Da_x;
      if ( sub1.signedGT(sub2) ) {
  tmp_btr1(31,31) = 0;
  D(Res).L = saturation16_noexception( signExtend(sub1,40) );
      }
      else {
  tmp_btr1(31,31) = 1;
  D(Res).L = saturation16_noexception( signExtend(sub2,40) );
      }
      tmp_btr0 >>= 2;
      tmp_btr0(31) = BTR1(1);
      tmp_btr0(30) = BTR1(0);

      BTR0 = tmp_btr0;
      BTR1 = tmp_btr1;

      D(Res).E=0;


      tmp_btr0= BTR0;
      tmp_btr1= BTR1;
      tmp_btr1 >>= 2;

      sum1 = (sbits<17>)D(Src3).L + (sbits<17>)Da_y;
      sum2 = (sbits<17>)D(Src4).L + (sbits<17>)Da_x;
      sub1 = (sbits<17>)D(Src3).L - (sbits<17>)Da_y;
      sub2 = (sbits<17>)D(Src4).L - (sbits<17>)Da_x;

      if ( sum2.signedGT(sum1) ) {
  tmp_btr1(30) = 0;
  D(Res2).H = saturation16_noexception( signExtend(sum2,40) );
      }
      else {
  tmp_btr1(30) = 1;
  D(Res2).H = saturation16_noexception( signExtend(sum1,40) );
      }

      if ( sub2.signedGT(sub1) ) {
  tmp_btr1(31) = 0;
  D(Res2).L = saturation16_noexception( signExtend(sub2,40) );
      }
      else {
  tmp_btr1(31) = 1;
  D(Res2).L = saturation16_noexception( signExtend(sub1,40) );
      }

      tmp_btr0 >>= 2;
      tmp_btr0(31) = BTR1(1);
      tmp_btr0(30) = BTR1(0);

      BTR0 = tmp_btr0;
      BTR1 = tmp_btr1;

      D(Res2).E=0;

};

}
# 4889 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
define (instr=SOD2AAII_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SOD2AAII_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SOD2AAII_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V5);
# 4902 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SOD2AAII_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sod2aaii %f,%f,%f",Da,Db,Dn);

   }


action=
{
# 4954 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
    if (SR.W20 == 0) {
       bits<20> dest_h = add_sod(signExtend(D(Src1).H,20),signExtend(D(Src2).H,20));
       bits<20> dest_l = add_sod(signExtend(D(Src1).L,20),signExtend(D(Src2).L,20));
       D(Res).H = dest_h(15,0);
       D(Res).L = dest_l(15,0);
       D(Res).E = concat(dest_h(19,16),dest_l(19,16));
    }
    else {
       sbits <21> sumh = (sbits<21>)D(Src1).WH + (sbits<21>)D(Src2).WH;
       sbits <21> suml = (sbits<21>)D(Src1).WL + (sbits<21>)D(Src2).WL;
       D(Res).L = suml(15,0);
       D(Res).H = sumh(15,0);
       D(Res).E = concat(sumh(19,16),suml(19,16));
       set_W20_OVF(sumh);
       set_W20_OVF(suml);
    }



};

}


define (instr=SOD2AAXX_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SOD2AAXX_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SOD2AAXX_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V5);
# 4991 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SOD2AAXX_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sod2aaxx %f,%f,%f",Da,Db,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bits<20> dest_h = add_sod(signExtend(D(Src1).L,20),signExtend(D(Src2).H,20));
       bits<20> dest_l = add_sod(signExtend(D(Src1).H,20),signExtend(D(Src2).L,20));
       D(Res).H = dest_h(15,0);
       D(Res).L = dest_l(15,0);
       D(Res).E = concat(dest_h(19,16),dest_l(19,16));
    }
    else {
       sbits <21> sumh = (sbits<21>)D(Src1).WL + (sbits<21>)D(Src2).WH;
       sbits <21> suml = (sbits<21>)D(Src1).WH + (sbits<21>)D(Src2).WL;
       D(Res).L = suml(15,0);
       D(Res).H = sumh(15,0);
       D(Res).E = concat(sumh(19,16),suml(19,16));
       set_W20_OVF(sumh);
       set_W20_OVF(suml);
    }
# 5040 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=SOD2ASII_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SOD2ASII_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SOD2ASII_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V5);
# 5058 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SOD2ASII_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sod2asii %f,%f,%f",Da,Db,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bits<20> dest_h = add_sod(signExtend(D(Src1).H,20),signExtend(D(Src2).H,20));
       bits<20> dest_l = sub_sod(signExtend(D(Src1).L,20),signExtend(D(Src2).L,20));
       D(Res).H = dest_h(15,0);
       D(Res).L = dest_l(15,0);
       D(Res).E = concat(dest_h(19,16),dest_l(19,16));
    }
    else {
       sbits <21> sumh = (sbits<21>)D(Src1).WH + (sbits<21>)D(Src2).WH;
       sbits <21> suml = (sbits<21>)D(Src2).WL - (sbits<21>)D(Src1).WL;
       D(Res).L = suml(15,0);
       D(Res).H = sumh(15,0);
       D(Res).E = concat(sumh(19,16),suml(19,16));
       set_W20_OVF(sumh);
       set_W20_OVF(suml);
    }
# 5107 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=SOD2ASXX_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SOD2ASXX_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SOD2ASXX_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V5);
# 5125 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SOD2ASXX_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sod2asxx %f,%f,%f",Da,Db,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bits<20> dest_l = add_sod(signExtend(D(Src1).H,20),signExtend(D(Src2).L,20));
       bits<20> dest_h = sub_sod(signExtend(D(Src1).L,20),signExtend(D(Src2).H,20));
       D(Res).H = dest_h(15,0);
       D(Res).L = dest_l(15,0);
       D(Res).E = concat(dest_h(19,16),dest_l(19,16));
    }
    else {
       sbits <21> suml = (sbits<21>)D(Src1).WH + (sbits<21>)D(Src2).WL;
       sbits <21> sumh = (sbits<21>)D(Src2).WH - (sbits<21>)D(Src1).WL;
       D(Res).L = suml(15,0);
       D(Res).H = sumh(15,0);
       D(Res).E = concat(sumh(19,16),suml(19,16));
       set_W20_OVF(sumh);
       set_W20_OVF(suml);
    }
# 5173 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=SOD2SAII_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SOD2SAII_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SOD2SAII_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V5);
# 5191 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SOD2SAII_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sod2saii %f,%f,%f",Da,Db,Dn);

   }


action=
{




     if (SR.W20 == 0) {
       bits<20> dest_l = add_sod(signExtend(D(Src1).L,20),signExtend(D(Src2).L,20));
       bits<20> dest_h = sub_sod(signExtend(D(Src1).H,20),signExtend(D(Src2).H,20));
       D(Res).H = dest_h(15,0);
       D(Res).L = dest_l(15,0);
       D(Res).E = concat(dest_h(19,16),dest_l(19,16));
    }
    else {
       sbits <21> sumh = (sbits<21>)D(Src2).WH - (sbits<21>)D(Src1).WH;
       sbits <21> suml = (sbits<21>)D(Src2).WL + (sbits<21>)D(Src1).WL;
       D(Res).L = suml(15,0);
       D(Res).H = sumh(15,0);
       D(Res).E = concat(sumh(19,16),suml(19,16));
       set_W20_OVF(sumh);
       set_W20_OVF(suml);
    }
# 5239 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=SOD2SAXX_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SOD2SAXX_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SOD2SAXX_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V5);
# 5257 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SOD2SAXX_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sod2saxx %f,%f,%f",Da,Db,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bits<20> dest_l = sub_sod(signExtend(D(Src1).H,20),signExtend(D(Src2).L,20));
       bits<20> dest_h = add_sod(signExtend(D(Src1).L,20),signExtend(D(Src2).H,20));
       D(Res).H = dest_h(15,0);
       D(Res).L = dest_l(15,0);
       D(Res).E = concat(dest_h(19,16),dest_l(19,16));
    }
    else {
       sbits <21> sumh = (sbits<21>)D(Src2).WH + (sbits<21>)D(Src1).WL;
       sbits <21> suml = (sbits<21>)D(Src2).WL - (sbits<21>)D(Src1).WH;
       D(Res).L = suml(15,0);
       D(Res).H = sumh(15,0);
       D(Res).E = concat(sumh(19,16),suml(19,16));
       set_W20_OVF(sumh);
       set_W20_OVF(suml);
    }
# 5307 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=SOD2SSII_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SOD2SSII_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SOD2SSII_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V5);
# 5325 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SOD2SSII_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sod2ssii %f,%f,%f",Da,Db,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bits<20> dest_l = sub_sod(signExtend(D(Src1).L,20),signExtend(D(Src2).L,20));
       bits<20> dest_h = sub_sod(signExtend(D(Src1).H,20),signExtend(D(Src2).H,20));
       D(Res).H = dest_h(15,0);
       D(Res).L = dest_l(15,0);
       D(Res).E = concat(dest_h(19,16),dest_l(19,16));
    }
    else {
       sbits <21> sumh = (sbits<21>)D(Src2).WH - (sbits<21>)D(Src1).WH;
       sbits <21> suml = (sbits<21>)D(Src2).WL - (sbits<21>)D(Src1).WL;
       D(Res).L = suml(15,0);
       D(Res).H = sumh(15,0);
       D(Res).E = concat(sumh(19,16),suml(19,16));
       set_W20_OVF(sumh);
       set_W20_OVF(suml);
    }
# 5374 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=SOD2SSXX_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=SOD2SSXX_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SOD2SSXX_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V5);
# 5392 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = SOD2SSXX_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "sod2ssxx %f,%f,%f",Da,Db,Dn);

   }


action=
{




    if (SR.W20 == 0) {
       bits<20> dest_l = sub_sod(signExtend(D(Src1).H,20),signExtend(D(Src2).L,20));
       bits<20> dest_h = sub_sod(signExtend(D(Src1).L,20),signExtend(D(Src2).H,20));
       D(Res).H = dest_h(15,0);
       D(Res).L = dest_l(15,0);
       D(Res).E = concat(dest_h(19,16),dest_l(19,16));
    }
    else {
       sbits <21> suml = (sbits<21>)D(Src2).WL - (sbits<21>)D(Src1).WH;
       sbits <21> sumh = (sbits<21>)D(Src2).WH - (sbits<21>)D(Src1).WL;
       D(Res).L = suml(15,0);
       D(Res).H = sumh(15,0);
       D(Res).E = concat(sumh(19,16),suml(19,16));
       set_W20_OVF(sumh);
       set_W20_OVF(suml);
    }
# 5445 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
};

}


define (instr=PACK4B_Ds_Dt_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=PACK4B_Ds_Dt_Dn)
{


  alias = PACK4B_Ds_Dt_Dn_family(OPCD(OPCD), Src1(GGG.Ds), Src2(GGG.Dt), Res(FFF));




}


define (instr=PACK_4B_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK_4B_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 8 bytes to 32 bits Register""";
attrs = (DARIT,V6);
# 5475 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = PACK4B_Ds_Dt_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "pack.4b %f,%f,%f",Da,Db,Dn);
}

action=
{
   D(Res) = concat (zero(8),D(Src1)(23,16),D(Src1)(7,0),D(Src2)(23,16),D(Src2)(7,0));



};

}

define (instr=PACK_4E_Da_Db_Dc_Dd_Dn_family)
{
   fields = (OPCD, Src1, Src2, Src3, Src4, Res);
   blk = dalu;

define (instr=PACK_4E_Da_Db_Dc_Dd_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK_4E_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dabcd(0)),
 (bits(27),Dabcd(1)),
 (bits(28),Dabcd(2)),
 (bits(29),Dabcd(3)),
 (bits(30),Dabcd(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dabcd(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Pack extension from four Source Registers into one register - long format""";
attrs = (DARIT,V7);
# 5497 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = PACK_4E_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), Res(Dn));
  syntax = ( "pack.4e %f,%f",Dabcd,Dn);
}

action=
{
   D(Res) = concat (zero(8),D(Src1).E,D(Src2).E,D(Src3).E,D(Src4).E);
};

}


define (instr=CMPEQD_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=CMPEQD_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQD_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Compare Equal to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 5522 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = CMPEQD_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "cmpeqd %f,%f,%f",Da,Db,Dn);

   }


action=
{




   if (D(Src1)==D(Src2)) { D(Res)= 0xffffffffffull; }
   else { D(Res) = 0; }




};

}


define (instr=CMPNED_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=CMPNED_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNED_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Compare Not Equal to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 5562 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = CMPNED_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "cmpned %f,%f,%f",Da,Db,Dn);

   }


action=
{




   if (D(Src1)!=D(Src2)) { D(Res)= 0xffffffffffull; }
   else { D(Res) = 0; }




};

}


define (instr=CMPGTD_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=CMPGTD_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTD_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Compare Greater Than to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 5602 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = CMPGTD_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "cmpgtd %f,%f,%f",Da,Db,Dn);

   }


action=
{






   if (D(Src2).signedGT(D(Src1))) { D(Res)= 0xffffffffffull; }
   else { D(Res) = 0; }



};

}


define (instr=CMPGED_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=CMPGED_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGED_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Compare Greater Than and Equal to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 5643 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2




  alias = CMPGED_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "cmpged %f,%f,%f",Da,Db,Dn);

   }


action=
{





   if (D(Src2).signedGE(D(Src1))) { D(Res)= 0xffffffffffull; }
   else { D(Res) = 0; }




};

}


define (instr=CMPEQ_W__s16_Dn_family)
{

  fields = (OPCD, imms, Src1);



  blk = dalu;


define (instr=CMPEQ_W__s16_Dn)
{

  alias = CMPEQ_W__s16_Dn_family(OPCD(OPCD), imms(s16), Src1(FFF));
}


action=
{




       if ( D(Src1) == signExtend(imms, 40) ) {
   SR.T=1;
       }
       else {
   SR.T=0;
       }
};

}


define (instr=CMPGT_W__s16_Dn_family)
{

  fields = (OPCD, imms, Src1);



  blk = dalu;


define (instr=CMPGT_W__s16_Dn)
{

  alias = CMPGT_W__s16_Dn_family(OPCD(OPCD), imms(s16), Src1(FFF));
}


action=
{






       bits<40> src = signExtend(imms,40);
       if ( D(Src1).signedGT( src ) ) {
   SR.T = 1;
       }
       else {
   SR.T = 0;
       }
};

}


define (instr=TFR__s16_Dn_family)
{

  fields = (OPCD, imms, Res);



  blk = dalu;


define (instr=TFR__s16_Dn)
{

  alias = TFR__s16_Dn_family(OPCD(OPCD), imms(s16), Res(FFF));
}
define (instr=TFR__s32_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFR__s32_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),b1),
 (bits(59),b1),
 (bits(60),b1),
 (bits(61),b1),
 (bits(62),b1),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),reserved),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Transfer Data Register or Immediate to a Data Register""";
attrs = (DARIT,V6);
# 5760 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = TFR__s16_Dn_family(OPCD(OPCD), imms(s32), Res(Dn));
  syntax = ( "tfr #%f,%f",s32,Dn);
}


action=
{




   D(Res) = signExtend(imms,40);



};

}



define (instr=iaddnc_family)
{
   fields = (OPCD, imms, Src1, Res);
   blk = dalu;




define (instr=IADDNC_W__s16_Dn)
{

   alias = iaddnc_family(OPCD(OPCD), imms(s16), Src1(FFF), Res(FFF) );
   syntax = ( "iaddnc.w #%f,%f",s16,FFF);
}

define (instr=IADDNC_W__s16_Da_Dn)
{

   alias = iaddnc_family(OPCD(OPCD), imms(s16), Src1(JJJ), Res(FFF) );
   syntax = ( "iaddnc.w #%f,%f,%f",s16,JJJ,FFF);
}

action=
{
# 5814 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
   bits <40> D_imm = signExtend(imms,40);
   bits <41> sum = (sbits<41>)D_imm + (sbits<41>)D(Src1);
   overflow40 ( sum );
   D(Res) = sum(39,0);



};
}



define (instr=subnc_family)
{
   fields = (OPCD, imms, Src1, Res);
   blk = dalu;




define (instr=SUBNC_W__s16_Dn)
{

   alias = subnc_family(OPCD(OPCD), imms(s16), Src1(FFF), Res(FFF) );
   syntax = ( "subnc.w #%f,%f",s16,FFF);
}

define (instr=SUBNC_W__s16_Da_Dn)
{

   alias = subnc_family(OPCD(OPCD), imms(s16), Src1(JJJ), Res(FFF) );
   syntax = ( "subnc.w #%f,%f,%f",s16,JJJ,FFF);
}

action=
{
# 5859 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl"
      sbits<41> imm = signExtend(imms,41);
      bits <41> sum = (sbits<41>)D(Src1) - imm;
      overflow40 ( sum );
      saturation32( sum, Res );



};

}


define (instr=ADDNC_W__s16_Da_Dn_family)
{

  fields = (OPCD, imms, Src1, Res);



   blk = dalu;

define (instr=ADDNC_W__s16_Da_Dn)
{

  alias = ADDNC_W__s16_Da_Dn_family(OPCD(OPCD), imms(s16), Src1(JJJ), Res(FFF));
}

action=
{



   sbits<41> imm = signExtend(imms,41);
   bits <41> sum = (sbits<41>)D(Src1) + imm;
   overflow40 ( sum );
   saturation32( sum, Res );



};

}


define (instr=CMPEQD_W__u12_Da_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=CMPEQD_W__u12_Da_Dn)
{

  alias = CMPEQD_W__u12_Da_Dn_family(OPCD(OPCD), immu(u12), Src1(JJJ),Res(FFF));
  syntax = ( "cmpeqd.w #%f,%f,%f",u12,JJJ,FFF);
}


action=
{




   if ( D(Src1) == zeroExtend(immu, 40) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=CMPNED_W__u12_Da_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=CMPNED_W__u12_Da_Dn)
{

  alias = CMPNED_W__u12_Da_Dn_family(OPCD(OPCD), immu(u12), Src1(JJJ), Res(FFF));
  syntax = ( "cmpned.w #%f,%f,%f",u12,JJJ,FFF);
}


action=
{






   if ( D(Src1) != zeroExtend(immu, 40) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }





};

}


define (instr=CMPGTD_W__u12_Da_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=CMPGTD_W__u12_Da_Dn)
{

  alias = CMPGTD_W__u12_Da_Dn_family(OPCD(OPCD), immu(u12), Src1(JJJ), Res(FFF));
  syntax = ( "cmpgtd.w #%f,%f,%f",u12,JJJ,FFF);
}


action=
{






   bits<40> imm = zeroExtend(immu, 40);
   if ( D(Src1).signedGT(imm) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=CMPGED_W__u12_Da_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=CMPGED_W__u12_Da_Dn)
{

  alias = CMPGED_W__u12_Da_Dn_family(OPCD(OPCD), immu(u12), Src1(JJJ), Res(FFF));
  syntax = ( "cmpged.w #%f,%f,%f",u12,JJJ,FFF);
}


action=
{






   bits<40> imm = zeroExtend(immu, 40);
   if ( D(Src1).signedGE(imm) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=CMPLED_W__u12_Da_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=CMPLED_W__u12_Da_Dn)
{

  alias = CMPLED_W__u12_Da_Dn_family(OPCD(OPCD), immu(u12), Src1(JJJ), Res(FFF));
  syntax = ( "cmpled.w #%f,%f,%f",u12,JJJ,FFF);
}


action=
{





   bits<40> imm = zeroExtend(immu, 40);
   if ( D(Src1).signedLE(imm) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }





};

}


define (instr=CMPLTD_W__u12_Da_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=CMPLTD_W__u12_Da_Dn)
{

  alias = CMPLTD_W__u12_Da_Dn_family(OPCD(OPCD), immu(u12), Src1(JJJ), Res(FFF));
  syntax = ( "cmpltd.w #%f,%f,%f",u12,JJJ,FFF);
}


action=
{




   bits<40> imm = zeroExtend(immu, 40);
   if ( D(Src1).signedLT(imm) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=CMPEQD_W__s16_Da_Dn_family)
{

  fields = (OPCD, imms, Src1, Res);



  blk = dalu;


define (instr=CMPEQD_W__s16_Da_Dn)
{

  alias = CMPEQD_W__s16_Da_Dn_family(OPCD(OPCD), imms(s16_t3), Src1(JJJ), Res(FFF));
  syntax = ( "cmpeqd.w #%f,%f,%f",s16_t3,JJJ,FFF);
}
define (instr=CMPEQD__s32_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQD__s32_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Compare Equal to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 6169 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = CMPEQD_W__s16_Da_Dn_family(OPCD(OPCD), imms(s32), Src1(Da), Res(Dn));
  syntax = ( "cmpeqd #%f,%f,%f",s32,Da,Dn);
}


action=
{




   if ( D(Src1) == signExtend(imms, 40) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=CMPNED_W__s16_Da_Dn_family)
{

  fields = (OPCD, imms, Src1, Res);



  blk = dalu;


define (instr=CMPNED_W__s16_Da_Dn)
{

  alias = CMPNED_W__s16_Da_Dn_family(OPCD(OPCD), imms(s16_t3), Src1(JJJ), Res(FFF));
  syntax = ( "cmpned.w #%f,%f,%f",s16_t3,JJJ,FFF);
}
define (instr=CMPNED__s32_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNED__s32_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Compare Not Equal to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 6214 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = CMPNED_W__s16_Da_Dn_family(OPCD(OPCD), imms(s32), Src1(Da), Res(Dn));
  syntax = ( "cmpned #%f,%f,%f",s32,Da,Dn);
}


action=
{




   if ( D(Src1) != signExtend(imms, 40) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }





};

}


define (instr=CMPGTD_W__s16_Da_Dn_family)
{

  fields = (OPCD, imms, Src1, Res);



  blk = dalu;


define (instr=CMPGTD_W__s16_Da_Dn)
{

  alias = CMPGTD_W__s16_Da_Dn_family(OPCD(OPCD), imms(s16_t3), Src1(JJJ), Res(FFF));
  syntax = ( "cmpgtd.w #%f,%f,%f",s16_t3,JJJ,FFF);
}
define (instr=CMPGTD__s32_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTD__s32_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Compare Greater Than to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 6260 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = CMPGTD_W__s16_Da_Dn_family(OPCD(OPCD), imms(s32), Src1(Da), Res(Dn));
  syntax = ( "cmpgtd #%f,%f,%f",s32,Da,Dn);
}


action=
{






   bits<40> imm = signExtend(imms, 40);
   if ( D(Src1).signedGT(imm) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=CMPGED_W__s16_Da_Dn_family)
{

  fields = (OPCD, imms, Src1, Res);



  blk = dalu;


define (instr=CMPGED_W__s16_Da_Dn)
{

  alias = CMPGED_W__s16_Da_Dn_family(OPCD(OPCD), imms(s16_t3), Src1(JJJ), Res(FFF));
  syntax = ( "cmpged.w #%f,%f,%f",s16_t3,JJJ,FFF);
}
define (instr=CMPGED__s32_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGED__s32_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Compare Greater Than or Equal to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 6308 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = CMPGED_W__s16_Da_Dn_family(OPCD(OPCD), imms(s32), Src1(Da), Res(Dn));
  syntax = ( "cmpged #%f,%f,%f",s32,Da,Dn);
}


action=
{






   bits<40> imm = signExtend(imms, 40);
   if ( D(Src1).signedGE(imm) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=CMPLED_W__s16_Da_Dn_family)
{

  fields = (OPCD, imms, Src1, Res);



  blk = dalu;


define (instr=CMPLED_W__s16_Da_Dn)
{

  alias = CMPLED_W__s16_Da_Dn_family(OPCD(OPCD), imms(s16_t3), Src1(JJJ), Res(FFF));
  syntax = ( "cmpled.w #%f,%f,%f",s16_t3,JJJ,FFF);
}
define (instr=CMPLED__s32_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLED__s32_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Compare Less Than or Equal to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 6356 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = CMPLED_W__s16_Da_Dn_family(OPCD(OPCD), imms(s32), Src1(Da), Res(Dn));
  syntax = ( "cmpled #%f,%f,%f",s32,Da,Dn);
}


action=
{





   bits<40> imm = signExtend(imms, 40);
   if ( D(Src1).signedLE(imm) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=CMPLTD_W__s16_Da_Dn_family)
{

  fields = (OPCD, imms, Src1, Res);



  blk = dalu;


define (instr=CMPLTD_W__s16_Da_Dn)
{

  alias = CMPLTD_W__s16_Da_Dn_family(OPCD(OPCD), imms(s16_t3), Src1(JJJ), Res(FFF));
  syntax = ( "cmpltd.w #%f,%f,%f",s16_t3,JJJ,FFF);
}
define (instr=CMPLTD__s32_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLTD__s32_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Compare Less Than to a Register Destination (Register Format)""";
attrs = (DCMP,V6);
# 6403 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
  alias = CMPLTD_W__s16_Da_Dn_family(OPCD(OPCD), imms(s32), Src1(Da), Res(Dn));
  syntax = ( "cmpltd #%f,%f,%f",s32,Da,Dn);
}


action=
{






   bits<40> imm = signExtend(imms, 40);
   if ( D(Src1).signedLT(imm) ) {
      D(Res)= 0xffffffffffull;
   }
   else {
      D(Res) = 0;
   }




};

}


define (instr=PACKW_2F_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=PACKW_2F_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACKW_2F_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing Two 20-Bit Words from the WH Portions of Two Registers""";
attrs = (DARIT,V6D);
# 6444 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2



  alias = PACKW_2F_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "packw.2f %f,%f,%f",Da,Db,Dn);

}

action=
{




    D(Res).WH = D(Src2)(35,16);
    D(Res).WL = D(Src1)(35,16);




};

}




define (instr=CMPEQ_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPEQ_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQ_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for Equal - Data Registers""";
attrs = (DCMP,V2);
# 6478 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = CMPEQ_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmpeq %f,%f,%f",Da,Db,Pn);
   }

action=
{
   if ( D(Src1) == D(Src2)) { set_SR_PR(P_Res);
   } else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPEQ_Da_Db_Pm_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res,P_Res2);
   blk = dalu;
   define (instr=CMPEQ_Da_Db_Pm_Pn)
   {

      alias = CMPEQ_Da_Db_Pm_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpeq %f,%f,%f",Da,Db,Pmn);
   }

action=
{
   if ( D(Src1) == D(Src2)) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}

define (instr=CMPEQ_L_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPEQ_L_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQ_L_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit compare equal with register/immediate""";
attrs = (DCMP,V3);
# 6520 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = CMPEQ_L_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmpeq.l %f,%f,%f",Da,Db,Pn);
   }

action=
{
   if ( concat(D(Src1).H, D(Src1).L) == concat(D(Src2).H, D(Src2).L) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}



define (instr=CMPEQ__s32_Da_Pn_family)
{
  fields = (OPCD,imms,Src1,P_Res);
   blk = dalu;
   define (instr=CMPEQ__s32_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQ__s32_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Pn(0)),
 (bits(49),Pn(1)),
 (bits(50),Pn(2)),
 (bits(51),b1),
 (bits(52),b1),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),reserved));

type = FourWords;
attrs = (serial_four_word);
"""Compare for Equal - Data Registers""";
attrs = (DCMP,V2);
# 6545 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = CMPEQ__s32_Da_Pn_family(OPCD(OPCD),imms(s32),Src1(Da),P_Res(Pn));
      syntax = ( "cmpeq #%f,%f,%f",s32,Da,Pn);
   }

action=
{
   if ( D(Src1) == signExtend(imms, 40) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}


define (instr=CMPEQ__u5_Da_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = dalu;
   define (instr=CMPEQ__u5_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQ__u5_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for Equal - Data Registers""";
attrs = (DCMP,V2);
# 6569 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = CMPEQ__u5_Da_Pn_family(OPCD(OPCD),immu(u5),Src1(Da),P_Res(Pn));
      syntax = ( "cmpeq #%f,%f,%f",u5,Da,Pn);
   }

action=
{
   if ( D(Src1) == zeroExtend(immu, 40) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}



define (instr=CMPGT_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPGT_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGT_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for Greater Than - Data Registers""";
attrs = (DCMP,V2);
# 6594 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = CMPGT_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmpgt %f,%f,%f",Da,Db,Pn);
   }

action=
{
   if ( D(Src2).signedGT( D(Src1) ) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}


define (instr=CMPGT__s32_Da_Pn_family)
{
  fields = (OPCD,imms,Src1,P_Res);
   blk = dalu;
   define (instr=CMPGT__s32_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGT__s32_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Pn(0)),
 (bits(49),Pn(1)),
 (bits(50),Pn(2)),
 (bits(51),b1),
 (bits(52),b1),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),reserved));

type = FourWords;
attrs = (serial_four_word);
"""Compare for Greater Than - Data Registers""";
attrs = (DBIT,V2);
# 6618 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = CMPGT__s32_Da_Pn_family(OPCD(OPCD),imms(s32),Src1(Da),P_Res(Pn));
      syntax = ( "cmpgt #%f,%f,%f",s32,Da,Pn);
   }

action=
{
   bits<40> src = signExtend(imms,40);
   if ( D(Src1).signedGT( src ) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}


define (instr=CMPGT__u5_Da_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = dalu;
   define (instr=CMPGT__u5_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGT__u5_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for Greater Than - Data Registers""";
attrs = (DCMP,V2);
# 6644 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = CMPGT__u5_Da_Pn_family(OPCD(OPCD),immu(u5),Src1(Da),P_Res(Pn));
      syntax = ( "cmpgt #%f,%f,%f",u5,Da,Pn);
   }

action=
{
   bits<40> src = zeroExtend(immu,40);
    if ( D(Src1).signedGT( src ) ) {
       set_SR_PR(P_Res);
    }
    else {
       clear_SR_PR(P_Res);
    }
};

}


define (instr=CMPHI_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPHI_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPHI_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unsigned Compare for Higher - Data Registers""";
attrs = (DCMP,V2);
# 6669 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = CMPHI_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmphi %f,%f,%f",Da,Db,Pn);
   }

action=
{
   bits<33> src1 = zeroExtend(D(Src1)(31,0),40);
   bits<33> src2 = zeroExtend(D(Src2)(31,0),40);
   if ( src2.signedGT( src1) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}


define (instr=DECEQ_Dn_Pn_family)
{
  fields = (OPCD,Src1,Res,P_Res);
   blk = dalu;
   define (instr=DECEQ_Dn_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECEQ_Dn_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dn(0)),
 (bits(27),Dn(1)),
 (bits(28),Dn(2)),
 (bits(29),Dn(3)),
 (bits(30),Dn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and Set Pn If Equal to Zero""";
attrs = (DCMP,V2);
# 6695 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = DECEQ_Dn_Pn_family(OPCD(OPCD), Src1(Dn), Res(Dn), P_Res(Pn));
      syntax = ( "deceq %f,%f",Dn,Pn);
   }

action=
{
   bits <40> imm = 0x0000000001ull;
   bits <41> sub = (sbits<41>)D(Src1) - (sbits<41>)imm;
   overflow40 ( sub );
   Borrow(sub, imm, D(Src1) );
   D(Res) = sub(39,0);



   if (sub==0) {
      set_SR_PR(P_Res);
   } else {
      clear_SR_PR(P_Res);
   }

};

}


define (instr=DECGE_Dn_Pn_family)
{
  fields = (OPCD,Src1,Res,P_Res);
   blk = dalu;
   define (instr=DECGE_Dn_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECGE_Dn_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dn(0)),
 (bits(27),Dn(1)),
 (bits(28),Dn(2)),
 (bits(29),Dn(3)),
 (bits(30),Dn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and Set Pn If Greater Than or Equal to Zero""";
attrs = (DCMP,V2);
# 6727 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_arithmetic.adl" 2
      alias = DECGE_Dn_Pn_family(OPCD(OPCD),Src1(Dn),Res(Dn),P_Res(Pn));
      syntax = ( "decge %f,%f",Dn,Pn);
   }

action=
{
   bits <40> imm = 0x0000000001ull;
   bits <41> sub = (sbits<41>)D(Src1) - (sbits<41>)imm;
   overflow40 ( sub );
   Borrow(sub, imm, D(Src1) );
   D(Res) = sub(39,0);



   if (sub.signedGE(0)) {
      set_SR_PR(P_Res);
   } else {
      clear_SR_PR(P_Res);
   }
};

}
# 41 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 1
define (instr=lsr_family)
{
   fields = (OPCD, Src1, Res);
   blk = dalu;




   define (instr=LSR_Dn)
   {

   }

define (instr=LSR_Da_Dn)
{

}

action=
{







   SR.C = D(Src1)(0);
   D(Res) = D(Src1)>>1;



};
}


define (instr=asll_imm_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




   define (instr=ASLL__u5_Dn)
   {

      alias = asll_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
      syntax = ( "asll #%f,%f",u5,FFF);
   }

define (instr=ASLL__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLL__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left""";
attrs = (DSHFT,V2);
# 55 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2





   alias = asll_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "asll #%f,%f,%f",u5,Da,Dn);

   }

action=
{
# 76 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bool shift_left = true;
   bool saturation = false;
   D(Res) = multiple_bit_shift(Src1,immu,shift_left,saturation);



};

}

define (instr=asrr_imm_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




   define (instr=ASRR__u5_Dn)
   {

      alias = asrr_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
      syntax = ( "asrr #%f,%f",u5,FFF);
   }

define (instr=ASRR__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRR__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right""";
attrs = (DSHFT,V2);
# 104 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2





   alias = asrr_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "asrr #%f,%f,%f",u5,Da,Dn);

   }

action=
{
# 125 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bool shift_left = false;
   bool saturation = false;
   D(Res) = multiple_bit_shift(Src1,immu,shift_left,saturation);



};

}


define (instr=aslls_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=ASLLS_Da_Dn)
   {

   }

define (instr=ASLLS_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLLS_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left With Saturation""";
attrs = (DSHFT,V3);
# 152 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = aslls_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "aslls %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 169 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bits<32> shift_count, mask;
   mask=0x7f;
   shift_count = zeroExtend(D(Src1)(6,0),32);

   if(D(Src1)(6)==1)
   {
      shift_count|=~mask;
      shift_count=0-shift_count;
      D(Res) = f_inst_asrrsi(Src2,shift_count);
   }
   else
   {
      D(Res) = f_inst_asllsi(Src2,shift_count);
   }




};

}

define (instr=asrrs_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=ASRRS_Da_Dn)
   {

   }

define (instr=ASRRS_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRRS_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right With Saturation""";
attrs = (DSHFT,V3);
# 207 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = asrrs_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "asrrs %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 229 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bits<32> shift_count, mask;
   mask=0x7f;
   shift_count = zeroExtend(D(Src1)(6,0),32);

   if(D(Src1)(6)==1)
   {
      shift_count|=~mask;
      shift_count=0-shift_count;
      D(Res) = f_inst_asllsi(Src2,shift_count);
   }
   else
   {
      D(Res) = f_inst_asrrsi(Src2,shift_count);
   }



};
}



define (instr=lsll_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=LSLL_Da_Dn)
   {

   }

define (instr=LSLL_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSLL_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Bitwise Shift Left""";
attrs = (DSHFT,V2);
# 267 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = lsll_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "lsll %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 285 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
    bits<64> tval1, result, carry;
    int shift_count, sc;
    tval1 = zeroExtend(D(Src2),64);

    shift_count= (signExtend(D(Src1)(6,0),32)).int32();

    if(!(shift_count&0x40))
    {

       if(shift_count>40)
       {
   shift_count=40;
       }
       result=(tval1 << shift_count);
       carry=1;
       carry <<=40;
       D(Res) = result(39,0);

       if(shift_count&&((result&carry)!=0))
       {
   SR.C=1;
       }
       else
       {
   SR.C=0;
       }
    }
    else
    {

       shift_count|=~0x7f;
       shift_count=(-shift_count);
       sc=shift_count;
       if(shift_count>40)
       {
   shift_count=40;
       }

       result=tval1>>shift_count;
       D(Res) = result(39,0);
       carry=1;
       carry <<=shift_count - 1;

       if((sc !=64)&&((tval1&carry)!=0))
       {
   SR.C=1;
       }
       else
       {
   SR.C=0;
       }
    }




};

}


define (instr=lsrr_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=LSRR_Da_Dn)
   {

   }

define (instr=LSRR_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Bitwise Shift Right""";
attrs = (DSHFT,V2);
# 362 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = lsrr_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "lsrr %f,%f,%f",Da,Db,Dn);

   }

action=
{







   bool shift_left = false;
   D(Res) = multiple_bitwise_shift(Src2,D(Src1)(6,0),shift_left);



};

}


define (instr=asll_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=ASLL_Da_Dn)
   {

   }

define (instr=ASLL_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLL_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left""";
attrs = (DSHFT,V2);
# 403 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = asll_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "asll %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 422 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bool shift_left = true;
   bool saturation = false;
   bits<7> shift_size = D(Src1)(6,0);
   D(Res) = multiple_bit_shift(Src2,shift_size,shift_left,saturation);



};

}


define (instr=asrr_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=ASRR_Da_Dn)
   {

   }

define (instr=ASRR_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right""";
attrs = (DSHFT,V2);
# 450 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = asrr_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "asrr %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 471 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   D(Res) = f_inst_asrr(Src2,D(Src1)(6,0));



};
}

define (instr= LSRW_Da_Dn_family )
{

  fields = (OPCD, Src1,Res);



  blk = dalu;


define (instr=LSRW_Da_Dn)
{

   alias = LSRW_Da_Dn_family(OPCD(OPCD),Src1(JJJ),Res(FFF));
}


action=
{




      SR.C = D(Src1)(15);
      D(Res) = (bits<40>)D(Src1)>>16;




};

}


define (instr=ASLW_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=ASLW_Da_Dn)
{

  alias = ASLW_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{






      bits<5> shift = 16;
      bool ovf = overflow_shift_left( D(Src1),shift );
      D(Res) = D(Src1)<<shift;
      SR.C = D(Src1)(40-shift);
      if (ovf) set_emr_dovf();



};

}


define (instr=ASRW_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=ASRW_Da_Dn)
{

  alias = ASRW_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{




      bits<5> shift = 16;
      bits<40> val = D(Src1) >> shift;
      D(Res) = slice_signExtend( val, (39-shift) );
      SR.C = (shift==0) ? 0: D(Src1)(shift-1);




};

}


define (instr=lsrr_l_imm_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




   define (instr=LSRR_L__u5_Dn)
   {

      alias = lsrr_l_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
      syntax = ( "lsrr.l #%f,%f",u5,FFF);
   }
define (instr=LSRR_L__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRR_L__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiple-Bit Shift Right""";
attrs = (DSHFT,V3);
# 603 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2





   alias = lsrr_l_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "lsrr.l #%f,%f,%f",u5,Da,Dn);

   }

action=
{







   bits<32> tmp = ( D(Src1)(31,0) ) >> immu;
   D(Res) = zeroExtend( tmp, 40 );
   SR.C = (immu==0) ? 0: D(Src1)(immu-1);



};
}


define (instr=lsrr_imm_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




   define (instr=LSRR__u5_Dn)
   {

      alias = lsrr_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
      syntax = ( "lsrr #%f,%f",u5,FFF);
   }

   define (instr=LSRR__u5_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRR__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Bitwise Shift Right""";
attrs = (DSHFT,V2);
# 650 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2





      alias = lsrr_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "lsrr #%f,%f,%f",u5,Da,Dn);

   }

action=
{







   D(Res) = D(Src1) >> immu;
   SR.C = (immu==0) ? 0: D(Src1)(immu-1);



};
}



define (instr=lsrr_l_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=LSRR_L_Da_Dn)
   {

   }
   define (instr=LSRR_L_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRR_L_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiple-Bit Shift Right""";
attrs = (DSHFT,V3);
# 694 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = lsrr_l_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "lsrr.l %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 730 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
  sbits<7> shift = D(Src1)(6,0);
  bits<8> abs_shift;
  bool limit ;
  bool limit40 ;
  abs_shift = (shift > 0) ? shift : -shift;
  limit = (abs_shift > 32) ? true : false ;
  limit40 = (abs_shift > 39) ? true : false ;
  abs_shift = (abs_shift > 32) ? 32 : abs_shift ;

  if ( D(Src1)(6)==0 )
  {
     bits<32> tmp = ( D(Src2)(31,0) ) >> abs_shift;
     D(Res) = zeroExtend( tmp, 40 );
     SR.C =(abs_shift==0 || (limit==true) ) ? 0: D(Src2)(abs_shift-1);
  }
  else
  {
     bits<32> tmp = ( D(Src2)(31,0) ) << abs_shift;
     D(Res) = zeroExtend( tmp, 40 );
     SR.C = (limit40) ? D(Src2)(0) :
      (abs_shift==0 || (limit==true) ) ? 0: D(Src2)(32-abs_shift);
  }



};

}


define (instr=CLIP__u5_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=CLIP__u5_Dn)
{

  alias = CLIP__u5_Dn_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF));
}
define (instr=CLIP__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CLIP__u5_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Clip""";
attrs = (DARIT,V4);
# 778 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2
  alias = CLIP__u5_Dn_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "clip #%f,%f,%f",u5,Da,Dn);
}


action=
{






   bits<40> src = D(Src1);
   if ( D(Src1).signedLT(0) ) {
      src=0;
      set_emr_dovf();
   }
   SR.C = (immu==0) ? 0 : D(Src1)(immu-1);
   bits<1> carry = (immu==0) ? 0 : src(immu-1);
   src >>= immu;
   src = src + carry;
   D(Res) = saturation8_nochk(src);




};

}





define (instr=clip2_imm_family)
{
   fields = (OPCD,immu,Src1,Res);
   blk = dalu;




   define (instr=CLIP2__u4_Dn)
   {

      alias = clip2_imm_family(OPCD(OPCD), immu(u4), Src1(FFF), Res(FFF) );
      syntax = ( "clip2 #%f,%f",u4,FFF);
   }


   define (instr=CLIP2__u4_Da_Dn)
   {

      alias = clip2_imm_family(OPCD(OPCD), immu(u4), Src1(JJJ), Res(FFF) );
      syntax = ( "clip2 #%f,%f,%f",u4,JJJ,FFF);
   }

   define (instr=CLIP2__u5_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CLIP2__u5_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16)Clip Two 20-Bit Values""";
attrs = (DARIT,V5);
# 839 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2
      alias = clip2_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
      syntax = ( "clip2 #%f,%f,%f",u5,Da,Dn);
   }

   action=
   {
# 873 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bool dovf = false;
   bits<20> low_src = zeroExtend( (D(Src1).L), 20);
   bits<20> high_src = zeroExtend( (D(Src1).H), 20);
   if ( (D(Src1).L).signedLT(0) ) {
      low_src=0;
      dovf = true;
   }
   if ( (D(Src1).H).signedLT(0) ) {
      high_src=0;
      dovf = true;
   }
   bits<1> last_low = (immu==0) ? 0 : low_src(immu-1);
   bits<1> last_high = (immu==0) ? 0 : high_src(immu-1);
   low_src >>= immu;
   high_src >>= immu;
   low_src = low_src + last_low;
   high_src = high_src + last_high;
   D(Res).WL = saturation8_nochk(zeroExtend(low_src,40));
   D(Res).WH = saturation8_nochk(zeroExtend(high_src,40));



   if (dovf) set_emr_dovf();

};

}


define (instr=asrrs_imm_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




   define (instr=ASRRS__u5_Dn)
   {

      alias = asrrs_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
      syntax = ( "asrrs #%f,%f",u5,FFF);
   }

define (instr=ASRRS__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRRS__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right With Saturation""";
attrs = (DSHFT,V3);
# 920 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2





   alias = asrrs_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "asrrs #%f,%f,%f",u5,Da,Dn);

   }

action=
{
# 943 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bool shift_left = false;
   bool saturation = true;
   D(Res) = multiple_bit_shift(Src1,immu,shift_left,saturation);



};

}


define (instr=aslls_imm_family)
{
   fields = (OPCD, immu, Src1, Res);
   blk = dalu;




   define (instr=ASLLS__u5_Dn)
   {

      alias = aslls_imm_family(OPCD(OPCD), immu(u5), Src1(FFF), Res(FFF) );
      syntax = ( "aslls #%f,%f",u5,FFF);
   }

define (instr=ASLLS__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLLS__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left With Saturation""";
attrs = (DSHFT,V3);
# 972 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2





   alias = aslls_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "aslls #%f,%f,%f",u5,Da,Dn);

   }

action=
{
# 993 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bool shift_left = true;
   bool saturation = true;
   D(Res) = multiple_bit_shift(Src1,immu,shift_left,saturation);



};

}





define (instr=LSRR2__e_u2_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=LSRR2__e_u2_Dn)
{

  alias = LSRR2__e_u2_Dn_family(OPCD(OPCD), immu(e_u2), Src1(FFF), Res(FFF));
}

action=
{





  bits<5> shift = immu+16;
  if (SR.W20 == 1) {
     D(Res).WL = D(Src1).WL>>shift;
     D(Res).WH = D(Src1).WH>>shift;
  } else {
     bits<32> shift_count=zeroExtend(shift,32);
     int i;
     bits<32> mask;
     bits<32> MSB_mask=0x008000;
     bits<64> result1, result2;

     bits<32> srcl = D(Src1).L;
     bits<32> srch = D(Src1).H;
     if((shift_count&0x10)==0)
     {
 for(i=0, mask=0;i < shift_count.int32();++i)
    mask=(mask>>1)|MSB_mask;
 result1=(srcl>>(shift_count.uint32()))&~mask;
 result2=(srch>>(shift_count.uint32()))&~mask;

     }
     else
     {
 shift_count = shift_count^0x1f;
 shift_count = shift_count+1;
 result1=srcl << (shift_count.uint32());
 result2=srch << (shift_count.uint32());
     }

     D(Res).L = result1(15,0);
     D(Res).H = result2(15,0);
     D(Res).E = 0;
  }





};


}

define (instr=ASLL2__e_u2_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=ASLL2__e_u2_Dn)
{

  alias = ASLL2__e_u2_Dn_family(OPCD(OPCD), immu(e_u2), Src1(FFF), Res(FFF));
}

action=
{




    bits<64> resultL,resultH;
    bits<64> src1l,src2h,src2l;
    bits<5> shift_size = immu+16;

    if(SR.W20==0)
    {


       src2l = signExtend(D(Src1).L,64);
       src2h = signExtend(D(Src1).H,64);
       bits<16> shift_count = zeroExtend(shift_size,16);


       if((shift_count&0x10)!=0)
       {
   shift_count = shift_count^0x001f;
   shift_count = shift_count+1;
   resultL= (src2l>>shift_count.uint32());
   resultH= (src2h>>shift_count.uint32());
       }
       else
       {
   resultL= (src2l << (shift_count.int32()));
   resultH= (src2h << (shift_count.int32()));
       }


       D(Res).H = resultH(15,0);
       D(Res).L = resultL(15,0);
       D(Res).E = 0;
    }
    else
    {
       bits<16> shift_count = zeroExtend(shift_size,16);
       bool W20_OVF=true;

       src2l = signExtend(D(Src1).WL,64);
       src2h = signExtend(D(Src1).WH,64);
       resultL = src2l<<(shift_count.int32());
       resultH = src2h<<(shift_count.int32());

       if(shift_count.uint32()>19 && shift_count.uint32()<32)
       {
   resultL=resultH=0;
   if(src2l!=0 || src2h!=0)
   {
      set_emr_dovf();
      W20_OVF=false;
   }
       }

       bits<64> tmp = ~0x0007ffff;
       if(((resultL&tmp)!=0 && (resultL&tmp)!=tmp) ||
      ((resultH&tmp)!=0 && (resultH&tmp)!=tmp))
       {
   set_emr_dovf();
   W20_OVF=false;
       }
       if(W20_OVF)
       {
   set_W20_OVF(resultL(20,0));
   set_W20_OVF(resultH(20,0));
       }

       D(Res).WH = resultH(19,0);
       D(Res).WL = resultL(19,0);
    }
# 1172 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
};


}

define (instr=ASRR2__e_u2_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;

define (instr=ASRR2__e_u2_Dn)
{

  alias = ASRR2__e_u2_Dn_family(OPCD(OPCD), immu(e_u2), Src1(FFF), Res(FFF));
}

action=
{






    bits<64> resultL,resultH;
    bits<64> src1l,src2h,src2l;
    bits<5> shift_size = immu+16;



    if(SR.W20==0)
    {


       src2l = signExtend(D(Src1).L,64);
       src2h = signExtend(D(Src1).H,64);
       bits<16> shift_count = zeroExtend(shift_size,16);


       if((shift_count&0x10)==0)
       {

   resultL=src2l>>shift_count.uint32();
   resultH=src2h>>shift_count.uint32();
       }
       else
       {

   shift_count = shift_count^0x001f;
   shift_count = shift_count+1;
   resultL=src2l << (shift_count.int32());
   resultH=src2h << (shift_count.int32());
       }


       D(Res).H = resultH(15,0);
       D(Res).L = resultL(15,0);
       D(Res).E = 0;
    }
    else
    {


       bits<16> shift_count = zeroExtend(shift_size,16);
       src2l = signExtend(D(Src1).WL,64);
       src2h = signExtend(D(Src1).WH,64);

       resultL = (src2l>>(shift_count.int32()));
       resultH = (src2h>>(shift_count.int32()));




       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));


       D(Res).WH = resultH(19,0);
       D(Res).WL = resultL(19,0);
    }
# 1268 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
};


}




define (instr=CAST_F_Da_H_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=CAST_F_Da_H_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CAST_F_Da_H_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Cast a 20-Bit Wide Operand to a Fractional Format""";
attrs = (DARIT,V6D);
# 1289 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2




  alias = CAST_F_Da_H_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "cast.f %f.h,%f",Da,Dn);

   }


action=
{




    sbits <41> tmp = concat(signExtend(D(Src1)(39),5),D(Src1)(39,36),D(Src1)(31,16),zero(16));
    saturation32(tmp,Res);




};

}


define (instr=CAST_F_Da_L_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=CAST_F_Da_L_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CAST_F_Da_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Cast a 20-Bit Wide Operand to a Fractional Format""";
attrs = (DARIT,V6D);
# 1329 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2




  alias = CAST_F_Da_L_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "cast.f %f.l,%f",Da,Dn);

   }


action=
{





    sbits <41> tmp = concat(signExtend(D(Src1)(35),5),D(Src1)(35,32),D(Src1)(15,0),zero(16));
    saturation32(tmp,Res);





};

}




define (instr=asll2_imm_family)
{
   fields = (OPCD,immu,Src1,Res);
   blk = dalu;




   define (instr=ASLL2__u4_Dn)
   {

      alias = asll2_imm_family(OPCD(OPCD), immu(u4), Src1(FFF), Res(FFF) );
      syntax = ( "asll2 #%f,%f",u4,FFF);
}
define (instr=ASLL2__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLL2__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16/20) Multiple-Bit Arithmetic Shift Left of Two Words""";
attrs = (DSHFT,V5);
# 1377 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2
      alias = asll2_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "asll2 #%f,%f,%f",u5,Da,Dn);
}


   define (instr=ASLL2__u4_Da_Dn)
   {

      alias = asll2_imm_family(OPCD(OPCD), immu(u4), Src1(JJJ), Res(FFF) );
      syntax = ( "asll2 #%f,%f,%f",u4,JJJ,FFF);
   }

   action=
   {
# 1401 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bool shift_left = true;
   bits<6> shift_size = immu;

   multiple_bit_shift2(Res,Src1,shift_size,shift_left);




};

}




define (instr=asrr2_imm_family)
{
   fields = (OPCD,immu,Src1,Res);
   blk = dalu;




   define (instr=ASRR2__u4_Dn)
   {

      alias = asrr2_imm_family(OPCD(OPCD), immu(u4), Src1(FFF), Res(FFF) );
      syntax = ( "asrr2 #%f,%f",u4,FFF);
}
define (instr=ASRR2__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRR2__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16/20)Multiple-Bit Arithmetic Shift Right of Two Words""";
attrs = (DSHFT,V5);
# 1433 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2
      alias = asrr2_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "asrr2 #%f,%f,%f",u5,Da,Dn);
}


define (instr=ASRR2__u4_Da_Dn)
{

   alias = asrr2_imm_family(OPCD(OPCD), immu(u4), Src1(JJJ), Res(FFF) );
   syntax = ( "asrr2 #%f,%f,%f",u4,JJJ,FFF);
}

action=
{
# 1457 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
   bool shift_left = false;
   bits<6> shift_size = immu;

   multiple_bit_shift2(Res,Src1,shift_size,shift_left);




};

}


define (instr=lsrr2_imm_family)
{
   fields = (OPCD,immu,Src1,Res);
   blk = dalu;




   define (instr=LSRR2__u4_Dn)
   {

      alias = lsrr2_imm_family(OPCD(OPCD), immu(u4), Src1(FFF), Res(FFF) );
      syntax = ( "lsrr2 #%f,%f",u4,FFF);
}
define (instr=LSRR2__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRR2__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16/20)Integer Multiple-Bit Shift Right of Two Words""";
attrs = (DSHFT,V5);
# 1487 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2
      alias = lsrr2_imm_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "lsrr2 #%f,%f,%f",u5,Da,Dn);
}


   define (instr=LSRR2__u4_Da_Dn)
   {

      alias = lsrr2_imm_family(OPCD(OPCD), immu(u4), Src1(JJJ), Res(FFF) );
      syntax = ( "lsrr2 #%f,%f,%f",u4,JJJ,FFF);
   }

   action=
   {
# 1515 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
      if (SR.W20 == 1) {
  D(Res).WL = D(Src1).WL>>immu;
  D(Res).WH = D(Src1).WH>>immu;
      } else {
  D(Res).L = D(Src1).L>>immu;
  D(Res).H = D(Src1).H>>immu;
  D(Res).E = 0;
      }




};

}





define (instr=lsll2_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=LSLL2_Da_Dn)
   {

   }


define (instr=LSLL2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSLL2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Bitwise Shift Left of Two Words""";
attrs = (DSHFT,V5);
# 1552 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = lsll2_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "lsll2 %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 1600 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
    sbits<6> local_shift = (SR.W20 == 0) ? signExtend(D(Src1)(4,0),6):D(Src1)(5,0) ;
    bits<7> neg_val = (~local_shift)+1;
    bits<7> abs_shift = (local_shift(5)==0) ? (bits<7>)local_shift : neg_val;
    if (SR.W20==0) {
       abs_shift = ( abs_shift.signedGT(16) ) ? (bits<7>)16 : abs_shift ;
    } else {
       abs_shift = ( abs_shift.signedGT(20) ) ? (bits<7>)20 : abs_shift ;
    }

    if (SR.W20==0) {
       D(Res).E=0;
    }

    if ( local_shift(5)==0 ) {
       if (SR.W20 == 0) {
   D(Res).L = D(Src2).L<<abs_shift;
   D(Res).H = D(Src2).H<<abs_shift;
       } else {
   D(Res).WL = (D(Src2).WL) << abs_shift;
   D(Res).WH = (D(Src2).WH) << abs_shift;
       }
    }
    else
    {
       if (SR.W20 == 0) {
   D(Res).L = (D(Src2).L) >> abs_shift;
   D(Res).H = (D(Src2).H) >> abs_shift;
       } else {
   D(Res).WL = (D(Src2).WL) >> abs_shift;
   D(Res).WH = (D(Src2).WH) >> abs_shift;
       }
    }




};
}




define (instr=lsrr2_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=LSRR2_Da_Dn)
   {

   }


define (instr=LSRR2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRR2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiple-Bit Shift Right of Two Words""";
attrs = (DSHFT,V5);
# 1659 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = lsrr2_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "lsrr2 %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 1708 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
    sbits<6> local_shift = (SR.W20 == 0) ? signExtend(D(Src1)(4,0),6) :D(Src1)(5,0) ;
    bits<7> neg_val = (~local_shift)+1;
    bits<7> abs_shift = (local_shift(5)==0) ? (bits<7>)local_shift : neg_val;
    if (SR.W20==0) {
       abs_shift = ( abs_shift.signedGT(16) ) ? (bits<7>)16 : abs_shift ;
    } else {
       abs_shift = ( abs_shift.signedGT(20) ) ? (bits<7>)20 : abs_shift ;
    }



    if (SR.W20==0) {
       D(Res).E=0;
    }

    if ( local_shift(5)==0 )
    {

       if (SR.W20 == 0) {
   D(Res).L = D(Src2).L>>abs_shift;
   D(Res).H = D(Src2).H>>abs_shift;
       } else {
   D(Res).WL = D(Src2).WL>>abs_shift;
   D(Res).WH = D(Src2).WH>>abs_shift;
       }
    }
    else
    {
       if (SR.W20 == 0) {
   D(Res).L = D(Src2).L<<abs_shift;
   D(Res).H = D(Src2).H<<abs_shift;
       } else {
   D(Res).WL = D(Src2).WL<<abs_shift;
   D(Res).WH = D(Src2).WH<<abs_shift;
       }
    }



};

}


define (instr=LSR2_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=LSR2_Da_Dn)
{

  alias = LSR2_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}


action=
{






    if (SR.W20==0) {
      D(Res).H = D(Src1).H>>1;
      D(Res).L = D(Src1).L>>1;
      D(Res).E = 0;
 } else {
      D(Res).WH = D(Src1).WH>>1;
      D(Res).WL = D(Src1).WL>>1;
 }




};

}




define (instr=asll2_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=ASLL2_Da_Dn)
   {

   }


define (instr=ASLL2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLL2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left of Two Words""";
attrs = (DSHFT,V5);
# 1813 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = asll2_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "asll2 %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 1832 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
    bool shift_left = true;
    sbits<6> shift_size ;
    if (SR.W20 == 0) shift_size = (sbits<6>)(D(Src1)(4,0));
    else shift_size = D(Src1)(5,0);
    multiple_bit_shift2(Res,Src2,shift_size,shift_left);




};
}




define (instr=asrr2_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=ASRR2_Da_Dn)
   {

   }


define (instr=ASRR2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRR2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right of Two Words""";
attrs = (DSHFT,V5);
# 1864 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl" 2

alias = asrr2_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "asrr2 %f,%f,%f",Da,Db,Dn);

   }

action=
{
# 1883 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_barrel-shifter_dbs.adl"
    bool shift_left = false;
    sbits<6> shift_size ;
    if (SR.W20 == 0) shift_size = (sbits<6>)(D(Src1)(4,0));
    else shift_size = D(Src1)(5,0);
    multiple_bit_shift2(Res,Src2,shift_size,shift_left);




};
}
# 42 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 1
define (instr=SWAPB_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);

   blk = dalu;




define (instr=SWAPB_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SWAPB_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Swap Bytes""";
attrs = (DBIT,V5);
# 14 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = SWAPB_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "swapb %f,%f",Da,Dn);

   }

   action =
   {



      D(Res).LL = D(Src1).HH;
      D(Res).LH = D(Src1).HL;
      D(Res).HL = D(Src1).LH;
      D(Res).HH = D(Src1).LL;



      D(Res).E = 0;
   };

}


define (instr=SWAPB2_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);

   blk = dalu;




define (instr=SWAPB2_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SWAPB2_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Swap Bytes in Two Words""";
attrs = (DBIT,V5);
# 54 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = SWAPB2_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "swapb2 %f,%f",Da,Dn);

   }

   action =
   {




      D(Res).HL = D(Src1).HH;
      D(Res).HH = D(Src1).HL;
      D(Res).LL = D(Src1).LH;
      D(Res).LH = D(Src1).LL;



      D(Res).E = 0;
   };

}

define (instr=SWAP_Da_Dn_family)
{

  fields = (OPCD, Src1,Res);

   blk = dalu;




define (instr=SWAP_Da_Dn)
{

  alias = SWAP_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}

   action =
   {




      D(Res).H = D(Src1).L;
      D(Res).L = D(Src1).H;
      D(Res).E = 0xff;



   };

}

define (instr=BREV_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=BREV_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BREV_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bit Reverse""";
attrs = (DBIT,V4);
# 125 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = BREV_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "brev %f,%f",Da,Dn);

   }

   action =
   {




      bits<40> tmp = bitreverse( D(Src1)(31,0) );

      D(Res) = tmp;



   };

}



define (instr=eor_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=EOR_Da_Dn)
{

}

define (instr=EOR_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EOR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise Exclusive OR""";
attrs = (DBIT,V2);
# 168 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = eor_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "eor %f,%f,%f",Da,Db,Dn);

   }

action =
 {







  D(Res) = D(Src1)^D(Src2);



 };
}

define (instr=NOT_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=NOT_Da_Dn)
{

  alias = NOT_Da_Dn_family(OPCD(OPCD), Src1(JJJ), Res(FFF));
}
define (instr=NOT_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NOT_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise Complement""";
attrs = (DBIT,V2);
# 207 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2
  alias = NOT_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "not %f,%f,%f",Da,Db,Dn);
}

   action =
   {




      D(Res) = ~( D(Src1) );



   };

}



define (instr=or_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=OR_Da_Dn)
{

}

define (instr=OR_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/OR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise Inclusive OR""";
attrs = (DBIT,V2);
# 243 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = or_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "or %f,%f,%f",Da,Db,Dn);

   }

action =
        {





    D(Res) = ( D(Src1) | D(Src2) );



 };

}


define (instr=rol_family)
{
   fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=ROL_Dn)
{

}

define (instr=ROL_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ROL_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Rotate 1 Bit Left Through the Carry Bit""";
attrs = (DSHFT,V2);
# 281 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = rol_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "rol %f,%f",Da,Dn);

   }

action =
{
# 297 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl"
   bits <41> D_tmp = (bits<41>)D(Src1)<<1;
   D(Res) = concat(D_tmp(39,1),SR.C);
   SR.C = D_tmp(40);



};

}


define (instr=ror_family)
{
   fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=ROR_Dn)
{

}

define (instr=ROR_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ROR_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Rotate 1 Bit Right Through the Carry Bit""";
attrs = (DSHFT,V2);
# 324 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = ror_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "ror %f,%f",Da,Dn);

   }


        action =
        {
# 342 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl"
    bits<41> D_tmp = concat(SR.C,D(Src1));
    SR.C = D(Src1)(0);
    D_tmp = D_tmp>>1;
    D(Res) = D_tmp(39,0);



 };

}

define (instr=AND__0_u16__Da_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);

   blk = dalu;




define (instr=AND__0_u16__Da_Dn)
{

  alias = AND__0_u16__Da_Dn_family(OPCD(OPCD), immu(u16), Src1(JJJ), Res(FFF));
}
define (instr=AND__s32_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/AND__s32_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Bitwise AND""";
attrs = (DCMP,V2);
# 371 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2
  alias = AND__0_u16__Da_Dn_family(OPCD(OPCD), immu(s32), Src1(Da), Res(Dn));
  syntax = ( "and #%f,%f,%f",s32,Da,Dn);
}

   action =
   {




      D(Res) = zeroExtend(immu,40) & D(Src1);



   };

}


define (instr=AND___u16__0000_Da_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);
   blk = dalu;




define (instr=AND___u16__0000_Da_Dn)
{

  alias = AND___u16__0000_Da_Dn_family(OPCD(OPCD), immu(u16_t72), Src1(JJJ), Res(FFF));
}

   action =
   {




      bits<16> tmp_imm = immu(15,0);
      D(Res) = concat( signExtend(tmp_imm,24), zero(16) ) & D(Src1);



   };

}


define (instr=and_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;





define (instr=AND_Da_Dn)
{

}

define (instr=AND_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/AND_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise AND""";
attrs = (DBIT,V2);
# 438 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = and_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "and %f,%f,%f",Da,Db,Dn);

   }

action =
 {





    D(Res) = D(Src1) & D(Src2);



 };
}


define (instr=BDEINTRLV_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=BDEINTRLV_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BDEINTRLV_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bit De-Interleave""";
attrs = (DBIT,V5);
# 471 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = BDEINTRLV_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "bdeintrlv %f,%f",Da,Dn);

   }


   action =
   {




      bits<6> tmp = concat( D(Src1)(30), D(Src1)(28), D(Src1)(26), D(Src1)(24), D(Src1)(22), D(Src1)(20));
      bits<6> tmp2 = concat( D(Src1)(18), D(Src1)(16), D(Src1)(14), D(Src1)(12), D(Src1)(10), D(Src1)(8));
      D(Res).L = concat(tmp, tmp2, D(Src1)(6), D(Src1)(4), D(Src1)(2), D(Src1)(0));
      tmp = concat( D(Src1)(31), D(Src1)(29), D(Src1)(27), D(Src1)(25), D(Src1)(23), D(Src1)(21));
      tmp2 = concat( D(Src1)(19), D(Src1)(17), D(Src1)(15), D(Src1)(13), D(Src1)(11), D(Src1)(9));
      D(Res).H = concat(tmp, tmp2, D(Src1)(7), D(Src1)(5), D(Src1)(3), D(Src1)(1));



      D(Res).E = 0;
   };

}


define (instr=BINTRLV_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=BINTRLV_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BINTRLV_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bit Interleave""";
attrs = (DBIT,V5);
# 514 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = BINTRLV_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "bintrlv %f,%f",Da,Dn);

   }


   action =
   {




      bits<32> tmp = 0;
      for (int i=0; i<=15; i++)
      {
  tmp(2*i) = D(Src1).L(i);
  tmp((2*i)+1) = D(Src1).H(i);
      }
      D(Res).H = tmp(31,16);
      D(Res).L = tmp(15,0);



      D(Res).E = 0;
   };

}



define (instr=CLB_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);

   blk = dalu;




define (instr=CLB_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CLB_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Count Leading Bits""";
attrs = (DBIT,V2);
# 561 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = CLB_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "clb %f,%f",Da,Dn);

   }

   action =
   {




      bits<32> res=0;
      var src = D(Src1);
      if (src == 0) {
  res = 0;
      }
      else
      {
  if ( src(39) == 0 ) { src = ~src; }
  res = 9-NumberOfOnes(src);
      }
      D(Res) = signExtend(res, 40);



   };

}



define (instr=EXTRACT__U6__u6_Db_Dn_family)
{

  fields = (OPCD, immu1, immu2, Src1, Res);
   blk = dalu;
   doc_title = "extract #width,#offset,Da,Dn";




define (instr=EXTRACT__U6__u6_Db_Dn)
{

  alias = EXTRACT__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(U6), immu2(u6), Src1(jjj), Res(FFF));
}
define (instr=EXTRACT__U6__u6_Da_Dn)
{

  alias = EXTRACT__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(U6), immu2(u6), Src1(Da), Res(Dn));
  syntax = ( "extract #%f,#%f,%f,%f",U6,u6,Da,Dn);
}

define (instr=EXTRACT__width6__offset6_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EXTRACT__width6__offset6_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),sbit3(0)),
 (bits(6),sbit3(1)),
 (bits(7),sbit3(2)),
 (bits(8),ebit3(0)),
 (bits(9),ebit3(1)),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),ebit3(2)),
 (bits(22),byte_sel4(0)),
 (bits(23),byte_sel4(1)),
 (bits(24),byte_sel4(2)),
 (bits(25),byte_sel4(3)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Extract Signed Bit Field""";
attrs = (DSHFT,V2);
# 621 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2
  alias = EXTRACT__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(byte_sel4+ebit3), immu2(byte_sel4+sbit3), Src1(Da), Res(Dn));
  syntax = ( "extract #%f,#%f,#%f,%f,%f",byte_sel4,ebit3,sbit3,Da,Dn);
}

   action =
   {
      bool sign_extract = true;
      extract_f(Res,Src1,immu1,immu2,sign_extract);




   };

}


define (instr=EXTRACT_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=EXTRACT_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EXTRACT_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Extract Signed Bit Field""";
attrs = (DSHFT,V2);
# 651 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = EXTRACT_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "extract %f,%f,%f",Da,Db,Dn);

   }

   action =
   {




      bool sign_extract = true;
      extract_f(Res,Src2,D(Src1)(13,8),D(Src1)(5,0),sign_extract);




   };

}




define (instr=EXTRACTU__U6__u6_Db_Dn_family)
{

  fields = (OPCD, immu1, immu2, Src1, Res);
   blk = dalu;
   doc_title = "extractu #width,#offset,Da,Dn";




define (instr=EXTRACTU__U6__u6_Db_Dn)
{

  alias = EXTRACTU__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(U6), immu2(u6), Src1(jjj), Res(FFF));
}
define (instr=EXTRACTU__U6__u6_Da_Dn)
{

  alias = EXTRACTU__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(U6), immu2(Da), Src1(Dn), Res(Da));
  syntax = ( "extractu #%f,#%f,%f,%f",U6,u6,Da,Dn);
}

define (instr=EXTRACTU__width6__offset6_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EXTRACTU__width6__offset6_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),sbit3(0)),
 (bits(6),sbit3(1)),
 (bits(7),sbit3(2)),
 (bits(8),ebit3(0)),
 (bits(9),ebit3(1)),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),ebit3(2)),
 (bits(22),byte_sel4(0)),
 (bits(23),byte_sel4(1)),
 (bits(24),byte_sel4(2)),
 (bits(25),byte_sel4(3)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Extract Unsigned Bit Field""";
attrs = (DSHFT,V2);
# 704 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2
  alias = EXTRACTU__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(byte_sel4+ebit3), immu2(byte_sel4+sbit3), Src1(Da), Res(Dn));
  syntax = ( "extractu #%f,#%f,#%f,%f,%f",byte_sel4,ebit3,sbit3,Da,Dn);
}


   action =
   {


      bool sign_extract = false;
      extractu_f(Res,Src1,immu1,immu2,sign_extract);





   };

}


define (instr=EXTRACTU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=EXTRACTU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EXTRACTU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Extract Unsigned Bit Field""";
attrs = (DSHFT,V2);
# 737 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = EXTRACTU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "extractu %f,%f,%f",Da,Db,Dn);

   }

   action =
   {




      bool sign_extract = false;
      extractu_f(Res,Src2,D(Src1)(13,8),D(Src1)(5,0),sign_extract);




   };
}



define (instr=INSERT__U6__u6_Db_Dn_family)
{

   fields = (OPCD, immu1, immu2, Src1, Src3, Res);
   blk = dalu;
   doc_title = "insert #width,#offset,Da,Dn";




define (instr=INSERT__U6__u6_Db_Dn)
{

  alias = INSERT__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(U6), immu2(u6), Src1(jjj), Src3(FFF), Res(FFF));
}
define (instr=INSERT__U6__u6_Da_Dn)
{

  alias = INSERT__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(Dn), immu2(Dn), Src1(Da), Src3(Dn), Res(Dn));
  syntax = ( "insert #%f,#%f,%f,%f",U6,u6,Da,Dn);
}


define (instr=INSERT__width6__offset6_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/INSERT__width6__offset6_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),sbit3(0)),
 (bits(6),sbit3(1)),
 (bits(7),sbit3(2)),
 (bits(8),ebit3(0)),
 (bits(9),ebit3(1)),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),ebit3(2)),
 (bits(22),byte_sel4(0)),
 (bits(23),byte_sel4(1)),
 (bits(24),byte_sel4(2)),
 (bits(25),byte_sel4(3)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Insert Bit Field""";
attrs = (DSHFT,V2);
# 789 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2
  alias = INSERT__U6__u6_Db_Dn_family(OPCD(OPCD), immu1(byte_sel4+ebit3), immu2(byte_sel4+sbit3), Src1(Da), Src3(Dn), Res(Dn));
  syntax = ( "insert #%f,#%f,#%f,%f,%f",byte_sel4,ebit3,sbit3,Da,Dn);
}

        action =
        {
         bits<6> width_s = (immu1>40) ? 40 : immu1 ;
  bits<6> offset_s = (immu2>39) ? 39 : immu2 ;

  bits<7> sum = (bits<7>)immu1 + (bits<7>)immu2;
         sum = (sum>40) ? 40 : sum;
  if (immu1!=0) {
   D(Res) = slice_write_dalu( D(Src3), D(Src1)(width_s.uint32()-1,0), sum, immu2);

  }



       };

}



define (instr=INSERT_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Src3, Res);
    blk = dalu;




define (instr=INSERT_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/INSERT_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Insert Bit Field""";
attrs = (DSHFT,V2);
# 825 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = INSERT_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Src3(Dn), Res(Dn));
  syntax = ( "insert %f,%f,%f",Da,Db,Dn);

   }

        action =
        {



  bits<6> width = D(Src1)(13,8);
  bits<6> offset = D(Src1)(5,0);

  bits<6> width_s = (width>40) ? 40 : width ;
  bits<6> offset_s = (offset>39) ? 39 : offset ;

  bits<7> sum = (bits<7>)width + (bits<7>)offset;
         sum = (sum>40) ? 40 : sum;
  if (width!=0) {
   D(Res) = slice_write_dalu( D(Src3), D(Src2)(width_s.uint32()-1,0), sum, offset);

  }



 };

}



define (instr=SXT_B_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);

   blk = dalu;




define (instr=SXT_B_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SXT_B_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""sign extend 8 bits input to 40 bits""";
attrs = (DBIT,V2);
# 873 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = SXT_B_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "sxt.b %f,%f",Da,Dn);

   }

   action =
   {



      D(Res) = signExtend( D(Src1).LL, 40 );



   };

}



define (instr=SXT_W_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=SXT_W_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SXT_W_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""sign extend 16 bits input to 40 bits""";
attrs = (DBIT,V2);
# 909 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = SXT_W_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "sxt.w %f,%f",Da,Dn);

   }

   action =
   {




      D(Res) = signExtend( D(Src1).L, 40 );



   };

}



define (instr=sxt_l_family)
{
   fields = (OPCD, Src1, Res);
   blk = dalu;




   define (instr=SXT_L_Dn)
   {

   }

   define (instr=SXT_L_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SXT_L_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""sign extend 32 bits input to 40 bits""";
attrs = (DBIT,V2);
# 950 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = sxt_l_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "sxt.l %f,%f",Da,Dn);

   }

   action =
   {





      D(Res) = signExtend( concat( D(Src1).H, D(Src1).L), 40);



   };

}




define (instr=ZXT_B_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=ZXT_B_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ZXT_B_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""zero extend 8 bits input to 40 bits""";
attrs = (DBIT,V2);
# 986 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = ZXT_B_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "zxt.b %f,%f",Da,Dn);

   }

   action =
   {




      D(Res) = zeroExtend( D(Src1).LL, 40 );



   };

}



define (instr=ZXT_W_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);
   blk = dalu;




define (instr=ZXT_W_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ZXT_W_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""zero extend 16 bits input to 40 bits""";
attrs = (DBIT,V2);
# 1023 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = ZXT_W_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "zxt.w %f,%f",Da,Dn);

   }

   action =
   {




      D(Res) = zeroExtend( D(Src1).L, 40 );



   };

}


define (instr=zxt_l_family)
{
   fields = (OPCD, Src1, Res);
   blk = dalu;




   define (instr=ZXT_L_Dn)
   {

   }

   define (instr=ZXT_L_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ZXT_L_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""zero extend 32 bits input to 40 bits""";
attrs = (DBIT,V2);
# 1063 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = zxt_l_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "zxt.l %f,%f",Da,Dn);

   }

   action =
   {






      D(Res) = concat (zero(8),D(Src1)(31,0));



   };
}




define (instr=DOALIGN_Ds_Dt_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=DOALIGN_Ds_Dt_Dn)
{


  alias = DOALIGN_Ds_Dt_Dn_family(OPCD(OPCD), Src1(GGG.Ds), Src2(GGG.Dt), Res(FFF));



}
define (instr=DOALIGN_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DOALIGN_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Extract Unaligned 4 Bytes""";
attrs = (DSHFT,V5);
# 1108 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2
  alias = DOALIGN_Ds_Dt_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "doalign %f,%f,%f",Da,Db,Dn);
}

   action =
   {




      bits<8> tmp=0;
      switch ( (GCR.BAM).uint32() )
      {
  case 1: D(Res) = concat ( tmp, D(Src2)(7,0), D(Src1)(31,8) );
   break;

  case 2: D(Res) = concat ( tmp, D(Src2)(15,0), D(Src1)(31,16) );
   break;

  case 3: D(Res) = concat ( tmp, D(Src2)(23,0), D(Src1)(31,24) );
   break;

  case 5: D(Res) = concat ( tmp, D(Src1)(23,0), D(Src2)(31,24) );
   break;

  case 6: D(Res) = concat ( tmp, D(Src1)(15,0), D(Src2)(31,16) );
   break;

  case 7: D(Res) = concat ( tmp, D(Src1)(7,0), D(Src2)(31,8) );
   break;

  default:D(Res) = concat ( tmp, D(Src1)(31,0) );
   break;
      }



      D(Res).E = 0;
   };

}



define (instr=COB_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=COB_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/COB_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Count One-Value Bits""";
attrs = (DBIT,V6);
# 1165 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = COB_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "cob %f,%f",Da,Dn);

   }


action=
{






   D(Res) = zeroExtend(NumberOfNonConsecutiveOnes32(D(Src1)(31,0)),40);



};

}


define (instr=nand_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=NAND_Da_Dn)
{

}

define (instr=NAND_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NAND_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Logical AND-NOT""";
attrs = (DBIT,V6);
# 1208 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = nand_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "nand %f,%f,%f",Da,Db,Dn);

   }

action=
{






   D(Res) = ~(D(Src2)&D(Src1));



};

}



define (instr=neor_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=NEOR_Da_Dn)
{

}

define (instr=NEOR_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NEOR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Logical Exclusive OR-NOT""";
attrs = (DBIT,V6);
# 1248 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = neor_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "neor %f,%f,%f",Da,Db,Dn);

   }

action=
{






   D(Res) = ~(D(Src2)^D(Src1));



};

}



define (instr=nor_family)
{
   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;





define (instr=NOR_Da_Dn)
{

}

define (instr=NOR_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NOR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Logical OR-NOT""";
attrs = (DBIT,V6);
# 1289 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2

alias = nor_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "nor %f,%f,%f",Da,Db,Dn);

   }

action=
{






   D(Res) = ~(D(Src2)|D(Src1));



};

}



define (instr=CLIP20__u4_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;


define (instr=CLIP20__u4_Dn)
{

  alias = CLIP20__u4_Dn_family(OPCD(OPCD), immu(u4), Src1(FFF), Res(FFF));
}
define (instr=CLIP20__u5_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CLIP20__u5_Da_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x20)Clip Two 20-Bit Values to Bytes""";
attrs = (DARIT,V6D);
# 1331 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2
  alias = CLIP20__u4_Dn_family(OPCD(OPCD), immu(u5), Src1(Da), Res(Dn));
  syntax = ( "clip20 #%f,%f,%f",u5,Da,Dn);
}


action=
{




   bool dovf = false;
   bits<20> low_src = D(Src1).WL;
   bits<20> high_src = D(Src1).WH;
   if ( (D(Src1).WL).signedLT(0) ) {
      low_src=0;
      dovf = true;
   }
   if ( (D(Src1).WH).signedLT(0) ) {
      high_src=0;
      dovf = true;
   }
   bits<1> last_low = (immu==0) ? 0 : low_src(immu-1);
   bits<1> last_high = (immu==0) ? 0 : high_src(immu-1);
   low_src >>= immu;
   high_src >>= immu;
   low_src = low_src + last_low;
   high_src = high_src + last_high;
   D(Res).WL = saturation8_nochk(zeroExtend(low_src,40));
   D(Res).WH = saturation8_nochk(zeroExtend(high_src,40));




   if (dovf) set_emr_dovf();

};

}

define (instr=CLIP20__e_u2_Dn_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = dalu;

define (instr=CLIP20__e_u2_Dn)
{

  alias = CLIP20__e_u2_Dn_family(OPCD(OPCD), immu(e_u2), Src1(FFF), Res(FFF));
}

action=
{





   bool dovf = false;
   bits<5> shift_val = immu+16;
   bits<20> low_src = D(Src1).WL;
   bits<20> high_src = D(Src1).WH;
   if ( (D(Src1).WL).signedLT(0) ) {
      low_src=0;
      dovf = true;
   }
   if ( (D(Src1).WH).signedLT(0) ) {
      high_src=0;
      dovf = true;
   }
   bits<1> last_low = (shift_val==0) ? 0 : low_src(shift_val-1);
   bits<1> last_high = (shift_val==0) ? 0 : high_src(shift_val-1);
   low_src >>= shift_val;
   high_src >>= shift_val;
   low_src = low_src + last_low;
   high_src = high_src + last_high;
   D(Res).WL = saturation8_nochk(zeroExtend(low_src,40));
   D(Res).WH = saturation8_nochk(zeroExtend(high_src,40));




   if (dovf) set_emr_dovf();



};


}


define (instr=BINTRLV3B_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=BINTRLV3B_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BINTRLV3B_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bit Interleave 3 Bytes""";
attrs = (DBIT,V6);
# 1440 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = BINTRLV3B_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "bintrlv3b %f,%f",Da,Dn);

   }


action=
{




    bits<32> part[3],res;
    int i;
    part[0] = zeroExtend(D(Src1).LL,32);
    part[1] = zeroExtend(D(Src1).LH,32);
    part[2] = zeroExtend(D(Src1).HL,32);

    res = 0;

    for(i=0; i<8; i++)
    {
       res += ((part[0] & 0x1) + ((part[1] & 0x1) << 1) + ((part[2] & 0x1) << 2))<<(3*i);

       part[0] = part[0] >> 1;
       part[1] = part[1] >> 1;
       part[2] = part[2] >> 1;
    }
    D(Res).L = res(15,0);
    D(Res).H = (res(31,16) & 0x00FF) + (D(Src1).H & 0xFF00);

    D(Res).E = 0;




};

}


define (instr=BDINTRLV3B_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=BDINTRLV3B_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BDINTRLV3B_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bit De-Interleave 3 Bytes""";
attrs = (DBIT,V6);
# 1498 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = BDINTRLV3B_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "bdintrlv3b %f,%f",Da,Dn);

   }


action=
{




    bits<32> res[3];
    int i;

    res[0] = res[1] = res[2] = 0;
    bits<32> tval = D(Src1);
    for(i=7; i>=0; i--)
    {
       res[0] = res[0] << 1;
       res[1] = res[1] << 1;
       res[2] = res[2] << 1;

       res[0] += ((tval >> (3*i))&0x1);
       res[1] += ((tval >> (3*i+1))&0x1);
       res[2] += ((tval >> (3*i+2))&0x1);
    }

    D(Res).L = (res[0] & 0x000000FF) + ((res[1] & 0x000000FF) << 0x8);
    D(Res).H = (res[2](15,0)) + (D(Src1).H & 0xFF00);

    D(Res).E = 0;




};

}


define (instr=BREV4_Da_Dn_family)
{

  fields = (OPCD, Src1, Res);



  blk = dalu;


define (instr=BREV4_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BREV4_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Bit Reverse 4 Bytes""";
attrs = (DBIT,V6);
# 1556 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl" 2




  alias = BREV4_Da_Dn_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "brev4 %f,%f",Da,Dn);

   }


action=
{




    bits<32> part[4],res[4];
    res[0] = res[1] = res[2] = res[3] = 0;

    info(4,"Src1= "<<Src1,", Res= "<<Res );
    int i;
    part[0] = zeroExtend(D(Src1).LL,32);
    part[1] = zeroExtend(D(Src1).LH,32);
    part[2] = zeroExtend(D(Src1).HL,32);
    part[3] = zeroExtend(D(Src1).HH,32);

    for(i=0; i<8; i++)
    {
       res[0] = (res[0] << 1) + (part[0] & 0x1);
       res[1] = (res[1] << 1) + (part[1] & 0x1);
       res[2] = (res[2] << 1) + (part[2] & 0x1);
       res[3] = (res[3] << 1) + (part[3] & 0x1);

       part[0] = part[0] >> 1;
       part[1] = part[1] >> 1;
       part[2] = part[2] >> 1;
       part[3] = part[3] >> 1;
    }

    D(Res).L = (res[0] & 0x000000FF) + ((res[1] & 0x000000FF) << 0x8);
    D(Res).H = (res[2] & 0x000000FF) + ((res[3] & 0x000000FF) << 0x8);
    D(Res).E = 0;
# 1621 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_logical_bfu.adl"
};

}
# 43 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 1

define (instr=MAC__s16_Da_Dn_family)
{

  fields = (OPCD, imms, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MAC__s16_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC__s16_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),s16_t5(0)),
 (bits(31),b0),
 (bits(32),s16_t5(1)),
 (bits(33),s16_t5(2)),
 (bits(34),s16_t5(3)),
 (bits(35),s16_t5(4)),
 (bits(36),s16_t5(5)),
 (bits(37),s16_t5(6)),
 (bits(38),s16_t5(7)),
 (bits(39),s16_t5(8)),
 (bits(40),s16_t5(9)),
 (bits(41),s16_t5(10)),
 (bits(42),s16_t5(11)),
 (bits(43),s16_t5(12)),
 (bits(44),s16_t5(13)),
 (bits(45),s16_t5(14)),
 (bits(46),s16_t5(15)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),b1),
 (bits(54),b1),
 (bits(55),b1),
 (bits(56),b1),
 (bits(57),b1),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V2);
# 15 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MAC__s16_Da_Dn_family(OPCD(OPCD), imms(s16_t5), Src2(Da), SrcAcc1(Dn), Res(Dn));
  syntax = ( "mac #%f,%f,%f",s16_t5,Da,Dn);

   }


action=
{





   bits<41> mult = ((signedMultiply( signExtend(D(Src2)(31,16),41), signExtend(imms,41) ))<<1);
   bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
   overflow40(tmp);
   saturation32 (tmp,Res);




};

}


define (instr=MAC__s16_Da_L_Dn_family)
{

  fields = (OPCD, imms, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MAC__s16_Da_L_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC__s16_Da_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),s16_t5(0)),
 (bits(31),b0),
 (bits(32),s16_t5(1)),
 (bits(33),s16_t5(2)),
 (bits(34),s16_t5(3)),
 (bits(35),s16_t5(4)),
 (bits(36),s16_t5(5)),
 (bits(37),s16_t5(6)),
 (bits(38),s16_t5(7)),
 (bits(39),s16_t5(8)),
 (bits(40),s16_t5(9)),
 (bits(41),s16_t5(10)),
 (bits(42),s16_t5(11)),
 (bits(43),s16_t5(12)),
 (bits(44),s16_t5(13)),
 (bits(45),s16_t5(14)),
 (bits(46),s16_t5(15)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),b1),
 (bits(54),b1),
 (bits(55),b1),
 (bits(56),b1),
 (bits(57),b1),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V5);
# 58 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MAC__s16_Da_L_Dn_family(OPCD(OPCD), imms(s16_t5), Src2(Da), SrcAcc1(Dn), Res(Dn));
  syntax = ( "mac #%f,%f.l,%f",s16_t5,Da,Dn);

   }


action=
{




   bits<41> mult = ((signedMultiply( signExtend(D(Src2)(15,0),41), signExtend(imms,41) ))<<1);
   bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
   overflow40(tmp);
   saturation32 (tmp,Res);




};
}



define (instr=mac_family)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res, Config, Subtraction);
   blk = dalu;
   doc_title = "mac [+/-]Da.[lh],Db.[lh],Dn";




   define (instr=MAC_pDa_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC_pDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V2);
# 100 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




alias = mac_family( OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn),Config(0),Subtraction(0));
  syntax = ( "mac %f,%f,%f",Da,Db,Dn);

   }

   define (instr=MAC_pDa_Da_Dn)
   {

      attrs = one_word;
   }

   define (instr=MAC_mDa_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V2);
# 118 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2





      alias = mac_family( OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn),Config(0),Subtraction(1));
  syntax = ( "mac -%f,%f,%f",Da,Db,Dn);

   }

   define (instr=MAC_pDa_H_Db_L_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC_pDa_H_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V5);
# 131 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2





      alias = mac_family( OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn),Config(1),Subtraction(0));
  syntax = ( "mac %f.h,%f.l,%f",Da,Db,Dn);

   }

   define (instr=MAC_mDa_H_Db_L_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC_mDa_H_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V5);
# 144 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2





      alias = mac_family( OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn),Config(1),Subtraction(1));
      syntax = ( "mac -%f.h,%f.l,%f",Da,Db,Dn);

   }

   define (instr=MAC_pDa_L_Db_L_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC_pDa_L_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V5);
# 157 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2





      alias = mac_family( OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn),Config(3),Subtraction(0));
  syntax = ( "mac %f.l,%f.l,%f",Da,Db,Dn);

   }

   define (instr=MAC_mDa_L_Db_L_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC_mDa_L_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V5);
# 170 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2





      alias = mac_family( OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn),Config(3),Subtraction(1));
  syntax = ( "mac -%f.l,%f.l,%f",Da,Db,Dn);

   }

   action =
   {
      bits<16> src1,src2;
      GetSourcesPortions(Src1,&src1,Src2,&src2,Config);
      bits<41> mult = ((signedMultiply( signExtend(src1,41), signExtend(src2,41) ))<<1);
      bits<41> tmp;
      if (Subtraction==1) {
  tmp = (sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      } else {
  tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      }
      overflow40(tmp);
      saturation32 (tmp,Res);



   };

}


define (instr=MAC32_H_pDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);




   blk = dalu;



define (instr=MAC32_H_pDa_Db_Dn)
{

  alias = MAC32_H_pDa_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}


   action =
   {



      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(64,32),41)<<1;
      bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      overflow40(tmp);
      saturation32(tmp,Res);



   };
}


define (instr=MAC32_L_pDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;






define (instr=MAC32_L_pDa_Db_Dn)
{

  alias = MAC32_L_pDa_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}


   action =
   {



      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(31,0),41)<<1;
      bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      overflow40(tmp);
      saturation32(tmp,Res);



   };
}


define (instr=mac_family2)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;
   doc_title = "mac -Da,Db,Dn";





   define (instr=MAC_mDa_Da_Dn)
   {

      alias = mac_family2( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );
   }


   action =
   {




      bits<41> mult = ((signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) ))<<1);
      bits<41> tmp=(sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      overflow40(tmp);
      saturation32 (tmp,Res);




   };
}


define (instr=MAC32_H_mDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;



define (instr=MAC32_H_mDa_Db_Dn)
{

  alias = MAC32_H_mDa_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}


   action =
   {



      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(64,32),41)<<1;
      bits<41> tmp = (sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      overflow40(tmp);
      saturation32(tmp,Res);



   };
}


define (instr=MAC32_L_mDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;



define (instr=MAC32_L_mDa_Db_Dn)
{

  alias = MAC32_L_mDa_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}


   action =
   {



      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(31,0),41)<<1;
      bits<41> tmp = (sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      overflow40(tmp);
      saturation32(tmp,Res);



   };
}




define (instr=mac_family3)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;

   define (instr=MAC_pDa_H_Da_L_Dn)
   {

      alias = mac_family3( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );
      attrs = (Type11,one_word);
   }

   define (instr=MAC_pDa_L_Db_H_Dn)
   {

      alias = mac_family3( OPCD(OPCD), Src1(JJJJJ.Db), Src2(JJJJJ.Da), SrcAcc1(FFF), Res(FFF) );
      attrs = (Type11,one_word);
   }

   define (instr=MAC_pDa_L_Da_H_Dn)
   {


      alias = mac_family3( OPCD(OPCD), Src1(jj.Da2), Src2(jj.Da1), SrcAcc1(FFF), Res(FFF) );
      attrs = (Type11,one_word);
   }


   action =
   {




      bits<41> mult = ((signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(15,0),41) ))<<1);
      bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      overflow40(tmp);
      saturation32(tmp,Res);



   };

}



define (instr=mac_family4)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





   define (instr=MAC_mDa_H_Da_L_Dn)
   {

      alias = mac_family4( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MAC_mDa_L_Db_H_Dn)
   {

      alias = mac_family4( OPCD(OPCD), Src1(JJJJJ.Db), Src2(JJJJJ.Da), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MAC_mDa_L_Da_H_Dn)
   {

      alias = mac_family4( OPCD(OPCD), Src1(jj.Da2), Src2(jj.Da1), SrcAcc1(FFF), Res(FFF) );



   }

   action =
   {




      bits<41> mult = ((signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(15,0),41) ))<<1);
      bits<41> tmp=(sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      overflow40(tmp);
      saturation32 (tmp,Res);



   };

}





define (instr=mac_family5)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





   define (instr=MAC_pDa_L_Da_L_Dn)
   {

      alias = mac_family5( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }


   action =
   {




      bits<41> mult = ((signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) ))<<1);
      bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      overflow40(tmp);
      saturation32 (tmp,Res);



   };

}


define (instr=mac_family6)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





   define (instr=MAC_mDa_L_Da_L_Dn)
   {

      alias = mac_family6( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }


   action =
   {




      bits<41> mult = ((signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) ))<<1);
      bits<41> tmp = (sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      overflow40(tmp);
      saturation32 (tmp,Res);



   };

}

define (instr=macr_family1)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;




   define (instr=MACR_pDa_Db_Dn)
   {

      alias = macr_family1( OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_pDa_Da_Dn)
   {

      alias = macr_family1( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }

   action =
   {




    sbits<41> mult = ((signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) ))<<1);
    sbits<41> addm = (sbits<41>)D(SrcAcc1) + mult;

    bits <40> roundval = (f_inst_rnd_mpy(addm))(39,0);
    D(Res) = roundval;
# 601 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
 };
}


define (instr=macr_family2)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;




   define (instr=MACR_mDa_Db_Dn)
   {

      alias = macr_family2( OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), SrcAcc1(FFF), Res(FFF) );



   }
   define (instr=MACR_mDa_Da_Dn)
   {

      alias = macr_family2( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }

   action =
   {



      sbits<41> mult = ((signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) ))<<1);
      sbits<41> subm = (sbits<41>)D(SrcAcc1) - mult;


      bits <40> roundval = (f_inst_rnd_mpy(subm))(39,0);
      D(Res) = roundval;



   };
}




define (instr=macr_family3)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;




   define (instr=MACR_pDa_H_Db_L_Dn)
   {

      alias = macr_family3( OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_pDa_H_Da_L_Dn)
   {

      alias = macr_family3( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_pDa_L_Db_H_Dn)
   {

      alias = macr_family3( OPCD(OPCD), Src1(JJJJJ.Db), Src2(JJJJJ.Da), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_pDa_L_Da_H_Dn)
   {

      alias = macr_family3( OPCD(OPCD), Src1(jj.Da2), Src2(jj.Da1), SrcAcc1(FFF), Res(FFF) );



   }


   action =
   {



      sbits<41> mult = ((signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(15,0),41) ))<<1);
      sbits<41> tmp = (sbits<41>)D(SrcAcc1) + mult;
      bits <40> roundval = (f_inst_rnd_mpy(tmp))(39,0);
      D(Res) = roundval;



   };
}


define (instr=macr_family4)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;




   define (instr=MACR_mDa_H_Db_L_Dn)
   {

      alias = macr_family4( OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_mDa_H_Da_L_Dn)
   {

      alias = macr_family4( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_mDa_L_Db_H_Dn)
   {

      alias = macr_family4( OPCD(OPCD), Src1(JJJJJ.Db), Src2(JJJJJ.Da), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_mDa_L_Da_H_Dn)
   {

      alias = macr_family4( OPCD(OPCD), Src1(jj.Da2), Src2(jj.Da1), SrcAcc1(FFF), Res(FFF) );



   }



   action =
   {




      sbits<41> mult = ((signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(15,0),41) ))<<1);
      sbits<41> subm = (sbits<41>)D(SrcAcc1) - mult;


      bits <40> roundval = (f_inst_rnd_mpy(subm))(39,0);
      D(Res) = roundval;
# 785 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
   };

}




define (instr=macr_family5)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;




   define (instr=MACR_pDa_L_Db_L_Dn)
   {

      alias = macr_family5( OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_pDa_L_Da_L_Dn)
   {

      alias = macr_family5( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }


   action =
   {




      sbits<41> mult = ((signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) ))<<1);
      sbits<41> tmp = (sbits<41>)D(SrcAcc1) + mult;
      bits <40> roundval = (f_inst_rnd_mpy(tmp))(39,0);
      D(Res) = roundval;
# 845 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
   };

}


define (instr=macr_family6)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;




   define (instr=MACR_mDa_L_Db_L_Dn)
   {

      alias = macr_family6( OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), SrcAcc1(FFF), Res(FFF) );



   }

   define (instr=MACR_mDa_L_Da_L_Dn)
   {

      alias = macr_family6( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }


   action =
   {




      sbits<41> mult = ((signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) ))<<1);
      sbits<41> subm = (sbits<41>)D(SrcAcc1) - mult;


      bits <40> roundval = (f_inst_rnd_mpy(subm))(39,0);
      D(Res) = roundval;
# 904 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
   };

}




define (instr = imac_p_family)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;
   doc_title = "imac +Da,Db,Dn";




   define (instr=IMAC_pDa_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMAC_pDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiply-Accumulate""";
attrs = (DMPY,V2);
# 923 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2







alias = imac_p_family( OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "imac %f,%f,%f",Da,Db,Dn);


   }

   define (instr=IMAC_pDa_Da_Dn)
   {

      alias = imac_p_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );



   }

   action=
   {




      bits<41> mult = (signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) ));
      bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      overflow40(tmp);
      D(Res) = tmp(39,0);



   };
}


define (instr=IMAC32_H_pDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;




define (instr=IMAC32_H_pDa_Db_Dn)
{

  alias = IMAC32_H_pDa_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

   action =
   {






      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(64,32),41);
      bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      D(Res) = tmp(39,0);



   };

}

define (instr=IMAC32_L_pDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);

   blk = dalu;




define (instr=IMAC32_L_pDa_Db_Dn)
{

  alias = IMAC32_L_pDa_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

   action =
   {




      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(31,0),41);
      bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      D(Res) = tmp(39,0);



   };
}


define (instr=IMAC32_H_mDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;




define (instr=IMAC32_H_mDa_Db_Dn)
{

  alias = IMAC32_H_mDa_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

   action =
   {






      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(64,32),41);
      bits<41> tmp = (sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      D(Res) = tmp(39,0);



   };

}

define (instr=IMAC32_L_mDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;




define (instr=IMAC32_L_mDa_Db_Dn)
{

  alias = IMAC32_L_mDa_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

   action =
   {




      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(31,0),41);
      bits<41> tmp = (sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      D(Res) = tmp(39,0);



   };
}



define (instr = imac_m_family)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;
   doc_title = "imac -Da,Db,Dn";




   define (instr=IMAC_mDa_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMAC_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiply-Accumulate""";
attrs = (DMPY,V2);
# 1108 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




alias = imac_m_family( OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "imac -%f,%f,%f",Da,Db,Dn);

   }

   define (instr=IMAC_mDa_Da_Dn)
   {

      alias = imac_m_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF) );
   }


   action=
   {




      bits<41> mult = (signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) ));
      bits<41> tmp = (sbits<41>)D(SrcAcc1) - (sbits<41>)mult;
      overflow40(tmp);
      D(Res) = tmp(39,0);



   };

}



define (instr=IMACLHUU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=IMACLHUU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACLHUU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiply-Accumulate Lower Unsigned by Upper Unsigned""";
attrs = (DMPY,V2);
# 1155 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = IMACLHUU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "imaclhuu %f,%f,%f",Da,Db,Dn);

   }

action=
{



 bits<41> mult = ( zeroExtend(D(Src1).L,41)*zeroExtend(D(Src2).H,41) );
 bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
 overflow40(tmp);
 D(Res) = tmp(39,0);



};

}




define (instr=IMACUS_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=IMACUS_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACUS_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiply-Accumulate Unsigned by Signed""";
attrs = (DMPY,V2);
# 1196 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = IMACUS_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "imacus %f,%f,%f",Da,Db,Dn);

   }


action=
{






 bits<41> mult = signExtend(signedMultiply( zeroExtend(D(Src1).L,40), signExtend(D(Src2).H,40) ), 41);
 bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
 overflow40(tmp);
 D(Res) = tmp(39,0);



};

}



define (instr=IMACSU2_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=IMACSU2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACSU2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed-Unsigned Integer Multiply-Accumulate""";
attrs = (DMPY,V6);
# 1240 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = IMACSU2_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "imacsu2 %f,%f,%f",Da,Db,Dn);

   }


action=
{





   info(4,"Src1= "<<Src1, "Src2= "<<Src2, "SrcAcc1= "<<SrcAcc1, "Res= "<<Res);
# 1280 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
      bool W20_OVF=false, W16_OVF=false;
      if(SR.W20==1)
  W20_OVF=true;
      else if(SR.SM2==1)
  W16_OVF=true;


      bits<40> W21_WORD = 0x00001fffffull;
      bits<40> W20_WORD = 0x00000fffffull;
      bits<40> resultH = signExtend(signedMultiply( signExtend(D(Src1).H,40),zeroExtend(D(Src2).H,40)),40);
      bits<40> resultL = signExtend(signedMultiply( signExtend(D(Src1).L,40),zeroExtend(D(Src2).L,40)),40);

      resultL = signExtend(resultL(20,0),40);
      resultH = signExtend(resultH(20,0),40);

      bits<40> tvalL = resultL;
      bits<40> tvalH = resultH;

      resultL += (sbits<40>)D(SrcAcc1).WL;
      resultH += (sbits<40>)D(SrcAcc1).WH;

      if(W16_OVF)
      {
  W20_OVF=false;
  bits<40> src3h_16b = signExtend(D(SrcAcc1).H,40);
  bits<40> src3l_16b = signExtend(D(SrcAcc1).L,40);


  bits<40> mask = 0x000001ffffull;
  bits<32> undef_src1l_16b = zeroExtend(D(Src1).L,32) >> 8;
  bits<32> undef_src1h_16b = zeroExtend(D(Src1).H,32) >> 8;
  if ((undef_src1l_16b != 0x000000ff) || (undef_src1l_16b != 0x00) ||
        (undef_src1h_16b != 0x000000ff) || (undef_src1h_16b != 0x00) ||
        ((zeroExtend(D(Src2).L,32) >> 8)!= 0x00) || (zeroExtend(D(Src2).H,32) >> 8)!=0x00)
  {
     mask = W20_WORD;
  }


  tvalL = (tvalL & mask) + src3l_16b ;
  tvalH = (tvalH & mask) + src3h_16b ;
  if(saturate16_sc3800(&tvalL))
  {
     if (mask == W20_WORD)
     {
        if ((src3l_16b & 0x0000008000ull)!=0)
        {
    tvalL = ~0x0000007fffull;
        }
        else
        {
    tvalL = 0x0000007fff;
        }
     }
     resultL=tvalL;
  }
  if(saturate16_sc3800(&tvalH))
  {
     if (mask == W20_WORD)
     {
        if ((src3h_16b & 0x0000008000ull)!=0)
        {
    tvalH = ~0x0000007fffull;
        }
        else
        {
    tvalH = 0x0000007fff;
        }

       }
     resultH=tvalH;
  }
      }

      if(W20_OVF)
      {
  set_W20_OVF(resultL(20,0));
  set_W20_OVF(resultH(20,0));
      }
      D(Res).WL = resultL(19,0);
      D(Res).WH = resultH(19,0);
# 1385 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}



define (instr=MACSU_Dc_Dd_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACSU_Dc_Dd_Dn)
{


  alias = MACSU_Dc_Dd_Dn_family(OPCD(OPCD), Src1(ee.Dc), Src2(ee.Dd), SrcAcc1(FFF), Res(FFF));



}
define (instr=MACSU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACSU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Fractional Multiply-Accumulate Signed by Unsigned""";
attrs = (DMPY,V2);
# 1413 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2
  alias = MACSU_Dc_Dd_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macsu %f,%f,%f",Da,Db,Dn);
}


action=
{






 bits<41> mult = signExtend(signedMultiply( signExtend(D(Src1)(31,16),40), zeroExtend(D(Src2)(15,0),40) ), 41)<<1;
 bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
 overflow40(tmp);
 D(Res) = tmp(39,0);



};

}



define (instr=MACUS_Dc_Dd_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACUS_Dc_Dd_Dn)
{


  alias = MACUS_Dc_Dd_Dn_family(OPCD(OPCD), Src1(ee.Dc), Src2(ee.Dd), SrcAcc1(FFF), Res(FFF));



}
define (instr=MACUS_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACUS_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Fractional Multiply-Accumulate Unsigned by Signed""";
attrs = (DMPY,V2);
# 1461 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2
  alias = MACUS_Dc_Dd_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macus %f,%f,%f",Da,Db,Dn);
}


action=
{






 bits<41> mult = signExtend(signedMultiply( zeroExtend(D(Src1)(15,0),40), signExtend(D(Src2)(31,16),40) ), 41)<<1;
 bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
 overflow40(tmp);
 D(Res) = tmp(39,0);



};

}


define (instr=MACUU_Dc_Dd_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;
define (instr=MACUU_Dc_Dd_Dn)
{


  alias = MACUU_Dc_Dd_Dn_family(OPCD(OPCD), Src1(ee.Dc), Src2(ee.Dd), SrcAcc1(FFF), Res(FFF));



}

action=
{



 bits<41> mult = ( zeroExtend(D(Src1)(15,0),40)*zeroExtend(D(Src2)(15,0),40) )<<1;
 bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
 overflow40(tmp);
 D(Res) = tmp(39,0);



};
}

define (instr=MACUU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;
define (instr=MACUU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACUU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Fractional Multiply-Accumulate Unsigned by Unsigned""";
attrs = (DMPY,V6);
# 1530 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MACUU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macuu %f,%f,%f",Da,Db,Dn);

   }

action=
{



 bits<41> mult = ( zeroExtend(D(Src1)(15,0),40)*zeroExtend(D(Src2)(15,0),40) )<<1;
 bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
 overflow40(tmp);
 D(Res) = tmp(39,0);



};
}


define (instr=DMACSU_Dc_Dd_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=DMACSU_Dc_Dd_Dn)
{


  alias = DMACSU_Dc_Dd_Dn_family(OPCD(OPCD), Src1(ee.Dc), Src2(ee.Dd), SrcAcc1(FFF), Res(FFF));



}
define (instr=DMACSU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DMACSU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiply Signed by Unsigned and Accumulate With Right Shifted Data Register""";
attrs = (DMPY,V2);
# 1577 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2
  alias = DMACSU_Dc_Dd_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "dmacsu %f,%f,%f",Da,Db,Dn);
}


action=
{






 bits<41> mult = (signedMultiply( signExtend(D(Src1)(31,16),40), zeroExtend(D(Src2)(15,0),40) ))<<1;
 bits<41> tmp = signExtend( ( (D(SrcAcc1)>>16)(23,0) ),41);
 tmp = (sbits<41>)tmp + (sbits<41>)mult;
 D(Res) = tmp(39,0);




};

}


define (instr=DMACSS_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=DMACSS_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DMACSS_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Fractional Double Precision Multiply Assist - Signed by Signed""";
attrs = (DMPY,V6);
# 1615 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = DMACSS_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "dmacss %f,%f,%f",Da,Db,Dn);

   }

action=
{



 bits<41> mult = (signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1;
 bits<41> tmp = signExtend( ( (D(SrcAcc1)>>16)(23,0) ),41);
 tmp = (sbits<41>)tmp + (sbits<41>)mult;
 D(Res) = tmp(39,0);



};

}

define (instr=DMACSS_Dc_Dd_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=DMACSS_Dc_Dd_Dn)
{


  alias = DMACSS_Dc_Dd_Dn_family(OPCD(OPCD), Src1(ee.Dc), Src2(ee.Dd), SrcAcc1(FFF), Res(FFF));



}


action=
{




 bits<41> mult = (signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1;
 bits<41> tmp = signExtend( ( (D(SrcAcc1)>>16)(23,0) ),41);
 tmp = (sbits<41>)tmp + (sbits<41>)mult;
 D(Res) = tmp(39,0);



};

}


define (instr=IMACUU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;
define (instr=IMACUU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACUU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Double Precision Unsigned-Unsigned Multiply-Accumulate Assist.""";
attrs = (DMPY,V6);
# 1690 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = IMACUU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "imacuu %f,%f,%f",Da,Db,Dn);

   }

action=
{




   bits<41> mult = ( zeroExtend(D(Src1).L,41)*zeroExtend(D(Src2).L,41) );



   bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;


   overflow40(tmp);
   D(Res) = tmp(39,0);



};
}

define (instr=IMACUU32_H_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;
define (instr=IMACUU32_H_Da_Db_Dn)
{

  alias = IMACUU32_H_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

action=
{




   bits<64> mult32 = ( zeroExtend(D(Src2)(31,0),64)*zeroExtend(D(Src1)(31,0),64) );
   bits<41> mult = zeroExtend(mult32(63,32),41);
   bits<41> tmp = (sbits<41>)D(SrcAcc1) + mult;
   overflow40(tmp);
   D(Res) = tmp(39,0);



};
}

define (instr=IMACUU32_L_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;
define (instr=IMACUU32_L_Da_Db_Dn)
{

  alias = IMACUU32_L_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

action=
{




   bits<64> mult32 = ( zeroExtend(D(Src2)(31,0),64)*zeroExtend(D(Src1)(31,0),64) );
   bits<41> mult = zeroExtend(mult32(31,0),41);
   bits<41> tmp = (sbits<41>)D(SrcAcc1) + mult;
   overflow40(tmp);
   D(Res) = tmp(39,0);



};

}



define (instr=DMAC_pDa_H_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;
define (instr=DMAC_pDa_H_Db_Dn)
{

  alias = DMAC_pDa_H_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

define (instr=MACM_pDa_H_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACM_pDa_H_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Mixed Precision Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V6D);
# 1802 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2
  alias = DMAC_pDa_H_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macm %f.h,%f,%f",Da,Db,Dn);
}



action=
{

    bits<64> mult = (signedMultiply( signExtend( D(Src1).H,64),signExtend( D(Src2)(31,0),64) ))<<1;

    bits<64> tmp = (sbits<64>)D(SrcAcc1) + (mult>>16);

    D(Res) = tmp(39,0);




};

}


define (instr=DMAC_mDa_H_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=DMAC_mDa_H_Db_Dn)
{

  alias = DMAC_mDa_H_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

define (instr=MACM_mDa_H_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACM_mDa_H_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Mixed Precision Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V6D);
# 1844 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2
  alias = DMAC_mDa_H_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macm -%f.h,%f,%f",Da,Db,Dn);
}


action=
{




    bits<64> mult = (signedMultiply( signExtend( D(Src1).H,64),signExtend( D(Src2)(31,0),64) ))<<1;

    bits<64> tmp = (sbits<64>)D(SrcAcc1) + ((0-mult)>>16);

    D(Res) = tmp(39,0);
# 1870 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}



define (instr=mac2_p_family)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;




   define (instr=MAC2_pDa_Da_Dn)
   {




      alias = mac2_p_family(OPCD(OPCD),Src1(jj.Da2), Src2(jj.Da1), SrcAcc1(FFF), Res(FFF) );
   }

   define (instr=MAC2_pDa_Db_Dn)
   {



# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC2_pDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V6D);
# 1900 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




      alias = mac2_p_family(OPCD(OPCD),Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "mac2 %f,%f,%f",Da,Db,Dn);

   }

   action =
   {




    bits<40> rnd_res =((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    rnd_res = signExtend(rnd_res(32,16),40);
    info(4," rnd_res= "<<hex<<rnd_res);
    bits<40> operand20bit = signExtend(D(SrcAcc1).WL,40);
    bits<40> result = rnd_res + operand20bit;

    info(4," result= "<<hex<<result);
    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalL= signExtend(D(SrcAcc1).L,40);
       tvalL += rnd_res;
       info(4," tvalL= "<<hex<<tvalL);
       if(saturate16_sc3800(&tvalL) )
   result=tvalL;
    }
    info(4," result= "<<hex<<result);
    D(Res).WL = result(19,0);

    rnd_res = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    rnd_res = signExtend(rnd_res(32,16),40);
    operand20bit = signExtend(D(SrcAcc1).WH,40);
    result = rnd_res + operand20bit;

    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalH= signExtend(D(SrcAcc1).H,40);
       tvalH += rnd_res;
       if(saturate16_sc3800(&tvalH))
   result=tvalH;
    }
    D(Res).WH = result(19,0);
# 1975 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
   };

}


define (instr=mac2_m_family)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





   define (instr=MAC2_mDa_Da_Dn)
   {

      alias = mac2_m_family(OPCD(OPCD),Src1(jj.Da2), Src2(jj.Da1), SrcAcc1(FFF), Res(FFF) );
   }

   define (instr=MAC2_mDa_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC2_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V6D);
# 1999 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




      alias = mac2_m_family(OPCD(OPCD),Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "mac2 -%f,%f,%f",Da,Db,Dn);

   }

action=
{




    bits<40> rnd_res =((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    rnd_res = 0-rnd_res;
    rnd_res = signExtend(rnd_res(32,16),40);
    info(4," rnd_res= "<<hex<<rnd_res);
    bits<40> operand20bit = signExtend(D(SrcAcc1).WL,40);
    bits<40> result = rnd_res + operand20bit;

    info(4," result= "<<hex<<result);
    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalL= signExtend(D(SrcAcc1).L,40);
       tvalL += rnd_res;
       info(4," tvalL= "<<hex<<tvalL);
       if(saturate16_sc3800(&tvalL) )
   result=tvalL;
    }
    info(4," result= "<<hex<<result);
    D(Res).WL = result(19,0);

    rnd_res = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    rnd_res = 0-rnd_res;
    rnd_res = signExtend(rnd_res(32,16),40);
    operand20bit = signExtend(D(SrcAcc1).WH,40);
    result = rnd_res + operand20bit;

    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalH= signExtend(D(SrcAcc1).H,40);
       tvalH += rnd_res;
       if(saturate16_sc3800(&tvalH))
   result=tvalH;
    }
    D(Res).WH = result(19,0);



};
}





define (instr=mac2r_p_family)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;




define (instr=MAC2R_pDa_Da_Dn)
{

   alias = mac2r_p_family(OPCD(OPCD),Src1(jj.Da2), Src2(jj.Da1), SrcAcc1(FFF), Res(FFF) );
}

define (instr=MAC2R_pDa_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC2R_pDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply-Accumulate with Rounding""";
attrs = (DMPY,V6D);
# 2079 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




   alias = mac2r_p_family(OPCD(OPCD),Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "mac2r %f,%f,%f",Da,Db,Dn);

   }

action=
{




    bits<40> rnd_res =((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    rnd_res += (rnd_res&0x0000008000ull)<<1;
    rnd_res = signExtend(rnd_res(32,16),40);

    bits<40> operand20bit = signExtend(D(SrcAcc1).WL,40);
    bits<40> result = rnd_res + operand20bit;


    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalL= signExtend(D(SrcAcc1).L,40);
       tvalL += rnd_res;

       if(saturate16_sc3800(&tvalL) )
   result=tvalL;
    }
    info(4," result= "<<hex<<result);
    D(Res).WL = result(19,0);

    rnd_res = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    rnd_res += (rnd_res&0x0000008000ull)<<1;
    rnd_res = signExtend(rnd_res(32,16),40);
    operand20bit = signExtend(D(SrcAcc1).WH,40);
    result = rnd_res + operand20bit;

    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalH= signExtend(D(SrcAcc1).H,40);
       tvalH += rnd_res;
       if(saturate16_sc3800(&tvalH))
   result=tvalH;
    }
    D(Res).WH = result(19,0);




};
}




define (instr=mac2r_m_family)
{
    fields = (OPCD, Src1, Src2, SrcAcc1, Res);
    blk = dalu;




define (instr=MAC2R_mDa_Da_Dn)
{

   alias = mac2r_m_family(OPCD(OPCD),Src1(jj.Da2), Src2(jj.Da1), SrcAcc1(FFF), Res(FFF) );
}
define (instr=MAC2R_mDa_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC2R_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply-Accumulate with Rounding""";
attrs = (DMPY,V6D);
# 2157 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




   alias = mac2r_m_family(OPCD(OPCD),Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "mac2r -%f,%f,%f",Da,Db,Dn);

   }

action=
{




    bits<40> rnd_res =((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    rnd_res = 0-rnd_res;
    rnd_res += (rnd_res&0x0000008000ull)<<1;
    rnd_res = signExtend(rnd_res(32,16),40);
    info(4," rnd_res= "<<hex<<rnd_res);
    bits<40> operand20bit = signExtend(D(SrcAcc1).WL,40);
    bits<40> result = rnd_res + operand20bit;

    info(4," result= "<<hex<<result);
    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalL= signExtend(D(SrcAcc1).L,40);
       tvalL += rnd_res;
       info(4," tvalL= "<<hex<<tvalL);
       if(saturate16_sc3800(&tvalL) )
   result=tvalL;
    }
    info(4," result= "<<hex<<result);
    D(Res).WL = result(19,0);

    rnd_res = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    rnd_res = 0-rnd_res;
    rnd_res += (rnd_res&0x0000008000ull)<<1;
    rnd_res = signExtend(rnd_res(32,16),40);
    operand20bit = signExtend(D(SrcAcc1).WH,40);
    result = rnd_res + operand20bit;

    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalH= signExtend(D(SrcAcc1).H,40);
       tvalH += rnd_res;
       if(saturate16_sc3800(&tvalH))
   result=tvalH;
    }
    D(Res).WH = result(19,0);



};

}




define (instr=MACX_pDa_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACX_pDa_Da_Dn)
{

  alias = MACX_pDa_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF));
}


action=
{



    sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), zeroExtend(D(Src2)(15,0),41) );
    sbits<41> mult2 = signedMultiply( zeroExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
    sbits<41> tmp = (sbits<41>)D(SrcAcc1) + ((mult1 + mult2) << 1 );


    D(Res) = tmp(39,0);




};

}


define (instr=MACX_mDa_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACX_mDa_Da_Dn)
{

  alias = MACX_mDa_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF));
}


action=
{




    sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), zeroExtend(D(Src2)(15,0),41) );
    sbits<41> mult2 = signedMultiply( zeroExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
    sbits<41> tmp = (sbits<41>)D(SrcAcc1) + (((0-mult1)-mult2) << 1 );


    D(Res) = tmp(39,0);




};
}


define (instr=MACX_pDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACX_pDa_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACX_pDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiply cross High and Low Portions, and Accumulate""";
attrs = (DMPY,V6D);
# 2308 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MACX_pDa_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macx %f,%f,%f",Da,Db,Dn);

   }


action=
{




    sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41),zeroExtend(D(Src2)(15,0),41) );
    sbits<41> mult2 = signedMultiply( zeroExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
    sbits<41> tmp = (sbits<41>)D(SrcAcc1) + ((mult1 + mult2)<< 1);

    D(Res) = tmp(39,0);
# 2337 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}


define (instr=MACX_mDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACX_mDa_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACX_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiply cross High and Low Portions, and Accumulate""";
attrs = (DMPY,V6D);
# 2355 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MACX_mDa_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macx -%f,%f,%f",Da,Db,Dn);

   }


action=
{




    sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), zeroExtend(D(Src2)(15,0),41) );
    sbits<41> mult2 = signedMultiply( zeroExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
    sbits<41> tmp = (sbits<41>)D(SrcAcc1) + (((0-mult1)-mult2) << 1 );
    D(Res) = tmp(39,0);






};

}


define (instr=MACD_pDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACD_pDa_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACD_pDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V6D);
# 2399 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MACD_pDa_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macd %f,%f,%f",Da,Db,Dn);

   }


action=
{




    sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(31,16),41) );
    sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
    overflow40(tmp);
    saturation32 (tmp,Res);




};

}


define (instr=MACD_mDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACD_mDa_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACD_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Signed Fractional Multiply-Accumulate""";
attrs = (DMPY,V6D);
# 2442 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MACD_mDa_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macd -%f,%f,%f",Da,Db,Dn);

   }


action=
{




    sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(31,16),41) );
    sbits<41> tmp = (((0-mult1)-mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
    overflow40(tmp);
    saturation32 (tmp,Res);




};

}


define (instr=MACRE_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



   blk = dalu;

define (instr=MACRE_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACRE_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply-Accumulate - Real Portion""";
attrs = (DMPY,V6D);
# 2484 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MACRE_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macre %f,%f,%f",Da,Db,Dn);

   }

   action=
   {




      sbits<41> mult1 = signedMultiply((signExtend(D(Src1).H,41)), (signExtend(D(Src2).H,41))) ;
      sbits<41> mult2 = signedMultiply((signExtend(D(Src1).L,41)), (signExtend(D(Src2).L,41))) ;
      sbits<41> tmp = ((mult1 - mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res);



   };
}


define (instr=MACIM_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



   blk = dalu;

define (instr=MACIM_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACIM_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply-Accumulate - Imaginary Portion""";
attrs = (DMPY,V6D);
# 2523 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MACIM_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "macim %f,%f,%f",Da,Db,Dn);

   }

   action=
   {




      sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src2).H,41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src2).L,41) );
      sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res);



   };
}


define (instr=MACCPLX_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MACCPLX_Da_Db_Dn)
{

  alias = MACCPLX_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), SrcAcc1(FFF), Res(FFF));
}

action=
{





    sbits<40> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),40),signExtend( D(Src2)(31,16),40)));
    sbits<40> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),40),signExtend( D(Src2)(15,0),40)));
    bits<40> res = ((mult1+mult2)<<1);
    res = signExtend(res(32,16),40);
    bits<40> operand20bit = signExtend(D(SrcAcc1).WL,40);
    bits<40> result = (res) + operand20bit;

    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalL= signExtend(D(SrcAcc1).L,40);
       tvalL += res;
       if(saturate16_sc3800(&tvalL) )
   result=tvalL;
    }
    D(Res).WL = result(19,0);

    mult1 = (signedMultiply( signExtend( D(Src1)(31,16),40),signExtend( D(Src2)(31,16),40)));
    mult2 = (signedMultiply( signExtend( D(Src1)(15,0),40),signExtend( D(Src2)(15,0),40)));
    res = ((mult1-mult2)<<1);
    res = signExtend(res(32,16),40);
    operand20bit = signExtend(D(SrcAcc1).WH,40);
    result = (res) + operand20bit;

    if(SR.W20==1)
       set_W20_OVF(result(20,0));
    else
    {
       bits<40> tvalH= signExtend(D(SrcAcc1).H,40);
       tvalH += res;
       if(saturate16_sc3800(&tvalH))
   result=tvalH;
    }
    D(Res).WH = result(19,0);



};

}





define (instr=MACD_pDa_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACD_pDa_Da_Dn)
{

  alias = MACD_pDa_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF));
}


action=
{




      sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(31,16),41) );
   sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res);





};

}


define (instr=MACD_mDa_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACD_mDa_Da_Dn)
{

  alias = MACD_mDa_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF));
}


action=
{




    sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(15,0),41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(31,16),41) );
    sbits<41> tmp = (((0-mult1) - mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
    overflow40(tmp);
    saturation32 (tmp,Res);




};

}


define (instr=MACRE_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACRE_Da_Da_Dn)
{

  alias = MACRE_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF));
}


action=
{




      sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(15,0),41) );
          sbits<41> tmp = ((mult1 - mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res);





};

}


define (instr=MACIM_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACIM_Da_Da_Dn)
{

  alias = MACIM_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), SrcAcc1(FFF), Res(FFF));
}


action=
{




      sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
      sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res);




};

}


define (instr=MACCIM_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;


define (instr=MACCIM_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACCIM_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply-Accumulate - Conjugate Imaginary Portion""";
attrs = (DMPY,V6D);
# 2781 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl" 2




  alias = MACCIM_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), SrcAcc1(Dn), Res(Dn));
  syntax = ( "maccim %f,%f,%f",Da,Db,Dn);

   }


action=
{




      sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
      sbits<41> tmp = ((mult1 - mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res);




};

}


define (instr=MAC2AASSR_family_low)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2AASSR_Dp_Dq_D0_L_Dr)
{

}

define (instr=MAC2AASSR_D8_D10_Ds_L_Dr)
{

}

action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= Dnl;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);
    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 2884 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}


define (instr=MAC2SSAAR_family_low)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2SSAAR_Dp_Dq_D0_L_Dr)
{

}

define (instr=MAC2SSAAR_D8_D10_Ds_L_Dr)
{

}


action=
{





    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= Dnl;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));




    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 2969 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}

define (instr=MAC2ASSAR_family_low)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2ASSAR_Dp_Dq_D0_L_Dr)
{

}

define (instr=MAC2ASSAR_D8_D10_Ds_L_Dr)
{

}

action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= Dnl;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3048 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}


define (instr=MAC2SAASR_family_low)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2SAASR_Dp_Dq_D0_L_Dr)
{

}

define (instr=MAC2SAASR_D8_D10_Ds_L_Dr)
{

}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= Dnl;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));




    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3131 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}


define (instr=MAC2AASSI_family_low)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2AASSI_Dp_Dq_D0_L_Dr)
{

}


define (instr=MAC2AASSI_D8_D10_Ds_L_Dr)
{

}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= Dnl;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3212 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}





define (instr=MAC2SSAAI_family_low)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2SSAAI_Dp_Dq_D0_L_Dr)
{

}

define (instr=MAC2SSAAI_D8_D10_Ds_L_Dr)
{

}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= Dnl;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);



    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3298 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}




define (instr=MAC2ASSAI_family_low)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2ASSAI_Dp_Dq_D0_L_Dr)
{

}

define (instr=MAC2ASSAI_D8_D10_Ds_L_Dr)
{

}



action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= Dnl;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);
    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3380 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}



define (instr=MAC2SAASI_family_low)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;






define (instr=MAC2SAASI_Dp_Dq_D0_L_Dr)
{

}

define (instr=MAC2SAASI_D8_D10_Ds_L_Dr)
{

}


action=
{



    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= Dnl;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));




    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3464 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}



define (instr=MAC2AASSR_family_high)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2AASSR_Dp_Dq_D0_H_Dr)
{

}

define (instr=MAC2AASSR_D8_D10_Ds_H_Dr)
{

}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnh= signExtend(D(SrcAcc1).WH,32);
    Dnl= Dnh;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3545 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}


define (instr=MAC2SSAAR_family_high)
{

   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;






define (instr=MAC2SSAAR_Dp_Dq_D0_H_Dr)
{

}


define (instr=MAC2SSAAR_D8_D10_Ds_H_Dr)
{

}



action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnh= signExtend(D(SrcAcc1).WH,32);
    Dnl= Dnh;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));




    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3630 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}




define (instr=MAC2ASSAR_family_high)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2ASSAR_Dp_Dq_D0_H_Dr)
{

}

define (instr=MAC2ASSAR_D8_D10_Ds_H_Dr)
{

}



action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnh= signExtend(D(SrcAcc1).WH,32);
    Dnl= Dnh;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3712 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}




define (instr=MAC2SAASR_family_high)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2SAASR_Dp_Dq_D0_H_Dr)
{

}


define (instr=MAC2SAASR_D8_D10_Ds_H_Dr)
{

}



action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnh= signExtend(D(SrcAcc1).WH,32);
    Dnl= Dnh;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));




    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3798 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}



define (instr=MAC2AASSI_family_high)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2AASSI_Dp_Dq_D0_H_Dr)
{

}


define (instr=MAC2AASSI_D8_D10_Ds_H_Dr)
{

}



action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnh= signExtend(D(SrcAcc1).WH,32);
    Dnl= Dnh;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3882 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}




define (instr=MAC2SSAAI_family_high)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;




define (instr=MAC2SSAAI_Dp_Dq_D0_H_Dr)
{

}


define (instr=MAC2SSAAI_D8_D10_Ds_H_Dr)
{

}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnh= signExtend(D(SrcAcc1).WH,32);
    Dnl= Dnh;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);



    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 3965 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}



define (instr=MAC2ASSAI_family_high)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2ASSAI_Dp_Dq_D0_H_Dr)
{

}


define (instr=MAC2ASSAI_D8_D10_Ds_H_Dr)
{

}

action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnh= signExtend(D(SrcAcc1).WH,32);
    Dnl= Dnh;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4045 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}





define (instr=MAC2SAASI_family_high)
{
   fields = (OPCD, Src1, Src2, SrcAcc1, Res);
   blk = dalu;





define (instr=MAC2SAASI_Dp_Dq_D0_H_Dr)
{

}

define (instr=MAC2SAASI_D8_D10_Ds_H_Dr)
{

}

action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnh= signExtend(D(SrcAcc1).WH,32);
    Dnl= Dnh;

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);




    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4129 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};

}






define (instr=MAC2AASSR_Dp_Dq_Dr_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MAC2AASSR_Dp_Dq_Dr)
{

  alias = MAC2AASSR_Dp_Dq_Dr_family(OPCD(OPCD), Src1(p), Src2(q), SrcAcc1(rr), Res(rr));
}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= signExtend(D(SrcAcc1).WH,32);

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);
    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4206 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}


define (instr=MAC2SSAAR_Dp_Dq_Dr_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MAC2SSAAR_Dp_Dq_Dr)
{

  alias = MAC2SSAAR_Dp_Dq_Dr_family(OPCD(OPCD), Src1(p), Src2(q), SrcAcc1(rr), Res(rr));
}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;

    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= signExtend(D(SrcAcc1).WH,32);

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);




    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));


    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4283 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}


define (instr=MAC2ASSAR_Dp_Dq_Dr_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MAC2ASSAR_Dp_Dq_Dr)
{

  alias = MAC2ASSAR_Dp_Dq_Dr_family(OPCD(OPCD), Src1(p), Src2(q), SrcAcc1(rr), Res(rr));
}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= signExtend(D(SrcAcc1).WH,32);

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbh_16b)+ MULT_RND16((0-Dal_16b), Dbl_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4354 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}



define (instr=MAC2SAASR_Dp_Dq_Dr_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MAC2SAASR_Dp_Dq_Dr)
{

  alias = MAC2SAASR_Dp_Dq_Dr_family(OPCD(OPCD), Src1(p), Src2(q), SrcAcc1(rr), Res(rr));
}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= signExtend(D(SrcAcc1).WH,32);

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbh_16b)+ MULT_RND16(Dal_16b, Dbl_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4428 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}


define (instr=MAC2AASSI_Dp_Dq_Dr_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MAC2AASSI_Dp_Dq_Dr)
{

  alias = MAC2AASSI_Dp_Dq_Dr_family(OPCD(OPCD), Src1(p), Src2(q), SrcAcc1(rr), Res(rr));
}


action=
{





    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= signExtend(D(SrcAcc1).WH,32);

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);
    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4501 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}



define (instr=MAC2SSAAI_Dp_Dq_Dr_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MAC2SSAAI_Dp_Dq_Dr)
{

  alias = MAC2SSAAI_Dp_Dq_Dr_family(OPCD(OPCD), Src1(p), Src2(q), SrcAcc1(rr), Res(rr));
}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;

    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= signExtend(D(SrcAcc1).WH,32);

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);






    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));


    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4580 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}


define (instr=MAC2ASSAI_Dp_Dq_Dr_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MAC2ASSAI_Dp_Dq_Dr)
{

  alias = MAC2ASSAI_Dp_Dq_Dr_family(OPCD(OPCD), Src1(p), Src2(q), SrcAcc1(rr), Res(rr));
}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= signExtend(D(SrcAcc1).WH,32);

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);

    resultH= Dnh+ (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));
    resultL= Dnl- (MULT_RND16(Dah_16b, Dbl_16b)+ MULT_RND16((0-Dal_16b), Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4652 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}



define (instr=MAC2SAASI_Dp_Dq_Dr_family)
{

  fields = (OPCD, Src1, Src2, SrcAcc1, Res);



  blk = dalu;

define (instr=MAC2SAASI_Dp_Dq_Dr)
{

  alias = MAC2SAASI_Dp_Dq_Dr_family(OPCD(OPCD), Src1(p), Src2(q), SrcAcc1(rr), Res(rr));
}


action=
{




    bits<32> Dnh,Dnl,resultL,resultH;
    bits<32> Dal_16b, Dah_16b, Dbl_16b, Dbh_16b;
    bool W20_OVF=false;
    Dnl= signExtend(D(SrcAcc1).WL,32);
    Dnh= signExtend(D(SrcAcc1).WH,32);

    if (SR.W20==1)
       W20_OVF=true;
    Dal_16b=signExtend(D(Src1).L,32);
    Dah_16b=signExtend(D(Src1).H,32);
    Dbl_16b=signExtend(D(Src2).L,32);
    Dbh_16b=signExtend(D(Src2).H,32);




    resultH= Dnh+ (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));
    resultL= Dnl- (MULT_RND16((0-Dah_16b), Dbl_16b)+ MULT_RND16(Dal_16b, Dbh_16b));

    if(W20_OVF)
    {
       set_W20_OVF(resultL(20,0));
       set_W20_OVF(resultH(20,0));

    }

    D(Res).WL = resultL(19,0);
    D(Res).WH = resultH(19,0);
# 4728 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mac.adl"
};
}
# 44 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 1


define (instr=MPY_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MPY_Da_Da_Dn)
{

  alias = MPY_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}

   action =
   {




      bits<41> mult = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ))<<1;
      saturation32(mult,Res);



   };

}


define (instr=MPY_Da_H_Da_L_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MPY_Da_H_Da_L_Dn)
{

  alias = MPY_Da_H_Da_L_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}

   action =
   {




      bits<41> mult = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(15,0),41) ))<<1;
      saturation32(mult,Res);



   };

}




define (instr=MPY_Da_L_Da_H_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MPY_Da_L_Da_H_Dn)
{

  alias = MPY_Da_L_Da_H_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}

   action =
   {




      bits<41> mult = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(31,16),41) ))<<1;
      saturation32(mult,Res);



   };

}



define (instr=MPY_Da_L_Da_L_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=MPY_Da_L_Da_L_Dn)
{

  alias = MPY_Da_L_Da_L_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}

   action =
   {




      bits<41> mult = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41) ))<<1;
      saturation32(mult,Res);



   };

}




define (instr=MPY_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res, Config);

   blk = dalu;



   doc_title = "mpy Da.[lh],Db.[lh],Dn";

define (instr=MPY_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply""";
attrs = (DMPY,V2);
# 147 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPY_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn), Config(0));
  syntax = ( "mpy %f,%f,%f",Da,Db,Dn);

   }


define (instr=MPY_Da_H_Db_L_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY_Da_H_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply""";
attrs = (DMPY,V5);
# 160 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPY_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn), Config(1));
  syntax = ( "mpy %f.h,%f.l,%f",Da,Db,Dn);

   }

define (instr=MPY_Da_L_Db_L_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY_Da_L_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply""";
attrs = (DMPY,V5);
# 172 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPY_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn), Config(3));
  syntax = ( "mpy %f.l,%f.l,%f",Da,Db,Dn);

   }

   action =
   {




      bits<16> src1,src2;
      GetSourcesPortions(Src1,&src1,Src2,&src2,Config);
      bits<41> mult = (signedMultiply( signExtend( src1,41),signExtend( src2,41)))<<1;

      saturation32(mult,Res);



   };

}

define (instr=MPY32_H_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MPY32_H_Da_Db_Dn)
{

  alias = MPY32_H_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), Res(FFF));
}

   action =
   {





      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(64,32),41)<<1;
      saturation32(mult,Res);



   };

}

define (instr=MPY32_L_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=MPY32_L_Da_Db_Dn)
{

  alias = MPY32_L_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), Res(FFF));
}

   action =
   {





      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(31,0),41)<<1;
      saturation32(mult,Res);



   };
}


define (instr=MPY_Da_H_Db_L_Dn_family)

{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;





   action =
   {




      bits<41> mult = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(15,0),41) ))<<1;
      saturation32(mult,Res);



   };

}




define (instr=MPY_Da_L_Db_H_Dn_family)

{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MPY_Da_L_Db_H_Dn)
{

  alias = MPY_Da_L_Db_H_Dn_family(OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), Res(FFF));
}

   action =
   {




      bits<41> mult = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(31,16),41) ))<<1;
      saturation32(mult,Res);



   };

}



define (instr=MPY_Da_L_Db_L_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;





   action =
   {




      bits<41> mult = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41) ))<<1;
      saturation32(mult,Res);



   };

}

define (instr=MPYR_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=MPYR_Da_Da_Dn)
{

  alias = MPYR_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}

   action =
   {




      sbits<41> mult = ( (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ))<<1);
      bits <40> roundval = round(mult);
      D(Res) = roundval;



   };

}





define (instr=MPYR_Da_H_Da_L_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=MPYR_Da_H_Da_L_Dn)
{

  alias = MPYR_Da_H_Da_L_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}

   action =
   {




      bits<41> mult = ( (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(15,0),41) ))<<1);
      bits <40> roundval = round(mult);
      D(Res) = roundval;



   };

}


define (instr=MPYR_Da_L_Da_H_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=MPYR_Da_L_Da_H_Dn)
{

  alias = MPYR_Da_L_Da_H_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}

   action =
   {




      bits<41> mult = ( (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(31,16),41) ))<<1);
      bits <40> roundval = round(mult);
      D(Res) = roundval;



   };

}



define (instr=MPYR_Da_L_Da_L_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MPYR_Da_L_Da_L_Dn)
{

  alias = MPYR_Da_L_Da_L_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}

   action =
   {






      bits<41> mult = ( (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41) ))<<1);
      bits <40> roundval = round(mult);
      D(Res) = roundval;



   };

}




define (instr=MPYR_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=MPYR_Da_Db_Dn)
{

  alias = MPYR_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), Res(FFF));
}

   action =
   {






      bits<41> mult = ( (signedMultiply( signExtend( D(Src1)(31,16),41) ,signExtend( D(Src2)(31,16),41) ))<<1);
      bits <40> roundval = round(mult);
      D(Res) = roundval;




   };

}



define (instr=MPYR_Da_H_Db_L_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=MPYR_Da_H_Db_L_Dn)
{

  alias = MPYR_Da_H_Db_L_Dn_family(OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), Res(FFF));
}

   action =
   {




      bits<41> mult = ( (signedMultiply( signExtend( D(Src1)(31,16),41) ,signExtend( D(Src2)(15,0),41) ))<<1);
      bits <40> roundval = round(mult);
      D(Res) = roundval;



   };

}




define (instr=MPYR_Da_L_Db_H_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);

   blk = dalu;




define (instr=MPYR_Da_L_Db_H_Dn)
{

  alias = MPYR_Da_L_Db_H_Dn_family(OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), Res(FFF));
}

   action =
   {




      bits<41> mult = ( (signedMultiply( signExtend( D(Src1)(15,0),41) ,signExtend( D(Src2)(31,16),41) ))<<1);
      bits <40> roundval = round(mult);
      D(Res) = roundval;



   };

}



define (instr=MPYR_Da_L_Db_L_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




define (instr=MPYR_Da_L_Db_L_Dn)
{

  alias = MPYR_Da_L_Db_L_Dn_family(OPCD(OPCD), Src1(JJJJJ.Da), Src2(JJJJJ.Db), Res(FFF));
}

   action =
   {




      bits<41> mult = ( (signedMultiply( signExtend( D(Src1)(15,0),41) ,signExtend( D(Src2)(15,0),41) ))<<1);
      bits <40> roundval = round(mult);
      D(Res) = roundval;



   };

}




define (instr=impy_family)
{

   fields = (OPCD, Src1, Src2, Res);
   blk = dalu;




   define (instr=IMPY_Da_Da_Dn) {





   }

   define (instr=IMPY_Da_Db_Dn) {

# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPY_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiply""";
attrs = (DMPY,V2);
# 651 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2






      alias = impy_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "impy %f,%f,%f",Da,Db,Dn);

   }


   action =
   {



      D(Res) = signedMultiply( signExtend( D(Src1).L,40) ,signExtend( D(Src2).L,40) );



   };

}
# 770 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
define (instr=impyw_imm_family)
{
   fields = (OPCD, imms, Src1, Res);
   blk = dalu;




define (instr=IMPY_W__s16_Dn)
{

   alias = impyw_imm_family(OPCD(OPCD), imms(s16), Src1(FFF), Res(FFF) );
   syntax = ( "impy.w #%f,%f",s16,FFF);
}
define (instr=IMPY__s16_Da_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPY__s16_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),s16_t5(0)),
 (bits(31),b0),
 (bits(32),s16_t5(1)),
 (bits(33),s16_t5(2)),
 (bits(34),s16_t5(3)),
 (bits(35),s16_t5(4)),
 (bits(36),s16_t5(5)),
 (bits(37),s16_t5(6)),
 (bits(38),s16_t5(7)),
 (bits(39),s16_t5(8)),
 (bits(40),s16_t5(9)),
 (bits(41),s16_t5(10)),
 (bits(42),s16_t5(11)),
 (bits(43),s16_t5(12)),
 (bits(44),s16_t5(13)),
 (bits(45),s16_t5(14)),
 (bits(46),s16_t5(15)),
 (bits(47),b0),
 (bits(48),Dn(0)),
 (bits(49),Dn(1)),
 (bits(50),Dn(2)),
 (bits(51),Dn(3)),
 (bits(52),Dn(4)),
 (bits(53),b1),
 (bits(54),b1),
 (bits(55),b1),
 (bits(56),b1),
 (bits(57),b1),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),Dn(5)));

type = FourWords;
attrs = (serial_four_word);
"""Integer Multiply""";
attrs = (DMPY,V2);
# 787 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2
   alias = impyw_imm_family(OPCD(OPCD), imms(s16_t5), Src1(Da), Res(Dn));
  syntax = ( "impy #%f,%f,%f",s16_t5,Da,Dn);
}

define (instr=IMPY_W__s16_Da_Dn)
{

   alias = impyw_imm_family(OPCD(OPCD), imms(s16), Src1(JJJ), Res(FFF) );
   syntax = ( "impy.w #%f,%f,%f",s16,JJJ,FFF);
}

action = {







   D(Res) = signedMultiply( signExtend( D(Src1).L,40),signExtend( imms,40) );




};

}



define (instr=IMPYHLUU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=IMPYHLUU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYHLUU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiply Upper Unsigned by Lower Unsigned""";
attrs = (DMPY,V2);
# 830 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = IMPYHLUU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "impyhluu %f,%f,%f",Da,Db,Dn);

   }


action=
{




 bits<32> imult = ( (zeroExtend(D(Src2).L,40))*(zeroExtend(D(Src1).H,40)) );
 D(Res) = zeroExtend(imult,40);



};

}


define (instr=IMPYSU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=IMPYSU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYSU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiply Signed by Unsigned""";
attrs = (DMPY,V2);
# 869 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = IMPYSU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "impysu %f,%f,%f",Da,Db,Dn);

   }


action=
{




 D(Res) = signExtend(signedMultiply( (zeroExtend(D(Src2).L,40)),(signExtend(D(Src1).H,40)) ),40);



};

}


define (instr=IMPYSU2_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



   blk = dalu;


define (instr=IMPYSU2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYSU2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Two Integer Multiply Signed by Unsigned""";
attrs = (DMPY,V6);
# 907 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = IMPYSU2_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "impysu2 %f,%f,%f",Da,Db,Dn);

   }


   action=
   {
# 931 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
      D(Res).WH = signExtend(signedMultiply( signExtend(D(Src1).H,20),zeroExtend(D(Src2).H,20)),20);
      D(Res).WL = signExtend(signedMultiply( signExtend(D(Src1).L,20),zeroExtend(D(Src2).L,20)),20);



   };

}



define (instr=IMPYUU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=IMPYUU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYUU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Integer Multiply Unsigned by Unsigned""";
attrs = (DMPY,V2);
# 954 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = IMPYUU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "impyuu %f,%f,%f",Da,Db,Dn);

   }


action=
{




   bits<32> imult = ( (zeroExtend(D(Src2).L,40))*(zeroExtend(D(Src1).L,40)) );
   D(Res) = zeroExtend(imult,40);



};

}


define (instr=IMPYUU32_L_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=IMPYUU32_L_Da_Db_Dn)
{

  alias = IMPYUU32_L_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), Res(FFF));
}


action=
{




   bits<64> imult = (zeroExtend((D(Src1)(31,0)),64))*(zeroExtend((D(Src2)(31,0)),64));
   D(Res) = zeroExtend(imult(31,0),40);



};

}


define (instr=IMPYUU32_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=IMPYUU32_Da_Db_Dn)
{

  alias = IMPYUU32_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), Res(FFF));
}


action=
{




   bits<64> imult = (zeroExtend((D(Src1)(31,0)),64))*(zeroExtend((D(Src2)(31,0)),64));
   D(Res) = zeroExtend(imult(31,0),40);



};

}


define (instr=IMPYUU32_H_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=IMPYUU32_H_Da_Db_Dn)
{

  alias = IMPYUU32_H_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), Res(FFF));
}


action=
{




   bits<64> imult = (zeroExtend((D(Src1)(31,0)),64))*(zeroExtend((D(Src2)(31,0)),64));
   D(Res) = zeroExtend(imult(63,32),40);




};

}



define (instr=MPYUS_Dc_Dd_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYUS_Dc_Dd_Dn)
{


  alias = MPYUS_Dc_Dd_Dn_family(OPCD(OPCD), Src1(ee.Dc), Src2(ee.Dd), Res(FFF));



}
define (instr=MPYUS_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYUS_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Fractional Multiply Unsigned by Signed""";
attrs = (DMPY,V2);
# 1100 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2
  alias = MPYUS_Dc_Dd_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpyus %f,%f,%f",Da,Db,Dn);
}


action=
{




   bits<32> mult = signedMultiply( (signExtend(D(Src2)(31,16),40)),(zeroExtend(D(Src1)(15,0),40)) );
   D(Res) = (signExtend(mult,40)) <<1;




};

}



define (instr=MPYSU_Dc_Dd_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=MPYSU_Dc_Dd_Dn)
{


  alias = MPYSU_Dc_Dd_Dn_family(OPCD(OPCD), Src1(ee.Dc), Src2(ee.Dd), Res(FFF));



}
define (instr=MPYSU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYSU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Fractional Multiply Signed by Unsigned""";
attrs = (DMPY,V2);
# 1144 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2
  alias = MPYSU_Dc_Dd_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpysu %f,%f,%f",Da,Db,Dn);
}


action=
{






   bits<32> mult = signedMultiply( (signExtend(D(Src1)(31,16),40)),(zeroExtend(D(Src2)(15,0),40)) );
   D(Res) = (signExtend(mult,40)) <<1;



};

}


define (instr=MPYUU_Dc_Dd_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYUU_Dc_Dd_Dn)
{


  alias = MPYUU_Dc_Dd_Dn_family(OPCD(OPCD), Src1(ee.Dc), Src2(ee.Dd), Res(FFF));



}


action=
{




   bits<40> mult = signedMultiply( (zeroExtend(D(Src1)(15,0),40)),(zeroExtend(D(Src2)(15,0),40)) );

   D(Res) = (signExtend(mult(32,0),40)) <<1;




};

}

define (instr=MPYUU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=MPYUU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYUU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Fractional Multiply Unsigned by Unsigned""";
attrs = (DMPY,V6);
# 1217 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPYUU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpyuu %f,%f,%f",Da,Db,Dn);

   }

action=
{



   bits<40> mult = signedMultiply( (zeroExtend(D(Src1)(15,0),40)),(zeroExtend(D(Src2)(15,0),40)) );

   D(Res) = (signExtend(mult(32,0),40)) <<1;




};

}

define (instr=IDMPYU_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=IDMPYU_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IDMPYU_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Double Precision Unsigned Integer Multiply Assist""";
attrs = (DMPY,V6D);
# 1254 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = IDMPYU_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "idmpyu %f,%f,%f",Da,Db,Dn);

   }


action=
{




   bits<40> tval0 = signExtend(D(Src1).L,40);
   bits<40> tval1 = signExtend(D(Src1).H,40);
   bits<40> tval2 = signExtend(D(Src2).L,40);
   bits<40> tval3 = signExtend(D(Src2).H,40);
   bits<40> result=((((tval0 & 0xFFFF) * (tval3 & 0xFFFF)) + ((tval1 & 0xFFFF) * (tval2 & 0xFFFF))) << 0x10) & 0xFFFF0000;





   D(Res) = result;



};

}


define (instr=IDMPYS_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=IDMPYS_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IDMPYS_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Double Precision Signed Integer Multiply Assist""";
attrs = (DMPY,V6D);
# 1302 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = IDMPYS_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "idmpys %f,%f,%f",Da,Db,Dn);

   }


action=
{





  bits<64> tval0,tval1,tval2,tval3,result;
  tval0 = zeroExtend(D(Src2).L,64);
  tval1 = signExtend(D(Src2).H,64);
  tval2 = zeroExtend(D(Src1).L,64);
  tval3 = signExtend(D(Src1).H,64);

  result=(((tval0 * tval3)) + ((tval1 * tval2 ))) << 0x10;
# 1334 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
   D(Res) = result(39,0);




};

}


define (instr=DMPY_Da_H_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=DMPY_Da_H_Db_Dn)
{





  alias = DMPY_Da_H_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "dmpy %f.h,%f,%f",Da,Db,Dn);

   }


action=
{




    bits<64> mult = (signedMultiply( signExtend( D(Src1)(31,16),64),signExtend( D(Src2)(31,0),64) ))<<1;
    D(Res) = mult(55,16);



};

}



define (instr=MPY2_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);
   blk = dalu;



define (instr=MPY2_Da_Da_Dn)
{

  alias = MPY2_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}


action=
{




    bits<16> low_des,high_des;
    bits<8> ext_des;
    bits<40> tmp_result;
    bits<40> result = ((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    result >>= 16;
    saturate16_sc3800(&result);
    low_des=result(15,0);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des=tmp_result&0x000000000full;
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des = (result&0x00000f0000ull)>>16;
    }
   else {ext_des = 0; }

    result = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    result >>= 16;
    saturate16_sc3800(&result);
    high_des=(result&0x000000ffffull);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des|=(tmp_result&0x00000000f0ull);
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des |= (result&0x00000f0000ull)>>12;
    }

    D(Res) = concat(ext_des,high_des,low_des);
# 1450 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
};

}




define (instr=MPY2R_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPY2R_Da_Da_Dn)
{

  alias = MPY2R_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}


action=
{




    bits<16> low_des,high_des;
    bits<8> ext_des;
    bits<40> tmp_result;
    bits<40> result = ((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    result+= (result&0x00008000)<<1;
    result >>= 16;
    saturate16_sc3800(&result);
    low_des=result(15,0);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des=tmp_result&0x000000000full;
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des = (result&0x00000f0000ull)>>16;
    }
   else {ext_des = 0; }

    result = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    result+= (result&0x00008000)<<1;
    result >>= 16;
    saturate16_sc3800(&result);
    high_des=(result&0x000000ffffull);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des|=(tmp_result&0x00000000f0ull);
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des |= (result&0x00000f0000ull)>>12;
    }

    D(Res) = concat(ext_des,high_des,low_des);
# 1531 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
};

}


define (instr=MPY2_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPY2_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY2_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply""";
attrs = (DMPY,V6D);
# 1549 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPY2_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpy2 %f,%f,%f",Da,Db,Dn);

   }


action=
{




    bits<16> low_des,high_des;
    bits<8> ext_des;
    bits<40> tmp_result;
    bits<40> result = ((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    result >>= 16;
    saturate16_sc3800(&result);
    low_des=result(15,0);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des=tmp_result&0x000000000full;
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des = (result&0x00000f0000ull)>>16;
    }
   else {ext_des = 0; }

    result = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    result >>= 16;
    saturate16_sc3800(&result);
    high_des=(result&0x000000ffffull);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des|=(tmp_result&0x00000000f0ull);
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des |= (result&0x00000f0000ull)>>12;
    }

    D(Res) = concat(ext_des,high_des,low_des);
# 1611 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
};

}


define (instr=MPY2R_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPY2R_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY2R_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply with Rounding.""";
attrs = (DMPY,V6D);
# 1629 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPY2R_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpy2r %f,%f,%f",Da,Db,Dn);

   }


action=
{





    bits<16> low_des,high_des;
    bits<8> ext_des;
    bits<40> tmp_result;
    bits<40> result = ((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    result+= (result&0x00008000)<<1;
    result >>= 16;
    saturate16_sc3800(&result);
    low_des=result(15,0);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des=tmp_result&0x000000000full;
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des = (result&0x00000f0000ull)>>16;
    }
   else {ext_des = 0; }

    result = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    result+= (result&0x00008000)<<1;
    result >>= 16;
    saturate16_sc3800(&result);
    high_des=(result&0x000000ffffull);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des|=(tmp_result&0x00000000f0ull);
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des |= (result&0x00000f0000ull)>>12;
    }

    D(Res) = concat(ext_des,high_des,low_des);
# 1699 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
};

}


define (instr=MPYX_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYX_Da_Da_Dn)
{

  alias = MPYX_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}


action=
{




    info(4," Src1= "<<Src1, " Src2= "<<Src2, " Res= "<<Res);
    bits<64> tval0,tval1,tval2,tval3,result;
    tval0 = zeroExtend(D(Src2).L,64);
    tval1 = signExtend(D(Src2).H,64);
    tval2 = zeroExtend(D(Src1).L,64);
    tval3 = signExtend(D(Src1).H,64);

    result=((tval1 * tval2) + (tval0 * tval3)) << 1;

    D(Res) = result(39,0);
# 1750 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
};

}


define (instr=MPYX_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYX_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYX_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiply cross High and Low Portions""";
attrs = (DMPY,V6D);
# 1768 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPYX_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpyx %f,%f,%f",Da,Db,Dn);

   }


action=
{




    info(4," Src1= "<<Src1, " Src2= "<<Src2, " Res= "<<Res);
    bits<64> tval0,tval1,tval2,tval3,result;
    tval0 = zeroExtend(D(Src2).L,64);
    tval1 = signExtend(D(Src2).H,64);
    tval2 = zeroExtend(D(Src1).L,64);
    tval3 = signExtend(D(Src1).H,64);

    result=((tval1 * tval2) + (tval0 * tval3)) << 1;

    D(Res) = result(39,0);
# 1805 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl"
};

}


define (instr=MPYD_pDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYD_pDa_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYD_pDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Signed Fractional Multiply""";
attrs = (DMPY,V6D);
# 1823 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPYD_pDa_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpyd +%f,%f,%f",Da,Db,Dn);

   }


action=
{





  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41)));
  mult1 = (mult1+mult2) << 1;
  set_OVF(mult1);
  D(Res) = ll_saturate_mpy(mult1,0);







};

}


define (instr=MPYD_mDa_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYD_mDa_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYD_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Signed Fractional Multiply""";
attrs = (DMPY,V6D);
# 1870 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPYD_mDa_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpyd -%f,%f,%f",Da,Db,Dn);

   }


action=
{




  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
  mult1 = ((0-mult1)-mult2) << 1;
  set_OVF(mult1);
  D(Res) = ll_saturate_mpy(mult1,0);







};

}


define (instr=MPYRE_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYRE_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYRE_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply - Real Portion""";
attrs = (DMPY,V6D);
# 1916 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPYRE_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpyre %f,%f,%f",Da,Db,Dn);

   }


action=
{




    bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
    bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
    mult1 = (mult1-mult2) << 1;
    saturation32(mult1,Res);




};

}


define (instr=MPYIM_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=MPYIM_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYIM_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply - Imaginary Portion""";
attrs = (DMPY,V6D);
# 1957 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPYIM_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpyim %f,%f,%f",Da,Db,Dn);

   }

action=
{




  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(31,16),41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(15,0),41)));
  mult1 = (mult1+mult2) << 1;
  saturation32(mult1,Res);




};

}


define (instr=MPYCPLX_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;

define (instr=MPYCPLX_Da_Db_Dn)
{

  alias = MPYCPLX_Da_Db_Dn_family(OPCD(OPCD), Src1(JJJ), Src2(jjj), Res(FFF));
}

action=
{




    bits<16> low_des,high_des;
    bits<8> ext_des;
    bits<40> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),40),signExtend( D(Src2)(31,16),40) ));
    bits<40> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),40),signExtend( D(Src2)(15,0),40)));
    bits<40> result = (mult1+mult2) << 1;
    bits<40> tmp_result;
    result >>= 16;
    saturate16_sc3800(&result);
    low_des=result(15,0);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des=tmp_result&0x000000000full;
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des = (result&0x00000f0000ull)>>16;
    }
    else {ext_des = 0; }

    mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41)));
    mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
    result = (mult1-mult2) << 1;
    result >>= 16;
    saturate16_sc3800(&result);
    high_des=(result&0x000000ffffull);
    if(SR.W20!=0) {
       tmp_result = result>>16;
       ext_des|=(tmp_result&0x00000000f0ull);
    }
    else if ((result&0x0000008000ull)!=0)
    {
       ext_des |= (result&0x00000f0000ull)>>12;
    }

    D(Res) = concat(ext_des,high_des,low_des);




};

}


define (instr=MPYD_pDa_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYD_pDa_Da_Dn)
{

  alias = MPYD_pDa_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}


action=
{




  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
  mult1 = (mult1+mult2) << 1;
  set_OVF(mult1);
  D(Res) = ll_saturate_mpy(mult1,0);





};

}


define (instr=MPYD_mDa_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYD_mDa_Da_Dn)
{

  alias = MPYD_mDa_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}


action=
{




  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
  mult1 = ((0-mult1)-mult2) << 1;
  set_OVF(mult1);
  D(Res) = ll_saturate_mpy(mult1,0);





};

}


define (instr=MPYRE_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYRE_Da_Da_Dn)
{

  alias = MPYRE_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}


action=
{







  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
  mult1 = (mult1-mult2) << 1;
  saturation32(mult1,Res);




};

}


define (instr=MPYIM_Da_Da_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYIM_Da_Da_Dn)
{

  alias = MPYIM_Da_Da_Dn_family(OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF));
}


action=
{





  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(31,16),41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(15,0),41)));
  mult1 = (mult1+mult2) << 1;
  saturation32(mult1,Res);




};

}


define (instr=MPYCIM_Da_Db_Dn_family)
{

  fields = (OPCD, Src1, Src2, Res);



  blk = dalu;


define (instr=MPYCIM_Da_Db_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYCIM_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply - Conjugate Imaginary Portion""";
attrs = (DMPY,V6D);
# 2215 "/vobs/vb_dp_arch/ADLsim/sc3900/dalu_mpy.adl" 2




  alias = MPYCIM_Da_Db_Dn_family(OPCD(OPCD), Src1(Da), Src2(Db), Res(Dn));
  syntax = ( "mpycim %f,%f,%f",Da,Db,Dn);

   }


action=
{




  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(31,16),41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(15,0),41)));
  mult1 = (mult1-mult2) << 1;
  saturation32(mult1,Res);




};

}
# 45 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2




# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/prefix.adl" 1
# 36 "/vobs/vb_dp_arch/ADLsim/sc3900/prefix.adl"
define (instr = PREFIX0) {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PREFIX0.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),VLES_LEN(0)),
 (bits(11),VLES_LEN(1)),
 (bits(12),VLES_LEN(2)),
 (bits(13),VLES_LEN(3)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),PR_Hi_Bits(0)),
 (bits(24),PR_Hi_Bits(1)),
 (bits(25),PR_Hi_Bits(2)),
 (bits(26),PR_Hi_Bits(3)),
 (bits(27),PR_Hi_Bits(4)),
 (bits(28),PR_Hi_Bits(5)),
 (bits(29),PR_Hi_Bits(6)),
 (bits(30),PR_Hi_Bits(7)),
 (bits(31),b0));
"""Encoding extension for the current VLES""";
# 38 "/vobs/vb_dp_arch/ADLsim/sc3900/prefix.adl" 2
   syntax = ("PREFIX0, VLES_LEN %f, PR_Hi_Bits => %f",VLES_LEN,PR_Hi_Bits);
   prefix = true;
   attrs = prefix;


   action = {
   };
}


define (instr = PREFIX_64D_REG) {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PREFIX_64D_REG.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b1),
 (bits(5),PR_Hi_Bits(0)),
 (bits(6),PR_Hi_Bits(1)),
 (bits(7),PR_Hi_Bits(2)),
 (bits(8),PR_Hi_Bits(3)),
 (bits(9),PR_Hi_Bits(4)),
 (bits(10),VLES_LEN(0)),
 (bits(11),VLES_LEN(1)),
 (bits(12),VLES_LEN(2)),
 (bits(13),VLES_LEN(3)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),PR_Hi_Bits(5)),
 (bits(17),PR_Hi_Bits(6)),
 (bits(18),PR_Hi_Bits(7)),
 (bits(19),DALU_HI_REG(0)),
 (bits(20),DALU_HI_REG(1)),
 (bits(21),DALU_HI_REG(2)),
 (bits(22),DALU_HI_REG(3)),
 (bits(23),DALU_HI_REG(4)),
 (bits(24),DALU_HI_REG(5)),
 (bits(25),DALU_HI_REG(6)),
 (bits(26),DALU_HI_REG(7)),
 (bits(27),DALU_HI_REG(8)),
 (bits(28),DALU_HI_REG(9)),
 (bits(29),DALU_HI_REG(10)),
 (bits(30),DALU_HI_REG(11)),
 (bits(31),b0));
"""Encoding extension for the current VLES""";
# 50 "/vobs/vb_dp_arch/ADLsim/sc3900/prefix.adl" 2
      syntax = ("PREFIX_64D_REG, VLES_LEN %f, PR_Hi_Bits => %f, DALU_HI_REG = %f",VLES_LEN,PR_Hi_Bits,DALU_HI_REG);
      prefix = true;
      attrs = prefix;

   action = {
   };
}
# 50 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900prefix.adl" 1
define (instr=PREFIX)
{
  prefix=true;


syntax = ("Prefix %f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f",CND0,CND1,CND2,CND3,CND4,CND5,CND6,lpmarkA,lpmarkB,lpmarkM,lpmarkS,lpmarkI);

action=
{
   info(4,"PREFIX");
   prefix_vles = true;
  cnd0= CND0;
  cnd1= CND1;
  cnd2= CND2;
  cnd3= CND3;
  cnd4= CND4;
  cnd5= CND5;
  cnd6= CND6;
 };
}
# 38 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900prefix.adl"
 define (instr = IFT) {

    syntax = ("ift");
    assembler = {
    switch(InstrCnt) {
      case 0: CND0[0] = 2; ;
      case 1: CND1[0] = 2; ;
      case 2: CND2[0] = 2; ;
      case 3: CND3[0] = 2; ;
      case 4: CND4[0] = 2; ;
      case 5: CND5[0] = 2; ;
      case 6: CND6[0] = 2; ;
    }
 };

  }
define (instr = IFF) {

    syntax = ("iff");
    assembler = {
    switch(InstrCnt) {
      case 0: CND0[0] = 1; ;
      case 1: CND1[0] = 1; ;
      case 2: CND2[0] = 1; ;
      case 3: CND3[0] = 1; ;
      case 4: CND4[0] = 1; ;
      case 5: CND5[0] = 1; ;
      case 6: CND6[0] = 1; ;
    }
 };

  }

define (instr = IFA) {

    syntax = ("ifa");
    assembler = {
    switch(InstrCnt) {
      case 0: CND0[0] = 0; ;
      case 1: CND1[0] = 0; ;
      case 2: CND2[0] = 0; ;
      case 3: CND3[0] = 0; ;
      case 4: CND4[0] = 0; ;
      case 5: CND5[0] = 0; ;
      case 6: CND6[0] = 0; ;
    }
 };

  }
# 51 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2

# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 1
define (instr=ADDA__u5_Zx_family)
{

  fields = (OPCD, immu, G_Src1, G_Res);



  blk = lsu;


define (instr=ADDA__u5_Zx)
{

  alias = ADDA__u5_Zx_family(OPCD(OPCD), immu(u5), G_Src1(ZZZ), G_Res(ZZZ));
}


define (instr=ADDA__u5_Zx_Zn)
{

   alias = ADDA__u5_Zx_family(OPCD(OPCD), immu(u5), G_Src1(ZZZ), G_Res(PPP));
   syntax = ( "adda #%f,%f,%f",u5,ZZZ,PPP);
}



action=
{
# 42 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl"
   uint32_t imm = immu.uint32();
   if (G_Src1 == 7) {
      update_arith_sp((imm & 0xff8));
   } else {
      ZxTable(G_Res) = ZxTable(G_Src1)+ imm;
   }
};

}


define (instr=adda_imm_family)
{
   fields = (OPCD,immu,R_Src1,R_Res);
   blk = lsu;





define (instr=ADDA__u5_Rn)
{

   alias = adda_imm_family(OPCD(OPCD),immu(u5), R_Src1(RRR), R_Res(RRR) );
   syntax = ( "adda #%f,%f",u5,RRR);
}
define (instr=ADDA__u5_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDA__u5_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive addition""";
attrs = (LARIT,V2);
# 71 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
   alias = adda_imm_family(OPCD(OPCD),immu(u5), R_Src1(Ra), R_Res(Rn));
  syntax = ( "adda #%f,%f,%f",u5,Ra,Rn);
}

define (instr=ADDA__u5_Rq_Rn)
{

   alias = adda_imm_family(OPCD(OPCD),immu(u5), R_Src1(qqq), R_Res(RRR) );
   syntax = ( "adda #%f,%f,%f",u5,qqq,RRR);
}


action=
{





   R(R_Res) = Address_by_MCTL(R_Src1, immu,1,0,1,immu);
};

}




define (instr=ADDA__s16_zx_Rn_family)
{

  fields = (OPCD, imms, G_Src1, R_Res);



  blk = lsu;


define (instr=ADDA__s16_zx_Rn)
{

  alias = ADDA__s16_zx_Rn_family(OPCD(OPCD), imms(s16), G_Src1(zzz), R_Res(RRR));
}


action=
{





   R(R_Res) = zxTable(G_Src1)+ imms;
};

}


define (instr=ADDA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=ADDA_zx_Zx)
{

  alias = ADDA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(ZZZ));
}

define (instr=ADDA_zx_Zx_Zn)
{

  alias = ADDA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(PPP));
  syntax = ( "adda %f,%f,%f",zzz,ZZZ,PPP);
}


action=
{



   ZxTable(G_Res) = ZxTable(G_Src2)+ zxTable(G_Src1);
};

}


define (instr=ADDA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2, R_Res);



  blk = lsu;


define (instr=ADDA_zx_Rn)
{

  alias = ADDA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR), R_Res(RRR));
}

define (instr=ADDA_zx_Rq_Rn)
{

  alias = ADDA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(qqq), R_Res(RRR));
  syntax = ( "adda %f,%f,%f",zzz,qqq,RRR);
}


action=
{




    R(R_Res) = Address_by_MCTL(R_Src2,zxTable(G_Src1),1,0,1,zxTable(G_Src1));
};

}


define (instr=ADDA_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=ADDA_Rq_Zx)
{

  alias = ADDA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(ZZZ));
}

define (instr=ADDA_Rq_Zx_Zn)
{

  alias = ADDA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(PPP));
  syntax = ( "adda %f,%f,%f",qqq,ZZZ,PPP);
}


action=
{




    ZxTable(G_Res) = ZxTable(G_Src2)+ R(R_Src1);

};

}



define (instr=ADDL1A_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=ADDL1A_zx_Zx)
{

  alias = ADDL1A_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(ZZZ));
}


action=
{



   ZxTable(G_Res) = ZxTable(G_Src2)+ (zxTable(G_Src1)<<1);

};

}



define (instr=ADDL1A_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2, R_Res);



  blk = lsu;


define (instr=ADDL1A_zx_Rn)
{

  alias = ADDL1A_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR), R_Res(RRR));
}


action=
{






  R(R_Res) = Address_by_MCTL(R_Src2,(zxTable(G_Src1)<<1),1,0,2,zxTable(G_Src1));
};

}



define (instr=ADDL1A_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=ADDL1A_Rq_Zx)
{

  alias = ADDL1A_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(ZZZ));
}


action=
{






    ZxTable(G_Res) = ZxTable(G_Src2)+ (R(R_Src1)<<1);

};

}



define (instr=ADDL2A_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2, G_Res);



  blk = lsu;

define (instr=ADDL2A_zx_Zx)
{

  alias = ADDL2A_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(ZZZ));
}

action=
{



    ZxTable(G_Res) = ZxTable(G_Src2)+ (zxTable(G_Src1)<<2);

};

}



define (instr=ADDL2A_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2, R_Res);



  blk = lsu;


define (instr=ADDL2A_zx_Rn)
{

  alias = ADDL2A_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR), R_Res(RRR));
}


action=
{






  R(R_Res) = Address_by_MCTL(R_Src2,(zxTable(G_Src1)<<2),1,0,4,zxTable(G_Src1));

};

}



define (instr=ADDL2A_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=ADDL2A_Rq_Zx)
{

  alias = ADDL2A_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(ZZZ));
}


action=
{




     ZxTable(G_Res) = ZxTable(G_Src2)+ (R(R_Src1)<<2);


};

}


define (instr=addl2a_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = lsu;




define (instr=ADDL2A_Rq_Rn)
{

}

define (instr=ADDL2A_Rq_Rr_Rn)
{

}


action=
{




   R(R_Res) = Address_by_MCTL(R_Src2,(R(R_Src1)<<2),1,0,4,R(R_Src1));
};

}



define (instr=ASL2A_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;

define (instr=ASL2A_Zx)
{

  alias = ASL2A_Zx_family(OPCD(OPCD), G_Src1(ZZZ), G_Res(ZZZ));
}

 action =
 {




    ZxTable(G_Res) = ZxTable(G_Src1)<<2;
 };

}



define (instr=asl2a_family)
{
   fields = (OPCD,R_Src1,R_Res);
   blk = lsu;




define (instr=ASL2A_Rn)
{

}
define (instr=ASL2A_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASL2A_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Arithmetic shift left by 2""";
attrs = (LLOG,V2);
# 499 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
alias = asl2a_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "asl2a %f,%f",Ra,Rn);
}

define (instr=ASL2A_Rq_Rn)
{

}


 action =
 {



  R(R_Res) = R(R_Src1)<<2;
 };

}



define (instr=ASLA_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;

define (instr=ASLA_Zx)
{

  alias = ASLA_Zx_family(OPCD(OPCD), G_Src1(ZZZ), G_Res(ZZZ));
}

 action =
 {



    ZxTable(G_Res) = ZxTable(G_Src1)<<1;
 };

}


define (instr=asla_family)
{
   fields = (OPCD,R_Src1,R_Res);
   blk = lsu;




define (instr=ASLA_Rn)
{

}
define (instr=ASLA_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLA_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Arithmetic shift left""";
attrs = (LLOG,V2);
# 562 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
alias = asla_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "asla %f,%f",Ra,Rn);
}

define (instr=ASLA_Rq_Rn)
{

}

action =
{




   R(R_Res) = R(R_Src1)<<1;
};

}



define (instr=ASRA_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;

define (instr=ASRA_Zx)
{

  alias = ASRA_Zx_family(OPCD(OPCD), G_Src1(ZZZ), G_Res(ZZZ));
}

 action =
 {



    ZxTable(G_Res) = signExtend( ( (ZxTable(G_Src1)>>1)(30,0) ), 32);
 };

}

define (instr=asra_family)
{
   fields = (OPCD,R_Src1,R_Res);
   blk = lsu;




define (instr=ASRA_Rn)
{

}
define (instr=ASRA_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRA_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Arithmetic shift right""";
attrs = (LLOG,V2);
# 624 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
alias = asra_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "asra %f,%f",Ra,Rn);
}

 define (instr=ASRA_Rq_Rn)
{

}

action =
{




   R(R_Res) = signExtend( ( (R(R_Src1)>>1)(30,0) ), 32);
};

}


define (instr=CMPEQA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2);



  blk = lsu;

define (instr=CMPEQA_zx_Zx)
{

  alias = CMPEQA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ));
}

  action =
  {



    if ( zxTable(G_Src1) == ZxTable(G_Src2) ) { SR.T=1; }
    else { SR.T=0; }
  };

}




define (instr=CMPEQA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2);



  blk = lsu;

define (instr=CMPEQA_zx_Rn)
{

  alias = CMPEQA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR));
}

  action =
  {



    if ( zxTable(G_Src1) == R(R_Src2) ) { SR.T=1; }
    else { SR.T=0; }
  };

}




define (instr=CMPEQA_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2);



   blk = lsu;

define (instr=CMPEQA_Rq_Zx)
{

  alias = CMPEQA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ));
}

   action =
   {



      if ( R(R_Src1) == ZxTable(G_Src2) ) { SR.T=1; }
      else { SR.T=0; }
   };

}




define (instr=CMPEQA_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2);



   blk = lsu;


define (instr=CMPEQA_Rq_Rn)
{

  alias = CMPEQA_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Src2(RRR));
}

   action =
   {




      if (R(R_Src1)==R(R_Src2)) { SR.T=1; }
      else { SR.T=0; }
   };

}




define (instr=CMPEQA_W__u5_Rn_family)
{

  fields = (OPCD, immu, R_Src1);



   blk = lsu;

define (instr=CMPEQA_W__u5_Rn)
{

  alias = CMPEQA_W__u5_Rn_family(OPCD(OPCD), immu(u5n_0_0), R_Src1(RRR));
}

   action =
   {




      if (R(R_Src1)==immu) { SR.T=1;}
      else { SR.T=0;}
   };

}


define (instr=CMPEQA_W__s16_Rn_family)
{

  fields = (OPCD, imms, R_Src1);



   blk = lsu;

define (instr=CMPEQA_W__s16_Rn)
{

  alias = CMPEQA_W__s16_Rn_family(OPCD(OPCD), imms(s16), R_Src1(RRR));
}

   action =
   {




      if ( R(R_Src1) == imms ) { SR.T=1;}
      else { SR.T=0;}
   };

}



define (instr=CMPGTA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2);



  blk = lsu;


define (instr=CMPGTA_zx_Zx)
{

  alias = CMPGTA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ));
}


action=
{




      if ( ZxTable(G_Src2).signedGT(zxTable(G_Src1)) ) { SR.T=1; }
      else { SR.T=0; }
};

}


define (instr=CMPGTA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2);



  blk = lsu;


define (instr=CMPGTA_zx_Rn)
{

  alias = CMPGTA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR));
}


action=
{




      if ( R(R_Src2).signedGT(zxTable(G_Src1)) ) { SR.T=1; }
      else { SR.T=0; }
};

}


define (instr=CMPGTA_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2);



  blk = lsu;


define (instr=CMPGTA_Rq_Zx)
{

  alias = CMPGTA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ));
}


action=
{




      if ( ZxTable(G_Src2).signedGT(R(R_Src1)) ) { SR.T=1; }
      else { SR.T=0; }
};

}


define (instr=CMPGTA_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2);



  blk = lsu;


define (instr=CMPGTA_Rq_Rn)
{

  alias = CMPGTA_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Src2(RRR));
}


action=
{




      if ( R(R_Src2).signedGT(R(R_Src1)) ) { SR.T=1; }
      else { SR.T=0; }
};

}


define (instr=CMPGTA_W__u5_Rn_family)
{

  fields = (OPCD, immu, R_Src1);



  blk = lsu;


define (instr=CMPGTA_W__u5_Rn)
{

  alias = CMPGTA_W__u5_Rn_family(OPCD(OPCD), immu(u5n_0_0), R_Src1(RRR));
}


action=
{






      if ( R(R_Src1).signedGT(immu) ) { SR.T=1;}
      else { SR.T=0;}
};

}



define (instr=CMPGTA_W__s16_Rn_family)
{

  fields = (OPCD, imms, R_Src1);



  blk = lsu;


define (instr=CMPGTA_W__s16_Rn)
{

  alias = CMPGTA_W__s16_Rn_family(OPCD(OPCD), imms(s16), R_Src1(RRR));
}


action=
{






      if ( R(R_Src1).signedGT(imms) ) { SR.T=1;}
      else { SR.T=0;}
};

}


define (instr=CMPHIA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2);



  blk = lsu;


define (instr=CMPHIA_zx_Zx)
{

  alias = CMPHIA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ));
}


action=
{






      bits<33> val1 = zeroExtend(ZxTable(G_Src2), 32 +1);
      bits<33> val2 = zeroExtend(zxTable(G_Src1), 32 +1);
      if ( val1.signedGT(val2) ) { SR.T=1; }
      else { SR.T=0; }

};

}



define (instr=CMPHIA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2);



  blk = lsu;


define (instr=CMPHIA_zx_Rn)
{

  alias = CMPHIA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR));
}


action=
{






      bits<33> val1 = zeroExtend(R(R_Src2), 32 +1);
      bits<33> val2 = zeroExtend(zxTable(G_Src1), 32 +1);
      if ( val1.signedGT(val2) ) { SR.T=1; }
      else { SR.T=0; }

};

}



define (instr=CMPHIA_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2);



  blk = lsu;


define (instr=CMPHIA_Rq_Zx)
{

  alias = CMPHIA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ));
}


action=
{






      bits<33> val1 = zeroExtend(ZxTable(G_Src2), 32 +1);
      bits<33> val2 = zeroExtend(R(R_Src1), 32 +1);
      if ( val1.signedGT(val2) ) { SR.T=1; }
      else { SR.T=0; }

};

}



define (instr=CMPHIA_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2);



  blk = lsu;


define (instr=CMPHIA_Rq_Rn)
{

  alias = CMPHIA_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Src2(RRR));
}


action=
{






      bits<33> val1 = zeroExtend(R(R_Src2), 32 +1);
      bits<33> val2 = zeroExtend(R(R_Src1), 32 +1);
      if ( val1.signedGT(val2) ) { SR.T=1; }
      else { SR.T=0; }

};

}



define (instr=DECEQA_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;


define (instr=DECEQA_Zx)
{

  alias = DECEQA_Zx_family(OPCD(OPCD), G_Src1(ZZZ), G_Res(ZZZ));
}


action=
{






      bits<32> val = ZxTable(G_Src1)-1;
      ZxTable(G_Res) = val;
      if (val == 0 ) { SR.T=1; }
      else { SR.T=0; }
};

}


define (instr=DECEQA_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);



  blk = lsu;


define (instr=DECEQA_Rn)
{

  alias = DECEQA_Rn_family(OPCD(OPCD), R_Src1(RRR), R_Res(RRR));
}


action=
{






      bits<32> val = R(R_Src1)-1;
      R(R_Res) = val;
      if (val == 0 ) { SR.T=1; }
      else { SR.T=0; }
};

}


define (instr=DECGEA_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;


define (instr=DECGEA_Zx)
{

  alias = DECGEA_Zx_family(OPCD(OPCD), G_Src1(ZZZ), G_Res(ZZZ));
}


action=
{




    bits<32> orig_val = ZxTable(G_Src1);
    bits<32> val = orig_val-1;
    ZxTable(G_Res) = val;
    if (val.signedGE(0) && orig_val!=0x80000000 ) {
       SR.T=1;
    }
    else {
       SR.T=0;
    }
};

}



define (instr=DECGEA_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);



  blk = lsu;


define (instr=DECGEA_Rn)
{

  alias = DECGEA_Rn_family(OPCD(OPCD), R_Src1(RRR), R_Res(RRR));
}


action=
{




    bits<32> orig_val = R(R_Src1);
    bits<32> val = R(R_Src1)-1;
    R(R_Res) = val;
    if (val.signedGE(0) && orig_val!=0x80000000 ) {
       SR.T=1;
    }
    else {
       SR.T=0;
    }
};

}



define (instr=LSRA_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;





define (instr=LSRA_Zx)
{

  alias = LSRA_Zx_family(OPCD(OPCD), G_Src1(ZZZ), G_Res(ZZZ));
}

   action =
   {






 ZxTable(G_Res) = (bits<32>)ZxTable(G_Src1)>>1;
   };

}

define (instr=lsra_family)
{
   fields = (OPCD,R_Src1,R_Res);
   blk = lsu;




define (instr=LSRA_Rn)
{

}
define (instr=LSRA_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRA_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Logical shift right""";
attrs = (LLOG,V2);
# 1340 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
alias = lsra_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "lsra %f,%f",Ra,Rn);
}

define (instr=LSRA_Rq_Rn)
{

}

action =
{




   R(R_Res) = (bits<32>)R(R_Src1)>>1;
};

}



define (instr=SUBA__u5_Zx_family)
{

  fields = (OPCD, immu, G_Src1, G_Res);



  blk = lsu;


define (instr=SUBA__u5_Zx)
{

  alias = SUBA__u5_Zx_family(OPCD(OPCD), immu(u5), G_Src1(ZZZ), G_Res(ZZZ));
}

define (instr=SUBA__u5_Zx_Zn)
{

  alias = SUBA__u5_Zx_family(OPCD(OPCD), immu(u5), G_Src1(ZZZ), G_Res(PPP));
  syntax = ( "suba #%f,%f,%f",u5,ZZZ,PPP);
}

action=
{





   sbits<32> imm = immu.uint32();

   if (G_Src1 == 7) {
      imm = 0 - imm;
      update_arith_sp(imm.uint32() & 0xfffffff8);
   } else {ZxTable(G_Res) = ZxTable(G_Src1) - imm;}

};

}


define (instr=suba_imm_family)
{
   fields = (OPCD,immu,R_Src1,R_Res);
   blk = lsu;





define (instr=SUBA__u5_Rn)
{

   alias = suba_imm_family(OPCD(OPCD),immu(u5), R_Src1(RRR), R_Res(RRR) );
   syntax = ( "suba #%f,%f",u5,RRR);
}
define (instr=SUBA__u5_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUBA__u5_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive subtraction""";
attrs = (LARIT,V2);
# 1422 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
   alias = suba_imm_family(OPCD(OPCD),immu(u5), R_Src1(Ra), R_Res(Rn));
  syntax = ( "suba #%f,%f,%f",u5,Ra,Rn);
}

define (instr=SUBA__u5_Rq_Rn)
{

   alias = suba_imm_family(OPCD(OPCD),immu(u5), R_Src1(qqq), R_Res(RRR) );
   syntax = ( "suba #%f,%f,%f",u5,qqq,RRR);
}

action=
{







   R(R_Res) = Address_by_MCTL(R_Src1,immu,1,1,1,immu);
};

}



define (instr=SUBA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=SUBA_zx_Zx)
{

  alias = SUBA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(ZZZ));
}

define (instr=SUBA_zx_Zx_Zn)
{

  alias = SUBA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(PPP));
  syntax = ( "suba %f,%f,%f",zzz,ZZZ,PPP);
}


action=
{




   if (G_Src2==7) {
         sbits<32> imm = 0 - zxTable(G_Src1);
      update_arith_sp(imm.uint32() & 0xfffffff8);
   } else {ZxTable(G_Res) = ZxTable(G_Src2) - zxTable(G_Src1);}


};

}



define (instr=SUBA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2, R_Res);



  blk = lsu;


define (instr=SUBA_zx_Rn)
{

  alias = SUBA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR), R_Res(RRR));
}

define (instr=SUBA_zx_Rq_Rn)
{

  alias = SUBA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(qqq), R_Res(RRR));
  syntax = ( "suba %f,%f,%f",zzz,qqq,RRR);
}


action=
{





    R(R_Res) = Address_by_MCTL(R_Src2,zxTable(G_Src1),1,1,1,zxTable(G_Src1));

};

}



define (instr=SUBA_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=SUBA_Rq_Zx)
{

  alias = SUBA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(ZZZ));
}

define (instr=SUBA_Rq_Zx_Zn)
{

  alias = SUBA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(PPP));
  syntax = ( "suba %f,%f,%f",qqq,ZZZ,PPP);

}


action=
{




     if (G_Src2==7) {
    sbits<32> imm = 0 - R(R_Src1);
    update_arith_sp(imm.uint32()& 0xfffffff8);
  } else {ZxTable(G_Res) = ZxTable(G_Src2) - R(R_Src1); }

};

}



define (instr=SXTA_B_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;


define (instr=SXTA_B_zx_Zx)
{

  alias = SXTA_B_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Res(ZZZ));
}


action=
{






      ZxTable(G_Res) = signExtend( zxTable(G_Src1)(7,0), 32);
};

}


define (instr=SXTA_B_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Res);



  blk = lsu;


define (instr=SXTA_B_zx_Rn)
{

  alias = SXTA_B_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Res(RRR));
}


action=
{






      R(R_Res) = signExtend( zxTable(G_Src1)(7,0), 32);
};

}


define (instr=SXTA_B_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Res);



  blk = lsu;


define (instr=SXTA_B_Rq_Zx)
{

  alias = SXTA_B_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Res(ZZZ));
}


action=
{






      ZxTable(G_Res) = signExtend( R(R_Src1)(7,0), 32);
};

}



define (instr=SXTA_W_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;


define (instr=SXTA_W_Zx)
{

  alias = SXTA_W_Zx_family(OPCD(OPCD), G_Src1(ZZZ), G_Res(ZZZ));
}


action=
{





      ZxTable(G_Res) = signExtend( ZxTable(G_Src1)(15,0), 32);
};

}




define (instr=TFRA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;





define (instr=TFRA_zx_Zx)
{

  alias = TFRA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Res(ZZZ));
}

 action =
 {






  if (G_Res == 7) {
    update_arith_sp((zxTable(G_Src1).uint32()&0xFFFFFFF8) - SP.uint32());
                } else {
    ZxTable(G_Res) = zxTable(G_Src1);
                }

 };

}



define (instr=TFRA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Res);



  blk = lsu;

  define (instr=TFRA_zx_Rn)
  {

     alias = TFRA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Res(RRR));
  }

  action =
  {




     R(R_Res) = zxTable(G_Src1);


  };

}



define (instr=TFRA_Rq_Zx_family)
{

   fields = (OPCD, R_Src1, G_Res);



   blk = lsu;

   define (instr=TFRA_Rq_Zx)
   {

      alias = TFRA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Res(ZZZ));
   }

   action =
   {




      if (G_Res == 7) {
  update_arith_sp((R(R_Src1).uint32()&0xFFFFFFF8) - SP.uint32());
      } else {
  ZxTable(G_Res) = R(R_Src1);
      }

   };

}





define (instr=TFRA_OSP_Rn_family)
{

   fields = (OPCD, R_Res);



   blk = lsu;


   define (instr=TFRA_OSP_Rn)
   {

      alias = TFRA_OSP_Rn_family(OPCD(OPCD), R_Res(RRR));
}

   action =
   {




      if ( SR.PE==1 )
      {
  EMR_LOW = true;
  EMR.ILPR=1;
  raiseException(Privelege);
      }
      else
      {
  if (SR.EXP == 1) { R(R_Res) = NSP; }
  else { R(R_Res) = ESP; }
      }
   };

}


define (instr=TFRA_PC_Rn_family)
{

  fields = (OPCD, R_Res);
  blk = lsu;


define (instr=TFRA_PC_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_PC_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer from PC""";
# 1850 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
  alias = TFRA_PC_Rn_family(OPCD(OPCD), R_Res(Rn));
  syntax = ( "tfra pc,%f",Rn);
}


action =
{

   if ( SR.PE==1 )
   {
      EMR_LOW = true;
      EMR.ILPR=1;
      raiseException(Privelege);
   }
   else
   {
 R(R_Res) = PC_ST_VLES;
   }
};

}


define (instr=TFRA_xSP_Rn_family)
{

  fields = (OPCD, R_Res, xSP);
  blk = lsu;

define (instr=TFRA_xSP_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_xSP_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),xSP(0)),
 (bits(27),xSP(1)),
 (bits(28),b0),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer from other stack pointers""";
attrs = (IARIT,V2);
# 1882 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
  alias = TFRA_xSP_Rn_family(OPCD(OPCD), R_Res(Rn), xSP(xSP));
  syntax = ( "tfra %f,%f",xSP,Rn);
}


action =
{

   if ( SR.PE==1 )
   {
      EMR_LOW = true;
      EMR.ILPR=1;
      raiseException(Privelege);
   }
   else
   {
      if (xSP == 0) { R(R_Res) = NSP; }
      else { R(R_Res) = ESP; }
   }
};

}



define (instr=TFRA_Rn_OSP_family)
{

  fields = (OPCD, R_Src1);



  blk = lsu;



define (instr=TFRA_Rn_OSP)
{

  alias = TFRA_Rn_OSP_family(OPCD(OPCD), R_Src1(RRR));
}

action =
{





   if ( SR.PE==1 )
   {
      EMR_LOW = true;
      EMR.ILPR=1;
      raiseException(Privelege);
   }
   else
   {
      if (SR.EXP == 1) {
  update_arith_nsp( (R(R_Src1).uint32()&0xFFFFFFF8) - NSP.uint32());
      } else {
  update_arith_esp( (R(R_Src1).uint32()&0xFFFFFFF8) - ESP.uint32());
      }

   }
};

}



define (instr=TFRA_Ra_xSP_family)
{

  fields = (OPCD, R_Src1, xSP);
  blk = lsu;


define (instr=TFRA_Ra_xSP)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_Ra_xSP.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),xSP(0)),
 (bits(17),xSP(1)),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer to other stack pointers (reserved)""";
attrs = (LARIT,V2);
# 1962 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_arithmetic_aau.adl" 2
  alias = TFRA_Ra_xSP_family(OPCD(OPCD), R_Src1(Ra), xSP(xSP));
  syntax = ( "tfra %f,%f",Ra,xSP);
}

action =
{

   if ( SR.PE==1 )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      if (xSP == 0) {
  update_arith_nsp( (R(R_Src1).uint32()&0xFFFFFFF8) - NSP.uint32());
      } else {
  update_arith_esp( (R(R_Src1).uint32()&0xFFFFFFF8) - ESP.uint32());
      }

   }
};

}


define (instr=TSTEQA_W_Zx_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;


define (instr=TSTEQA_W_Zx)
{

  alias = TSTEQA_W_Zx_family(OPCD(OPCD), G_Src1(ZZZ));
}


action=
{




     if ( ZxTable(G_Src1)(15,0) == 0 ) { SR.T=1; }
     else { SR.T=0; }
};

}


define (instr=TSTEQA_W_Rn_family)
{

  fields = (OPCD, R_Src1);



  blk = lsu;


define (instr=TSTEQA_W_Rn)
{

  alias = TSTEQA_W_Rn_family(OPCD(OPCD), R_Src1(RRR));
}


action=
{






     if ( R(R_Src1)(15,0) == 0 ) { SR.T=1; }
     else { SR.T=0; }
};

}


define (instr=TSTEQA_L_Zx_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;


define (instr=TSTEQA_L_Zx)
{

  alias = TSTEQA_L_Zx_family(OPCD(OPCD), G_Src1(ZZZ));
}


action=
{




     if ( ZxTable(G_Src1) == 0 ) { SR.T=1; }
     else { SR.T=0; }

};

}


define (instr=TSTEQA_L_Rn_family)
{

  fields = (OPCD, R_Src1);



  blk = lsu;


define (instr=TSTEQA_L_Rn)
{

  alias = TSTEQA_L_Rn_family(OPCD(OPCD), R_Src1(RRR));
}


action=
{




     if ( R(R_Src1) == 0 ) { SR.T=1; }
     else { SR.T=0; }

};

}


define (instr=TSTGEA_L_Zx_family)
{

   fields = (OPCD, G_Src1);



   blk = lsu;


   define (instr=TSTGEA_L_Zx)
   {

      alias = TSTGEA_L_Zx_family(OPCD(OPCD), G_Src1(ZZZ));
   }

   action =
   {




      if ( ZxTable(G_Src1).signedGE(0) ) { SR.T=1; }
      else { SR.T=0; }
   };

}


define (instr=TSTGEA_L_Rn_family)
{

   fields = (OPCD, R_Src1);



   blk = lsu;


   define (instr=TSTGEA_L_Rn)
   {

      alias = TSTGEA_L_Rn_family(OPCD(OPCD), R_Src1(RRR));
   }

   action =
   {




      if ( R(R_Src1).signedGE(0) ) { SR.T=1; }
      else { SR.T=0; }
   };

}


define (instr=TSTGTA_Zx_family)
{

   fields = (OPCD, G_Src1);



   blk = lsu;


   define (instr=TSTGTA_Zx)
   {

      alias = TSTGTA_Zx_family(OPCD(OPCD), G_Src1(ZZZ));
   }

   action =
   {




      if ( ZxTable(G_Src1).signedGT(0) ) { SR.T=1; }
      else { SR.T=0; }
   };

}



define (instr=TSTGTA_Rn_family)
{

   fields = (OPCD, R_Src1);



   blk = lsu;

   define (instr=TSTGTA_Rn)
   {

      alias = TSTGTA_Rn_family(OPCD(OPCD), R_Src1(RRR));
   }

   action =
   {




      if ( R(R_Src1).signedGT(0) ) { SR.T=1; }
      else { SR.T=0; }
   };

}



define (instr=ZXTA_B_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;


define (instr=ZXTA_B_zx_Zx)
{

  alias = ZXTA_B_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Res(ZZZ));
}


action=
{




      ZxTable(G_Res) = zeroExtend( zxTable(G_Src1)(7,0), 32);
};

}


define (instr=ZXTA_B_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Res);



  blk = lsu;


define (instr=ZXTA_B_zx_Rn)
{

  alias = ZXTA_B_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Res(RRR));
}


action=
{





      R(R_Res) = zeroExtend( zxTable(G_Src1)(7,0), 32);
};

}


define (instr=ZXTA_B_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Res);



  blk = lsu;


define (instr=ZXTA_B_Rq_Zx)
{

  alias = ZXTA_B_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Res(ZZZ));
}


action=
{





      ZxTable(G_Res) = zeroExtend( R(R_Src1)(7,0), 32);
};

}



define (instr=ZXTA_W_Zx_family)
{

  fields = (OPCD, G_Src1, G_Res);



  blk = lsu;


define (instr=ZXTA_W_Zx)
{

  alias = ZXTA_W_Zx_family(OPCD(OPCD), G_Src1(ZZZ), G_Res(ZZZ));
}


action=
{





      ZxTable(G_Res) = zeroExtend( ZxTable(G_Src1)(15,0), 32);
};

}





define (instr=ANDA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=ANDA_zx_Zx)
{

  alias = ANDA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(ZZZ));
}


action=
{





   ZxTable(G_Res) = zxTable(G_Src1) & ZxTable(G_Src2);
};

}


define (instr=ANDA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2, R_Res);



  blk = lsu;


define (instr=ANDA_zx_Rn)
{

  alias = ANDA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR), R_Res(RRR));
}


action=
{





   R(R_Res) = zxTable(G_Src1) & R(R_Src2);
};

}


define (instr=ANDA_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2, G_Res);



  blk = lsu;


define (instr=ANDA_Rq_Zx)
{

  alias = ANDA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(ZZZ));
}


action=
{




   ZxTable(G_Res) = R(R_Src1) & ZxTable(G_Src2);
};

}


define (instr=ORA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2, G_Res);



  blk = lsu;

define (instr=ORA_zx_Zx)
{

  alias = ORA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(ZZZ));
}


action=
{



   ZxTable(G_Res) = zxTable(G_Src1) | ZxTable(G_Src2);
};

}


define (instr=ORA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2, R_Res);



  blk = lsu;

define (instr=ORA_zx_Rn)
{

  alias = ORA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR), R_Res(RRR));
}


action=
{



   R(R_Res) = zxTable(G_Src1) | R(R_Src2);
};

}

define (instr=ORA_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2, G_Res);



   blk = lsu;

define (instr=ORA_Rq_Zx)
{

  alias = ORA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(ZZZ));
}

action=
{



   ZxTable(G_Res) = ZxTable(G_Src2) | R(R_Src1);
};

}


define (instr=EORA_zx_Zx_family)
{

  fields = (OPCD, G_Src1, G_Src2, G_Res);



   blk = lsu;

define (instr=EORA_zx_Zx)
{

  alias = EORA_zx_Zx_family(OPCD(OPCD), G_Src1(zzz), G_Src2(ZZZ), G_Res(ZZZ));
}


action=
{



   ZxTable(G_Res) = ZxTable(G_Src2) ^ zxTable(G_Src1);
};

}


define (instr=EORA_zx_Rn_family)
{

  fields = (OPCD, G_Src1, R_Src2, R_Res);



   blk = lsu;

define (instr=EORA_zx_Rn)
{

  alias = EORA_zx_Rn_family(OPCD(OPCD), G_Src1(zzz), R_Src2(RRR), R_Res(RRR));
}


action=
{



   R(R_Res) = zxTable(G_Src1) ^ R(R_Src2);
};

}


define (instr=EORA_Rq_Zx_family)
{

  fields = (OPCD, R_Src1, G_Src2, G_Res);



   blk = lsu;

define (instr=EORA_Rq_Zx)
{

  alias = EORA_Rq_Zx_family(OPCD(OPCD), R_Src1(qqq), G_Src2(ZZZ), G_Res(ZZZ));
}


action=
{



   ZxTable(G_Res) = ZxTable(G_Src2) ^ R(R_Src1);
};

}
# 53 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 1

define (instr=BMCLR__u16_C1_H_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMCLR__u16_C1_H)
{

  alias = BMCLR__u16_C1_H_family(OPCD(OPCD), u16(u16), CCC(CCC));
}

action=
{




   if ( (SR.PE==1) && (CCC==1||CCC==2) )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      C1Table(CCC) = ( C1Table(CCC) & (~(concat(u16,zero(16)) )) ) ;
   }

};

}




define (instr=BMCLR__u16_C1_L_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMCLR__u16_C1_L)
{

  alias = BMCLR__u16_C1_L_family(OPCD(OPCD), u16(u16), CCC(CCC));
}

action=
{






   if (IsUserMode() && (CCC==1||CCC==2))
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      C1Table(CCC) = C1Table(CCC) & ~(zeroExtend(u16,32)) ;
   }
};

}


define (instr=BMCLR__u16_Rq_H_family)
{

  fields = (OPCD, u16, R_Src1, R_Res);



  blk = lsu;


define (instr=BMCLR__u16_Rq_H)
{

  alias = BMCLR__u16_Rq_H_family(OPCD(OPCD), u16(u16), R_Src1(qqq), R_Res(qqq));
}
define (instr=BMCLRA__u16_Rn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCLRA__u16_Rn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask clear""";
attrs = (LLOG,V2);
# 97 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
  alias = BMCLR__u16_Rq_H_family(OPCD(OPCD), u16(Rn), R_Src1(Rn), R_Res(Rn));
  syntax = ( "bmclra #%f,%f.h",u16,Rn);
}


action=
{




      R(R_Res) = R(R_Src1) & ~(concat(u16,zero(16)));

};

}



define (instr=BMCLR__u16_Rq_L_family)
{

  fields = (OPCD, u16, R_Src1, R_Res);



  blk = lsu;


define (instr=BMCLR__u16_Rq_L)
{

  alias = BMCLR__u16_Rq_L_family(OPCD(OPCD), u16(u16), R_Src1(qqq), R_Res(qqq));
}
define (instr=BMCLRA__u16_Rn_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCLRA__u16_Rn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask clear""";
attrs = (LLOG,V2);
# 134 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
  alias = BMCLR__u16_Rq_L_family(OPCD(OPCD), u16(u16), R_Src1(Rn), R_Res(Rn));
  syntax = ( "bmclra #%f,%f.l",u16,Rn);
}


action=
{




      R(R_Res) = R(R_Src1) & ~(zeroExtend(u16,32));

};

}



define (instr=BMCLR_W__u16__SPmu5__family)
{

  fields = (OPCD, w_u5, u16);



  blk = lsu;


define (instr=BMCLR_W__u16__SPmu5_)
{

  alias = BMCLR_W__u16__SPmu5__family(OPCD(OPCD), w_u5(w_u5), u16(u16));
}


action=
{





   bits <6> u6 = concat(w_u5,zero(1));
   bits <32> offset = concat(zero(26),u6);
   Mem((SP-offset),2) = Mem((SP-offset),2) & ~u16;

};

}





define (instr=BMCLR_W__u16__SPps16__family)
{

  fields = (OPCD, w_s16, u16_t28);



  blk = lsu;


define (instr=BMCLR_W__u16__SPps16_)
{





  alias = BMCLR_W__u16__SPps16__family(OPCD(OPCD), w_s16(s16), u16_t28(u16));
  syntax = ( "bmclr.w #%f,(SP+%f)",u16,s16);

   }


action=
{




   var offset = signExtend(w_s16,32);
   Mem((SP+offset),2) = Mem((SP+offset),2) & (~u16_t28);
};

}




define (instr=BMCLR_W__u16__Rn__family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMCLR_W__u16__Rn_)
{





  alias = BMCLR_W__u16__Rn__family(OPCD(OPCD), u16(Rn), R_Src1(Rn));
  syntax = ( "bmclr.w #%f,(%f)",u16,Rn);

   }


action=
{




   Mem(R(R_Src1),2) = Mem(R(R_Src1),2) & (~u16);
};

}





define (instr=BMCLR_W__u16__a16__family)
{

  fields = (OPCD, w_a16, u16_t28);



  blk = lsu;


define (instr=BMCLR_W__u16__a16_)
{

  alias = BMCLR_W__u16__a16__family(OPCD(OPCD), w_a16(w_a16), u16_t28(u16_t28));
}


action=
{




   Mem(w_a16,2) = (Mem(w_a16,2)) & (~u16_t28) ;
};

}




define (instr=BMCHG__u16_C1_L_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMCHG__u16_C1_L)
{

  alias = BMCHG__u16_C1_L_family(OPCD(OPCD), u16(u16), CCC(CCC));
}

action=
{




   if (IsUserMode() && (CCC==1||CCC==2))
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      C1Table(CCC) = C1Table(CCC) ^ (zeroExtend(u16,32)) ;
   }
};

}




define (instr=BMCHG__u16_C1_H_family)
{
  fields = (OPCD, u16, CCC);



  blk = lsu;

define (instr=BMCHG__u16_C1_H)
{

  alias = BMCHG__u16_C1_H_family(OPCD(OPCD), u16(u16), CCC(CCC));
}

action=
{




   if ( (SR.PE==1) && (CCC==1||CCC==2) )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      C1Table(CCC) = ( C1Table(CCC) ^(concat(u16,zero(16)) ) ) ;
   }

};

}


define (instr=BMCHG__u16_Rq_L_family)
{

  fields = (OPCD, u16, R_Src1, R_Res);



  blk = lsu;


define (instr=BMCHG__u16_Rq_L)
{

  alias = BMCHG__u16_Rq_L_family(OPCD(OPCD), u16(u16), R_Src1(qqq), R_Res(qqq));
}
define (instr=BMCHGA__u16_Rn_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCHGA__u16_Rn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask change""";
attrs = (LLOG,V2);
# 387 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
  alias = BMCHG__u16_Rq_L_family(OPCD(OPCD), u16(u16), R_Src1(Rn), R_Res(Rn));
  syntax = ( "bmchga #%f,%f.l",u16,Rn);
}


action=
{




      R(R_Res) = R(R_Src1)^(zeroExtend(u16,32));
 };

}


define (instr=BMCHG__u16_Rq_H_family)
{

  fields = (OPCD, u16, R_Src1, R_Res);



  blk = lsu;


define (instr=BMCHG__u16_Rq_H)
{

  alias = BMCHG__u16_Rq_H_family(OPCD(OPCD), u16(u16), R_Src1(qqq), R_Res(qqq));
}
define (instr=BMCHGA__u16_Rn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCHGA__u16_Rn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask change""";
attrs = (LLOG,V2);
# 422 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
  alias = BMCHG__u16_Rq_H_family(OPCD(OPCD), u16(u16), R_Src1(Rn), R_Res(Rn));
  syntax = ( "bmchga #%f,%f.h",u16,Rn);
}


action=
{




      R(R_Res) = R(R_Src1)^(concat(u16,zero(16)));

};

}


define (instr=BMCHG_W__u16__Rn__family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMCHG_W__u16__Rn_)
{





  alias = BMCHG_W__u16__Rn__family(OPCD(OPCD), u16(Rn), R_Src1(Rn));
  syntax = ( "bmchg.w #%f,(%f)",u16,Rn);

   }


action=
{





   Mem(R(R_Src1),2) = Mem(R(R_Src1),2)^(u16);
};

}



define (instr=BMCHG_W__u16__a16__family)
{

  fields = (OPCD, w_a16, u16_t28);



  blk = lsu;


define (instr=BMCHG_W__u16__a16_)
{

  alias = BMCHG_W__u16__a16__family(OPCD(OPCD), w_a16(w_a16), u16_t28(u16_t28));
}


action=
{





   Mem(w_a16,2) = (Mem(w_a16,2)) ^ (u16_t28);
};

}



define (instr=BMCHG_W__u16__SPps16__family)
{

  fields = (OPCD, w_s16, u16_t28);



  blk = lsu;


define (instr=BMCHG_W__u16__SPps16_)
{





  alias = BMCHG_W__u16__SPps16__family(OPCD(OPCD), w_s16(u16), u16_t28(s16));
  syntax = ( "bmchg.w #%f,(SP+%f)",u16,s16);

   }


action=
{




   var offset = signExtend(w_s16,32);
   Mem((SP+offset),2) = (Mem((SP+offset),2)) ^ (u16_t28);
};

}




define (instr=BMCHG_W__u16__SPmu5__family)
{

  fields = (OPCD, w_u5, u16);



  blk = lsu;


define (instr=BMCHG_W__u16__SPmu5_)
{

  alias = BMCHG_W__u16__SPmu5__family(OPCD(OPCD), w_u5(w_u5), u16(u16));
}


action=
{





   bits <6> u6 = concat(w_u5,zero(1));
   bits <32> offset = concat(zero(26),u6);
   Mem((SP-offset),2) = Mem((SP-offset),2) ^ (u16);
};

}



define (instr=BMSET__u16_C1_H_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMSET__u16_C1_H)
{

  alias = BMSET__u16_C1_H_family(OPCD(OPCD), u16(u16), CCC(CCC));
}


action=
{





   if ( IsUserMode() && (CCC==1||CCC==2))
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      C1Table(CCC) = C1Table(CCC) | concat(u16,zero(16));
   }
};

}



define (instr=BMSET__u16_C1_L_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMSET__u16_C1_L)
{

  alias = BMSET__u16_C1_L_family(OPCD(OPCD), u16(u16), CCC(CCC));
}


action=
{






   if ( IsUserMode() && (CCC==1||CCC==2))
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {

      C1Table(CCC) = C1Table(CCC) | concat(zero(16),u16);
   }

};

}




define (instr=BMSET__u16_Rq_H_family)
{

  fields = (OPCD, immu, R_Src1, R_Res);



  blk = lsu;


define (instr=BMSET__u16_Rq_H)
{

  alias = BMSET__u16_Rq_H_family(OPCD(OPCD), immu(u16), R_Src1(qqq), R_Res(qqq));
}
define (instr=BMSETA__u16_Rn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMSETA__u16_Rn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask set""";
attrs = (LLOG,V2);
# 679 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
  alias = BMSET__u16_Rq_H_family(OPCD(OPCD), immu(u16), R_Src1(Rn), R_Res(Rn));
  syntax = ( "bmseta #%f,%f.h",u16,Rn);
}


action=
{




      R(R_Res) = R(R_Src1) | concat(immu,zero(16));
 };

}






define (instr=BMSET__u16_Rq_L_family)
{

  fields = (OPCD, immu, R_Src1, R_Res);



  blk = lsu;


define (instr=BMSET__u16_Rq_L)
{

  alias = BMSET__u16_Rq_L_family(OPCD(OPCD), immu(u16), R_Src1(qqq), R_Res(qqq));
}
define (instr=BMSETA__u16_Rn_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMSETA__u16_Rn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask set""";
attrs = (LLOG,V2);
# 718 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
  alias = BMSET__u16_Rq_L_family(OPCD(OPCD), immu(u16), R_Src1(Rn), R_Res(Rn));
  syntax = ( "bmseta #%f,%f.l",u16,Rn);
}


action=
{




      R(R_Res) = R(R_Src1) | concat(zero(16),immu);
};

}


define (instr=BMSET_W__u16__SPmu5__family)
{

  fields = (OPCD, w_u5, u16);



  blk = lsu;


define (instr=BMSET_W__u16__SPmu5_)
{

  alias = BMSET_W__u16__SPmu5__family(OPCD(OPCD), w_u5(w_u5), u16(u16));
}


action=
{






   bits <6> u6 = concat(w_u5,zero(1));
   bits <32> offset = concat(zero(26),u6);
   Mem((SP-offset),2) = Mem((SP-offset),2) | u16;
};

}



define (instr=BMSET_W__u16__SPps16__family)
{

  fields = (OPCD, w_s16, u16_t28);



  blk = lsu;


define (instr=BMSET_W__u16__SPps16_)
{





  alias = BMSET_W__u16__SPps16__family(OPCD(OPCD), w_s16(s16), u16_t28(u16));
  syntax = ( "bmset.w #%f,(SP+%f)",u16,s16);

   }


action=
{






   Mem((SP+signExtend(w_s16,32)),2) = (Mem((SP+signExtend(w_s16,32)),2)) | (u16_t28);
};

}




define (instr=BMSET_W__u16__Rn__family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMSET_W__u16__Rn_)
{





  alias = BMSET_W__u16__Rn__family(OPCD(OPCD), u16(Rn), R_Src1(Rn));
  syntax = ( "bmset.w #%f,(%f)",u16,Rn);

   }


action=
{




   Mem(R(R_Src1),2) = Mem(R(R_Src1),2) | u16;
};

}




define (instr=BMSET_W__u16__a16__family)
{

  fields = (OPCD, w_a16, u16_t28);



  blk = lsu;


define (instr=BMSET_W__u16__a16_)
{

  alias = BMSET_W__u16__a16__family(OPCD(OPCD), w_a16(w_a16), u16_t28(u16_t28));
}


action=
{






   Mem(w_a16,2) = Mem(w_a16,2) | u16_t28;
};

}




define (instr=BMTSET__u16_Da_L_family)
{

  fields = (OPCD, u16, Src1, Res);



  blk = lsu;


define (instr=BMTSET__u16_Da_L)
{

  alias = BMTSET__u16_Da_L_family(OPCD(OPCD), u16(u16), Src1(JJJ), Res(JJJ));
}


action=
{






      bits<40> d_src = D(Src1);
      bits<40> tmp_d = d_src | zeroExtend(u16,40);
      if ( tmp_d == d_src ) { SR.T=1; }
      else { SR.T=0; }
      D(Res) = tmp_d;




};

}


define (instr=BMTSET__u16_Rq_L_family)
{

  fields = (OPCD, u16, R_Src1, R_Res);



  blk = lsu;


define (instr=BMTSET__u16_Rq_L)
{

  alias = BMTSET__u16_Rq_L_family(OPCD(OPCD), u16(u16), R_Src1(qqq), R_Res(qqq));
}


action=
{




    bits<32> r_src = R(R_Src1);
      bits<32> tmp_r = r_src | zeroExtend(u16,32);
      if ( tmp_r == r_src ) { SR.T=1; }
      else { SR.T=0; }
      R(R_Res) = tmp_r;
   };

}



define (instr=BMTSET_W__u16__Rn__family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMTSET_W__u16__Rn_)
{

  alias = BMTSET_W__u16__Rn__family(OPCD(OPCD), u16(u16), R_Src1(RRR));
}


action=
{






   bits <16> src = Mem(R(R_Src1),2);
   bits <16> res = src | u16;
   if ( res == src) SR.T=1;
   else SR.T=0;
   Mem(R(R_Src1),2) = res;

};

}



define (instr=BMTSET_W__u16__a16__family)
{

  fields = (OPCD, w_a16, u16_t28);



  blk = lsu;


define (instr=BMTSET_W__u16__a16_)
{

  alias = BMTSET_W__u16__a16__family(OPCD(OPCD), w_a16(w_a16), u16_t28(u16_t28));
}


action=
{






   bits <16> src = Mem(w_a16,2);
   bits <16> res = src | u16_t28;
   if ( res == src) { SR.T=1; }
   else { SR.T=0; }
   Mem(w_a16,2) = res;

};

}



define (instr=BMTSET_W__u16__SPps16__family)
{

  fields = (OPCD, w_s16, u16_t28);



  blk = lsu;


define (instr=BMTSET_W__u16__SPps16_)
{

  alias = BMTSET_W__u16__SPps16__family(OPCD(OPCD), w_s16(w_s16), u16_t28(u16_t28));
}


action=
{






   bits <16> src = Mem((SP+signExtend(w_s16,32)),2);
   bits <16> res = src | u16_t28;
   if ( res == src) { SR.T=1; }
   else { SR.T=0; }
   Mem((SP+signExtend(w_s16,32)),2) = res;

};

}


define (instr=BMTSET_W__u16__SPmu5__family)
{

  fields = (OPCD, w_u5, u16);



  blk = lsu;


define (instr=BMTSET_W__u16__SPmu5_)
{

  alias = BMTSET_W__u16__SPmu5__family(OPCD(OPCD), w_u5(w_u5), u16(u16));
}


action=
{






   bits <6> u6 = concat(w_u5,zero(1));
   bits <32> offset = concat(zero(26),u6);
   bits <16> src = Mem((SP-offset),2);
   bits <16> res = src | u16;
   if ( res == src) SR.T=1;
   else SR.T=0;
   Mem((SP-offset),2) = res;
};

}


define (instr=BMTSTC__u16_Da_L_family)
{

  fields = (OPCD, u16, Src1);



  blk = lsu;


define (instr=BMTSTC__u16_Da_L)
{

  alias = BMTSTC__u16_Da_L_family(OPCD(OPCD), u16(u16), Src1(JJJ));
}


action=
{






   if ( (D(Src1)(15,0) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }

};

}


define (instr=BMTSTC__u16_Rq_L_family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMTSTC__u16_Rq_L)
{

  alias = BMTSTC__u16_Rq_L_family(OPCD(OPCD), u16(u16), R_Src1(qqq));
}


action=
{





   if ( (R(R_Src1)(15,0) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }

};

}


define (instr=BMTSTC__u16_Da_H_family)
{

  fields = (OPCD, u16, Src1);



  blk = lsu;


define (instr=BMTSTC__u16_Da_H)
{

  alias = BMTSTC__u16_Da_H_family(OPCD(OPCD), u16(u16), Src1(JJJ));
}


action=
{






   if ( (D(Src1)(31,16) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }

};

}

define (instr=BMTSTC__u16_Rq_H_family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMTSTC__u16_Rq_H)
{

  alias = BMTSTC__u16_Rq_H_family(OPCD(OPCD), u16(u16), R_Src1(qqq));
}


action=
{






   if ( (R(R_Src1)(31,16) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }

};

}

define (instr=BMTSTC__u16_C1_L_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMTSTC__u16_C1_L)
{

  alias = BMTSTC__u16_C1_L_family(OPCD(OPCD), u16(u16), CCC(CCC));
}


action=
{






   if ( (SR.PE==1) && (CCC==1||CCC==2) )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      if ( (C1Table(CCC)(15,0) & u16)==0x0000 ) SR.T=1;
      else SR.T=0;
   }

};

}


define (instr=BMTSTC__u16_C1_H_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMTSTC__u16_C1_H)
{

  alias = BMTSTC__u16_C1_H_family(OPCD(OPCD), u16(u16), CCC(CCC));
}


action=
{






   if ( (SR.PE==1) && (CCC==1||CCC==2) )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      if ( (C1Table(CCC)(31,16) & u16)==0x0000 ) SR.T=1;
      else SR.T=0;
   }

};

}



define (instr=BMTSTC_W__u16__Rn__family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMTSTC_W__u16__Rn_)
{

  alias = BMTSTC_W__u16__Rn__family(OPCD(OPCD), u16(u16), R_Src1(RRR));
}


action=
{






   if ( (Mem(R(R_Src1),2) & u16)==0x0000 ) { SR.T=1;}
   else { SR.T=0;}
};

}



define (instr=BMTSTC_W__u16__a16__family)
{

  fields = (OPCD, w_a16, u16_t28);



  blk = lsu;


define (instr=BMTSTC_W__u16__a16_)
{

  alias = BMTSTC_W__u16__a16__family(OPCD(OPCD), w_a16(w_a16), u16_t28(u16_t28));
}


action=
{






   if ( (Mem(w_a16,2) & u16_t28 )==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}




define (instr=BMTSTC_W__u16__SPps16__family)
{

  fields = (OPCD, w_s16, u16_t28);



  blk = lsu;


define (instr=BMTSTC_W__u16__SPps16_)
{

  alias = BMTSTC_W__u16__SPps16__family(OPCD(OPCD), w_s16(w_s16), u16_t28(u16_t28));
}


action=
{





   var offset = signExtend(w_s16,32);
   if ( (Mem((SP+offset),2) & u16_t28)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}

define (instr=BMTSTC_W__u16__SPmu5__family)
{

  fields = (OPCD, w_u5, u16);



  blk = lsu;


define (instr=BMTSTC_W__u16__SPmu5_)
{

  alias = BMTSTC_W__u16__SPmu5__family(OPCD(OPCD), w_u5(w_u5), u16(u16));
}


action=
{






   bits <6> u6 = concat(w_u5,zero(1));
   bits <32> offset = concat(zero(26),u6);
   if ( (Mem((SP-offset),2) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}



define (instr=BMTSTS__u16_Da_L_family)
{

  fields = (OPCD, u16, Src1);



  blk = lsu;


define (instr=BMTSTS__u16_Da_L)
{

  alias = BMTSTS__u16_Da_L_family(OPCD(OPCD), u16(u16), Src1(JJJ));
}


action=
{




   if ( ((~(D(Src1)(15,0))) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}


define (instr=BMTSTS__u16_Rq_L_family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMTSTS__u16_Rq_L)
{

  alias = BMTSTS__u16_Rq_L_family(OPCD(OPCD), u16(u16), R_Src1(qqq));
}


action=
{






   if ( ((~(R(R_Src1)(15,0))) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}


define (instr=BMTSTS__u16_Da_H_family)
{

  fields = (OPCD, u16, Src1);



  blk = lsu;


define (instr=BMTSTS__u16_Da_H)
{

  alias = BMTSTS__u16_Da_H_family(OPCD(OPCD), u16(u16), Src1(JJJ));
}


action=
{






   if ( ((~(D(Src1)(31,16))) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}



define (instr=BMTSTS__u16_Rq_H_family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMTSTS__u16_Rq_H)
{

  alias = BMTSTS__u16_Rq_H_family(OPCD(OPCD), u16(u16), R_Src1(qqq));
}


action=
{






   if ( ((~(R(R_Src1)(31,16))) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}



define (instr=BMTSTS__u16_C1_L_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMTSTS__u16_C1_L)
{

  alias = BMTSTS__u16_C1_L_family(OPCD(OPCD), u16(u16), CCC(CCC));
}


action=
{






   if ( (SR.PE==1) && (CCC==1||CCC==2) )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      if ( ((~(C1Table(CCC)(15,0))) & u16)==0x0000 ) { SR.T=1;}
      else { SR.T=0;}
   }

};

}


define (instr=BMTSTS__u16_C1_H_family)
{

  fields = (OPCD, u16, CCC);



  blk = lsu;


define (instr=BMTSTS__u16_C1_H)
{

  alias = BMTSTS__u16_C1_H_family(OPCD(OPCD), u16(u16), CCC(CCC));
}


action=
{






   if ( (SR.PE==1) && (CCC==1||CCC==2) )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      if ( ((~(C1Table(CCC)(31,16))) & u16)==0x0000 ) { SR.T=1;}
      else { SR.T=0;}
   }

};

}



define (instr=BMTSTS_W__u16__Rn__family)
{

  fields = (OPCD, u16, R_Src1);



  blk = lsu;


define (instr=BMTSTS_W__u16__Rn_)
{

  alias = BMTSTS_W__u16__Rn__family(OPCD(OPCD), u16(u16), R_Src1(RRR));
}


action=
{






   if ( (~(Mem(R(R_Src1),2)) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }

};

}



define (instr=BMTSTS_W__u16__a16__family)
{

  fields = (OPCD, w_a16, u16_t28);



  blk = lsu;


define (instr=BMTSTS_W__u16__a16_)
{

  alias = BMTSTS_W__u16__a16__family(OPCD(OPCD), w_a16(w_a16), u16_t28(u16_t28));
}


action=
{






   if ( (~(Mem(w_a16,2)) & u16_t28)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}



define (instr=BMTSTS_W__u16__SPps16__family)
{

  fields = (OPCD, w_s16, u16_t28);



  blk = lsu;


define (instr=BMTSTS_W__u16__SPps16_)
{

  alias = BMTSTS_W__u16__SPps16__family(OPCD(OPCD), w_s16(w_s16), u16_t28(u16_t28));
}


action=
{






   var offset = signExtend(w_s16,32);
   if ( ((~(Mem((SP+offset),2))) & u16_t28)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}



define (instr=BMTSTS_W__u16__SPmu5__family)
{

  fields = (OPCD, w_u5, u16);



  blk = lsu;


define (instr=BMTSTS_W__u16__SPmu5_)
{

  alias = BMTSTS_W__u16__SPmu5__family(OPCD(OPCD), w_u5(w_u5), u16(u16));
}


action=
{






   bits <6> u6 = concat(w_u5,zero(1));
   bits <32> offset = concat(zero(26),u6);
   if ( ((~(Mem((SP-offset),2))) & u16)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}



define (instr=BMTSET_W__u16__Rn__Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = lsu;
   define (instr=BMTSET_W__u16__Rn__Pn)
   {

      alias = BMTSET_W__u16__Rn__Pn_family(OPCD(OPCD),immu(u16),R_Src1(Rn),P_Res(Pn));
      syntax = ( "bmtset.w #%f,(%f),%f",u16,Rn,Pn);
   }

action=
{
   bits <16> src = Mem(R(R_Src1),2);
   bits <16> res = src | immu;
   if ( res == src) SR.T=1;
   else SR.T=0;
   Mem(R(R_Src1),2) = res;

};

}


define (instr=BMTSET_W__u16__SPps16__Pn_family)
{
  fields = (OPCD,u16_t28,w_s16,P_Res);
   blk = lsu;
   define (instr=BMTSET_W__u16__SPps16__Pn)
   {

      alias = BMTSET_W__u16__SPps16__Pn_family(OPCD(OPCD),u16_t28(u16),w_s16(s16),P_Res(Pn));
      syntax = ( "bmtset.w #%f,(SP+%f),%f",u16,s16,Pn);
   }

action=
{
   bits <16> src = Mem((SP+signExtend(w_s16,32)),2);
   bits <16> res = src | u16_t28;
   if ( res == src) { SR.T=1; }
   else { SR.T=0; }
   Mem((SP+signExtend(w_s16,32)),2) = res;

};

}


define (instr=BMTSET__u16_Dn_H_Pn_family)
{
  fields = (OPCD,immu,Src1,Res,P_Res);
   blk = lsu;
   define (instr=BMTSET__u16_Dn_H_Pn)
   {

      alias = BMTSET__u16_Dn_H_Pn_family(OPCD(OPCD),immu(u16),Src1(Dn),Res(Dn),P_Res(Pn));
      syntax = ( "bmtset #%f,%f.h,%f",u16,Dn,Pn);
   }

action=
{
      bits<40> d_src = D(Src1);
      bits<40> tmp_d = d_src | concat(zero(8),immu,zero(16));
      if ( tmp_d == d_src ) { SR.T=1; }
      else { SR.T=0; }
      D(Res) = tmp_d;




};

}


define (instr=BMTSET__u16_Dn_L_Pn_family)
{
  fields = (OPCD,immu,Src1,Res,P_Res);
   blk = lsu;
   define (instr=BMTSET__u16_Dn_L_Pn)
   {

      alias = BMTSET__u16_Dn_L_Pn_family(OPCD(OPCD),immu(u16),Src1(Dn),Res(Dn),P_Res(Pn));
      syntax = ( "bmtset #%f,%f.l,%f",u16,Dn,Pn);
   }

action=
{
      bits<40> d_src = D(Src1);
      bits<40> tmp_d = d_src | zeroExtend(immu,40);
      if ( tmp_d == d_src ) { SR.T=1; }
      else { SR.T=0; }
      D(Res) = tmp_d;




};

}


define (instr=BMTSETA__u16_Rn_H_Pn_family)
{
  fields = (OPCD,immu,R_Src1,R_Res,P_Res);
   blk = lsu;
   define (instr=BMTSETA__u16_Rn_H_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSETA__u16_Rn_H_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test and set""";
attrs = (LLOG,V2);
# 1899 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMTSETA__u16_Rn_H_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Rn),R_Res(Rn),P_Res(Pn));
      syntax = ( "bmtseta #%f,%f.h,%f",u16,Rn,Pn);
   }

action=
{
      bits<32> r_src = R(R_Src1);
      bits<32> tmp_r = r_src | concat(immu(15,0),zero(16));
      if ( tmp_r == r_src ) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res); }
      R(R_Res) = tmp_r;

};

}


define (instr=BMTSETA__u16_Rn_L_Pn_family)
{
  fields = (OPCD,immu,R_Src1,R_Res,P_Res);
   blk = lsu;
   define (instr=BMTSETA__u16_Rn_L_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSETA__u16_Rn_L_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test and set""";
attrs = (LLOG,V2);
# 1923 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMTSETA__u16_Rn_L_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Rn),R_Res(Rn),P_Res(Pn));
      syntax = ( "bmtseta #%f,%f.l,%f",u16,Rn,Pn);
   }

action=
{
   bits<32> r_src = R(R_Src1);
   bits<32> tmp_r = r_src | zeroExtend(immu,32);
   if ( tmp_r == r_src ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }
   R(R_Res) = tmp_r;

};

}


define (instr=BMTSTC_W__u16__Rn__Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = lsu;
   define (instr=BMTSTC_W__u16__Rn__Pn)
   {

      alias = BMTSTC_W__u16__Rn__Pn_family(OPCD(OPCD),immu(u16),R_Src1(Rn),P_Res(Pn));
      syntax = ( "bmtstc.w #%f,(%f),%f",u16,Rn,Pn);
   }

action=
{
   if ( (Mem(R(R_Src1),2) & immu)==0x0000 ) { SR.T=1;}
   else { SR.T=0;}

};

}


define (instr=BMTSTC_W__u16__SPps16__Pn_family)
{
  fields = (OPCD,u16_t28,w_s16,P_Res);
   blk = lsu;
   define (instr=BMTSTC_W__u16__SPps16__Pn)
   {

      alias = BMTSTC_W__u16__SPps16__Pn_family(OPCD(OPCD),u16_t28(u16),w_s16(s16),P_Res(Pn));
      syntax = ( "bmtstc.w #%f,(SP+%f),%f",u16,s16,Pn);
   }

action=
{
   var offset = signExtend(w_s16,32);
   if ( (Mem((SP+offset),2) & u16_t28)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}



define (instr=BMTSTS_W__u16__Rn__Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = lsu;
   define (instr=BMTSTS_W__u16__Rn__Pn)
   {

      alias = BMTSTS_W__u16__Rn__Pn_family(OPCD(OPCD),immu(u16),R_Src1(Rn),P_Res(Pn));
      syntax = ( "bmtsts.w #%f,(%f),%f",u16,Rn,Pn);
   }

action=
{
   if ( (~(Mem(R(R_Src1),2)) & immu)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }
};

}


define (instr=BMTSTS_W__u16__SPps16__Pn_family)
{
  fields = (OPCD,immu,imms,P_Res);
   blk = lsu;
   define (instr=BMTSTS_W__u16__SPps16__Pn)
   {

      alias = BMTSTS_W__u16__SPps16__Pn_family(OPCD(OPCD),immu(u16),imms(s16),P_Res(Pn));
      syntax = ( "bmtsts.w #%f,(SP+%f),%f",u16,s16,Pn);
   }

action=
{
   var offset = signExtend(imms,32);
   if ( ((~(Mem((SP+offset),2))) & immu)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }

};

}



define (instr=BMTSTS__u16_Dn_H_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = lsu;
   define (instr=BMTSTS__u16_Dn_H_Pn)
   {

      alias = BMTSTS__u16_Dn_H_Pn_family(OPCD(OPCD),immu(u16),Src1(Dn),P_Res(Pn));
      syntax = ( "bmtsts #%f,%f.h,%f",u16,Dn,Pn);
   }

action=
{
   if ( ((~(D(Src1)(31,16))) & immu)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }

};

}


define (instr=BMTSTS__u16_Dn_L_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = lsu;
   define (instr=BMTSTS__u16_Dn_L_Pn)
   {

      alias = BMTSTS__u16_Dn_L_Pn_family(OPCD(OPCD),immu(u16),Src1(Dn),P_Res(Pn));
      syntax = ( "bmtsts #%f,%f.l,%f",u16,Dn,Pn);
   }

action=
{
   if ( ((~(D(Src1)(15,0))) & immu)==0x0000 ) { SR.T=1; }
   else { SR.T=0; }

};

}




define (instr=BMCHG__u16_Da_H_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = lsu;


define (instr=BMCHG__u16_Da_H)
{

  alias = BMCHG__u16_Da_H_family(OPCD(OPCD), immu(u16), Src1(JJJ), Res(JJJ));
}

define (instr=BMCHGA__u16_Dn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCHGA__u16_Dn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask change""";
attrs = (LLOG,V2);
# 2089 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
   alias = BMCHG__u16_Da_H_family(OPCD(OPCD),immu(u16),Src1(Dn),Res(Dn));
   syntax = ( "bmchga #%f,%f.h",u16,Dn);
}


action=
{
    D(Res) = D(Src1)^(concat(zero(8),immu(15,0),zero(16)));




};

}


define (instr=BMCHG__u16_Da_L_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = lsu;


define (instr=BMCHG__u16_Da_L)
{

  alias = BMCHG__u16_Da_L_family(OPCD(OPCD), immu(u16), Src1(JJJ), Res(JJJ));
}

define (instr=BMCHGA__u16_Dn_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCHGA__u16_Dn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask change""";
attrs = (LLOG,V2);
# 2125 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
   alias = BMCHG__u16_Da_L_family(OPCD(OPCD),immu(u16), Src1(Dn),Res(Dn));
   syntax = ( "bmchga #%f,%f.l",u16,Dn);
}

action=
{
      D(Res) = D(Src1)^(zeroExtend(immu,40));



};

}


define (instr=BMCLR__u16_Da_H_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = lsu;


define (instr=BMCLR__u16_Da_H)
{

  alias = BMCLR__u16_Da_H_family(OPCD(OPCD), immu(u16), Src1(JJJ), Res(JJJ));
}

define (instr=BMCLRA__u16_Dn_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCLRA__u16_Dn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask clear""";
attrs = (LLOG,V2);
# 2159 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
   alias = BMCLR__u16_Da_H_family(OPCD(OPCD),immu(u16),Src1(Dn),Res(Dn));
   syntax = ( "bmclra #%f,%f.h",u16,Dn);
}


action=
{
      D(Res) = D(Src1) & ~(concat(zero(8),immu(15,0),zero(16))) ;



};

}



define (instr=BMCLR__u16_Da_L_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = lsu;


define (instr=BMCLR__u16_Da_L)
{

  alias = BMCLR__u16_Da_L_family(OPCD(OPCD), immu(u16), Src1(JJJ), Res(JJJ));
}


define (instr=BMCLRA__u16_Dn_L)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCLRA__u16_Dn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask clear""";
attrs = (LLOG,V2);
# 2196 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMCLR__u16_Da_L_family(OPCD(OPCD),immu(u16), Src1(Dn),Res(Dn));
      syntax = ( "bmclra #%f,%f.l",u16,Dn);
   }

action=
{
      D(Res) = D(Src1) & ~(zeroExtend(immu,40));




};

}



define (instr=BMSET__u16_Da_H_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = lsu;


define (instr=BMSET__u16_Da_H)
{

  alias = BMSET__u16_Da_H_family(OPCD(OPCD), immu(u16), Src1(JJJ), Res(JJJ));
}

define (instr=BMSETA__u16_Dn_H)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMSETA__u16_Dn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask set""";
attrs = (LLOG,V2);
# 2232 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMSET__u16_Da_H_family(OPCD(OPCD),immu(u16),Src1(Dn),Res(Dn));
      syntax = ( "bmseta #%f,%f.h",u16,Dn);
   }


action=
{
      D(Res) = D(Src1) | concat(zero(8),immu(15,0),zero(16));




};

}



define (instr=BMSET__u16_Da_L_family)
{

  fields = (OPCD, immu, Src1, Res);



  blk = lsu;


define (instr=BMSET__u16_Da_L)
{

  alias = BMSET__u16_Da_L_family(OPCD(OPCD), immu(u16), Src1(JJJ), Res(JJJ));
}

define (instr=BMSETA__u16_Dn_L)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMSETA__u16_Dn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask set""";
attrs = (LLOG,V2);
# 2269 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMSET__u16_Da_L_family(OPCD(OPCD),immu(u16), Src1(Dn),Res(Dn));
      syntax = ( "bmseta #%f,%f.l",u16,Dn);
   }


action=
{
      D(Res) = D(Src1) | concat(zero(24),immu(15,0));



};

}



define (instr=BMTSET__u16_Da_H_family)
{

  fields = (OPCD, immu,Src1, Res);



  blk = lsu;


define (instr=BMTSET__u16_Da_H)
{

  alias = BMTSET__u16_Da_H_family(OPCD(OPCD), immu(u16), Src1(JJJ), Res(JJJ));
}

action=
{
      bits<40> d_src = D(Src1);
      bits<40> tmp_d = d_src | concat(zero(8),immu(15,0),zero(16));
      if ( tmp_d == d_src ) { SR.T=1; }
      else { SR.T=0; }
      D(Res) = tmp_d;




};

}


define (instr=BMTSETA__u16_Dn_H_Pn_family)
{
  fields = (OPCD,immu,Src1,Res,P_Res);
   blk = lsu;
   define (instr=BMTSETA__u16_Dn_H_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSETA__u16_Dn_H_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),Dn(0)),
 (bits(25),u16(0)),
 (bits(26),Dn(1)),
 (bits(27),Dn(2)),
 (bits(28),Dn(3)),
 (bits(29),Dn(4)),
 (bits(30),Dn(5)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test and set""";
attrs = (LLOG,V2);
# 2325 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMTSETA__u16_Dn_H_Pn_family(OPCD(OPCD),immu(u16),Src1(Dn),Res(Dn),P_Res(Pn));
      syntax = ( "bmtseta #%f,%f.h,%f",u16,Dn,Pn);
   }

action=
{
      bits<40> d_src = D(Src1);
      bits<40> tmp_d = d_src | concat(zero(8),immu(15,0),zero(16));
      if ( tmp_d == d_src ) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res); }
      D(Res) = tmp_d;

};

}


define (instr=BMTSETA__u16_Dn_L_Pn_family)
{
  fields = (OPCD,immu,Src1,Res,P_Res);
   blk = lsu;
   define (instr=BMTSETA__u16_Dn_L_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSETA__u16_Dn_L_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),Dn(0)),
 (bits(25),u16(0)),
 (bits(26),Dn(1)),
 (bits(27),Dn(2)),
 (bits(28),Dn(3)),
 (bits(29),Dn(4)),
 (bits(30),Dn(5)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test and set""";
attrs = (LLOG,V2);
# 2349 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMTSETA__u16_Dn_L_Pn_family(OPCD(OPCD),immu(u16),Src1(Dn),Res(Dn),P_Res(Pn));
      syntax = ( "bmtseta #%f,%f.l,%f",u16,Dn,Pn);
   }

action=
{
      bits<40> d_src = D(Src1);
      bits<40> tmp_d = d_src | zeroExtend(immu,40);
      if ( tmp_d == d_src ) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res); }
      D(Res) = tmp_d;
};

}

define (instr=BMTSTCA__u16_Da_H_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = lsu;
   define (instr=BMTSTCA__u16_Da_H_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Da_H_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),Da(0)),
 (bits(25),u16(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear""";
attrs = (LLOG,V2);
# 2371 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMTSTCA__u16_Da_H_Pn_family(OPCD(OPCD),immu(u16),Src1(Da),P_Res(Pn));
      syntax = ( "bmtstca #%f,%f.h,%f",u16,Da,Pn);
   }

action=
{
   if ( (D(Src1).H & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}

define (instr=BMTSTCA__u16_Da_L_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = lsu;
   define (instr=BMTSTCA__u16_Da_L_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Da_L_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),Da(0)),
 (bits(25),u16(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear""";
attrs = (LLOG,V2);
# 2391 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMTSTCA__u16_Da_L_Pn_family(OPCD(OPCD),immu(u16),Src1(Da),P_Res(Pn));
      syntax = ( "bmtstca #%f,%f.l,%f",u16,Da,Pn);
   }

action=
{
   if ( (D(Src1).L & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}




define (instr=BMTSTSA__u16_Da_H_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = lsu;
   define (instr=BMTSTSA__u16_Da_H_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Da_H_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),Da(0)),
 (bits(25),u16(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set""";
attrs = (LLOG,V2);
# 2414 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMTSTSA__u16_Da_H_Pn_family(OPCD(OPCD),immu(u16),Src1(Da),P_Res(Pn));
      syntax = ( "bmtstsa #%f,%f.h,%f",u16,Da,Pn);
   }

action=
{
   if ( ((~(D(Src1).H)) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }
};

}

define (instr=BMTSTSA__u16_Da_L_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = lsu;
   define (instr=BMTSTSA__u16_Da_L_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Da_L_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),Da(0)),
 (bits(25),u16(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set""";
attrs = (LLOG,V2);
# 2433 "/vobs/vb_dp_arch/ADLsim/sc3900/bmu.adl" 2
      alias = BMTSTSA__u16_Da_L_Pn_family(OPCD(OPCD),immu(u16),Src1(Da),P_Res(Pn));
      syntax = ( "bmtstsa #%f,%f.l,%f",u16,Da,Pn);
   }

action=
{
   if ( ((~(D(Src1).L)) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}
# 54 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 1
# 31 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl"
define (instr=ADDIA_Ra_Rb_Rn_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=ADDIA_Ra_Rb_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDIA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""same as ADDA, no MCTL""";
attrs = (IARIT,V7);
# 38 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = ADDIA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "addia %f,%f,%f",Ra,Rb,Rn);
   }

action=
{

   R(R_Res) = R(R_Src1) + R(R_Src2);
};

}


define (instr=ADDIA__s16_Ra_Rn_family)
{
  fields = (OPCD,imms,R_Src1,R_Res);
   blk = ipu;
   define (instr=ADDIA__s16_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDIA__s16_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""same as ADDA, no MCTL""";
attrs = (IARIT,V7);
# 58 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = ADDIA__s16_Ra_Rn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),R_Res(Rn));
      syntax = ( "addia #%f,%f,%f",s16,Ra,Rn);
   }

action=
{

   R(R_Res) = R(R_Src1) + imms;
};

}


define (instr=ADDLIxA_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res,ShiftSize);
   blk = ipu;
   doc_title = "addlixa Ra,Rb,Rn";

define (instr=ADDLI1A_Ra_Rb_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDLI1A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive shift left by n bit and add. Addition is not affected by MCTL 
configuration.""";
attrs = (IARIT,V7);
# 80 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
alias = ADDLIxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(1));
  syntax = ( "addli1a %f,%f,%f",Ra,Rb,Rn);
}

define (instr=ADDLI2A_Ra_Rb_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDLI2A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (IARIT,V7);
# 87 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
alias = ADDLIxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(2));
  syntax = ( "addli2a %f,%f,%f",Ra,Rb,Rn);
}


define (instr=ADDLI3A_Ra_Rb_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDLI3A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (IARIT,V7);
# 95 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
alias = ADDLIxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(3));
  syntax = ( "addli3a %f,%f,%f",Ra,Rb,Rn);
}

define (instr=ADDLI4A_Ra_Rb_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDLI4A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (IARIT,V7);
# 102 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
alias = ADDLIxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(4));
  syntax = ( "addli4a %f,%f,%f",Ra,Rb,Rn);
}

action=
{
   R(R_Res) = (R(R_Src1)<<ShiftSize) + R(R_Src2);

};

}



define (instr=MPYA_Ra_Rb_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Res);
  blk = ipu;

define (instr=MPYA_Ra_Rb_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""signed int 16x16-->32""";
attrs = (IARIT,V7);
# 125 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = MPYA_Ra_Rb_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "mpya %f,%f,%f",Ra,Rb,Rn);
}

   action =
   {
      R(R_Res) = signedMultiply( signExtend( R(R_Src1).L,32) ,signExtend( R(R_Src2).L,32) );
   };

}

define (instr=MPYA__u5_Ra_Rn_family)
{

  fields = (OPCD, immu, R_Src1, R_Res);
  blk = ipu;

define (instr=MPYA__u5_Ra_Rn_ipu)
{

  alias = MPYA__u5_Ra_Rn_family(OPCD(OPCD), immu(u5), R_Src1(Ra), R_Res(Rn));
  syntax = ( "mpya #%f,%f,%f",u5,Ra,Rn);
}

   action =
   {
      R(R_Res) = signedMultiply( signExtend( immu,32) ,signExtend( R(R_Src1).L,32) );
   };

}

define (instr=ASRRA_Ra_Rb_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Res);



   blk = ipu;
define (instr=ASRRA_Ra_Rb_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRRA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit arithmetic shift right""";
attrs = (ILGC,V7);
# 167 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = ASRRA_Ra_Rb_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "asrra %f,%f,%f",Ra,Rb,Rn);
}

action=
{
   bool shift_left = false;
   bool saturation = false;
   bits<6> shift_size = R(R_Src1)(5,0);
   R(R_Res) = multiple_bit_shift_agu(R_Src2,shift_size,shift_left,saturation);
};

}



define (instr=ASLLA_Ra_Rb_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Res);
   blk = ipu;
define (instr=ASLLA_Ra_Rb_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLLA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit arithmetic shift left""";
attrs = (ILGC,V7);
# 191 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = ASLLA_Ra_Rb_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "aslla %f,%f,%f",Ra,Rb,Rn);
}

action=
{

   bool shift_left = true;
   bool saturation = false;
   bits<6> shift_size = R(R_Src1)(5,0);
   R(R_Res) = multiple_bit_shift_agu(R_Src2,shift_size,shift_left,saturation);
};
}



define (instr=LSLLA_Ra_Rb_Rn_family)
{

   fields = (OPCD, R_Src1, R_Src2, R_Res);



   blk = ipu;

define (instr=LSLLA_Ra_Rb_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSLLA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit logical shift left""";
attrs = (ILGC,V7);
# 219 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = LSLLA_Ra_Rb_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "lslla %f,%f,%f",Ra,Rb,Rn);
}

action=
{




   bool shift_left = true;
   R(R_Res) = multiple_bitwise_shift_agu(R_Src2,R(R_Src1)(6,0),shift_left);
};

}


define (instr=LSRRA_Ra_Rb_Rn_family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=LSRRA_Ra_Rb_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRRA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit logical shift right""";
attrs = (ILGC,V7);
# 243 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = LSRRA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "lsrra %f,%f,%f",Ra,Rb,Rn);
   }

action=
{
   bool shift_left = false;
   R(R_Res) = multiple_bitwise_shift_agu(R_Src2,R(R_Src1)(6,0),shift_left);
};

}



define (instr=MAXA_Rq_Rr_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Res);



   blk = ipu;

define (instr=MAXA_Rq_Rr_Rn_ipu)
{

  alias = MAXA_Rq_Rr_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Src2(rrr), R_Res(RRR));
}

action=
{




   if ( (R(R_Src1)).signedGT( R(R_Src2) ) ) {
      R(R_Res) = R(R_Src1);
   } else {
      R(R_Res) = R(R_Src2);
   }
};

}


define (instr=MINA_Rq_Rr_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Res);



   blk = ipu;

define (instr=MINA_Rq_Rr_Rn_ipu)
{

  alias = MINA_Rq_Rr_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Src2(rrr), R_Res(RRR));
}


action=
{




    if ( (R(R_Src1)).signedLT( R(R_Src2) ) ) {
       R(R_Res) = R(R_Src1);
    } else {
       R(R_Res) = R(R_Src2);
    }
};
}



define (instr=MAXMA_Rq_Rr_Rn_family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Res);



   blk = ipu;

define (instr=MAXMA_Rq_Rr_Rn)
{

  alias = MAXMA_Rq_Rr_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Src2(rrr), R_Res(RRR));
}

action=
{




   bits<32> abs_rq = ABS32(R(R_Src1));
   bits<32> abs_rr = ABS32(R(R_Src2));
   if (abs_rq > abs_rr) {
      R(R_Res) = R(R_Src1);
   }
   else if (R(R_Src1) == (0-R(R_Src2))) {
      R(R_Res) = abs_rq;
   }
};
}



define (instr=RNDA_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);



   blk = ipu;


define (instr=RNDA_Rq_Rn)
{

  alias = RNDA_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Res(RRR));
}


action=
{




   bits<40> tmp = round( zeroExtend(R(R_Src1),40) );
   R(R_Res) = tmp(31,0);

};

}




define (instr=BMSET__u16_CTRL_L_family)
{

  fields = (OPCD, immu, CTRL);
  blk = ipu;

define (instr=BMSET__u16_CTRL_L_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMSET__u16_CTRL_L_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask set on control register""";
attrs = (ILGC,V7);
# 396 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = BMSET__u16_CTRL_L_family(OPCD(OPCD), immu(u16), CTRL(CTRL));
  syntax = ( "bmset #%f,%f.l",u16,CTRL);
}


action=
{

   if ( IsUserMode() && (CTRL==10||CTRL==12))
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      CtrlTable(CTRL) = CtrlTable(CTRL) | concat(zero(16),immu);
   }

};

}


define (instr=BMSET__u16_CTRL_H_family)
{

  fields = (OPCD, immu, CTRL);
  blk = ipu;


define (instr=BMSET__u16_CTRL_H_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMSET__u16_CTRL_H_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask set on control register""";
attrs = (ILGC,V7);
# 429 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = BMSET__u16_CTRL_H_family(OPCD(OPCD), immu(u16), CTRL(CTRL));
  syntax = ( "bmset #%f,%f.h",u16,CTRL);
}


action=
{

   if ( IsUserMode() && (CTRL==10||CTRL==12))
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      CtrlTable(CTRL) = CtrlTable(CTRL) | concat(immu,zero(16));
   }
};

}


define (instr=BMCHG__u16_CTRL_H_family)
{
  fields = (OPCD, immu, CTRL);
  blk = ipu;

define (instr=BMCHG__u16_CTRL_H_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCHG__u16_CTRL_H_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask change on control register""";
attrs = (ILGC,V7);
# 459 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = BMCHG__u16_CTRL_H_family(OPCD(OPCD), immu(u16), CTRL(CTRL));
  syntax = ( "bmchg #%f,%f.h",u16,CTRL);
}


action=
{




   if ( (SR.PE==1) && (CTRL==10||CTRL==12) )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      CtrlTable(CTRL) = CtrlTable(CTRL) ^(concat(immu,zero(16)) );
   }

};

}


define (instr=BMCHG__u16_CTRL_L_family)
{

  fields = (OPCD, immu, CTRL);
  blk = ipu;


define (instr=BMCHG__u16_CTRL_L_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCHG__u16_CTRL_L_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask change on control register""";
attrs = (ILGC,V7);
# 495 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = BMCHG__u16_CTRL_L_family(OPCD(OPCD), immu(u16), CTRL(CTRL));
  syntax = ( "bmchg #%f,%f.l",u16,CTRL);
}


action=
{

   if (IsUserMode() && (CTRL==10||CTRL==12))
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      CtrlTable(CTRL) = CtrlTable(CTRL) ^ (zeroExtend(immu,32)) ;
   }
};

}

define (instr=BMCLR__u16_CTRL_H_family)
{

  fields = (OPCD, immu, CTRL);
  blk = ipu;

define (instr=BMCLR__u16_CTRL_H_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCLR__u16_CTRL_H_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask clear on control register""";
attrs = (ILGC,V7);
# 525 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = BMCLR__u16_CTRL_H_family(OPCD(OPCD), immu(u16), CTRL(CTRL));
  syntax = ( "bmclr #%f,%f.h",u16,CTRL);
}


action=
{




   if ( (SR.PE==1) && (CTRL==10||CTRL==12) )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      CtrlTable(CTRL) = ( CtrlTable(CTRL) & (~(concat(immu,zero(16)) )) ) ;
   }

};

}


define (instr=BMCLR__u16_CTRL_L_family)
{

  fields = (OPCD, immu, CTRL);
  blk = ipu;


define (instr=BMCLR__u16_CTRL_L_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMCLR__u16_CTRL_L_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask clear on control register""";
attrs = (ILGC,V7);
# 561 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  alias = BMCLR__u16_CTRL_L_family(OPCD(OPCD), immu(u16), CTRL(CTRL));
  syntax = ( "bmclr #%f,%f.l",u16,CTRL);
}


action=
{

   if (IsUserMode() && (CTRL==10||CTRL==12))
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      CtrlTable(CTRL) = CtrlTable(CTRL) & ~(zeroExtend(immu,32)) ;
   }
};

}



define (instr=BMTSTC__u16_CTRL_H_Pm_Pn_family)
{
  fields = (OPCD,immu,CTRL,P_Res,P_Res2);
   blk = ipu;
   define (instr=BMTSTC__u16_CTRL_H_Pm_Pn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTC__u16_CTRL_H_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear - complementary""";
attrs = (ICMP,V7);
# 591 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = BMTSTC__u16_CTRL_H_Pm_Pn_family(OPCD(OPCD),immu(u16),CTRL(CTRL),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstc #%f,%f.h,%f",u16,CTRL,Pmn);
   }

action=
{
   if ( (CtrlTable(CTRL)(31,16) & immu)==0x0000 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }
};

}

define (instr=BMTSTC__u16_CTRL_H_Pn_family)
{
  fields = (OPCD,immu,CTRL,P_Res);
   blk = ipu;
   define (instr=BMTSTC__u16_CTRL_H_Pn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTC__u16_CTRL_H_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear""";
attrs = (ICMP,V7);
# 610 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = BMTSTC__u16_CTRL_H_Pn_family(OPCD(OPCD),immu(u16),CTRL(CTRL),P_Res(Pn));
      syntax = ( "bmtstc #%f,%f.h,%f",u16,CTRL,Pn);
   }

action=
{
   if ( (CtrlTable(CTRL)(31,16) & immu)==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }
};

}

define (instr=BMTSTC__u16_CTRL_L_Pm_Pn_family)
{
  fields = (OPCD,immu,CTRL,P_Res,P_Res2);
   blk = ipu;
   define (instr=BMTSTC__u16_CTRL_L_Pm_Pn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTC__u16_CTRL_L_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear - complementary""";
attrs = (ICMP,V7);
# 629 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = BMTSTC__u16_CTRL_L_Pm_Pn_family(OPCD(OPCD),immu(u16),CTRL(CTRL),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstc #%f,%f.l,%f",u16,CTRL,Pmn);
   }

action=
{
   if ( (CtrlTable(CTRL)(15,0) & immu)==0x0000 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }
};

}

define (instr=BMTSTC__u16_CTRL_L_Pn_family)
{
  fields = (OPCD,immu,CTRL,P_Res);
   blk = ipu;
   define (instr=BMTSTC__u16_CTRL_L_Pn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTC__u16_CTRL_L_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear""";
attrs = (ICMP,V7);
# 648 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = BMTSTC__u16_CTRL_L_Pn_family(OPCD(OPCD),immu(u16),CTRL(CTRL),P_Res(Pn));
      syntax = ( "bmtstc #%f,%f.l,%f",u16,CTRL,Pn);
   }

action=
{
    if ( (CtrlTable(CTRL)(15,0) & immu)==0x0000 ) { set_SR_PR(P_Res); }
    else { clear_SR_PR(P_Res); }

};

}


define (instr=BMTSTS__u16_CTRL_H_Pm_Pn_family)
{
  fields = (OPCD,immu,CTRL,P_Res,P_Res2);
   blk = ipu;
   define (instr=BMTSTS__u16_CTRL_H_Pm_Pn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTS__u16_CTRL_H_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set - complementary""";
attrs = (ICMP,V7);
# 669 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = BMTSTS__u16_CTRL_H_Pm_Pn_family(OPCD(OPCD),immu(u16),CTRL(CTRL),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtsts #%f,%f.h,%f",u16,CTRL,Pmn);
   }

action=
{
   if ( ((~(CtrlTable(CTRL)(31,16))) & immu)==0x0000 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}

define (instr=BMTSTS__u16_CTRL_H_Pn_family)
{
  fields = (OPCD,immu,CTRL,P_Res);
   blk = ipu;
   define (instr=BMTSTS__u16_CTRL_H_Pn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTS__u16_CTRL_H_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set""";
attrs = (ICMP,V7);
# 689 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = BMTSTS__u16_CTRL_H_Pn_family(OPCD(OPCD),immu(u16),CTRL(CTRL),P_Res(Pn));
      syntax = ( "bmtsts #%f,%f.h,%f",u16,CTRL,Pn);
   }

action=
{
   if ( ((~(CtrlTable(CTRL)(31,16))) & immu)==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}

define (instr=BMTSTS__u16_CTRL_L_Pm_Pn_family)
{
  fields = (OPCD,immu,CTRL,P_Res,P_Res2);
   blk = ipu;
   define (instr=BMTSTS__u16_CTRL_L_Pm_Pn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTS__u16_CTRL_L_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set - complementary""";
attrs = (ICMP,V7);
# 709 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = BMTSTS__u16_CTRL_L_Pm_Pn_family(OPCD(OPCD),immu(u16),CTRL(CTRL),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtsts #%f,%f.l,%f",u16,CTRL,Pmn);
   }

action=
{
   if ( ((~(CtrlTable(CTRL)(15,0))) & immu)==0x0000 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }
};

}

define (instr=BMTSTS__u16_CTRL_L_Pn_family)
{
  fields = (OPCD,immu,CTRL,P_Res);
   blk = ipu;
   define (instr=BMTSTS__u16_CTRL_L_Pn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTS__u16_CTRL_L_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set""";
attrs = (ICMP,V7);
# 728 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = BMTSTS__u16_CTRL_L_Pn_family(OPCD(OPCD),immu(u16),CTRL(CTRL),P_Res(Pn));
      syntax = ( "bmtsts #%f,%f.l,%f",u16,CTRL,Pn);
   }

action=
{
   if ( ((~(CtrlTable(CTRL)(15,0))) & immu)==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }
};

}




define (instr=EXTRACTA_Ra_Rb_Rn_family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=EXTRACTA_Ra_Rb_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EXTRACTA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Extract bit field""";
attrs = (ILGC,V7);
# 750 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = EXTRACTA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "extracta %f,%f,%f",Ra,Rb,Rn);
   }

action=
{
   R(R_Res) = extracta_f(R_Src2,R(R_Src1)(20,16),R(R_Src1)(4,0));
};

}

define (instr=EXTRACTA__U5__u5_Ra_Rn_family)
{
  fields = (OPCD,immu1,immu2,R_Src1,R_Res);
   blk = ipu;
   define (instr=EXTRACTA__U5__u5_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EXTRACTA__U5__u5_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),u5_t3(0)),
 (bits(8),u5_t3(1)),
 (bits(9),u5_t3(2)),
 (bits(10),u5_t3(3)),
 (bits(11),u5_t3(4)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),U5(0)),
 (bits(22),U5(1)),
 (bits(23),U5(2)),
 (bits(24),U5(3)),
 (bits(25),U5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Extract bit field""";
attrs = (ILGC,V7);
# 768 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = EXTRACTA__U5__u5_Ra_Rn_family(OPCD(OPCD),immu1(U5),immu2(u5_t3),R_Src1(Ra),R_Res(Rn));
      syntax = ( "extracta #%f,#%f,%f,%f",U5,u5_t3,Ra,Rn);
   }

action=
{
   R(R_Res) = extracta_f(R_Src1,immu1,immu2);
};

}

define (instr=EXTRACTUA_Ra_Rb_Rn_family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=EXTRACTUA_Ra_Rb_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EXTRACTUA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Extract unsigend bit field""";
attrs = (ILGC,V7);
# 786 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = EXTRACTUA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "extractua %f,%f,%f",Ra,Rb,Rn);
   }

action=
{
    R(R_Res) = extractua_f(R_Src2,R(R_Src1)(13,9),R(R_Src1)(4,0));
};

}

define (instr=EXTRACTUA__U5__u5_Ra_Rn_family)
{
  fields = (OPCD,immu1,immu2,R_Src1,R_Res);
   blk = ipu;
   define (instr=EXTRACTUA__U5__u5_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EXTRACTUA__U5__u5_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),u5_t3(0)),
 (bits(8),u5_t3(1)),
 (bits(9),u5_t3(2)),
 (bits(10),u5_t3(3)),
 (bits(11),u5_t3(4)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),U5(0)),
 (bits(22),U5(1)),
 (bits(23),U5(2)),
 (bits(24),U5(3)),
 (bits(25),U5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Extract unsigned bit field""";
attrs = (ILGC,V7);
# 804 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = EXTRACTUA__U5__u5_Ra_Rn_family(OPCD(OPCD),immu1(U5),immu2(u5_t3),R_Src1(Ra),R_Res(Rn));
      syntax = ( "extractua #%f,#%f,%f,%f",U5,u5_t3,Ra,Rn);
   }

action=
{
   R(R_Res) = extractua_f(R_Src1,immu1,immu2);

};

}

define (instr=INSERTA__U5__u5_Ra_Rn_family)
{
  fields = (OPCD,immu1,immu2,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=INSERTA__U5__u5_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/INSERTA__U5__u5_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),u5_t3(0)),
 (bits(8),u5_t3(1)),
 (bits(9),u5_t3(2)),
 (bits(10),u5_t3(3)),
 (bits(11),u5_t3(4)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),U5(0)),
 (bits(22),U5(1)),
 (bits(23),U5(2)),
 (bits(24),U5(3)),
 (bits(25),U5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Insert bit field""";
attrs = (ILGC,V7);
# 823 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = INSERTA__U5__u5_Ra_Rn_family(OPCD(OPCD),immu1(U5),immu2(u5_t3),R_Src1(Ra),R_Src2(Rn),R_Res(Rn));
      syntax = ( "inserta #%f,#%f,%f,%f",U5,u5_t3,Ra,Rn);
   }

action=
{
   bits<5> width_s = (immu1>32) ? 32 : immu1 ;
   bits<5> offset_s = (immu2>31) ? 31 : immu2 ;

   bits<6> sum = (bits<6>)immu1 + (bits<6>)immu2;
   sum = (sum>32) ? 32 : sum;
   if (immu1!=0) {
      R(R_Res) = slice_write_agu( R(R_Src2), R(R_Src1)(width_s.uint32()-1,0), sum, immu2);
   }

};

}


define (instr=MACUA__u16_Ra_Rn_family)
{
  fields = (OPCD,immu,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=MACUA__u16_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACUA__u16_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""32x32 MAC""";
attrs = (IARIT,V7);
# 850 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = MACUA__u16_Ra_Rn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),R_Src2(Rn),R_Res(Rn));
      syntax = ( "macua #%f,%f,%f",u16,Ra,Rn);
   }

action=
{
   bits<64> mult32 = signedMultiply(signExtend(R(R_Src1)(31,0),64),zeroExtend(immu,64));
   bits<33> mult = zeroExtend(mult32(31,0),33);
   mult += (sbits<33>)R(R_Src2);
   R(R_Res) = mult(31,0);
};

}


define (instr=MOVE_2L_Da_Db_Rm_Rn_family)
{
  fields = (OPCD,Src1,Src2,R_Res,R_Res2);
   blk = ipu;
   define (instr=MOVE_2L_Da_Db_Rm_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Db_Rm_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rm(0)),
 (bits(27),Rm(1)),
 (bits(28),Rm(2)),
 (bits(29),Rm(3)),
 (bits(30),Rm(4)),
 (bits(31),b0),
 (bits(32),Db(0)),
 (bits(33),Db(1)),
 (bits(34),Db(2)),
 (bits(35),Db(3)),
 (bits(36),Db(4)),
 (bits(37),Db(5)),
 (bits(38),b1),
 (bits(39),b1),
 (bits(40),b1),
 (bits(41),Da(0)),
 (bits(42),Da(1)),
 (bits(43),Da(2)),
 (bits(44),Da(3)),
 (bits(45),Da(4)),
 (bits(46),Da(5)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a data register pair to an address register pair""";
attrs = (IMREG,V7);
# 872 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = MOVE_2L_Da_Db_Rm_Rn_family(OPCD(OPCD),Src1(Da),Src2(Db),R_Res2(Rm),R_Res(Rn));
      syntax = ( "move.2l %f,%f,%f,%f",Da,Db,Rm,Rn);
   }

action=
{
  R(R_Res) = D(Src1)(31,0);
  R(R_Res2) = D(Src2)(31,0);
};

}

define (instr=MOVE_2L_Ra_Rb_Dm_Dn_family)
{
  fields = (OPCD,R_Src1,R_Src2,Res,Res2);
   blk = ipu;
   define (instr=MOVE_2L_Ra_Rb_Dm_Dn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Ra_Rb_Dm_Dn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),Dn(0)),
 (bits(33),Dn(1)),
 (bits(34),Dn(2)),
 (bits(35),Dn(3)),
 (bits(36),Dn(4)),
 (bits(37),Dn(5)),
 (bits(38),b1),
 (bits(39),b1),
 (bits(40),b1),
 (bits(41),Dm(0)),
 (bits(42),Dm(1)),
 (bits(43),Dm(2)),
 (bits(44),Dm(3)),
 (bits(45),Dm(4)),
 (bits(46),Dm(5)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an address register pair to a data register pair""";
attrs = (IMREG,V7);
# 891 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = MOVE_2L_Ra_Rb_Dm_Dn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),Res(Dn),Res2(Dm));
      syntax = ( "move.2l %f,%f,%f,%f",Ra,Rb,Dm,Dn);
   }

action=
{
   D(Res) = signExtend(R(R_Src1),40);
   D(Res2) = signExtend(R(R_Src2),40);
};

}



define (instr=MPY32A_Ra_Rb_Rn_family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=MPY32A_Ra_Rb_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY32A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32x32-->32 multiplication""";
attrs = (IARIT,V7);
# 912 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = MPY32A_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "mpy32a %f,%f,%f",Ra,Rb,Rn);
   }

action=
{
   bits<65> mult32_32 = signedMultiply( R(R_Src1), R(R_Src2));
   R(R_Res) = mult32_32(31,0);
};

}

define (instr=MPY32A__u16_Ra_Rn_family)
{
  fields = (OPCD,immu,R_Src1,R_Res);
   blk = ipu;
   define (instr=MPY32A__u16_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY32A__u16_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""32x32-->32 multiplication""";
attrs = (IARIT,V7);
# 931 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = MPY32A__u16_Ra_Rn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),R_Res(Rn));
      syntax = ( "mpy32a #%f,%f,%f",u16,Ra,Rn);
   }

action=
{
   bits<65> mult32_32 = signedMultiply( R(R_Src1), zeroExtend(immu,32));
   R(R_Res) = mult32_32(31,0);
};

}


define (instr=MPYA__s16_Ra_Rn_family)
{
  fields = (OPCD,imms,R_Src1,R_Res);
   blk = ipu;
   define (instr=MPYA__s16_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYA__s16_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""signed int 16x16-->32""";
attrs = (IARIT,V7);
# 951 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = MPYA__s16_Ra_Rn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),R_Res(Rn));
      syntax = ( "mpya #%f,%f,%f",s16,Ra,Rn);
   }

action=
{
   R(R_Res) = signedMultiply( signExtend( R(R_Src1).L,32) ,signExtend(imms,32) );
};

}

define (instr=MPYUA_Ra_Rb_Rn_family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=MPYUA_Ra_Rb_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYUA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""unsigned int 16x16-->32""";
attrs = (IARIT,V7);
# 969 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = MPYUA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "mpyua %f,%f,%f",Ra,Rb,Rn);
   }

action=
{
   R(R_Res) = signedMultiply( zeroExtend( R(R_Src1).L,32) ,zeroExtend( R(R_Src2).L,32) );
};

}

define (instr=MPYUA__u16_Ra_Rn_family)
{
  fields = (OPCD,immu,R_Src1,R_Res);
   blk = ipu;
   define (instr=MPYUA__u16_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYUA__u16_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""unsigned int 16x16-->32""";
attrs = (IARIT,V7);
# 987 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = MPYUA__u16_Ra_Rn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),R_Res(Rn));
      syntax = ( "mpyua #%f,%f,%f",u16,Ra,Rn);
   }

action=
{
   R(R_Res) = signedMultiply( zeroExtend( R(R_Src1).L,32) ,zeroExtend(immu,32) );
};

}


define (instr=SUBIA_Ra_Rb_Rn_family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = ipu;
   define (instr=SUBIA_Ra_Rb_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUBIA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""same as SUBA, no MCTL""";
attrs = (IARIT,V7);
# 1006 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = SUBIA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "subia %f,%f,%f",Ra,Rb,Rn);
   }

action=
{
   R(R_Res) = R(R_Src2) - R(R_Src1);
};

}

define (instr=SUBIA__s16_Ra_Rn_family)
{
  fields = (OPCD,imms,R_Src1,R_Res);
   blk = ipu;
   define (instr=SUBIA__s16_Ra_Rn_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUBIA__s16_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""same as SUBA, no MCTL""";
attrs = (IARIT,V7);
# 1024 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
      alias = SUBIA__s16_Ra_Rn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),R_Res(Rn));
      syntax = ( "subia #%f,%f,%f",s16,Ra,Rn);
   }

action=
{
   R(R_Res) = R(R_Src1) - imms;
};

}


define (instr=EI_family)
{

  fields = (OPCD);







  blk = ipu;



define (instr=EI_ipu)
{




# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EI_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b0),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Enable maskable interrupts""";
attrs = (IMREG,V2);
# 1058 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  syntax = ( "ei");
  alias = EI_family(OPCD(OPCD));


}


action=
{
   if ( IsUserMode() )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      SR.DI = 0;
   }
};

}


define (instr=DI_family)
{

  fields = (OPCD);







  blk = ipu;



define (instr=DI_ipu)
{





# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DI_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b0),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Disable maskable interrupts""";
attrs = (IMREG,V2);
# 1104 "/vobs/vb_dp_arch/ADLsim/sc3900/ipu.adl" 2
  syntax = ( "di");
  alias = DI_family(OPCD(OPCD));

}


action=
{






   if ( IsUserMode() )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      SR.DI = 1;
   }
};

}
# 55 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 1
define (instr=TSTEQA_Ra_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res);
   blk = lsu;
   define (instr=TSTEQA_Ra_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTEQA_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test for equal to zero""";
# 8 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTEQA_Ra_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pn));
      syntax = ( "tsteqa %f,%f",Ra,Pn);
   }

action=
{
   if ( R(R_Src1) == 0 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}


define (instr=TSTEQA_W_Ra_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res);
   blk = lsu;
   define (instr=TSTEQA_W_Ra_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTEQA_W_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test word for equal to zero""";
# 29 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTEQA_W_Ra_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pn));
      syntax = ( "tsteqa.w %f,%f",Ra,Pn);
   }

action=
{
   if ( R(R_Src1)(15,0) == 0 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}


define (instr=TSTGEA_Ra_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res);
   blk = lsu;
   define (instr=TSTGEA_Ra_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTGEA_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test for greater than or eq. zero""";
# 50 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTGEA_Ra_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pn));
      syntax = ( "tstgea %f,%f",Ra,Pn);
   }

action=
{
   if ( R(R_Src1).signedGE(0) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}


define (instr=TSTGTA_Ra_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res);
   blk = lsu;
   define (instr=TSTGTA_Ra_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTGTA_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test for greater than zero""";
# 71 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTGTA_Ra_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pn));
      syntax = ( "tstgta %f,%f",Ra,Pn);
   }

action=
{
   if ( R(R_Src1).signedGT(0) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }
};

}



define (instr=TSTEQA_Ra_Pm_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res,P_Res2);
   blk = lsu;
   define (instr=TSTEQA_Ra_Pm_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTEQA_Ra_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test for equal to zero""";
attrs = (LCMP,V7);
# 92 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTEQA_Ra_Pm_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "tsteqa %f,%f",Ra,Pmn);
   }

action=
{
   if ( R(R_Src1) == 0 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}

define (instr=TSTGTA_Ra_Pm_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res,P_Res2);
   blk = lsu;
   define (instr=TSTGTA_Ra_Pm_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTGTA_Ra_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test for greater than or equal to zero""";
attrs = (LCMP,V7);
# 112 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTGTA_Ra_Pm_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "tstgta %f,%f",Ra,Pmn);
   }

action=
{
   if ( R(R_Src1).signedGT(0) ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}

define (instr=TSTLEA_Ra_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res);
   blk = lsu;
   define (instr=TSTLEA_Ra_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTLEA_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test for less than or equal to zero""";
attrs = (LCMP,V7);
# 132 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTLEA_Ra_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pn));
      syntax = ( "tstlea %f,%f",Ra,Pn);
   }

action=
{
   if ( R(R_Src1).signedLE(0) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }
};

}

define (instr=TSTLTA_Ra_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res);
   blk = lsu;
   define (instr=TSTLTA_Ra_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTLTA_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test for less than zero""";
attrs = (LCMP,V7);
# 151 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTLTA_Ra_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pn));
      syntax = ( "tstlta %f,%f",Ra,Pn);
   }

action=
{
   if ( R(R_Src1).signedLT(0) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}

define (instr=TSTNEA_Ra_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res);
   blk = lsu;
   define (instr=TSTNEA_Ra_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTNEA_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test for not equal to zero""";
attrs = (LCMP,V7);
# 171 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTNEA_Ra_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pn));
      syntax = ( "tstnea %f,%f",Ra,Pn);
   }

action=
{
   if ( R(R_Src1) != 0 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}

define (instr=TSTNEA_W_Ra_Pn_family)
{
  fields = (OPCD,R_Src1,P_Res);
   blk = lsu;
   define (instr=TSTNEA_W_Ra_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TSTNEA_W_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Test word for not equal to zero""";
attrs = (LCMP,V7);
# 191 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu.adl" 2
      alias = TSTNEA_W_Ra_Pn_family(OPCD(OPCD),R_Src1(Ra),P_Res(Pn));
      syntax = ( "tstnea.w %f,%f",Ra,Pn);
   }

action=
{
   if ( R(R_Src1)(15,0) != 0 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}
# 56 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 1

define (instr=MOVE2_2BF_Da__EA__family)
{
  fields = (OPCD,MMM,Src1,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move2.2bf Da,EA";
   define (instr=MOVE2_2BF_Da__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional bytes from a data register to memory""";
attrs = (LMV,V7);
# 10 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2BF_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move2.2bf %f,(%f)",Da,Rn);
}
define (instr=MOVE2_2BF_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional bytes from a data register to memory""";
attrs = (LMV,V7);
# 16 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2BF_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move2.2bf %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVE2_2BF_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional bytes from a data register to memory""";
attrs = (LMV,V7);
# 22 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2BF_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move2.2bf %f,(%f+%f)",Da,Rn,Rk);
}
define (instr=MOVE2_2BF_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional bytes from a data register to memory""";
attrs = (LMV,V7);
# 28 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2BF_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move2.2bf %f,(%f)+%f",Da,Rn,Rk);
}

action=
{
   bits <16> mem_data = concat(D(Src1).HH, D(Src1).LH);
   Mem( EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2)= mem_data;
};

}

define (instr=MOVE2_2BF_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE2_2BF_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two fractional bytes from a data register to memory""";
attrs = (LMV,V7);
# 47 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2BF_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "move2.2bf %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits <16> mem_data = concat(D(Src1).HH, D(Src1).LH);
   Mem( eff_mem_add,2)= mem_data;
};

}

define (instr=MOVE2_2BF__Rnps15__Da_family)
{
  fields = (OPCD,R_Src1,imms,Res);
   blk = lsu;
   define (instr=MOVE2_2BF__Rnps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two  fractional  bytes from memory to a data register """;
attrs = (LMV,V7);
# 67 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2BF__Rnps15__Da_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Da));
      syntax = ( "move2.2bf (%f+%f),%f",Rn,s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits <16> mem_data = Mem(eff_mem_add,2);
   D(Res).WL = signExtend(concat(mem_data(7,0),zero(8)),20);
   D(Res).WH = signExtend(concat(mem_data(15,8),zero(8)),20);

};

}

define (instr=MOVE2_2B_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE2_2B_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two bytes from a data register to memory""";
attrs = (LMV,V7);
# 89 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2B_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "move2.2b %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits <16> mem_data = concat(D(Src1).HL, D(Src1).LL);
   Mem(eff_mem_add,2)= mem_data;
};

}

define (instr=MOVE2_2B__Rnps15__Da_family)
{
  fields = (OPCD,R_Src1,imms,Res);
   blk = lsu;
   define (instr=MOVE2_2B__Rnps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two  bytes from memory to a data register """;
attrs = (LMV,V7);
# 109 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2B__Rnps15__Da_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Da));
      syntax = ( "move2.2b (%f+%f),%f",Rn,s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits <16> mem_data = Mem(eff_mem_add,2);
   D(Res).WL = signExtend(mem_data(7,0), 20);
   D(Res).WH = signExtend(mem_data(15,8), 20);
};

}

define (instr=MOVE2_2F__Rnps15__Da_family)
{
  fields = (OPCD,R_Src1,imms,Res);
   blk = lsu;
   define (instr=MOVE2_2F__Rnps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2F__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two fractional words from a memory to data register """;
attrs = (LMV,V7);
# 130 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_2F__Rnps15__Da_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Da));
      syntax = ( "move2.2f (%f+%f),%f",Rn,s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits <32> mem_data = Mem(eff_mem_add,4);
   D(Res).WL = signExtend(mem_data(15,0), 20);
   D(Res).WH = signExtend(mem_data(31,16), 20);

};

}

define (instr=MOVE2_4BF_Da_Db__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move2.4bf Da:Db,EA";

   define (instr=MOVE2_4BF_Da_Db__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from a data register pair to memory""";
attrs = (LMV,V7);
# 154 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_4BF_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move2.4bf %f,(%f)",Dab,Rn);
}
define (instr=MOVE2_4BF_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from a data register pair to memory""";
attrs = (LMV,V7);
# 160 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_4BF_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move2.4bf %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVE2_4BF_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from a data register pair to memory""";
attrs = (LMV,V7);
# 166 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_4BF_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move2.4bf %f,(%f+%f)",Dab,Rn,Rk);
}
define (instr=MOVE2_4BF_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from a data register pair to memory""";
attrs = (LMV,V7);
# 172 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_4BF_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move2.4bf %f,(%f)+%f",Dab,Rn,Rk);
}

action=
{
   bits <32> mem_data = concat(D(Src1).HH, D(Src1).LH, D(Src2).HH, D(Src2).LH);
   Mem( EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4)= mem_data;

};

}

define (instr=MOVE2_4BF_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE2_4BF_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four fractional bytes from a data register pair to memory""";
attrs = (LMV,V7);
# 192 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_4BF_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "move2.4bf %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits <32> mem_data = concat(D(Src1).HH, D(Src1).LH, D(Src2).HH, D(Src2).LH);
   Mem( eff_mem_add,4)= mem_data;

};

}

define (instr=MOVE2_4B_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE2_4B_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four bytes from a data register pair to memory""";
attrs = (LMV,V7);
# 213 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_4B_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "move2.4b %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits <32> mem_data = concat(D(Src1).HL, D(Src1).LL, D(Src2).HL, D(Src2).LL);
   Mem(eff_mem_add,4)= mem_data;

};

}

define (instr=MOVE2_8BF_Da_Db_Dc_Dd__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,Src3,Src4,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move2.8bf Da:Db:Dc:Dd,EA";

   define (instr=MOVE2_8BF_Da_Db_Dc_Dd__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional bytes from  a data register quad to memory""";
attrs = (LMV,V7);
# 236 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move2.8bf %f,(%f)",Dabcd,Rn);
}
define (instr=MOVE2_8BF_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional bytes from  a data register quad to memory""";
attrs = (LMV,V7);
# 242 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move2.8bf %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVE2_8BF_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional bytes from  a data register quad to memory""";
attrs = (LMV,V7);
# 248 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move2.8bf %f,(%f+%f)",Dabcd,Rn,Rk);
}
define (instr=MOVE2_8BF_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional bytes from  a data register quad to memory""";
attrs = (LMV,V7);
# 254 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move2.8bf %f,(%f)+%f",Dabcd,Rn,Rk);
}

action=
{
   bits <32> mem_data1 = concat(D(Src1).HH, D(Src1).LH, D(Src2).HH, D(Src2).LH);
   bits <32> mem_data2 = concat(D(Src3).HH, D(Src3).LH, D(Src4).HH, D(Src4).LH);
   bits <64> mem_data = concat(mem_data1,mem_data2);
   Mem( EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8)= mem_data;
};

}

define (instr=MOVE2_8BF_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE2_8BF_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move eight fractional bytes from  a data register quad to memory""";
attrs = (LMV,V7);
# 275 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8BF_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "move2.8bf %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits <32> mem_data1 = concat(D(Src1).HH, D(Src1).LH, D(Src2).HH, D(Src2).LH);
   bits <32> mem_data2 = concat(D(Src3).HH, D(Src3).LH, D(Src4).HH, D(Src4).LH);
   bits <64> mem_data = concat(mem_data1,mem_data2);
   Mem( eff_mem_add,8)= mem_data;

};

}

define (instr=MOVE2_8BF__Rnps15__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVE2_8BF__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move eight fractional bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 298 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8BF__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move2.8bf (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits <64> mem_data = Mem( eff_mem_add, 8);
   D(Res4).WL = signExtend(concat(mem_data(7,0),zero(8)),20);
   D(Res4).WH = signExtend(concat(mem_data(15,8),zero(8)),20);
   D(Res3).WL = signExtend(concat(mem_data(23,16),zero(8)),20);
   D(Res3).WH = signExtend(concat(mem_data(31,24),zero(8)),20);
   D(Res2).WL = signExtend(concat(mem_data(39,32),zero(8)),20);
   D(Res2).WH = signExtend(concat(mem_data(47,40),zero(8)),20);
   D(Res).WL = signExtend(concat(mem_data(55,48),zero(8)),20);
   D(Res).WH = signExtend(concat(mem_data(63,56),zero(8)),20);

};

}

define (instr=MOVE2_8B_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE2_8B_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move eight bytes from  a data register quad to memory""";
attrs = (LMV,V7);
# 326 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8B_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "move2.8b %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits <32> mem_data1 = concat(D(Src1).HL, D(Src1).LL, D(Src2).HL, D(Src2).LL);
   bits <32> mem_data2 = concat(D(Src3).HL, D(Src3).LL, D(Src4).HL, D(Src4).LL);
   bits <64> mem_data = concat(mem_data1,mem_data2);
   Mem( eff_mem_add,8) = mem_data;
};

}

define (instr=MOVE2_8B__Rnps15__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVE2_8B__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move eight bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 348 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8B__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move2.8b (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits <64> mem_data = Mem( eff_mem_add, 8);

   D(Res4).WL = signExtend(mem_data(7,0),20);
   D(Res4).WH = signExtend(mem_data(15,8),20);
   D(Res3).WL = signExtend(mem_data(23,16),20);
   D(Res3).WH = signExtend(mem_data(31,24),20);
   D(Res2).WL = signExtend(mem_data(39,32),20);
   D(Res2).WH = signExtend(mem_data(47,40),20);
   D(Res).WL = signExtend(mem_data(55,48),20);
   D(Res).WH = signExtend(mem_data(63,56),20);

};

}

define (instr=MOVE2_8F__EA__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2,Res3,Res4);
   blk = lsu;
   doc_title = "move2.8f Da:Db:Dc:Dd,EA";

   define (instr=MOVE2_8F__Rn__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8F__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional words from memory to a data register quad""";
attrs = (LMV,V7);
# 379 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move2.8f (%f),%f",Rn,Dabcd);
}
define (instr=MOVE2_8F__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8F__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional words from memory to a data register quad""";
attrs = (LMV,V7);
# 385 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move2.8f (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVE2_8F__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8F__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional words from memory to a data register quad""";
attrs = (LMV,V7);
# 391 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move2.8f (%f+%f),%f",Rn,Rk,Dabcd);
}
define (instr=MOVE2_8F__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8F__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional words from memory to a data register quad""";
attrs = (LMV,V7);
# 397 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move2.8f (%f)+%f,%f",Rn,Rk,Dabcd);
}

action=
{
   bits <128> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,4,R_Src2),16);
   D(Res4).WL = signExtend(mem_data(15,0), 20);
   D(Res4).WH = signExtend(mem_data(31,16), 20);
   D(Res3).WL = signExtend(mem_data(47,32), 20);
   D(Res3).WH = signExtend(mem_data(63,48), 20);
   D(Res2).WL = signExtend(mem_data(79,64), 20);
   D(Res2).WH = signExtend(mem_data(95,80), 20);
   D(Res).WL = signExtend(mem_data(111,96), 20);
   D(Res).WH = signExtend(mem_data(127,112), 20);

};

}

define (instr=MOVE2_8F__Rnps15__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVE2_8F__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8F__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move eight fractional words from memory to a data register quad""";
attrs = (LMV,V7);
# 424 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE2_8F__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move2.8f (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<4) + R(R_Src1);
   bits <128> mem_data = Mem(eff_mem_add,16);
   D(Res4).WL = signExtend(mem_data(15,0), 20);
   D(Res4).WH = signExtend(mem_data(31,16), 20);
   D(Res3).WL = signExtend(mem_data(47,32), 20);
   D(Res3).WH = signExtend(mem_data(63,48), 20);
   D(Res2).WL = signExtend(mem_data(79,64), 20);
   D(Res2).WH = signExtend(mem_data(95,80), 20);
   D(Res).WL = signExtend(mem_data(111,96), 20);
   D(Res).WH = signExtend(mem_data(127,112), 20);

};

}

define (instr=MOVER2_4BF_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER2_4BF_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4BF_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V7);
# 452 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER2_4BF_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "mover2.4bf %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    bool is_moverlh = false;
    int i;
    bits<32> shifted_bit_L,shifted_bit_H;
    bits<32> srcl[2], srch[2];
    bits<10> ext[2];
    srcl[0] = signExtend(D(Src1).WL,32);
    srch[0] = signExtend(D(Src1).WH,32);
    ext[0] = signExtend(D(Src1).E,10);
    srcl[1] = signExtend(D(Src2).WL,32);
    srch[1] = signExtend(D(Src2).WH,32);
    ext[1] = signExtend(D(Src2).E,10);
    bits<42> value [2];

    for (i=0;i<2;i++)
    {
       shifted_bit_L = shifted_bit_H = 0;
       sc3800_scale_two_20bit_ops(ext[i],&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       if(sc3800_saturate_two_20bit_ops(&value[i],f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i],is_moverlh,is_moverlh)!=2)
       {
   set_scaling_bit(srcl[i](15,0));
   set_scaling_bit(srch[i](15,0));
       }
    }

    bits <32> mem_data = concat(value[0](31,24),value[0](15,8),value[1](31,24),value[1](15,8));
    bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
    Mem( eff_mem_add,4) = mem_data;

};

}

define (instr=MOVER2_4F_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER2_4F_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4F_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 4 fractional words with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V7);
# 500 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER2_4F_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "mover2.4f %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    bool is_moverlh = false;
    bits<32> shifted_bit_L,shifted_bit_H;

    shifted_bit_L = shifted_bit_H = 0;
    bits<32> srcl = signExtend(D(Src1).WL,32);
    bits<32> srch = signExtend(D(Src1).WH,32);
    bits<42> value_Da;
    bits<10> ext = signExtend(D(Src1).E,10);
    sc3800_scale_two_20bit_ops(ext,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if ((SR.SCM==0x1)||(SR.SCM==0x3) )
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if(sc3800_saturate_two_20bit_ops(&value_Da,f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch,is_moverlh,is_moverlh)!=2)
    {
       set_scaling_bit(srcl(15,0));
       set_scaling_bit(srch(15,0));
    }
    shifted_bit_L = shifted_bit_H = 0;
    srcl = signExtend(D(Src2).WL,32);
    srch = signExtend(D(Src2).WH,32);
    bits<42> value_Db;
    ext = signExtend(D(Src2).E,10);
    sc3800_scale_two_20bit_ops(ext,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if ((SR.SCM==0x1)||(SR.SCM==0x3) )
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if(sc3800_saturate_two_20bit_ops(&value_Db,f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch,is_moverlh,is_moverlh)!=2)
    {
       set_scaling_bit(srcl(15,0));
       set_scaling_bit(srch(15,0));
    }

    bits <64> mem_data = concat(value_Da(31,0),value_Db(31,0));
    bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
    Mem(eff_mem_add,8) = mem_data;

};

}

define (instr=MOVER2_8BF_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER2_8BF_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_8BF_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 8 fractional bytes with rounding, scaling and limiting from a regisetr quad to memory""";
attrs = (LMV,V7);
# 553 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER2_8BF_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "mover2.8bf %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    bool is_moverlh = false;
    int i;
    bits<32> shifted_bit_L,shifted_bit_H;
    bits<32> srcl[4], srch[4];
    bits<10> ext[4];
    srcl[0] = signExtend(D(Src1).WL,32);
    srch[0] = signExtend(D(Src1).WH,32);
    ext[0] = signExtend(D(Src1).E,10);
    srcl[1] = signExtend(D(Src2).WL,32);
    srch[1] = signExtend(D(Src2).WH,32);
    ext[1] = signExtend(D(Src2).E,10);
    srcl[2] = signExtend(D(Src3).WL,32);
    srch[2] = signExtend(D(Src3).WH,32);
    ext[2] = signExtend(D(Src3).E,10);
    srcl[3] = signExtend(D(Src4).WL,32);
    srch[3] = signExtend(D(Src4).WH,32);
    ext[3] = signExtend(D(Src4).E,10);
    bits<42> value [4];

    for (i=0;i<4;i++)
    {
       shifted_bit_L = shifted_bit_H = 0;
       sc3800_scale_two_20bit_ops(ext[i],&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       if(sc3800_saturate_two_20bit_ops(&value[i],f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i],is_moverlh,is_moverlh)!=2)
       {
   set_scaling_bit(srcl[i](15,0));
   set_scaling_bit(srch[i](15,0));
       }
    }

    bits <32> mem_data1 = concat(value[0](31,24),value[0](15,8),value[1](31,24),value[1](15,8));
    bits <32> mem_data2 = concat(value[2](31,24),value[2](15,8),value[3](31,24),value[3](15,8));
    bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
    Mem( eff_mem_add,8) = concat(mem_data1,mem_data2);
};

}

define (instr=MOVER_2BF_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER_2BF_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2BF_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 2 fractional bytes with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V7);
# 607 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_2BF_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "mover.2bf %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<42> value [2];
    value[0] = signExtend(D(Src1),42);
    value[1] = signExtend(D(Src2),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    int last_shifted_bit,i;

    for (i=0;i<2;i++)
    {
       last_shifted_bit=sc3800_scale(&value[i]);
       sc3800_round(&value[i],conv_rnd,f_word,last_shifted_bit);
       if (sc3800_saturate(&value[i],f_word,last_shifted_bit)==0)
   set_scaling_bit(value[i](31,16));
    }

    bits <16> mem_data = concat(value[0](31,24),value[1](31,24));
    bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
    Mem(eff_mem_add,2) = mem_data;

};

}

define (instr=MOVER2_2BF_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER2_2BF_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2BF_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 2 fractional bytes with rounding, scaling and limiting to memory""";
attrs = (LMV,V7);
# 643 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER2_2BF_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "mover2.2bf %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    bool is_moverlh = false;
    bits<32> shifted_bit_L,shifted_bit_H;
    shifted_bit_L = shifted_bit_H = 0;
    bits<32> srcl = signExtend(D(Src1).WL,32);
    bits<32> srch = signExtend(D(Src1).WH,32);
    bits<42> value;
    bits<10> ext = signExtend(D(Src1).E,10);
    sc3800_scale_two_20bit_ops(ext,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if(sc3800_saturate_two_20bit_ops(&value,f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch,is_moverlh,is_moverlh)!=2)
    {
       set_scaling_bit(srcl(15,0));
       set_scaling_bit(srch(15,0));
    }
    bits <16> mem_data = concat(value(31,24),value(15,8));
    bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
    Mem(eff_mem_add,2) = mem_data;

};

}

define (instr=MOVER_2F_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER_2F_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2F_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 2 fractional words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V7);
# 680 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_2F_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "mover.2f %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;

    bits<42> value_Da= signExtend(D(Src1),42);
    int last_shifted_bit=sc3800_scale(&value_Da);
    sc3800_round(&value_Da,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Da,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Da(31,16));
    bits<42> value_Db = signExtend(D(Src2),42);
    last_shifted_bit=sc3800_scale(&value_Db);
    sc3800_round(&value_Db,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Db,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Db(31,16));

    bits <32> mem_data = concat(value_Da(31,16),value_Db(31,16));
    bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
    Mem(eff_mem_add,4) = mem_data;
};

}

define (instr=MOVER2_2F_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER2_2F_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2F_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 2 fractional words with rounding, scaling and limiting to memory""";
attrs = (LMV,V7);
# 714 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER2_2F_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "mover2.2f %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
   bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    bool is_moverlh = false;
    bits<32> shifted_bit_L,shifted_bit_H;
    shifted_bit_L = shifted_bit_H = 0;
    bits<32> srcl = signExtend(D(Src1).WL,32);
    bits<32> srch = signExtend(D(Src1).WH,32);
    bits<42> value;
    bits<10> ext = signExtend(D(Src1).E,10);
    sc3800_scale_two_20bit_ops(ext,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if ((SR.SCM==0x1)||(SR.SCM==0x3) )
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if(sc3800_saturate_two_20bit_ops(&value,f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch,is_moverlh,is_moverlh)!=2)
    {
       set_scaling_bit(srcl(15,0));
       set_scaling_bit(srch(15,0));
    }

    bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
    Mem(eff_mem_add,4) = value(31,0);
};

}

define (instr=MOVER_2L_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER_2L_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2L_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 2 fractional long words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V7);
# 751 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_2L_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "mover.2l %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<42> Da = signExtend(D(Src1),42);
   int last_shifted_bit=sc3800_scale(&Da);
   if (sc3800_saturate(&Da,true,last_shifted_bit)==0)
       set_scaling_bit(Da(31,16));
   bits<42> Db = signExtend(D(Src2),42);
   int last_shifted_bit2=sc3800_scale(&Db);
   if (sc3800_saturate(&Db,true,last_shifted_bit2)==0)
       set_scaling_bit(Db(31,16));

   bits<64> mem_data = concat(Da(31,0),Db(31,0));
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   Mem(eff_mem_add,8) = mem_data;

};

}

define (instr=MOVER_4BF_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER_4BF_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4BF_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V7);
# 781 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_4BF_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "mover.4bf %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
    bits<42> value[4];
    value[0] = signExtend(D(Src1),42);
    value[1] = signExtend(D(Src2),42);
    value[2] = signExtend(D(Src3),42);
    value[3] = signExtend(D(Src4),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    int last_shifted_bit,i;
    for (i=0;i<4;i++)
    {
       last_shifted_bit=sc3800_scale(&value[i]);
       sc3800_round(&value[i],conv_rnd,f_word,last_shifted_bit);
       if (sc3800_saturate(&value[i],f_word,last_shifted_bit)==0)
   set_scaling_bit(value[i](31,16));
    }

    bits <32> mem_data = concat(value[0](31,24),value[1](31,24),value[2](31,24),value[3](31,24));
    bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
    Mem(eff_mem_add,4) = mem_data;

};

}

define (instr=MOVER_4F_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER_4F_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4F_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 4 fractional words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V7);
# 818 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_4F_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "mover.4f %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;

    bits<42> value_Da= signExtend(D(Src1),42);
    int last_shifted_bit=sc3800_scale(&value_Da);
    sc3800_round(&value_Da,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Da,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Da(31,16));
    bits<42> value_Db = signExtend(D(Src2),42);
    last_shifted_bit=sc3800_scale(&value_Db);
    sc3800_round(&value_Db,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Db,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Db(31,16));
    bits<42> value_Dc = signExtend(D(Src3),42);
    last_shifted_bit=sc3800_scale(&value_Dc);
    sc3800_round(&value_Dc,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Dc,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Dc(31,16));
    bits<42> value_Dd = signExtend(D(Src4),42);
    last_shifted_bit=sc3800_scale(&value_Dd);
    sc3800_round(&value_Dd,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Dd,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Dd(31,16));

    bits <64> mem_data = concat(value_Da(31,16),value_Db(31,16),value_Dc(31,16),value_Dd(31,16));
    bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
    Mem( eff_mem_add,8) = mem_data;

};

}

define (instr=MOVER_4L_Da_Db_Dc_Dd__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,Src3,Src4,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "mover.4l Da:Db:Dc:Dd,EA";


   define (instr=MOVER_4L_Da_Db_Dc_Dd__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4L_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional long words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V7);
# 866 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_4L_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "mover.4l %f,(%f)",Dabcd,Rn);
}
define (instr=MOVER_4L_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4L_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional long words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V7);
# 872 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_4L_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "mover.4l %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVER_4L_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4L_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional long words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V7);
# 878 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_4L_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "mover.4l %f,(%f+%f)",Dabcd,Rn,Rk);
}
define (instr=MOVER_4L_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4L_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional long words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V7);
# 884 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_4L_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "mover.4l %f,(%f)+%f",Dabcd,Rn,Rk);
}

action=
{
   bits<42> Da = signExtend(D(Src1),42);
   int last_shifted_bit=sc3800_scale(&Da);
   if (sc3800_saturate(&Da,true,last_shifted_bit)==0)
       set_scaling_bit(Da(31,16));
   bits<42> Db = signExtend(D(Src2),42);
   last_shifted_bit=sc3800_scale(&Db);
   if (sc3800_saturate(&Db,true,last_shifted_bit)==0)
       set_scaling_bit(Db(31,16));
   bits<42> Dc = signExtend(D(Src3),42);
   last_shifted_bit=sc3800_scale(&Dc);
   if (sc3800_saturate(&Dc,true,last_shifted_bit)==0)
       set_scaling_bit(Dc(31,16));
   bits<42> Dd = signExtend(D(Src4),42);
   last_shifted_bit=sc3800_scale(&Dd);
   if (sc3800_saturate(&Dd,true,last_shifted_bit)==0)
       set_scaling_bit(Dd(31,16));

   bits<128> mem_data = concat(Da(31,0),Db(31,0),Dc(31,0),Dd(31,0));
   Mem(EAtable(MMM,R_Src1,R_Src2,4,R_Src2),16) = mem_data;

};

}

define (instr=MOVER_4L_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER_4L_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4L_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 4 fractional long words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V7);
# 921 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_4L_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "mover.4l %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bits<42> Da = signExtend(D(Src1),42);
   int last_shifted_bit=sc3800_scale(&Da);
   if (sc3800_saturate(&Da,true,last_shifted_bit)==0)
       set_scaling_bit(Da(31,16));
   bits<42> Db = signExtend(D(Src2),42);
   last_shifted_bit=sc3800_scale(&Db);
   if (sc3800_saturate(&Db,true,last_shifted_bit)==0)
       set_scaling_bit(Db(31,16));
   bits<42> Dc = signExtend(D(Src3),42);
   last_shifted_bit=sc3800_scale(&Dc);
   if (sc3800_saturate(&Dc,true,last_shifted_bit)==0)
       set_scaling_bit(Dc(31,16));
   bits<42> Dd = signExtend(D(Src4),42);
   last_shifted_bit=sc3800_scale(&Dd);
   if (sc3800_saturate(&Dd,true,last_shifted_bit)==0)
       set_scaling_bit(Dd(31,16));

   bits<128> mem_data = concat(Da(31,0),Db(31,0),Dc(31,0),Dd(31,0));
   bits<32> eff_mem_add = (imms<<4) + R(R_Src1);
   Mem(eff_mem_add,16) = mem_data;

};

}

define (instr=MOVER_BF_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER_BF_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_BF_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional byte with rounding, scaling and limiting to memory""";
attrs = (LMV,V7);
# 959 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_BF_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "mover.bf %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
   bits<42> value = signExtend(D(Src1),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    int last_shifted_bit;
    last_shifted_bit=sc3800_scale(&value);
    sc3800_round(&value,conv_rnd,f_word,last_shifted_bit);

    if (sc3800_saturate(&value,f_word,last_shifted_bit)==0) {
       set_scaling_bit(value(31,16));
    }

    bits<32> eff_mem_add = (imms) + R(R_Src1);
    Mem(eff_mem_add,1) = value(31,24);

};

}

define (instr=MOVER_L_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVER_L_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_L_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional long word with rounding, scaling and limiting to memory""";
attrs = (LMV,V7);
# 990 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVER_L_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "mover.l %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
   bits<42> value = signExtend(D(Src1),42);
    int last_shifted_bit=sc3800_scale(&value);
    if (sc3800_saturate(&value,true,last_shifted_bit)==0) {
       set_scaling_bit(value(31,16));
    }

    bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
    Mem(eff_mem_add,4) = value(31,0);

};

}

define (instr=MOVEU2_2B__Rnps15__Da_family)
{
  fields = (OPCD,R_Src1,imms,Res);
   blk = lsu;
   define (instr=MOVEU2_2B__Rnps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_2B__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two unsigned bytes from a data register to memory""";
attrs = (LMV,V7);
# 1016 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU2_2B__Rnps15__Da_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Da));
      syntax = ( "moveu2.2b (%f+%f),%f",Rn,s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits <16> mem_data = Mem( eff_mem_add,2);
   D(Res).WL = zeroExtend(mem_data(7,0),20);
   D(Res).WH = zeroExtend(mem_data(15,8),20);

};

}

define (instr=MOVEU2_4B__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVEU2_4B__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_4B__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four unsigned bytes from memory to a data register pair""";
attrs = (LMV,V7);
# 1038 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU2_4B__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "moveu2.4b (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
    bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
    bits <32> mem_data = Mem( eff_mem_add, 4);
    D(Res2).WL = zeroExtend(mem_data(7,0),20);
    D(Res2).WH = zeroExtend(mem_data(15,8),20);
    D(Res).WL = zeroExtend(mem_data(23,16),20);
    D(Res).WH = zeroExtend(mem_data(31,24),20);

};

}

define (instr=MOVEU2_8B__Rnps15__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVEU2_8B__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_8B__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move eight unsigned bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 1062 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU2_8B__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "moveu2.8b (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits <64> mem_data = Mem(eff_mem_add,8);
   D(Res4).WL = zeroExtend(mem_data(7,0),20);
   D(Res4).WH = zeroExtend(mem_data(15,8),20);
   D(Res3).WL = zeroExtend(mem_data(23,16),20);
   D(Res3).WH = zeroExtend(mem_data(31,24),20);
   D(Res2).WL = zeroExtend(mem_data(39,32),20);
   D(Res2).WH = zeroExtend(mem_data(47,40),20);
   D(Res).WL = zeroExtend(mem_data(55,48),20);
   D(Res).WH = zeroExtend(mem_data(63,56),20);

};

}

define (instr=MOVEU_2B__EA__Da_Db_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2);
   blk = lsu;
   doc_title = "moveu.2b EA,Da:Db";

   define (instr=MOVEU_2B__Rn__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1092 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "moveu.2b (%f),%f",Rn,Dab);
}
define (instr=MOVEU_2B__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1098 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2b (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVEU_2B__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1104 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2b (%f+%f),%f",Rn,Rk,Dab);
}
define (instr=MOVEU_2B__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1110 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2b (%f)+%f,%f",Rn,Rk,Dab);
}

action=
{
   bits<16> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2);
   D(Res2) = zeroExtend( mem_data(7,0), 40);
   D(Res) = zeroExtend( mem_data(15,8), 40);
};

}

define (instr=MOVEU_2B__EA__Ra_Rb_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Res,R_Res2);
   blk = lsu;
   doc_title = "moveu.2b EA,Ra:Rb";

   define (instr=MOVEU_2B__Rn__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__Rn__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned bytes from memory to two address registers""";
attrs = (LMV,V7);
# 1132 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "moveu.2b (%f),%f",Rn,Rab);
}
define (instr=MOVEU_2B__Rn_PM_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__Rn_PM_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned bytes from memory to two address registers""";
attrs = (LMV,V7);
# 1138 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),R_Res(Rab),R_Res2(Rab));
  syntax = ( "moveu.2b (%f)%f,%f",Rn,PM,Rab);
}
define (instr=MOVEU_2B__RnpRk__Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__RnpRk__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned bytes from memory to two address registers""";
attrs = (LMV,V7);
# 1144 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),R_Res(Rab),R_Res2(Rab));
  syntax = ( "moveu.2b (%f+%f),%f",Rn,Rk,Rab);
}
define (instr=MOVEU_2B__Rn_pRk_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__Rn_pRk_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned bytes from memory to two address registers""";
attrs = (LMV,V7);
# 1150 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),R_Res(Rab),R_Res2(Rab));
  syntax = ( "moveu.2b (%f)+%f,%f",Rn,Rk,Rab);
}

action=
{
   bits<16> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2);
   R(R_Res2) = zeroExtend( mem_data(7,0), 32);
   R(R_Res) = zeroExtend( mem_data(15,8), 32);

};

}

define (instr=MOVEU_2B__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVEU_2B__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of unsigned bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1171 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "moveu.2b (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits<16> mem_data = Mem( eff_mem_add,2);
   D(Res2) = zeroExtend( mem_data(7,0), 40);
   D(Res) = zeroExtend( mem_data(15,8), 40);
};

}

define (instr=MOVEU_2B__Rnps15__Ra_Rb_family)
{
  fields = (OPCD,R_Src1,imms,R_Res,R_Res2);
   blk = lsu;
   define (instr=MOVEU_2B__Rnps15__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2B__Rnps15__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of unsigned bytes from memory to two address registers""";
attrs = (LMV,V7);
# 1192 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2B__Rnps15__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),imms(s15),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "moveu.2b (%f+%f),%f",Rn,s15,Rab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits<16> mem_data = Mem( eff_mem_add,2);
   R(R_Res2) = zeroExtend( mem_data(7,0), 32);
   R(R_Res) = zeroExtend( mem_data(15,8), 32);

};

}

define (instr=MOVEU_2L__EA__Da_Db_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2);
   blk = lsu;
   doc_title = "moveu.2l EA,Da:Db";

   define (instr=MOVEU_2L__Rn__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2L__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned long words from memory to two data registers""";
attrs = (LMV,V7);
# 1216 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2L__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8), MMM(2),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "moveu.2l (%f),%f",Rn,Dab);
}
define (instr=MOVEU_2L__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2L__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned long words from memory to two data registers""";
attrs = (LMV,V7);
# 1222 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2L__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8), MMM(PM),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2l (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVEU_2L__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2L__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned long words from memory to two data registers""";
attrs = (LMV,V7);
# 1228 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2L__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk), MMM(0),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2l (%f+%f),%f",Rn,Rk,Dab);
}
define (instr=MOVEU_2L__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2L__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned long words from memory to two data registers""";
attrs = (LMV,V7);
# 1234 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2L__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk), MMM(4),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2l (%f)+%f,%f",Rn,Rk,Dab);
}

action=
{
   bits<64> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8);
   D(Res2) = zeroExtend( mem_data(31,0), 40);
   D(Res) = zeroExtend( mem_data(63,32), 40);

};

}

define (instr=MOVEU_2L__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVEU_2L__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2L__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of unsigned long words from memory to two data registers""";
attrs = (LMV,V7);
# 1255 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2L__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "moveu.2l (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   D(Res2) = zeroExtend( mem_data(31,0), 40);
   D(Res) = zeroExtend( mem_data(63,32), 40);

};

}

define (instr=MOVEU_2W__EA__Da_Db_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2);
   blk = lsu;
   doc_title = "moveu.2w EA,Da:Db";

   define (instr=MOVEU_2W__Rn__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned words from memory to two data registers""";
attrs = (LMV,V7);
# 1279 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn), R_Src2(8), MMM(2),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "moveu.2w (%f),%f",Rn,Dab);
}
define (instr=MOVEU_2W__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned words from memory to two data registers""";
attrs = (LMV,V7);
# 1285 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn), R_Src2(8), MMM(PM),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2w (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVEU_2W__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned words from memory to two data registers""";
attrs = (LMV,V7);
# 1291 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn), R_Src2(Rk), MMM(0),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2w (%f+%f),%f",Rn,Rk,Dab);
}
define (instr=MOVEU_2W__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned words from memory to two data registers""";
attrs = (LMV,V7);
# 1297 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn), R_Src2(Rk), MMM(4),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "moveu.2w (%f)+%f,%f",Rn,Rk,Dab);
}

action=
{
   bits<32> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4);
   D(Res2) = zeroExtend( mem_data(15,0), 40);
   D(Res) = zeroExtend( mem_data(31,16), 40);
};

}

define (instr=MOVEU_2W__EA__Ra_Rb_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Res,R_Res2);
   blk = lsu;
   doc_title = "moveu.2w EA,Ra:Rb";

   define (instr=MOVEU_2W__Rn__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__Rn__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned words from memory to two address registers""";
attrs = (LMV,V7);
# 1319 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "moveu.2w (%f),%f",Rn,Rab);
}
define (instr=MOVEU_2W__Rn_PM_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__Rn_PM_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned words from memory to two address registers""";
attrs = (LMV,V7);
# 1325 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),R_Res(Rab),R_Res2(Rab));
  syntax = ( "moveu.2w (%f)%f,%f",Rn,PM,Rab);
}
define (instr=MOVEU_2W__RnpRk__Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__RnpRk__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned words from memory to two address registers""";
attrs = (LMV,V7);
# 1331 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),R_Res(Rab),R_Res2(Rab));
  syntax = ( "moveu.2w (%f+%f),%f",Rn,Rk,Rab);
}
define (instr=MOVEU_2W__Rn_pRk_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__Rn_pRk_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of unsigned words from memory to two address registers""";
attrs = (LMV,V7);
# 1337 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),R_Res(Rab),R_Res2(Rab));
  syntax = ( "moveu.2w (%f)+%f,%f",Rn,Rk,Rab);
}

action=
{
   bits<32> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4);
   R(R_Res2) = zeroExtend( mem_data(15,0), 32);
   R(R_Res) = zeroExtend( mem_data(31,16), 32);

};

}

define (instr=MOVEU_2W__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVEU_2W__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of unsigned words from memory to two data registers""";
attrs = (LMV,V7);
# 1358 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "moveu.2w (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data = Mem(eff_mem_add,4);
   D(Res2) = zeroExtend( mem_data(15,0), 40);
   D(Res) = zeroExtend( mem_data(31,16), 40);

};

}

define (instr=MOVEU_2W__Rnps15__Ra_Rb_family)
{
  fields = (OPCD,R_Src1,imms,R_Res,R_Res2);
   blk = lsu;
   define (instr=MOVEU_2W__Rnps15__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_2W__Rnps15__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of unsigned words from memory to two address registers""";
attrs = (LMV,V7);
# 1380 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_2W__Rnps15__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),imms(s15),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "moveu.2w (%f+%f),%f",Rn,s15,Rab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data = Mem(eff_mem_add,4);
   R(R_Res2) = zeroExtend( mem_data(15,0), 32);
   R(R_Res) = zeroExtend( mem_data(31,16), 32);

};

}

define (instr=MOVEU_4B__Rnps15__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVEU_4B__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4B__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four unsigned bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 1402 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4B__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "moveu.4b (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data = Mem(eff_mem_add,4);
   D(Res4) = zeroExtend( mem_data(7,0), 40);
   D(Res3) = zeroExtend( mem_data(15,8), 40);
   D(Res2) = zeroExtend( mem_data(23,16), 40);
   D(Res) = zeroExtend( mem_data(31,24), 40);

};

}

define (instr=MOVEU_4W__EA__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2,Res3,Res4);
   blk = lsu;
   doc_title = "moveu.4w EA,Da:Db:Dc:Dd";

   define (instr=MOVEU_4W__Rn__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned words from memory to a data register quad""";
attrs = (LMV,V7);
# 1428 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "moveu.4w (%f),%f",Rn,Dabcd);
}
define (instr=MOVEU_4W__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned words from memory to a data register quad""";
attrs = (LMV,V7);
# 1434 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "moveu.4w (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVEU_4W__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned words from memory to a data register quad""";
attrs = (LMV,V7);
# 1440 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "moveu.4w (%f+%f),%f",Rn,Rk,Dabcd);
}
define (instr=MOVEU_4W__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned words from memory to a data register quad""";
attrs = (LMV,V7);
# 1446 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "moveu.4w (%f)+%f,%f",Rn,Rk,Dabcd);
}

action=
{
   bits<64> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8);
   D(Res4) = zeroExtend( mem_data(15,0), 40);
   D(Res3) = zeroExtend( mem_data(31,16), 40);
   D(Res2) = zeroExtend( mem_data(47,32), 40);
   D(Res) = zeroExtend( mem_data(63,48), 40);


};

}

define (instr=MOVEU_4W__EA__Ra_Rb_Rc_Rd_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Res,R_Res2,R_Res3,R_Res4);
   blk = lsu;
   doc_title = "moveu.4w EA,Ra:Rb:Rc:Rd";

   define (instr=MOVEU_4W__Rn__Ra_Rb_Rc_Rd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__Rn__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned words from memory to an address register quad""";
attrs = (LMV,V7);
# 1472 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
      syntax = ( "moveu.4w (%f),%f",Rn,Rabcd);
}
define (instr=MOVEU_4W__Rn_PM_Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__Rn_PM_Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned words from memory to an address register quad""";
attrs = (LMV,V7);
# 1478 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "moveu.4w (%f)%f,%f",Rn,PM,Rabcd);
}
define (instr=MOVEU_4W__RnpRk__Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__RnpRk__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned words from memory to an address register quad""";
attrs = (LMV,V7);
# 1484 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "moveu.4w (%f+%f),%f",Rn,Rk,Rabcd);
}
define (instr=MOVEU_4W__Rn_pRk_Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__Rn_pRk_Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned words from memory to an address register quad""";
attrs = (LMV,V7);
# 1490 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "moveu.4w (%f)+%f,%f",Rn,Rk,Rabcd);
}

action=
{
   bits<64> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8);
   R(R_Res4) = zeroExtend( mem_data(15,0), 32);
   R(R_Res3) = zeroExtend( mem_data(31,16), 32);
   R(R_Res2) = zeroExtend( mem_data(47,32), 32);
   R(R_Res) = zeroExtend( mem_data(63,48), 32);

};

}

define (instr=MOVEU_4W__Rnps15__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVEU_4W__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four unsigned words from memory to a data register quad""";
attrs = (LMV,V7);
# 1513 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "moveu.4w (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   D(Res4) = zeroExtend( mem_data(15,0), 40);
   D(Res3) = zeroExtend( mem_data(31,16), 40);
   D(Res2) = zeroExtend( mem_data(47,32), 40);
   D(Res) = zeroExtend( mem_data(63,48), 40);

};

}

define (instr=MOVEU_4W__Rnps15__Ra_Rb_Rc_Rd_family)
{
  fields = (OPCD,R_Src1,imms,R_Res,R_Res2,R_Res3,R_Res4);
   blk = lsu;
   define (instr=MOVEU_4W__Rnps15__Ra_Rb_Rc_Rd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4W__Rnps15__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four unsigned words from memory to an address register quad""";
attrs = (LMV,V7);
# 1537 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_4W__Rnps15__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
      syntax = ( "moveu.4w (%f+%f),%f",Rn,s15,Rabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   R(R_Res4) = zeroExtend( mem_data(15,0), 32);
   R(R_Res3) = zeroExtend( mem_data(31,16), 32);
   R(R_Res2) = zeroExtend( mem_data(47,32), 32);
   R(R_Res) = zeroExtend( mem_data(63,48), 32);

};

}

define (instr=MOVEU_B__SPmu6__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVEU_B__SPmu6__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to a data register""";
attrs = (LMV,V7);
# 1561 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_B__SPmu6__Da_family(OPCD(OPCD),immu(u6),Res(Da));
      syntax = ( "moveu.b (SP-%f),%f",u6,Da);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   write_mem_2DTable_zeroextend(eff_mem_add, Res, 1);
};

}

define (instr=MOVEU_B__SPmu6__Ra_family)
{
  fields = (OPCD,immu,R_Res);
   blk = lsu;
   define (instr=MOVEU_B__SPmu6__Ra)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__SPmu6__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to an address register""";
attrs = (LMV,V7);
# 1580 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_B__SPmu6__Ra_family(OPCD(OPCD),immu(u6),R_Res(Ra));
      syntax = ( "moveu.b (SP-%f),%f",u6,Ra);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   bits<8> mem_data = Mem(eff_mem_add,1);
   R(R_Res) = zeroExtend( mem_data, 32);

};

}

define (instr=MOVEU_L__EA__Da_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res);
   blk = lsu;
   doc_title = "moveu.l EA,Da";

   define (instr=MOVEU_L__Rn__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_L__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned long word from memory to a data register""";
attrs = (LMV,V7);
# 1603 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_L__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Da));
      syntax = ( "moveu.l (%f),%f",Rn,Da);
}
define (instr=MOVEU_L__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_L__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned long word from memory to a data register""";
attrs = (LMV,V7);
# 1609 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_L__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Da));
  syntax = ( "moveu.l (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVEU_L__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_L__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned long word from memory to a data register""";
attrs = (LMV,V7);
# 1615 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_L__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Da));
  syntax = ( "moveu.l (%f+%f),%f",Rn,Rk,Da);
}
define (instr=MOVEU_L__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_L__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned long word from memory to a data register""";
attrs = (LMV,V7);
# 1621 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_L__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Da));
  syntax = ( "moveu.l (%f)+%f,%f",Rn,Rk,Da);
}

action=
{
   bits<32> mem_data =Mem(EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4);
   D(Res) = zeroExtend( mem_data, 40);

};

}

define (instr=MOVEU_L__Rnps15__Da_family)
{
  fields = (OPCD,R_Src1,imms,Res);
   blk = lsu;
   define (instr=MOVEU_L__Rnps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_L__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned long word from memory to a data register""";
attrs = (LMV,V7);
# 1641 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_L__Rnps15__Da_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Da));
      syntax = ( "moveu.l (%f+%f),%f",Rn,s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data =Mem(eff_mem_add,4);
   D(Res) = zeroExtend( mem_data, 40);

};

}

define (instr=MOVEU_L__SPmu6__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVEU_L__SPmu6__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_L__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned long word from memory to a data register""";
attrs = (LMV,V7);
# 1662 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_L__SPmu6__Da_family(OPCD(OPCD),immu(u6),Res(Da));
      syntax = ( "moveu.l (SP-%f),%f",u6,Da);
   }

action=
{
   bits<32> eff_mem_add = SP - (immu*4);
   bits<32> mem_data =Mem(eff_mem_add,4);
   D(Res) = zeroExtend( mem_data, 40);
};

}

define (instr=MOVEU_L__SPps15__Da_family)
{
  fields = (OPCD,imms,Res);
   blk = lsu;
   define (instr=MOVEU_L__SPps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_L__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned long word from memory to a data register""";
attrs = (LMV,V7);
# 1682 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_L__SPps15__Da_family(OPCD(OPCD),imms(s15),Res(Da));
      syntax = ( "moveu.l (SP+%f),%f",s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
   bits<32> mem_data =Mem(eff_mem_add,4);
   D(Res) = zeroExtend( mem_data, 40);

};

}

define (instr=MOVEU_L__a32__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVEU_L__a32__Da)
   {

      alias = MOVEU_L__a32__Da_family(OPCD(OPCD),immu(a32),Res(Da));
      syntax = ( "moveu.l (%f),%f",a32,Da);
   }

action=
{
   bits<32> mem_data =Mem(immu,4);
   D(Res) = zeroExtend( mem_data, 40);

};

}

define (instr=MOVEU_W__SPmu6__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVEU_W__SPmu6__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to a data register""";
attrs = (LMV,V7);
# 1723 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_W__SPmu6__Da_family(OPCD(OPCD),immu(u6),Res(Da));
      syntax = ( "moveu.w (SP-%f),%f",u6,Da);
   }

action=
{
   bits<32> eff_mem_add = SP - (immu*2);
   bits<32> mem_data =Mem(eff_mem_add,4);
   D(Res) = zeroExtend( mem_data, 40);

};

}

define (instr=MOVEU_W__SPmu6__Ra_family)
{
  fields = (OPCD,immu,R_Res);
   blk = lsu;
   define (instr=MOVEU_W__SPmu6__Ra)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__SPmu6__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to an address register""";
attrs = (LMV,V7);
# 1744 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVEU_W__SPmu6__Ra_family(OPCD(OPCD),immu(u6),R_Res(Ra));
      syntax = ( "moveu.w (SP-%f),%f",u6,Ra);
   }

action=
{
   bits<32> eff_mem_add = SP - (immu*2);
   bits<32> mem_data =Mem(eff_mem_add,4);
   R(R_Res) = zeroExtend( mem_data, 32);

};

}

define (instr=MOVE_2BF_Da_Db__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.2bf Da:Db,EA";

   define (instr=MOVE_2BF_Da_Db__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional bytes one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1767 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.2bf %f,(%f)",Dab,Rn);
}
define (instr=MOVE_2BF_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional bytes one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1773 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.2bf %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVE_2BF_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional bytes one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1779 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.2bf %f,(%f+%f)",Dab,Rn,Rk);
}
define (instr=MOVE_2BF_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional bytes one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1785 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.2bf %f,(%f)+%f",Dab,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2) = concat(D(Src1).HH, D(Src2).HH);
};

}

define (instr=MOVE_2BF_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_2BF_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two fractional bytes one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1803 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "move.2bf %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   Mem(eff_mem_add,2) = concat(D(Src1).HH, D(Src2).HH);

};

}

define (instr=MOVE_2BF__EA__Da_Db_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2);
   blk = lsu;
   doc_title = "move.2bf EA,Da:Db";

   define (instr=MOVE_2BF__Rn__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of fractional bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1825 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2bf (%f),%f",Rn,Dab);
}
define (instr=MOVE_2BF__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of fractional bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1831 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2bf (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE_2BF__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of fractional bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1837 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2bf (%f+%f),%f",Rn,Rk,Dab);
}
define (instr=MOVE_2BF__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of fractional bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1843 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2bf (%f)+%f,%f",Rn,Rk,Dab);
}

action=
{
   bits<16> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2);
   D(Res2) = signExtend( concat(mem_data(7,0),zero(24)), 40);
   D(Res) = signExtend( concat(mem_data(15,8),zero(24)), 40);
};

}

define (instr=MOVE_2BF__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVE_2BF__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2BF__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of fractional bytes from memory to two data registers""";
attrs = (LMV,V7);
# 1863 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2BF__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2bf (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits<16> mem_data = Mem( eff_mem_add,2);
   D(Res2) = signExtend( concat(mem_data(7,0),zero(24)), 40);
   D(Res) = signExtend( concat(mem_data(15,8),zero(24)), 40);
};

}

define (instr=MOVE_2B_Da_Db__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.2b Da:Db,EA";

   define (instr=MOVE_2B_Da_Db__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes, one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1886 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.2b %f,(%f)",Dab,Rn);
}
define (instr=MOVE_2B_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes, one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1892 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.2b %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVE_2B_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes, one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1898 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.2b %f,(%f+%f)",Dab,Rn,Rk);
}
define (instr=MOVE_2B_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes, one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1904 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.2b %f,(%f)+%f",Dab,Rn,Rk);
}

action=
{
    Mem(EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2) = concat(D(Src1).LL, D(Src2).LL);
};

}

define (instr=MOVE_2B_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_2B_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two  bytes, one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 1922 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "move.2b %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   Mem(eff_mem_add,2) = concat(D(Src1).LL, D(Src2).LL);
};

}

define (instr=MOVE_2B_Ra_Rb__EA__family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Src3,R_Src4);
   blk = lsu;
   doc_title = "move.2b Ra:Rb,EA";

   define (instr=MOVE_2B_Ra_Rb__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Ra_Rb__Rn_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes, one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 1943 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.2b %f,(%f)",Rab,Rn);
}
define (instr=MOVE_2B_Ra_Rb__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Ra_Rb__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes, one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 1949 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.2b %f,(%f)%f",Rab,Rn,PM);
}
define (instr=MOVE_2B_Ra_Rb__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Ra_Rb__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes, one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 1955 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.2b %f,(%f+%f)",Rab,Rn,Rk);
}
define (instr=MOVE_2B_Ra_Rb__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Ra_Rb__Rn_pRk.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes, one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 1961 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.2b %f,(%f)+%f",Rab,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2) = concat(R(R_Src1)(7,0), R(R_Src2)(7,0));
};

}

define (instr=MOVE_2B_Ra_Rb__Rnps15__family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Src3,imms);
   blk = lsu;
   define (instr=MOVE_2B_Ra_Rb__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B_Ra_Rb__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two  bytes, one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 1979 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B_Ra_Rb__Rnps15__family(OPCD(OPCD),R_Src2(Rab.Ra),R_Src3(Rab.Rb),R_Src1(Rn),imms(s15));
      syntax = ( "move.2b %f,(%f+%f)",Rab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   Mem(eff_mem_add,2) = concat(R(R_Src2)(7,0), R(R_Src3)(7,0));
};

}

define (instr=MOVE_2B__EA__Da_Db_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2);
   blk = lsu;
   doc_title = "move.2b EA,Da:Db";

   define (instr=MOVE_2B__Rn__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of bytes from memory to two data registers""";
attrs = (LMV,V7);
# 2000 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2b (%f),%f",Rn,Dab);
}
define (instr=MOVE_2B__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of bytes from memory to two data registers""";
attrs = (LMV,V7);
# 2006 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2b (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE_2B__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of bytes from memory to two data registers""";
attrs = (LMV,V7);
# 2012 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2b (%f+%f),%f",Rn,Rk,Dab);
}
define (instr=MOVE_2B__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of bytes from memory to two data registers""";
attrs = (LMV,V7);
# 2018 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2b (%f)+%f,%f",Rn,Rk,Dab);
}

action=
{
   bits<16> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2);
   D(Res2) = signExtend( mem_data(7,0), 40);
   D(Res) = signExtend( mem_data(15,8), 40);
};

}

define (instr=MOVE_2B__EA__Ra_Rb_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Res,R_Res2);
   blk = lsu;
   doc_title = "move.2b EA,Ra:Rb";

   define (instr=MOVE_2B__Rn__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__Rn__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of bytes from memory to two address registers""";
attrs = (LMV,V7);
# 2040 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn), R_Src2(8), MMM(2), R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "move.2b (%f),%f",Rn,Rab);
}
define (instr=MOVE_2B__Rn_PM_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__Rn_PM_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of bytes from memory to two address registers""";
attrs = (LMV,V7);
# 2046 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn), R_Src2(8), MMM(PM), R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2b (%f)%f,%f",Rn,PM,Rab);
}
define (instr=MOVE_2B__RnpRk__Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__RnpRk__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of bytes from memory to two address registers""";
attrs = (LMV,V7);
# 2052 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn), R_Src2(Rk), MMM(0), R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2b (%f+%f),%f",Rn,Rk,Rab);
}
define (instr=MOVE_2B__Rn_pRk_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__Rn_pRk_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of bytes from memory to two address registers""";
attrs = (LMV,V7);
# 2058 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn), R_Src2(Rk), MMM(4), R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2b (%f)+%f,%f",Rn,Rk,Rab);
}

action=
{
   bits<16> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,1,R_Src2),2);
   R(R_Res2) = signExtend( mem_data(7,0), 32);
   R(R_Res) = signExtend( mem_data(15,8), 32);

};

}

define (instr=MOVE_2B__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVE_2B__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of bytes from memory to two data registers""";
attrs = (LMV,V7);
# 2079 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2b (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits<16> mem_data = Mem( eff_mem_add,2);
   D(Res2) = signExtend( mem_data(7,0), 40);
   D(Res) = signExtend( mem_data(15,8), 40);

};

}

define (instr=MOVE_2B__Rnps15__Ra_Rb_family)
{
  fields = (OPCD,R_Src1,imms,R_Res,R_Res2);
   blk = lsu;
   define (instr=MOVE_2B__Rnps15__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2B__Rnps15__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of bytes from memory to two address registers""";
attrs = (LMV,V7);
# 2101 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2B__Rnps15__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),imms(s15),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "move.2b (%f+%f),%f",Rn,s15,Rab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<1) + R(R_Src1);
   bits<16> mem_data = Mem( eff_mem_add,2);
   R(R_Res2) = signExtend( mem_data(7,0), 32);
   R(R_Res) = signExtend( mem_data(15,8), 32);

};

}

define (instr=MOVE_2F_Da_Db__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.2f Da:Db,EA";

   define (instr=MOVE_2F_Da_Db__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional words one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 2125 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2F_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.2f %f,(%f)",Dab,Rn);
}
define (instr=MOVE_2F_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional words one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 2131 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2F_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.2f %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVE_2F_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional words one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 2137 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2F_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.2f %f,(%f+%f)",Dab,Rn,Rk);
}
define (instr=MOVE_2F_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional words one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 2143 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2F_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.2f %f,(%f)+%f",Dab,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4) = concat(D(Src1).H, D(Src2).H);
};

}

define (instr=MOVE_2F_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_2F_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two fractional words one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 2161 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2F_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "move.2f %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   Mem(eff_mem_add,4) = concat(D(Src1).H, D(Src2).H);
};

}

define (instr=MOVE_2F__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVE_2F__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of fractional words from memory to two data registers""";
attrs = (LMV,V7);
# 2180 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2F__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2f (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data = Mem(eff_mem_add,4);
   D(Res2) = signExtend( concat(mem_data(15,0), zero(16)), 40);
   D(Res) = signExtend( concat(mem_data(31,16), zero(16)), 40);
};

}

define (instr=MOVE_2L_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_2L_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two long words one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 2201 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "move.2l %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<32> Da = D(Src1)(32 -1,0);
   bits<32> Db = D(Src2)(32 -1,0);
   bits<64> mem_data = concat(Da,Db);
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   Mem(eff_mem_add,8) = mem_data;

};

}

define (instr=MOVE_2L_Ra_Rb__EA__family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Src3,R_Src4);
   blk = lsu;
   doc_title = "move.2l Ra:Rb,EA";

   define (instr=MOVE_2L_Ra_Rb__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Ra_Rb__Rn_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  long words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2226 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.2l %f,(%f)",Rab,Rn);
}
define (instr=MOVE_2L_Ra_Rb__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Ra_Rb__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  long words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2232 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.2l %f,(%f)%f",Rab,Rn,PM);
}
define (instr=MOVE_2L_Ra_Rb__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Ra_Rb__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  long words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2238 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.2l %f,(%f+%f)",Rab,Rn,Rk);
}
define (instr=MOVE_2L_Ra_Rb__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Ra_Rb__Rn_pRk.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  long words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2244 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.2l %f,(%f)+%f",Rab,Rn,Rk);
}

action=
{
   bits<64> mem_data = concat(R(R_Src3),R(R_Src4));
   Mem(EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8) = mem_data;

};

}

define (instr=MOVE_2L_Ra_Rb__Rnps15__family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Src3,imms);
   blk = lsu;
   define (instr=MOVE_2L_Ra_Rb__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Ra_Rb__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two  long words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2264 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L_Ra_Rb__Rnps15__family(OPCD(OPCD),R_Src2(Rab.Ra),R_Src3(Rab.Rb),R_Src1(Rn),imms(s15));
      syntax = ( "move.2l %f,(%f+%f)",Rab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = concat(R(R_Src2),R(R_Src3));
   Mem(eff_mem_add,8) = mem_data;
};

}

define (instr=MOVE_2L__EA__Ra_Rb_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Res,R_Res2);
   blk = lsu;
   doc_title = "move.2l EA,Ra:Rb";

   define (instr=MOVE_2L__Rn__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two address registers""";
attrs = (LMV,V7);
# 2286 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "move.2l (%f),%f",Rn,Rab);
}
define (instr=MOVE_2L__Rn_PM_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn_PM_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two address registers""";
attrs = (LMV,V7);
# 2292 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2l (%f)%f,%f",Rn,PM,Rab);
}
define (instr=MOVE_2L__RnpRk__Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__RnpRk__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two address registers""";
attrs = (LMV,V7);
# 2298 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2l (%f+%f),%f",Rn,Rk,Rab);
}
define (instr=MOVE_2L__Rn_pRk_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn_pRk_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two address registers""";
attrs = (LMV,V7);
# 2304 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2l (%f)+%f,%f",Rn,Rk,Rab);
}

action=
{
   bits<64> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8);
   R(R_Res2) = signExtend( mem_data(31,0), 32);
   R(R_Res) = signExtend( mem_data(63,32), 32);

};

}

define (instr=MOVE_2L__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVE_2L__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of long words from memory to two data registers""";
attrs = (LMV,V7);
# 2325 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2l (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   D(Res2) = signExtend( mem_data(31,0), 40);
   D(Res) = signExtend( mem_data(63,32), 40);
};

}

define (instr=MOVE_2L__Rnps15__Da_Dc_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVE_2L__Rnps15__Da_Dc)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rnps15__Da_Dc.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of long words from memory to two data registers (d0:d2 etc.)""";
attrs = (LMV,V7);
# 2346 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L__Rnps15__Da_Dc_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dac.Da),Res2(Dac.Dc));
      syntax = ( "move.2l (%f+%f),%f",Rn,s15,Dac);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   D(Res2) = signExtend( mem_data(31,0), 40);
   D(Res) = signExtend( mem_data(63,32), 40);
};

}

define (instr=MOVE_2L__Rnps15__Ra_Rb_family)
{
  fields = (OPCD,R_Src1,imms,R_Res,R_Res2);
   blk = lsu;
   define (instr=MOVE_2L__Rnps15__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rnps15__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of long words from memory to two address registers""";
attrs = (LMV,V7);
# 2367 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2L__Rnps15__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),imms(s15),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "move.2l (%f+%f),%f",Rn,s15,Rab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   R(R_Res2) = mem_data(31,0);
   R(R_Res) = mem_data(63,32);

};

}

define (instr=MOVE_2W_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_2W_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two  words one from each of a data register pair to memory""";
attrs = (LMV,V7);
# 2389 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "move.2w %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   Mem(eff_mem_add,4) = concat(D(Src1)(15,0), D(Src2)(15,0));
};

}

define (instr=MOVE_2W_Ra_Rb__EA__family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Src3,R_Src4);
   blk = lsu;
   doc_title = "move.2w Ra:Rb,EA";

   define (instr=MOVE_2W_Ra_Rb__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Ra_Rb__Rn_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2410 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.2w %f,(%f)",Rab,Rn);
}
define (instr=MOVE_2W_Ra_Rb__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Ra_Rb__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2416 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.2w %f,(%f)%f",Rab,Rn,PM);
}
define (instr=MOVE_2W_Ra_Rb__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Ra_Rb__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2422 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.2w %f,(%f+%f)",Rab,Rn,Rk);
}
define (instr=MOVE_2W_Ra_Rb__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Ra_Rb__Rn_pRk.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2428 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W_Ra_Rb__EA__family(OPCD(OPCD),R_Src3(Rab.Ra),R_Src4(Rab.Rb),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.2w %f,(%f)+%f",Rab,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4) = concat(R(R_Src3)(15,0), R(R_Src4)(15,0));
};

}

define (instr=MOVE_2W_Ra_Rb__Rnps15__family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Src3,imms);
   blk = lsu;
   define (instr=MOVE_2W_Ra_Rb__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Ra_Rb__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two  words one from each of an address register pair to memory""";
attrs = (LMV,V7);
# 2446 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W_Ra_Rb__Rnps15__family(OPCD(OPCD),R_Src2(Rab.Ra),R_Src3(Rab.Rb),R_Src1(Rn),imms(s15));
      syntax = ( "move.2w %f,(%f+%f)",Rab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   Mem(eff_mem_add,4) = concat(R(R_Src2)(15,0), R(R_Src3)(15,0));
};

}

define (instr=MOVE_2W__EA__Ra_Rb_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Res,R_Res2);
   blk = lsu;
   doc_title = "move.2w EA,Ra:Rb";

   define (instr=MOVE_2W__Rn__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__Rn__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of words from memory to two address registers""";
attrs = (LMV,V7);
# 2467 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "move.2w (%f),%f",Rn,Rab);
}
define (instr=MOVE_2W__Rn_PM_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__Rn_PM_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of words from memory to two address registers""";
attrs = (LMV,V7);
# 2473 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2w (%f)%f,%f",Rn,PM,Rab);
}
define (instr=MOVE_2W__RnpRk__Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__RnpRk__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of words from memory to two address registers""";
attrs = (LMV,V7);
# 2479 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2w (%f+%f),%f",Rn,Rk,Rab);
}
define (instr=MOVE_2W__Rn_pRk_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__Rn_pRk_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of words from memory to two address registers""";
attrs = (LMV,V7);
# 2485 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W__EA__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),R_Res(Rab),R_Res2(Rab));
  syntax = ( "move.2w (%f)+%f,%f",Rn,Rk,Rab);
}

action=
{
   bits<32> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4);
   R(R_Res2) = signExtend( mem_data(15,0), 32);
   R(R_Res) = signExtend( mem_data(31,16), 32);

};

}

define (instr=MOVE_2W__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVE_2W__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of words from memory to two data registers""";
attrs = (LMV,V7);
# 2506 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2w (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data = Mem(eff_mem_add,4);
   D(Res2) = signExtend( mem_data(15,0), 40);
   D(Res) = signExtend( mem_data(31,16), 40);

};

}

define (instr=MOVE_2W__Rnps15__Ra_Rb_family)
{
  fields = (OPCD,R_Src1,imms,R_Res,R_Res2);
   blk = lsu;
   define (instr=MOVE_2W__Rnps15__Ra_Rb)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__Rnps15__Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of words from memory to two address registers""";
attrs = (LMV,V7);
# 2528 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2W__Rnps15__Ra_Rb_family(OPCD(OPCD),R_Src1(Rn),imms(s15),R_Res(Rab.Ra),R_Res2(Rab.Rb));
      syntax = ( "move.2w (%f+%f),%f",Rn,s15,Rab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data = Mem(eff_mem_add,4);
   R(R_Res2) = signExtend( mem_data(15,0), 32);
   R(R_Res) = signExtend( mem_data(31,16), 32);

};

}

define (instr=MOVE_2X_Da_Db__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.2x Da:Db,EA";

   define (instr=MOVE_2X_Da_Db__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two 40-bit data values to memory from a data register pair""";
attrs = (LMV,V7);
# 2552 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.2x %f,(%f)",Dab,Rn);
}
define (instr=MOVE_2X_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two 40-bit data values to memory from a data register pair""";
attrs = (LMV,V7);
# 2558 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.2x %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVE_2X_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two 40-bit data values to memory from a data register pair""";
attrs = (LMV,V7);
# 2564 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.2x %f,(%f+%f)",Dab,Rn,Rk);
}
define (instr=MOVE_2X_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two 40-bit data values to memory from a data register pair""";
attrs = (LMV,V7);
# 2570 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X_Da_Db__EA__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.2x %f,(%f)+%f",Dab,Rn,Rk);
}

action=
{
   bits<80> mem_data = concat(D(Src1),D(Src2));
   Mem(EAtable(MMM,R_Src1,R_Src2,4,R_Src2),10) = mem_data;

};

}

define (instr=MOVE_2X_Da_Db__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_2X_Da_Db__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X_Da_Db__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move two 40-bit data values to memory from a data register pair""";
attrs = (LMV,V7);
# 2590 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X_Da_Db__Rnps15__family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),R_Src1(Rn),imms(s15));
      syntax = ( "move.2x %f,(%f+%f)",Dab,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<4) + R(R_Src1);
   bits<80> mem_data = concat(D(Src1),D(Src2));
   Mem(eff_mem_add,10) = mem_data;

};

}

define (instr=MOVE_2X__EA__Da_Db_family)
{

   fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2);
   blk = lsu;
   doc_title = "move.2x EA,Da:Db";


   define (instr=MOVE_2X__Rn__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of 40-bit values from memory to two data registers""";
attrs = (LMV,V7);
# 2615 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2x (%f),%f",Rn,Dab);
}
define (instr=MOVE_2X__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of 40-bit values from memory to two data registers""";
attrs = (LMV,V7);
# 2621 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2x (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE_2X__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of 40-bit values from memory to two data registers""";
attrs = (LMV,V7);
# 2627 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2x (%f+%f),%f",Rn,Rk,Dab);
}
define (instr=MOVE_2X__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of 40-bit values from memory to two data registers""";
attrs = (LMV,V7);
# 2633 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X__EA__Da_Db_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Dab.Da),Res2(Dab.Db));
  syntax = ( "move.2x (%f)+%f,%f",Rn,Rk,Dab);
}

action=
{
   bits<80> mem_data = Mem(EAtable(MMM,R_Src1,R_Src2,4,R_Src2),10);
   D(Res2) = mem_data(39,0);
   D(Res) = mem_data(79,40);
};

}

define (instr=MOVE_2X__Rnps15__Da_Db_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2);
   blk = lsu;
   define (instr=MOVE_2X__Rnps15__Da_Db)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2X__Rnps15__Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a pair of 40-bit values from memory to two data registers""";
attrs = (LMV,V7);
# 2653 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_2X__Rnps15__Da_Db_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dab.Da),Res2(Dab.Db));
      syntax = ( "move.2x (%f+%f),%f",Rn,s15,Dab);
   }

action=
{
   bits<32> eff_mem_add = (imms<<4) + R(R_Src1);
   bits<80> mem_data = Mem(eff_mem_add,10);
   D(Res2) = mem_data(39,0);
   D(Res) = mem_data(79,40);
};

}

define (instr=MOVE_4BF_Da_Db_Dc_Dd__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,Src3,Src4,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.4bf Da:Db:Dc:Dd,EA";

   define (instr=MOVE_4BF_Da_Db_Dc_Dd__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  fractional bytes one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2676 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.4bf %f,(%f)",Dabcd,Rn);
}
define (instr=MOVE_4BF_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  fractional bytes one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2682 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.4bf %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVE_4BF_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  fractional bytes one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2688 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.4bf %f,(%f+%f)",Dabcd,Rn,Rk);
}
define (instr=MOVE_4BF_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  fractional bytes one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2694 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.4bf %f,(%f)+%f",Dabcd,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4) = concat(D(Src1).HH, D(Src2).HH, D(Src3).HH, D(Src4).HH);

};

}

define (instr=MOVE_4BF_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_4BF_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four  fractional bytes one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2713 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "move.4bf %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   Mem(eff_mem_add,4) = concat(D(Src1).HH, D(Src2).HH, D(Src3).HH, D(Src4).HH);
};

}

define (instr=MOVE_4BF__EA__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2,Res3,Res4);
   blk = lsu;
   doc_title = "move.4bf EA,Da:Db:Dc:Dd";

   define (instr=MOVE_4BF__Rn__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 2734 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move.4bf (%f),%f",Rn,Dabcd);
}
define (instr=MOVE_4BF__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 2740 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move.4bf (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVE_4BF__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 2746 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move.4bf (%f+%f),%f",Rn,Rk,Dabcd);
}
define (instr=MOVE_4BF__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 2752 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move.4bf (%f)+%f,%f",Rn,Rk,Dabcd);
}

action=
{
   bits<32> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,2,R_Src2),4);
   D(Res4) = signExtend( concat(mem_data(7,0),zero(24)), 40);
   D(Res3) = signExtend( concat(mem_data(15,8),zero(24)), 40);
   D(Res2) = signExtend( concat(mem_data(23,16),zero(24)), 40);
   D(Res) = signExtend( concat(mem_data(31,24),zero(24)), 40);

};

}

define (instr=MOVE_4BF__Rnps15__Da_Db_Dc_Dd_family)
{
   fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVE_4BF__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4BF__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four fractional bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 2775 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4BF__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));

      syntax = ( "move.4bf (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data = Mem(eff_mem_add,4);
   D(Res4) = signExtend( concat(mem_data(7,0),zero(24)), 40);
   D(Res3) = signExtend( concat(mem_data(15,8),zero(24)), 40);
   D(Res2) = signExtend( concat(mem_data(23,16),zero(24)), 40);
   D(Res) = signExtend( concat(mem_data(31,24),zero(24)), 40);

};

}

define (instr=MOVE_4B_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_4B_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four  bytes, one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2800 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4B_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "move.4b %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   Mem(eff_mem_add,4) = concat( (D(Src1)(7,0)), (D(Src2)(7,0)), (D(Src3)(7,0)), (D(Src4)(7,0)) );

};

}

define (instr=MOVE_4B__Rnps15__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVE_4B__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four bytes from memory to a data register quad""";
attrs = (LMV,V7);
# 2820 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4B__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move.4b (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<2) + R(R_Src1);
   bits<32> mem_data = Mem(eff_mem_add,4);
   D(Res4) = signExtend( mem_data(7,0), 40);
   D(Res3) = signExtend( mem_data(15,8), 40);
   D(Res2) = signExtend( mem_data(23,16), 40);
   D(Res) = signExtend( mem_data(31,24), 40);

};

}

define (instr=MOVE_4F_Da_Db_Dc_Dd__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,Src3,Src4,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.4f Da:Db:Dc:Dd,EA";

   define (instr=MOVE_4F_Da_Db_Dc_Dd__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  fractional words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2846 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.4f %f,(%f)",Dabcd,Rn);
}
define (instr=MOVE_4F_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  fractional words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2852 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.4f %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVE_4F_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  fractional words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2858 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.4f %f,(%f+%f)",Dabcd,Rn,Rk);
}
define (instr=MOVE_4F_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  fractional words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2864 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.4f %f,(%f)+%f",Dabcd,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8) = concat(D(Src1).H, D(Src2).H, D(Src3).H, D(Src4).H);
};

}

define (instr=MOVE_4F_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_4F_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four  fractional words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2882 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4F_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "move.4f %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   Mem(eff_mem_add,8) = concat(D(Src1).H, D(Src2).H, D(Src3).H, D(Src4).H);
};

}

define (instr=MOVE_4F__Rnps15__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVE_4F__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four fractional words from memory to a data register quad""";
attrs = (LMV,V7);
# 2901 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4F__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move.4f (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   D(Res4) = signExtend( concat( mem_data(15,0), zero(16)), 40);
   D(Res3) = signExtend( concat( mem_data(31,16), zero(16)), 40);
   D(Res2) = signExtend( concat( mem_data(47,32), zero(16)), 40);
   D(Res) = signExtend( concat( mem_data(63,48), zero(16)), 40);

};

}

define (instr=MOVE_4L_Da_Db_Dc_Dd__EA__family)
{
  fields = (OPCD,MMM,Src1,Src2,Src3,Src4,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.4l Da:Db:Dc:Dd,EA";

   define (instr=MOVE_4L_Da_Db_Dc_Dd__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  long words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2927 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.4l %f,(%f)",Dabcd,Rn);
}
define (instr=MOVE_4L_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  long words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2933 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.4l %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVE_4L_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  long words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2939 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.4l %f,(%f+%f)",Dabcd,Rn,Rk);
}
define (instr=MOVE_4L_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  long words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2945 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Da_Db_Dc_Dd__EA__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.4l %f,(%f)+%f",Dabcd,Rn,Rk);
}

action=
{
   bits<128> mem_data = concat(D(Src1)(31,0),D(Src2)(31,0),D(Src3)(31,0),D(Src4)(31,0));
   Mem(EAtable(MMM,R_Src1,R_Src2,4,R_Src2),16) = mem_data;

};

}

define (instr=MOVE_4L_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_4L_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four  long words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 2965 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "move.4l %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<4) + R(R_Src1);
   bits<128> mem_data = concat(D(Src1)(31,0),D(Src2)(31,0),D(Src3)(31,0),D(Src4)(31,0));
   Mem(eff_mem_add,16) = mem_data;
};

}

define (instr=MOVE_4L_Ra_Rb_Rc_Rd__EA__family)
{
   fields = (OPCD,MMM,R_Src1, R_Src2,R_Src3,R_Src4,R_Src5,R_Src6);
   blk = lsu;
   doc_title = "move.4l Ra:Rb:Rc:Rd,EA";

   define (instr=MOVE_4L_Ra_Rb_Rc_Rd__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Ra_Rb_Rc_Rd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  long words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 2987 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Ra_Rb_Rc_Rd__EA__family(OPCD(OPCD),R_Src3(Rabcd.Ra),R_Src4(Rabcd.Rb),R_Src5(Rabcd.Rc),R_Src6(Rabcd.Rd),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.4l %f,(%f)",Rabcd,Rn);
}
define (instr=MOVE_4L_Ra_Rb_Rc_Rd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Ra_Rb_Rc_Rd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  long words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 2993 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Ra_Rb_Rc_Rd__EA__family(OPCD(OPCD),R_Src3(Rabcd.Ra),R_Src4(Rabcd.Rb),R_Src5(Rabcd.Rc),R_Src6(Rabcd.Rd),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.4l %f,(%f)%f",Rabcd,Rn,PM);
}
define (instr=MOVE_4L_Ra_Rb_Rc_Rd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Ra_Rb_Rc_Rd__RnpRk_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  long words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 2999 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Ra_Rb_Rc_Rd__EA__family(OPCD(OPCD),R_Src3(Rabcd.Ra),R_Src4(Rabcd.Rb),R_Src5(Rabcd.Rc),R_Src6(Rabcd.Rd),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.4l %f,(%f+%f)",Rabcd,Rn,Rk);
}
define (instr=MOVE_4L_Ra_Rb_Rc_Rd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Ra_Rb_Rc_Rd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  long words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 3005 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Ra_Rb_Rc_Rd__EA__family(OPCD(OPCD),R_Src3(Rabcd.Ra),R_Src4(Rabcd.Rb),R_Src5(Rabcd.Rc),R_Src6(Rabcd.Rd),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.4l %f,(%f)+%f",Rabcd,Rn,Rk);
}

action=
{
   bits<128> mem_data = concat(R(R_Src3)(31,0),R(R_Src4)(31,0),R(R_Src5)(31,0),R(R_Src6)(31,0));
   Mem(EAtable(MMM,R_Src1,R_Src2,4,R_Src2),16) = mem_data;
};

}

define (instr=MOVE_4L_Ra_Rb_Rc_Rd__Rnps15__family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Src3,R_Src4,R_Src5,imms);
   blk = lsu;
   define (instr=MOVE_4L_Ra_Rb_Rc_Rd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L_Ra_Rb_Rc_Rd__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four  long words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 3024 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L_Ra_Rb_Rc_Rd__Rnps15__family(OPCD(OPCD),R_Src2(Rabcd.Ra),R_Src3(Rabcd.Rb),R_Src4(Rabcd.Rc),R_Src5(Rabcd.Rd),R_Src1(Rn),imms(s15));
      syntax = ( "move.4l %f,(%f+%f)",Rabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<4) + R(R_Src1);
   bits<128> mem_data = concat(R(R_Src2)(31,0),R(R_Src3)(31,0),R(R_Src4)(31,0),R(R_Src5)(31,0));
   Mem(eff_mem_add,16) = mem_data;
};

}

define (instr=MOVE_4L__EA__Da_Db_Dc_Dd_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res,Res2,Res3,Res4);
   blk = lsu;
   doc_title = "move.4l EA,Da:Db:Dc:Dd";

   define (instr=MOVE_4L__Rn__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four long words from memory to a data register quad""";
attrs = (LMV,V7);
# 3046 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move.4l (%f),%f",Rn,Dabcd);
}
define (instr=MOVE_4L__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four long words from memory to a data register quad""";
attrs = (LMV,V7);
# 3052 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move.4l (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVE_4L__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four long words from memory to a data register quad""";
attrs = (LMV,V7);
# 3058 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move.4l (%f+%f),%f",Rn,Rk,Dabcd);
}
define (instr=MOVE_4L__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four long words from memory to a data register quad""";
attrs = (LMV,V7);
# 3064 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__EA__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
  syntax = ( "move.4l (%f)+%f,%f",Rn,Rk,Dabcd);
}

action=
{
   bits<128> mem_data = Mem(EAtable(MMM,R_Src1,R_Src2,4,R_Src2),16);
   D(Res4) = signExtend( mem_data(31,0), 40);
   D(Res3) = signExtend( mem_data(63,32), 40);
   D(Res2) = signExtend( mem_data(95,64), 40);
   D(Res) = signExtend( mem_data(127,96), 40);

};

}

define (instr=MOVE_4L__EA__Ra_Rb_Rc_Rd_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Res,R_Res2,R_Res3,R_Res4);
   blk = lsu;
   doc_title = "move.4l EA,Ra:Rb:Rc:Rd";

   define (instr=MOVE_4L__Rn__Ra_Rb_Rc_Rd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__Rn__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four long words from memory to an address register quad""";
attrs = (LMV,V7);
# 3089 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
      syntax = ( "move.4l (%f),%f",Rn,Rabcd);
}
define (instr=MOVE_4L__Rn_PM_Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__Rn_PM_Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four long words from memory to an address register quad""";
attrs = (LMV,V7);
# 3095 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "move.4l (%f)%f,%f",Rn,PM,Rabcd);
}
define (instr=MOVE_4L__RnpRk__Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__RnpRk__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four long words from memory to an address register quad""";
attrs = (LMV,V7);
# 3101 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "move.4l (%f+%f),%f",Rn,Rk,Rabcd);
}
define (instr=MOVE_4L__Rn_pRk_Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__Rn_pRk_Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four long words from memory to an address register quad""";
attrs = (LMV,V7);
# 3107 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "move.4l (%f)+%f,%f",Rn,Rk,Rabcd);
}

action=
{
   bits<128> mem_data = Mem(EAtable(MMM,R_Src1,R_Src2,4,R_Src2),16);
   R(R_Res4) = mem_data(31,0);
   R(R_Res3) = mem_data(63,32);
   R(R_Res2) = mem_data(95,64);
   R(R_Res) = mem_data(127,96);
};

}

define (instr=MOVE_4L__Rnps15__Da_Db_Dc_Dd_family)
{
   fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVE_4L__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four long words from memory to a data register quad""";
attrs = (LMV,V7);
# 3129 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move.4l (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<4) + R(R_Src1);
   bits<128> mem_data = Mem(eff_mem_add,16);
   D(Res4) = signExtend( mem_data(31,0), 40);
   D(Res3) = signExtend( mem_data(63,32), 40);
   D(Res2) = signExtend( mem_data(95,64), 40);
   D(Res) = signExtend( mem_data(127,96), 40);
};

}

define (instr=MOVE_4L__Rnps15__Ra_Rb_Rc_Rd_family)
{
  fields = (OPCD,R_Src1,imms,R_Res,R_Res2,R_Res3,R_Res4);
   blk = lsu;
   define (instr=MOVE_4L__Rnps15__Ra_Rb_Rc_Rd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4L__Rnps15__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four long words from memory to an address register quad""";
attrs = (LMV,V7);
# 3152 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4L__Rnps15__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
      syntax = ( "move.4l (%f+%f),%f",Rn,s15,Rabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<4) + R(R_Src1);
   bits<128> mem_data = Mem(eff_mem_add,16);
   R(R_Res4) = mem_data(31,0);
   R(R_Res3) = mem_data(63,32);
   R(R_Res2) = mem_data(95,64);
   R(R_Res) = mem_data(127,96);
};

}

define (instr=MOVE_4W_Da_Db_Dc_Dd__Rnps15__family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_4W_Da_Db_Dc_Dd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Da_Db_Dc_Dd__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four  words one from each of a data register quad to memory""";
attrs = (LMV,V7);
# 3175 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W_Da_Db_Dc_Dd__Rnps15__family(OPCD(OPCD),Src1(Dabcd.Da),Src2(Dabcd.Db),Src3(Dabcd.Dc),Src4(Dabcd.Dd),R_Src1(Rn),imms(s15));
      syntax = ( "move.4w %f,(%f+%f)",Dabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   Mem(eff_mem_add,8) = concat(D(Src1)(15,0),D(Src2)(15,0),D(Src3)(15,0),D(Src4)(15,0));
};

}

define (instr=MOVE_4W_Ra_Rb_Rc_Rd__EA__family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Src3,R_Src4,R_Src5,R_Src6);
   blk = lsu;
   doc_title = "move.4w Ra:Rb:Rc:Rd,EA";

   define (instr=MOVE_4W_Ra_Rb_Rc_Rd__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Ra_Rb_Rc_Rd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 3196 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W_Ra_Rb_Rc_Rd__EA__family(OPCD(OPCD),R_Src3(Rabcd.Ra),R_Src4(Rabcd.Rb),R_Src5(Rabcd.Rc),R_Src6(Rabcd.Rd),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.4w %f,(%f)",Rabcd,Rn);
}
define (instr=MOVE_4W_Ra_Rb_Rc_Rd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Ra_Rb_Rc_Rd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 3202 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W_Ra_Rb_Rc_Rd__EA__family(OPCD(OPCD),R_Src3(Rabcd.Ra),R_Src4(Rabcd.Rb),R_Src5(Rabcd.Rc),R_Src6(Rabcd.Rd),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.4w %f,(%f)%f",Rabcd,Rn,PM);
}
define (instr=MOVE_4W_Ra_Rb_Rc_Rd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Ra_Rb_Rc_Rd__RnpRk_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 3208 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W_Ra_Rb_Rc_Rd__EA__family(OPCD(OPCD),R_Src3(Rabcd.Ra),R_Src4(Rabcd.Rb),R_Src5(Rabcd.Rc),R_Src6(Rabcd.Rd),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.4w %f,(%f+%f)",Rabcd,Rn,Rk);
}
define (instr=MOVE_4W_Ra_Rb_Rc_Rd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Ra_Rb_Rc_Rd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 3214 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W_Ra_Rb_Rc_Rd__EA__family(OPCD(OPCD),R_Src3(Rabcd.Ra),R_Src4(Rabcd.Rb),R_Src5(Rabcd.Rc),R_Src6(Rabcd.Rd),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.4w %f,(%f)+%f",Rabcd,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8) = concat(R(R_Src3)(15,0),R(R_Src4)(15,0),R(R_Src5)(15,0),R(R_Src6)(15,0));
};

}

define (instr=MOVE_4W_Ra_Rb_Rc_Rd__Rnps15__family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Src3,R_Src4,R_Src5,imms);
   blk = lsu;
   define (instr=MOVE_4W_Ra_Rb_Rc_Rd__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Ra_Rb_Rc_Rd__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four  words one from each of an address register quad to memory""";
attrs = (LMV,V7);
# 3232 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W_Ra_Rb_Rc_Rd__Rnps15__family(OPCD(OPCD),R_Src2(Rabcd.Ra),R_Src3(Rabcd.Rb),R_Src4(Rabcd.Rc),R_Src5(Rabcd.Rd),R_Src1(Rn),imms(s15));
      syntax = ( "move.4w %f,(%f+%f)",Rabcd,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   Mem(eff_mem_add,8) = concat(R(R_Src2)(15,0),R(R_Src3)(15,0),R(R_Src4)(15,0),R(R_Src5)(15,0));

};

}

define (instr=MOVE_4W__EA__Ra_Rb_Rc_Rd_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,R_Res,R_Res2,R_Res3,R_Res4);
   blk = lsu;
   doc_title = "move.4w EA,Ra:Rb:Rc:Rd";

   define (instr=MOVE_4W__Rn__Ra_Rb_Rc_Rd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__Rn__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four words from memory to an address register quad""";
attrs = (LMV,V7);
# 3254 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
      syntax = ( "move.4w (%f),%f",Rn,Rabcd);
}
define (instr=MOVE_4W__Rn_PM_Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__Rn_PM_Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four words from memory to an address register quad""";
attrs = (LMV,V7);
# 3260 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "move.4w (%f)%f,%f",Rn,PM,Rabcd);
}
define (instr=MOVE_4W__RnpRk__Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__RnpRk__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four words from memory to an address register quad""";
attrs = (LMV,V7);
# 3266 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "move.4w (%f+%f),%f",Rn,Rk,Rabcd);
}
define (instr=MOVE_4W__Rn_pRk_Ra_Rb_Rc_Rd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__Rn_pRk_Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four words from memory to an address register quad""";
attrs = (LMV,V7);
# 3272 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W__EA__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
  syntax = ( "move.4w (%f)+%f,%f",Rn,Rk,Rabcd);
}

action=
{
   bits<64> mem_data = Mem( EAtable(MMM,R_Src1,R_Src2,3,R_Src2),8);
   R(R_Res4) = signExtend( mem_data(15,0), 32);
   R(R_Res3) = signExtend( mem_data(31,16), 32);
   R(R_Res2) = signExtend( mem_data(47,32), 32);
   R(R_Res) = signExtend( mem_data(63,48), 32);

};

}

define (instr=MOVE_4W__Rnps15__Da_Db_Dc_Dd_family)
{
   fields = (OPCD,R_Src1,imms,Res,Res2,Res3,Res4);
   blk = lsu;
   define (instr=MOVE_4W__Rnps15__Da_Db_Dc_Dd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__Rnps15__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four words from memory to a data register quad""";
attrs = (LMV,V7);
# 3295 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W__Rnps15__Da_Db_Dc_Dd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Dabcd.Da),Res2(Dabcd.Db),Res3(Dabcd.Dc),Res4(Dabcd.Dd));
      syntax = ( "move.4w (%f+%f),%f",Rn,s15,Dabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   D(Res4) = signExtend( mem_data(15,0), 40);
   D(Res3) = signExtend( mem_data(31,16), 40);
   D(Res2) = signExtend( mem_data(47,32), 40);
   D(Res) = signExtend( mem_data(63,48), 40);

};

}

define (instr=MOVE_4W__Rnps15__Ra_Rb_Rc_Rd_family)
{
  fields = (OPCD,R_Src1,imms,R_Res,R_Res2,R_Res3,R_Res4);
   blk = lsu;
   define (instr=MOVE_4W__Rnps15__Ra_Rb_Rc_Rd)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__Rnps15__Ra_Rb_Rc_Rd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rabcd(0)),
 (bits(17),Rabcd(1)),
 (bits(18),Rabcd(2)),
 (bits(19),Rabcd(3)),
 (bits(20),Rabcd(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move four words from memory to an address register quad""";
attrs = (LMV,V7);
# 3319 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_4W__Rnps15__Ra_Rb_Rc_Rd_family(OPCD(OPCD),R_Src1(Rn),imms(s15),R_Res(Rabcd.Ra),R_Res2(Rabcd.Rb),R_Res3(Rabcd.Rc),R_Res4(Rabcd.Rd));
      syntax = ( "move.4w (%f+%f),%f",Rn,s15,Rabcd);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   bits<64> mem_data = Mem(eff_mem_add,8);
   R(R_Res4) = signExtend( mem_data(15,0), 32);
   R(R_Res3) = signExtend( mem_data(31,16), 32);
   R(R_Res2) = signExtend( mem_data(47,32), 32);
   R(R_Res) = signExtend( mem_data(63,48), 32);

};

}

define (instr=MOVE_BF_Da__EA__family)
{
  fields = (OPCD,MMM,Src1,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.bf Da,EA";

   define (instr=MOVE_BF_Da__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from a data register to memory""";
attrs = (LMV,V7);
# 3345 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.bf %f,(%f)",Da,Rn);
}
define (instr=MOVE_BF_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from a data register to memory""";
attrs = (LMV,V7);
# 3351 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.bf %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVE_BF_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from a data register to memory""";
attrs = (LMV,V7);
# 3357 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.bf %f,(%f+%f)",Da,Rn,Rk);
}
define (instr=MOVE_BF_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from a data register to memory""";
attrs = (LMV,V7);
# 3363 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.bf %f,(%f)+%f",Da,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,0,R_Src2),1) = D(Src1).HH;

};

}

define (instr=MOVE_BF_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_BF_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional byte from a data register to memory""";
attrs = (LMV,V7);
# 3382 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "move.bf %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms) + R(R_Src1);
   Mem(eff_mem_add,1) = D(Src1).HH;
};

}

define (instr=MOVE_BF_Da__SPmu6__family)
{
  fields = (OPCD,Src1,immu);
   blk = lsu;
   define (instr=MOVE_BF_Da__SPmu6_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF_Da__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from a data register to memory""";
attrs = (LMV,V7);
# 3401 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF_Da__SPmu6__family(OPCD(OPCD),Src1(Da),immu(u6));
      syntax = ( "move.bf %f,(SP-%f)",Da,u6);
   }

action=
{
   bits<32> eff_mem_add = SP - (immu);
   Mem(eff_mem_add,1) = D(Src1).HH;

};

}

define (instr=MOVE_BF_Da__SPps15__family)
{
  fields = (OPCD,Src1,imms);
   blk = lsu;
   define (instr=MOVE_BF_Da__SPps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF_Da__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional byte from a data register to memory""";
attrs = (LMV,V7);
# 3421 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF_Da__SPps15__family(OPCD(OPCD),Src1(Da),imms(s15));
      syntax = ( "move.bf %f,(SP+%f)",Da,s15);
   }

action=
{
   bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
   Mem(eff_mem_add,1) = D(Src1).HH;
};

}

define (instr=MOVE_BF__EA__Da_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res);
   blk = lsu;
   doc_title = "move.bf EA,Da";

   define (instr=MOVE_BF__Rn__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from memory to a data register""";
attrs = (LMV,V7);
# 3442 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Da));
      syntax = ( "move.bf (%f),%f",Rn,Da);
}
define (instr=MOVE_BF__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from memory to a data register""";
attrs = (LMV,V7);
# 3448 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Da));
  syntax = ( "move.bf (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE_BF__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from memory to a data register""";
attrs = (LMV,V7);
# 3454 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Da));
  syntax = ( "move.bf (%f+%f),%f",Rn,Rk,Da);
}
define (instr=MOVE_BF__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to a data register""";
attrs = (LMV,V7);
# 3460 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Da));
  syntax = ( "move.bf (%f)+%f,%f",Rn,Rk,Da);
}

action=
{
   D(Res) = signExtend(concat(Mem(EAtable(MMM,R_Src1,R_Src2,0,R_Src2),1),zero(24)),40);
};

}

define (instr=MOVE_BF__Rnps15__Da_family)
{
  fields = (OPCD,R_Src1,imms,Res);
   blk = lsu;
   define (instr=MOVE_BF__Rnps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional byte from memory to a data register""";
attrs = (LMV,V7);
# 3478 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF__Rnps15__Da_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Da));
      syntax = ( "move.bf (%f+%f),%f",Rn,s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (imms) + R(R_Src1);
   D(Res) = signExtend(concat(Mem(eff_mem_add,1),zero(24)),40);
};

}

define (instr=MOVE_BF__SPmu6__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVE_BF__SPmu6__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from memory to a data register""";
attrs = (LMV,V7);
# 3497 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF__SPmu6__Da_family(OPCD(OPCD),immu(u6),Res(Da));
      syntax = ( "move.bf (SP-%f),%f",u6,Da);
   }

action=
{
   bits<32> eff_mem_add = SP - (immu);
   D(Res) = signExtend(concat(Mem(eff_mem_add,1),zero(24)),40);
};

}

define (instr=MOVE_BF__SPps15__Da_family)
{
  fields = (OPCD,imms,Res);
   blk = lsu;
   define (instr=MOVE_BF__SPps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_BF__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional byte from memory to a data register""";
attrs = (LMV,V7);
# 3516 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_BF__SPps15__Da_family(OPCD(OPCD),imms(s15),Res(Da));
      syntax = ( "move.bf (SP+%f),%f",s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
   D(Res) = signExtend(concat(Mem(eff_mem_add,1),zero(24)),40);

};

}

define (instr=MOVE_B_Da__SPmu6__family)
{
  fields = (OPCD,Src1,immu);
   blk = lsu;
   define (instr=MOVE_B_Da__SPmu6_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Da__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from a data register to memory""";
attrs = (LMV,V7);
# 3536 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_B_Da__SPmu6__family(OPCD(OPCD),Src1(Da),immu(u6));
      syntax = ( "move.b %f,(SP-%f)",Da,u6);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   Mem(eff_mem_add,1) = D(Src1).LL;

};

}

define (instr=MOVE_B_Ra__SPmu6__family)
{
  fields = (OPCD,R_Src1,immu);
   blk = lsu;
   define (instr=MOVE_B_Ra__SPmu6_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Ra__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from an address register to memory""";
attrs = (LMV,V7);
# 3556 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_B_Ra__SPmu6__family(OPCD(OPCD),R_Src1(Ra),immu(u6));
      syntax = ( "move.b %f,(SP-%f)",Ra,u6);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   Mem(eff_mem_add,1) = R(R_Src1)(7,0);
};

}

define (instr=MOVE_B__SPmu6__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVE_B__SPmu6__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to a data register""";
attrs = (LMV,V7);
# 3575 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_B__SPmu6__Da_family(OPCD(OPCD),immu(u6),Res(Da));
      syntax = ( "move.b (SP-%f),%f",u6,Da);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   D(Res) = signExtend(Mem(eff_mem_add,1),40);
};

}

define (instr=MOVE_B__SPmu6__Ra_family)
{
  fields = (OPCD,immu,R_Res);
   blk = lsu;
   define (instr=MOVE_B__SPmu6__Ra)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__SPmu6__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to an address register""";
attrs = (LMV,V7);
# 3594 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_B__SPmu6__Ra_family(OPCD(OPCD),immu(u6),R_Res(Ra));
      syntax = ( "move.b (SP-%f),%f",u6,Ra);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   R(R_Res) = signExtend(Mem(eff_mem_add,1),40);

};

}

define (instr=MOVE_F_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_F_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional word from a data register to memory""";
attrs = (LMV,V7);
# 3614 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_F_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "move.f %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms) + R(R_Src1);
   Mem(eff_mem_add,2) = D(Src1).H;

};

}

define (instr=MOVE_F_Da__SPmu6__family)
{
  fields = (OPCD,Src1,immu);
   blk = lsu;
   define (instr=MOVE_F_Da__SPmu6_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F_Da__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from a data register to memory""";
attrs = (LMV,V7);
# 3634 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_F_Da__SPmu6__family(OPCD(OPCD),Src1(Da),immu(u6));
      syntax = ( "move.f %f,(SP-%f)",Da,u6);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   Mem(eff_mem_add,2) = D(Src1).H;
};

}

define (instr=MOVE_F_Da__SPps15__family)
{
  fields = (OPCD,Src1,imms);
   blk = lsu;
   define (instr=MOVE_F_Da__SPps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F_Da__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional word from a data register to memory""";
attrs = (LMV,V7);
# 3653 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_F_Da__SPps15__family(OPCD(OPCD),Src1(Da),imms(s15));
      syntax = ( "move.f %f,(SP+%f)",Da,s15);
   }

action=
{
   bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
   Mem(eff_mem_add,2) = D(Src1).H;
};

}

define (instr=MOVE_F_Da__a32__family)
{
  fields = (OPCD,Src1,immu);
   blk = lsu;
   define (instr=MOVE_F_Da__a32_)
   {

      alias = MOVE_F_Da__a32__family(OPCD(OPCD),Src1(Da),immu(a32));
      syntax = ( "move.f %f,(%f)",Da,a32);
   }

action=
{
   Mem(immu,2) = D(Src1).H;

};
}

define (instr=MOVE_F__SPmu6__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVE_F__SPmu6__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from memory to a data register""";
attrs = (LMV,V7);
# 3690 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_F__SPmu6__Da_family(OPCD(OPCD),immu(u6),Res(Da));
      syntax = ( "move.f (SP-%f),%f",u6,Da);
   }

action=
{
   bits<32> eff_mem_add = SP - (immu);
   D(Res) = signExtend(concat(Mem(eff_mem_add,2),zero(16)),40);

};

}

define (instr=MOVE_W__S15__Rnps15__family)
{
  fields = (OPCD,imms,R_Src1,imms2);
   blk = lsu;
   define (instr=MOVE_W__S15__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__S15__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),s15_t7(0)),
 (bits(8),s15_t7(1)),
 (bits(9),s15_t7(2)),
 (bits(10),s15_t7(3)),
 (bits(11),s15_t7(4)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),s15_t7(5)),
 (bits(17),s15_t7(6)),
 (bits(18),s15_t7(7)),
 (bits(19),s15_t7(8)),
 (bits(20),s15_t7(9)),
 (bits(21),s15_t7(10)),
 (bits(22),s15_t7(11)),
 (bits(23),s15_t7(12)),
 (bits(24),s15_t7(13)),
 (bits(25),s15_t7(14)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),S15(0)),
 (bits(33),S15(1)),
 (bits(34),S15(2)),
 (bits(35),S15(3)),
 (bits(36),S15(4)),
 (bits(37),S15(5)),
 (bits(38),S15(6)),
 (bits(39),S15(7)),
 (bits(40),S15(8)),
 (bits(41),S15(9)),
 (bits(42),S15(10)),
 (bits(43),S15(11)),
 (bits(44),S15(12)),
 (bits(45),S15(13)),
 (bits(46),S15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an immediate value to the stack memory""";
attrs = (LMV,V7);
# 3710 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_W__S15__Rnps15__family(OPCD(OPCD),imms2(S15),R_Src1(Rn),imms(s15_t7));
      syntax = ( "move.w #%f,(%f+%f)",S15,Rn,s15_t7);
   }

action=
{
   bits<32> eff_mem_add = (imms) + R(R_Src1);
   Mem(eff_mem_add,2) = imms2(15,0);
};

}

define (instr=MOVE_X_Da__EA__family)
{
  fields = (OPCD,MMM,Src1,R_Src1, R_Src2);
   blk = lsu;
   doc_title = "move.x Da,EA";

   define (instr=MOVE_X_Da__Rn_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from a data register to memory""";
attrs = (LMV,V7);
# 3731 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(8),MMM(2));
      syntax = ( "move.x %f,(%f)",Da,Rn);
}
define (instr=MOVE_X_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from a data register to memory""";
attrs = (LMV,V7);
# 3737 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(8),MMM(PM));
  syntax = ( "move.x %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVE_X_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from a data register to memory""";
attrs = (LMV,V7);
# 3743 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(Rk),MMM(0));
  syntax = ( "move.x %f,(%f+%f)",Da,Rn,Rk);
}
define (instr=MOVE_X_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from a data register to memory""";
attrs = (LMV,V7);
# 3749 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X_Da__EA__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),R_Src2(Rk),MMM(4));
  syntax = ( "move.x %f,(%f)+%f",Da,Rn,Rk);
}

action=
{
   Mem(EAtable(MMM,R_Src1,R_Src2,3,R_Src2),5) = D(Src1);
};

}

define (instr=MOVE_X_Da__Rnps15__family)
{
  fields = (OPCD,Src1,R_Src1,imms);
   blk = lsu;
   define (instr=MOVE_X_Da__Rnps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 40-bits from a data register to memory""";
attrs = (LMV,V7);
# 3767 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X_Da__Rnps15__family(OPCD(OPCD),Src1(Da),R_Src1(Rn),imms(s15));
      syntax = ( "move.x %f,(%f+%f)",Da,Rn,s15);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   Mem(eff_mem_add,5) = D(Src1);

};

}

define (instr=MOVE_X_Da__SPmu6__family)
{
  fields = (OPCD,Src1,immu);
   blk = lsu;
   define (instr=MOVE_X_Da__SPmu6_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X_Da__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from a data register to memory""";
attrs = (LMV,V7);
# 3787 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X_Da__SPmu6__family(OPCD(OPCD),Src1(Da),immu(u6));
      syntax = ( "move.x %f,(SP-%f)",Da,u6);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   Mem(eff_mem_add,5) = D(Src1);

};

}

define (instr=MOVE_X_Da__SPps15__family)
{
  fields = (OPCD,Src1,imms);
   blk = lsu;
   define (instr=MOVE_X_Da__SPps15_)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X_Da__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 40-bits from a data register to memory""";
attrs = (LMV,V7);
# 3807 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X_Da__SPps15__family(OPCD(OPCD),Src1(Da),imms(s15));
      syntax = ( "move.x %f,(SP+%f)",Da,s15);
   }

action=
{
   bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
   Mem(eff_mem_add,5) = D(Src1);

};

}

define (instr=MOVE_X_Da__a32__family)
{
  fields = (OPCD,Src1,immu);
   blk = lsu;
   define (instr=MOVE_X_Da__a32_)
   {

      alias = MOVE_X_Da__a32__family(OPCD(OPCD),Src1(Da),immu(a32));
      syntax = ( "move.x %f,(%f)",Da,a32);
   }

action=
{
   Mem(immu,5) = D(Src1);
};

}

define (instr=MOVE_X__EA__Da_family)
{
  fields = (OPCD,MMM,R_Src1, R_Src2,Res);
   blk = lsu;
   doc_title = "move.x EA,Da";

   define (instr=MOVE_X__Rn__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from memory to a data register""";
attrs = (LMV,V7);
# 3847 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(2),Res(Da));
      syntax = ( "move.x (%f),%f",Rn,Da);
}
define (instr=MOVE_X__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from memory to a data register""";
attrs = (LMV,V7);
# 3853 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(8),MMM(PM),Res(Da));
  syntax = ( "move.x (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE_X__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from memory to a data register""";
attrs = (LMV,V7);
# 3859 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(0),Res(Da));
  syntax = ( "move.x (%f+%f),%f",Rn,Rk,Da);
}
define (instr=MOVE_X__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from memory to a data register""";
attrs = (LMV,V7);
# 3865 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X__EA__Da_family(OPCD(OPCD),R_Src1(Rn),R_Src2(Rk),MMM(4),Res(Da));
  syntax = ( "move.x (%f)+%f,%f",Rn,Rk,Da);
}

action=
{
   D(Res) = Mem(EAtable(MMM,R_Src1,R_Src2,3,R_Src2),5);
};

}

define (instr=MOVE_X__Rnps15__Da_family)
{
  fields = (OPCD,R_Src1,imms,Res);
   blk = lsu;
   define (instr=MOVE_X__Rnps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 40-bits from memory to a data register""";
attrs = (LMV,V7);
# 3883 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X__Rnps15__Da_family(OPCD(OPCD),R_Src1(Rn),imms(s15),Res(Da));
      syntax = ( "move.x (%f+%f),%f",Rn,s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (imms<<3) + R(R_Src1);
   D(Res) = Mem(eff_mem_add,5);
};

}

define (instr=MOVE_X__SPmu6__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVE_X__SPmu6__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 40-bits from memory to a data register""";
attrs = (LMV,V7);
# 3902 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X__SPmu6__Da_family(OPCD(OPCD),immu(u6),Res(Da));
      syntax = ( "move.x (SP-%f),%f",u6,Da);
   }

action=
{
   bits<32> eff_mem_add = SP - immu;
   D(Res) = Mem(eff_mem_add,5);

};

}

define (instr=MOVE_X__SPps15__Da_family)
{
  fields = (OPCD,imms,Res);
   blk = lsu;
   define (instr=MOVE_X__SPps15__Da)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_X__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 40-bits from memory to a data register""";
attrs = (LMV,V7);
# 3922 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
      alias = MOVE_X__SPps15__Da_family(OPCD(OPCD),imms(s15),Res(Da));
      syntax = ( "move.x (SP+%f),%f",s15,Da);
   }

action=
{
   bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
   D(Res) = Mem(eff_mem_add,5);
};

}

define (instr=MOVE_X__a32__Da_family)
{
  fields = (OPCD,immu,Res);
   blk = lsu;
   define (instr=MOVE_X__a32__Da)
   {

      alias = MOVE_X__a32__Da_family(OPCD(OPCD),immu(a32),Res(Da));
      syntax = ( "move.x (%f),%f",a32,Da);
   }

action=
{
   D(Res) = Mem(immu,5);
};

}


define (instr=MOVE_L_Ra_CTRL_family)
{

  fields = (OPCD, CTRL, R_Src1);
   blk = lsu;

define (instr=MOVE_L_Ra_CTRL)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra_CTRL.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an R register to a control register""";
attrs = (LMREG,V7);
# 3962 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
  alias = MOVE_L_Ra_CTRL_family(OPCD(OPCD), CTRL(CTRL), R_Src1(Ra));
  syntax = ( "move.l %f,%f",Ra,CTRL);
}

action = {
  CtrlTable(CTRL) = R(R_Src1);
   };

}


define (instr=MOVE_L_CTRL_Rn_family)
{

  fields = (OPCD, CTRL, R_Res);
   blk = lsu;

define (instr=MOVE_L_CTRL_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_CTRL_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),CTRL(0)),
 (bits(27),CTRL(1)),
 (bits(28),CTRL(2)),
 (bits(29),CTRL(3)),
 (bits(30),CTRL(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a control register to an R register""";
attrs = (LMREG,V7);
# 3982 "/vobs/vb_dp_arch/ADLsim/sc3900/lsu_new.adl" 2
  alias = MOVE_L_CTRL_Rn_family(OPCD(OPCD), CTRL(CTRL), R_Res(Rn));
  syntax = ( "move.l %f,%f",CTRL,Rn);
}

action = {
  R(R_Res) = CtrlTable(CTRL);
   };

}
# 57 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 1
define (instr=JMPD_Rn_family)
{

  fields = (OPCD, R_Src1);




  blk = pcu;




define (instr=JMPD_Rn)
{

  alias = JMPD_Rn_family(OPCD(OPCD), R_Src1(RRR));
}

   action =
   {




    DSPC = R(R_Src1);
    Fetch = Fetch::DelaySlot;
    CofValid = CofValid::True;
    CofTaken = CofTaken::True;
    CofNonCond = CofNonCond::True;
    NoBtb = NoBtb::True;
    DelayedCof = DelayedCof::True;
   };
}

define (instr=JMPD_label_family)
{

  fields = (OPCD, a32_label);




  blk = pcu;




define (instr=JMPD_label)
{

  alias = JMPD_label_family(OPCD(OPCD), a32_label(a32_label));
}

   action =
   {




      DSPC = a32_label;
      Fetch = Fetch::DelaySlot;
      CofValid = CofValid::True;
      CofTaken = CofTaken::True;
      CofNonCond = CofNonCond::True;
      DelayedCof = DelayedCof::True;
   };

}


define (instr=JFD_Rn_family)
{

  fields = (OPCD, R_Src1);




  blk = pcu;




define (instr=JFD_Rn)
{

  alias = JFD_Rn_family(OPCD(OPCD), R_Src1(RRR));
}

   action =
   {




    NoBtb = NoBtb::True;
    CofValid = CofValid::True;
    CofCond = CofCond::True;
    DelayedCof = DelayedCof::True;


    if (SR.T==0)
    {
       DSPC = R(R_Src1);
       CofTaken = CofTaken::True;
       Fetch = Fetch::DelaySlot;
    }
   };
}

define (instr=JFD_label_family)
{

  fields = (OPCD, a32_label);





  blk = pcu;




define (instr=JFD_label)
{

  alias = JFD_label_family(OPCD(OPCD), a32_label(a32_label));
}

   action = {





      CofValid = CofValid::True;
      CofCond = CofCond::True;
      DelayedCof = DelayedCof::True;

      if (SR.T==0)
      {
  CofTaken = CofTaken::True;
  DSPC = a32_label;
  Fetch = Fetch::DelaySlot;
      }
   };

}

define (instr=JMP_Rn_family)
{

  fields = (OPCD, R_Src1);




  blk = pcu;





define (instr=JMP_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/JMP_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfers program execution to the absolute address specified in the address register""";
# 169 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2




  alias = JMP_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "jmp %f",Rn);

   }

   action =
   {




    NoBtb = NoBtb::True;
    CofValid = CofValid::True;
    CofNonCond = CofNonCond::True;
    Cof_instr = Cof_instr::Taken;
    NVPC= R(R_Src1);
   };
}




define (instr=JF_Rn_family)
{

  fields = (OPCD, R_Src1);




  blk = pcu;





define (instr=JF_Rn)
{

  alias = JF_Rn_family(OPCD(OPCD), R_Src1(RRR));
}

   action =
   {




    NoBtb = NoBtb::True;
    CofValid = CofValid::True;
    CofCond = CofCond::True;

    if (SR.T==0) {
       NVPC = R(R_Src1);
       Cof_instr = Cof_instr::Taken;
    }
   };

}


define (instr=JF_label_family)
{

  fields = (OPCD, a32_label);




  blk = pcu;





define (instr=JF_label)
{

  alias = JF_label_family(OPCD(OPCD), a32_label(a32_label));
}

   action = {





    CofValid = CofValid::True;
    CofCond = CofCond::True;

      if (SR.T==0) {
  NVPC = a32_label;
  Cof_instr = Cof_instr::Taken;
      }
   };

}



define (instr=JT_Rn_family)
{

  fields = (OPCD, R_Src1);





  blk = pcu;





define (instr=JT_Rn)
{

  alias = JT_Rn_family(OPCD(OPCD), R_Src1(RRR));
}

   action =
   {




    NoBtb = NoBtb::True;
    CofValid = CofValid::True;
    CofCond = CofCond::True;

      if (SR.T==1) {
  NVPC = R(R_Src1);
  Cof_instr = Cof_instr::Taken;
      }
   };

}


define (instr=JT_label_family)
{

  fields = (OPCD, a32_label);




  blk = pcu;





define (instr=JT_label)
{

  alias = JT_label_family(OPCD(OPCD), a32_label(a32_label));
}

   action = {





    CofValid = CofValid::True;
    CofCond = CofCond::True;

      if (SR.T==1) {
  NVPC = a32_label;
  Cof_instr = Cof_instr::Taken;
      }
   };

}




define (instr=JTD_Rn_family)
{

  fields = (OPCD, R_Src1);




  blk = pcu;





define (instr=JTD_Rn)
{

  alias = JTD_Rn_family(OPCD(OPCD), R_Src1(RRR));
}

   action =
   {




    NoBtb = NoBtb::True;
    CofValid = CofValid::True;
    CofCond = CofCond::True;
    DelayedCof = DelayedCof::True;

    if (SR.T==1)
    {
       CofTaken = CofTaken::True;
       DSPC = R(R_Src1);
       Fetch = Fetch::DelaySlot;
    }
   };

}


define (instr=JTD_label_family)
{

   fields = (OPCD, a32_label);




  blk = pcu;





   define (instr=JTD_label)
   {

      alias = JTD_label_family(OPCD(OPCD), a32_label(a32_label));
   }

   action = {





      CofValid = CofValid::True;
      CofCond = CofCond::True;
      DelayedCof = DelayedCof::True;

      if (SR.T==1)
      {
  CofTaken = CofTaken::True;
  DSPC = a32_label;
  Fetch = Fetch::DelaySlot;
      }
   };

}


define (instr=JMP_label_family)
{

  fields = (OPCD, a32_label);





  blk = pcu;




define (instr=JMP_label)
{

  alias = JMP_label_family(OPCD(OPCD), a32_label(a32_label));
}
define (instr=JMP_AbsAdd31)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/JMP_AbsAdd31.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),PRx(0)),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),AbsAdd31(0)),
 (bits(12),PRx(1)),
 (bits(13),PRx(2)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),AbsAdd31(1)),
 (bits(17),AbsAdd31(2)),
 (bits(18),AbsAdd31(3)),
 (bits(19),AbsAdd31(4)),
 (bits(20),AbsAdd31(5)),
 (bits(21),AbsAdd31(6)),
 (bits(22),AbsAdd31(7)),
 (bits(23),AbsAdd31(8)),
 (bits(24),AbsAdd31(9)),
 (bits(25),AbsAdd31(10)),
 (bits(26),AbsAdd31(11)),
 (bits(27),AbsAdd31(12)),
 (bits(28),AbsAdd31(13)),
 (bits(29),AbsAdd31(14)),
 (bits(30),AbsAdd31(15)),
 (bits(31),b0),
 (bits(32),AbsAdd31(16)),
 (bits(33),AbsAdd31(17)),
 (bits(34),AbsAdd31(18)),
 (bits(35),AbsAdd31(19)),
 (bits(36),AbsAdd31(20)),
 (bits(37),AbsAdd31(21)),
 (bits(38),AbsAdd31(22)),
 (bits(39),AbsAdd31(23)),
 (bits(40),AbsAdd31(24)),
 (bits(41),AbsAdd31(25)),
 (bits(42),AbsAdd31(26)),
 (bits(43),AbsAdd31(27)),
 (bits(44),AbsAdd31(28)),
 (bits(45),AbsAdd31(29)),
 (bits(46),AbsAdd31(30)),
 (bits(47),b0),
 (bits(48),reserved),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Transfers program execution to the specified address""";
# 458 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = JMP_label_family(OPCD(OPCD), a32_label(AbsAdd31));
  syntax = ( "jmp %f",AbsAdd31);
}

   action =
   {




      CofValid = CofValid::True;
      CofNonCond = CofNonCond::True;

      if (a32_label == 0xfffffffe) {
       ;
      halt();
      }

      Cof_instr = Cof_instr::Taken;
      NVPC = a32_label;
   };
}

define (instr=BRA___label_family)
{

  fields = (OPCD, a10_label);




  blk = pcu;





define (instr=BRA___label)
{

  alias = BRA___label_family(OPCD(OPCD), a10_label(a10_label));
}

   action =
   {




    CofValid = CofValid::True;
    CofNonCond = CofNonCond::True;
    Cof_instr = Cof_instr::Taken;
    NVPC = (PC_ST_VLES + (a10_label) -PC);
   };

}

define (instr=BRA__label_family)
{

  fields = (OPCD, a20);




  blk = pcu;





define (instr=BRA__label)
{

  alias = BRA__label_family(OPCD(OPCD), a20(a20));
}

define (instr=BRA_RelAdd20)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BRA_RelAdd20.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),PRx(0)),
 (bits(7),RelAdd20(0)),
 (bits(8),RelAdd20(1)),
 (bits(9),RelAdd20(2)),
 (bits(10),RelAdd20(3)),
 (bits(11),RelAdd20(4)),
 (bits(12),PRx(1)),
 (bits(13),PRx(2)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd20(5)),
 (bits(17),RelAdd20(6)),
 (bits(18),RelAdd20(7)),
 (bits(19),RelAdd20(8)),
 (bits(20),RelAdd20(9)),
 (bits(21),RelAdd20(10)),
 (bits(22),RelAdd20(11)),
 (bits(23),RelAdd20(12)),
 (bits(24),RelAdd20(13)),
 (bits(25),RelAdd20(14)),
 (bits(26),RelAdd20(15)),
 (bits(27),RelAdd20(16)),
 (bits(28),RelAdd20(17)),
 (bits(29),RelAdd20(18)),
 (bits(30),RelAdd20(19)),
 (bits(31),b0),
 (bits(32),reserved),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfers program execution to the specified address""";
# 538 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = BRA__label_family(OPCD(OPCD), a20(RelAdd20));
  syntax = ( "bra %f",RelAdd20);
}

   action =
   {







      CofValid = CofValid::True;
      CofNonCond = CofNonCond::True;
      Cof_instr = Cof_instr::Taken;
      NVPC = (PC_ST_VLES + (a20) -PC);
   };

}


define (instr=BRAD___label_family)
{

  fields = (OPCD, a10_label);





  blk = pcu;





define (instr=BRAD___label)
{

  alias = BRAD___label_family(OPCD(OPCD), a10_label(a10_label));
}

   action =
   {




      CofValid = CofValid::True;
      CofNonCond = CofNonCond::True;
      CofTaken = CofTaken::True;
      DSPC = (PC_ST_VLES + (a10_label) -PC);
      Fetch = Fetch::DelaySlot;
      DelayedCof = DelayedCof::True;
   };

}

define (instr=BRAD__label_family)
{

  fields = (OPCD, a20);




  blk = pcu;





define (instr=BRAD__label)
{

  alias = BRAD__label_family(OPCD(OPCD), a20(a20));
}

   action =
   {




      CofValid = CofValid::True;
      CofNonCond = CofNonCond::True;
      CofTaken = CofTaken::True;
      DSPC = (PC_ST_VLES + (a20) -PC);
      Fetch = Fetch::DelaySlot;
      DelayedCof = DelayedCof::True;
   };

}


define (instr=BT___label_family)
{

  fields = (OPCD, a8);




  blk = pcu;





define (instr=BT___label)
{

  alias = BT___label_family(OPCD(OPCD), a8(a8));
}

   action =
   {




      CofValid = CofValid::True;
      CofCond = CofCond::True;
      CofCond = CofCond::True;

      if (SR.T==1) {
  NVPC = (PC_ST_VLES + (a8) -PC);
  Cof_instr = Cof_instr::Taken;
      }
   };

}


define (instr=BT__label_family)
{

  fields = (OPCD,a20);






  blk = pcu;





define (instr=BT__label)
{

  alias = BT__label_family(OPCD(OPCD), a20(a20));
}

   action =
   {





      CofValid = CofValid::True;
      CofCond = CofCond::True;

      if (SR.T==1) {
  NVPC = (PC_ST_VLES + (a20) -PC);
  Cof_instr = Cof_instr::Taken;
      }
   };

}


define (instr=BTD___label_family)
{

  fields = (OPCD, a8);




  blk = pcu;





define (instr=BTD___label)
{

  alias = BTD___label_family(OPCD(OPCD), a8(a8));
}

   action =
   {




      CofValid = CofValid::True;
      CofCond = CofCond::True;
      DelayedCof = DelayedCof::True;

      if (SR.T==1)
      {
  CofTaken = CofTaken::True;
  DSPC = (PC_ST_VLES + (a8) -PC);
  Fetch = Fetch::DelaySlot;
      }
   };

}


define (instr=BTD__label_family)
{

  fields = (OPCD, a20);





  blk = pcu;





define (instr=BTD__label)
{

  alias = BTD__label_family(OPCD(OPCD), a20(a20));
}

   action =
   {




    CofValid = CofValid::True;
    CofCond = CofCond::True;
    DelayedCof = DelayedCof::True;

      if (SR.T==1)
      {
  CofTaken = CofTaken::True;
  DSPC = (PC_ST_VLES + (a20) -PC);
  Fetch = Fetch::DelaySlot;
      }
   };

}


define (instr=BF___label_family)
{

   fields = (OPCD, a8);




  blk = pcu;





   define (instr=BF___label)
   {

      alias = BF___label_family(OPCD(OPCD), a8(a8));
   }

   action =
   {




      CofValid = CofValid::True;
      CofCond = CofCond::True;

      if (SR.T==0) {
  NVPC = (PC_ST_VLES + (a8) -PC);
  Cof_instr = Cof_instr::Taken;
      }
   };

}


define (instr=BF__label_family)
{

  fields = (OPCD, a20);





  blk = pcu;





define (instr=BF__label)
{

  alias = BF__label_family(OPCD(OPCD), a20(a20));
}


   action =
   {




    CofValid = CofValid::True;
    CofCond = CofCond::True;

      if (SR.T==0) {
  NVPC = (PC_ST_VLES + (a20) -PC);
  Cof_instr = Cof_instr::Taken;
      }
   };

}




define (instr=BFD___label_family)
{

  fields = (OPCD, a8);




  blk = pcu;





define (instr=BFD___label)
{

  alias = BFD___label_family(OPCD(OPCD), a8(a8));
}

   action =
   {




    CofValid = CofValid::True;
    CofCond = CofCond::True;
    DelayedCof = DelayedCof::True;

      if (SR.T==0)
      {
  CofTaken = CofTaken::True;
  DSPC = (PC_ST_VLES + (a8) -PC);
  Fetch = Fetch::DelaySlot;
      }
   };

}


define (instr=BFD__label_family)
{

   fields = (OPCD, a20);




  blk = pcu;





   define (instr=BFD__label)
   {

      alias = BFD__label_family(OPCD(OPCD), a20(a20));
   }

   action =
   {




      CofValid = CofValid::True;
      CofCond = CofCond::True;
      DelayedCof = DelayedCof::True;

      if (SR.T==0)
      {
  CofTaken = CofTaken::True;
  DSPC = (PC_ST_VLES + (a20) -PC);
  Fetch = Fetch::DelaySlot;
      }
   };

}



define (instr=BSR___label_family)
{

  fields = (OPCD, a8);







  blk = pcu;



define (instr=BSR___label)
{

  alias = BSR___label_family(OPCD(OPCD), a8(a8));
}



action=
{




    CofValid = CofValid::True;
    SubInstr = SubInstr::regular;
    Cof_instr = Cof_instr::Taken;
    NVPC = (PC_ST_VLES + (a8) -PC);
    set_cof_sp(8);
    fictive_pac_accesses();

};

}


define (instr=BSR__label_family)
{

  fields = (OPCD, a20);







  blk = pcu;



define (instr=BSR__label)
{

  alias = BSR__label_family(OPCD(OPCD), a20(a20));
}

define (instr=BSR_RelAdd20)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BSR_RelAdd20.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),PRx(0)),
 (bits(7),RelAdd20(0)),
 (bits(8),RelAdd20(1)),
 (bits(9),RelAdd20(2)),
 (bits(10),RelAdd20(3)),
 (bits(11),RelAdd20(4)),
 (bits(12),PRx(1)),
 (bits(13),PRx(2)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd20(5)),
 (bits(17),RelAdd20(6)),
 (bits(18),RelAdd20(7)),
 (bits(19),RelAdd20(8)),
 (bits(20),RelAdd20(9)),
 (bits(21),RelAdd20(10)),
 (bits(22),RelAdd20(11)),
 (bits(23),RelAdd20(12)),
 (bits(24),RelAdd20(13)),
 (bits(25),RelAdd20(14)),
 (bits(26),RelAdd20(15)),
 (bits(27),RelAdd20(16)),
 (bits(28),RelAdd20(17)),
 (bits(29),RelAdd20(18)),
 (bits(30),RelAdd20(19)),
 (bits(31),b0),
 (bits(32),reserved),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pushes the SR and the PC of the next VLES onto the stack and transfers program execution to the specified address. Also stores the next PC in the RAS register and makes RAS valid.""";
# 1025 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = BSR__label_family(OPCD(OPCD), a20(RelAdd20));
  syntax = ( "bsr %f",RelAdd20);
}
action=
{




    CofValid = CofValid::True;
    SubInstr = SubInstr::regular;
    Cof_instr = Cof_instr::Taken;
    NVPC = (PC_ST_VLES + (a20) -PC);
    set_cof_sp(8);
    fictive_pac_accesses();

};

}


define (instr=BSRD___label_family)
{

  fields = (OPCD, a8);







  blk = pcu;



define (instr=BSRD___label)
{

  alias = BSRD___label_family(OPCD(OPCD), a8(a8));
}


action=
{




    CofValid = CofValid::True;
    CofTaken = CofTaken::True;
    DelayedCof = DelayedCof::True;
    SubInstr = SubInstr::delayed;
    DSPC = (PC_ST_VLES + (a8) -PC);
    Fetch = Fetch::DelaySlot;
    set_cof_delayed_sp(8);
    fictive_pac_accesses();

};

}


define (instr=BSRD__label_family)
{

  fields = (OPCD, a20);







  blk = pcu;



define (instr=BSRD__label)
{

  alias = BSRD__label_family(OPCD(OPCD), a20(a20));
}


action=
{




    CofValid = CofValid::True;
    CofTaken = CofTaken::True;
    DelayedCof = DelayedCof::True;
    SubInstr = SubInstr::delayed;
    DSPC = (PC_ST_VLES + (a20) -PC);
    Fetch = Fetch::DelaySlot;
    set_cof_delayed_sp(8);
    fictive_pac_accesses();

};

}
define (instr=JSR_label_family)
{

  fields = (OPCD, a32_label);







  blk = pcu;



define (instr=JSR_label)
{

  alias = JSR_label_family(OPCD(OPCD), a32_label(a32_label));
}
define (instr=JSR_AbsAdd31)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/JSR_AbsAdd31.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),PRx(0)),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),AbsAdd31(0)),
 (bits(12),PRx(1)),
 (bits(13),PRx(2)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),AbsAdd31(1)),
 (bits(17),AbsAdd31(2)),
 (bits(18),AbsAdd31(3)),
 (bits(19),AbsAdd31(4)),
 (bits(20),AbsAdd31(5)),
 (bits(21),AbsAdd31(6)),
 (bits(22),AbsAdd31(7)),
 (bits(23),AbsAdd31(8)),
 (bits(24),AbsAdd31(9)),
 (bits(25),AbsAdd31(10)),
 (bits(26),AbsAdd31(11)),
 (bits(27),AbsAdd31(12)),
 (bits(28),AbsAdd31(13)),
 (bits(29),AbsAdd31(14)),
 (bits(30),AbsAdd31(15)),
 (bits(31),b0),
 (bits(32),AbsAdd31(16)),
 (bits(33),AbsAdd31(17)),
 (bits(34),AbsAdd31(18)),
 (bits(35),AbsAdd31(19)),
 (bits(36),AbsAdd31(20)),
 (bits(37),AbsAdd31(21)),
 (bits(38),AbsAdd31(22)),
 (bits(39),AbsAdd31(23)),
 (bits(40),AbsAdd31(24)),
 (bits(41),AbsAdd31(25)),
 (bits(42),AbsAdd31(26)),
 (bits(43),AbsAdd31(27)),
 (bits(44),AbsAdd31(28)),
 (bits(45),AbsAdd31(29)),
 (bits(46),AbsAdd31(30)),
 (bits(47),b0),
 (bits(48),reserved),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Pushes the SR and the PC of the next VLES onto the stack and transfers program execution to the specified address. Also stores the next PC in the RAS register and makes RAS valid.""";
# 1151 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = JSR_label_family(OPCD(OPCD), a32_label(AbsAdd31));
  syntax = ( "jsr %f",AbsAdd31);
}


action=
{




    CofValid = CofValid::True;
    SubInstr = SubInstr::regular;
    Cof_instr = Cof_instr::Taken;
    NVPC = a32_label;
    set_cof_sp(8);
    fictive_pac_accesses();
};

}


define (instr=JSR_Rn_family)
{

  fields = (OPCD, R_Src1);







  blk = pcu;



define (instr=JSR_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/JSR_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pushes the SR and the PC of the next VLES onto the stack and transfers program execution to the absolute address specified in the address register. Also stores the next PC in the RAS register and makes RAS valid.""";
# 1191 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2




  alias = JSR_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "jsr %f",Rn);

   }


action=
{




    NoBtb = NoBtb::True;
    CofValid = CofValid::True;
    SubInstr = SubInstr::regular;
    Cof_instr = Cof_instr::Taken;
    NVPC = R(R_Src1);
    set_cof_sp(8);
    fictive_pac_accesses();

};

}



define (instr=JSRD_label_family)
{

  fields = (OPCD, a32_label);







  blk = pcu;



define (instr=JSRD_label)
{

  alias = JSRD_label_family(OPCD(OPCD), a32_label(a32_label));
}


action=
{




    jsrd_occured = true;
    CofValid = CofValid::True;
    CofTaken = CofTaken::True;
    DelayedCof = DelayedCof::True;
    SubInstr = SubInstr::delayed;
    DSPC = a32_label;
    Fetch = Fetch::DelaySlot;
    set_cof_delayed_sp(8);
    fictive_pac_accesses();

};

}



define (instr=JSRD_Rn_family)
{

  fields = (OPCD, R_Src1);







  blk = pcu;



define (instr=JSRD_Rn)
{

  alias = JSRD_Rn_family(OPCD(OPCD), R_Src1(RRR));
}


action=
{




    jsrd_occured = true;
    NoBtb = NoBtb::True;
    CofValid = CofValid::True;
    CofTaken = CofTaken::True;
    DelayedCof = DelayedCof::True;
    SubInstr = SubInstr::delayed;
    DSPC = R(R_Src1);
    Fetch = Fetch::DelaySlot;
    set_cof_delayed_sp(8);
    fictive_pac_accesses();

};

}



define (instr=RTED_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTED)
{

  alias = RTED_family(OPCD(OPCD));
}

action=
{





    CofValid = CofValid::True;
    RTInstr = RTInstr::True;
    DelayedCof = DelayedCof::True;

    if ( IsUserMode() )
    {
       set_emr_ilpr();
       raiseException(Privelege);
    }
    else
    {
       CofTaken = CofTaken::True;
       bits <64> val;
       Fetch = Fetch::DelaySlot;
       val = mem_pop_rte();
       DSPC = val(63,32);
       SR = val(31,0);
       update_arith_sp(-8);
       clear_emr_nmid();
# 1368 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl"
   }
};

}


define (instr=RTE_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTE)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/RTE.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Returns from an exception routine by popping the PC and SR from the active stack with one 64-bit memory access. Program execution continues at the new address in the PC""";
# 1392 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = RTE_family(OPCD(OPCD));


  syntax = ( "rte");


}


action=
{




    CofValid = CofValid::True;
    RTInstr = RTInstr::True;

    if ( IsUserMode() )
    {
       set_emr_ilpr();
       raiseException(Privelege);
    }
    else
    {
       Cof_instr = Cof_instr::Taken;
       set_SR_PE=enable;
       bits <64> val;
       val = mem_pop_rte();

       NVPC = val(63,32);
       SR = val(31,0);
       update_arith_sp(-8);
       clear_emr_nmid();





    }
};

}



define (instr=RTEKRID_family)
{

  fields = (OPCD);







  blk = pcu;


define (instr=RTEKRID)
{

  alias = RTEKRID_family(OPCD(OPCD));
}

action=
{




    CofValid = CofValid::True;
    RTInstr = RTInstr::True;
    DelayedCof = DelayedCof::True;

    if ( IsUserMode() )
    {
       set_emr_ilpr();
       raiseException(Privelege);
    }
    else
    {
       CofTaken = CofTaken::True;
       set_SR_PE=enable;
       Fetch = Fetch::DelaySlot;
       bits <64> val;
       val = mem_pop_rte();

       DSPC = val(63,32);
       SR = val(31,0);
       update_arith_sp(-8);
       RASV = 0;







   }

};

}


define (instr=RTEKRI_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTEKRI)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/RTEKRI.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Returns from an exception routine by popping the PC and SR from the active stack with one 64-bit memory access. Program execution continues at the new address in the PC - TBD""";
# 1517 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = RTEKRI_family(OPCD(OPCD));

  syntax = ( "rtekri");


}


action=
{





    CofValid = CofValid::True;
    RTInstr = RTInstr::True;

   if ( IsUserMode() )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      Cof_instr = Cof_instr::Taken;
      set_SR_PE=enable;
      bits <64> val;
      val = mem_pop_rte();

      NVPC = val(63,32);
      SR = val(31,0);
      update_arith_sp(-8);
      RASV = 0;







   }
};

}



define (instr=RTERID_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTERID)
{

  alias = RTERID_family(OPCD(OPCD));
}


action=
{




    CofValid = CofValid::True;
    RTInstr = RTInstr::True;
    DelayedCof = DelayedCof::True;


   if ( IsUserMode() )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      CofTaken = CofTaken::True;
      set_SR_PE=enable;
      Fetch = Fetch::DelaySlot;
      bits <64> val;
      val = mem_pop_rte();

      DSPC = val(63,32);
      SR = val(31,0);
      update_arith_sp(-8);
      clear_emr_nmid();
      RASV = 0;
# 1624 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl"
   }
};

}


define (instr=RTERI_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTERI)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/RTERI.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Returns from an exception routine by popping the PC and SR from the active stack with one 64-bit memory access. Program execution continues at the new address in the PC - TBD""";
# 1648 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = RTERI_family(OPCD(OPCD));

  syntax = ( "rteri");


}


action=
{





    CofValid = CofValid::True;
    RTInstr = RTInstr::True;

   if ( IsUserMode() )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
   else
   {
      Cof_instr = Cof_instr::Taken;
      set_SR_PE=enable;
      bits <64> val;
      val = mem_pop_rte();

      NVPC = val(63,32);
      SR = val(31,0);
      update_arith_sp(-8);
      clear_emr_nmid();
      RASV = 0;
   }
};

}



define (instr=RTSD_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTSD)
{

  alias = RTSD_family(OPCD(OPCD));
}


action=
{




    CofValid = CofValid::True;
    CofTaken = CofTaken::True;
    DelayedCof = DelayedCof::True;
    RTInstr = RTInstr::True;
    bool delayed=true;


    if (RASV.signedGT(0)) {
       pop_entry_fromras(delayed);
    }
    else {
       DSPC = Mem(SP-8,4);
    }
    update_arith_sp(-8);
    Fetch = Fetch::DelaySlot;
};

}


define (instr=RTS_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTS)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/RTS.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Returns from a subroutine. If the RAS is valid, restores the PC from the RAS register; otherwise, pops the PC from the active stack in memory with a 32-bit memory access, decrements the stack pointer by 8, and invalidates the RAS. Program execution continues at the new address in the PC.""";
# 1756 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = RTS_family(OPCD(OPCD));

  syntax = ( "rts");


}


action=
{




    CofValid = CofValid::True;
    RTInstr = RTInstr::True;

    Cof_instr = Cof_instr::Taken;

   bool delayed=false;


   if (RASV.signedGT(0)) {
       pop_entry_fromras(delayed);
   } else {
      bits <32> val = mem_pop_rts();
      NVPC = val;
   }
   update_arith_sp(-8);
# 1807 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl"
};

}


define (instr=RTSPS_family)
{
  fields = (OPCD);
  blk = pcu;

define (instr=RTSPS)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/RTSPS.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Returns from a subroutine. If the RAS is valid, restores the PC from the RAS register; otherwise, pops the PC and SR from the active stack in memory with a 64-bit memory access, decrements the stack pointer by 8, and invalidates the RAS. Program execution continues at the new address in the PC.""";
# 1820 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = RTSPS_family(OPCD(OPCD));
  syntax = ( "rtsps");
}


action=
{
   CofValid = CofValid::True;
   RTInstr = RTInstr::True;
   Cof_instr = Cof_instr::Taken;
   bool delayed=false;
   bits <64> val = mem_read_stack_64bits();
   SR = val(31,0);
   if (RASV.signedGT(0)) {
      pop_entry_fromras(delayed);
   } else {
      NVPC = val(63,32);
   }
   update_arith_sp(-8);
};

}



define (instr=RTSTKD_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTSTKD)
{

  alias = RTSTKD_family(OPCD(OPCD));
}


action=
{




    CofValid = CofValid::True;
    CofTaken = CofTaken::True;
    DelayedCof = DelayedCof::True;
    RTInstr = RTInstr::True;
    DSPC = Mem(SP-8,4);
    Fetch = Fetch::DelaySlot;
    update_arith_sp(-8);
    RASV = 0;
    if (SupervisorLevel()) clear_emr_nmid();
};

}


define (instr=RTSTK_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=RTSTK)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/RTSTK.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Forces a return from a subroutine or an exception. Pops the PC from the active stack in memory with a 32-bit memory access, even if the RAS is valid. Decrements the SP by 8 and invalidates the RAS""";
# 1905 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_nonloop_cof.adl" 2
  alias = RTSTK_family(OPCD(OPCD));

  syntax = ( "rtstk");


}


action=
{




    CofValid = CofValid::True;
    RTInstr = RTInstr::True;
    Cof_instr = Cof_instr::Taken;
    NVPC = Mem(SP-8,4);
    update_arith_sp(-8);
    RASV = 0;
    if (SupervisorLevel()) { clear_emr_nmid(); }
};

}





define (instr=TRAP_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=TRAP)
{

  alias = TRAP_family(OPCD(OPCD));
}


action=
{




   CofValid = CofValid::True;
   TrapInstr = TrapInstr::True;
   Cof_instr = Cof_instr::Taken;
   bits<12> imm_trap0 = 0x000;


   NVPC = concat(VBA(31,12), imm_trap0 );
   trap_f();
};

}




define (instr=TRAP1_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=TRAP1)
{

  alias = TRAP1_family(OPCD(OPCD));
}


action=
{




    CofValid = CofValid::True;
    TrapInstr = TrapInstr::True;
    Cof_instr = Cof_instr::Taken;
    bits<12> imm_trap1 = 0x010;
    NVPC = concat(VBA(31,12),imm_trap1);
    trap_f();

};

}


define (instr=TRAP2_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=TRAP2)
{

  alias = TRAP2_family(OPCD(OPCD));
}


action=
{




    CofValid = CofValid::True;
    TrapInstr = TrapInstr::True;
    Cof_instr = Cof_instr::Taken;
    bits<12> imm_trap2 = 0x020;
    NVPC = concat(VBA(31,12),imm_trap2 );
    trap_f();
};

}


define (instr=TRAP3_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=TRAP3)
{

  alias = TRAP3_family(OPCD(OPCD));
}


action=
{




    CofValid = CofValid::True;
    TrapInstr = TrapInstr::True;
    Cof_instr = Cof_instr::Taken;
    bits<12> imm_trap3 = 0x030;
    NVPC = concat(VBA(31,12),imm_trap3 );
    trap_f();
};

}
# 58 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 1
define (instr=NOP_family)
{
  fields = (OPCD);



define (instr = NOP)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NOP.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""AGU NOP""";
attrs = (LMREG,V7);
# 10 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2

   syntax = ( "nop" );

   alias = NOP_family(OPCD(OPCD));
}
      action = {





      };
}


define (instr=WA_DEBUG_family)
{

  fields = (OPCD);
# 38 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl"
define (instr=WA_DEBUG)
{

  alias = WA_DEBUG_family(OPCD(OPCD));
}


action=
{




   if (EMR.SDD==0) {
      DEBUG = 1;
   }
};

}



define (instr=DEBUG)
{
   fields=(
  (bits(0),b1),
  (bits(1),b1),
  (bits(2),b0),
  (bits(3),b0),
  (bits(4),b1),
  (bits(5),b1),
  (bits(6),b1),
  (bits(7),b1),
  (bits(8),b0),
  (bits(9),b0),
  (bits(10),b0),
  (bits(11),b1),
  (bits(12),b0),
  (bits(13),b0),
  (bits(14),SG),
  (bits(15),b1));

   prefix=true;
   attrs = (serial_one_word);
   """Causes the core to enter the Debug processing state""";
   syntax = ( "debug");

   action=
   {
      if (EMR.SDD==0) {
  DEBUG = 1;
      }
   };

}
# 169 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl"
define (instr=DEBUGEV_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=DEBUGEV)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DEBUGEV.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Causes the core to enter the Debug processing state - TBD""";
# 187 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = DEBUGEV_family(OPCD(OPCD));

  syntax = ( "debugev");


}


action=
{




   DEBUG = 1;
};

}


define (instr=MARK_family)
{

  fields = (OPCD);







  blk = pcu;




define (instr=MARK__u3)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MARK__u3.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),u3_t2(0)),
 (bits(29),u3_t2(1)),
 (bits(30),u3_t2(2)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Generate a marking signal to the system. - TBD""";
# 226 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = MARK_family(OPCD(OPCD));

  syntax = ( "mark %f",u3_t2);
}
# 240 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl"
action=
{






};

}


define (instr=ILLEGAL_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=ILLEGAL)
{

  alias = ILLEGAL_family(OPCD(OPCD));

  syntax = ( "illegal");


}


action=
{




   bits<64> eff_mem_add = concat(PC_ST_VLES,SR);
   Mem(ESP,8) = eff_mem_add;


   update_arith_sp(8);

   CofValid = CofValid::True;
   Cof_instr = Cof_instr::Taken;
   NVPC = concat(VBA(31,12),0x080);
   trap_f();
};

}


define (instr=FBTB_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=FBTB)
{

  alias = FBTB_family(OPCD(OPCD));

  syntax = ( "fbtb");


}


action=
{




   if ( IsUserMode() )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
};

}


define (instr=WAIT_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=WAIT)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/WAIT.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Forces clock control unit to disable the core and emulator clocks as well as peripheral clocks (for lowest power consumption), putting the core into the Wait processing state - TBD""";
# 360 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = WAIT_family(OPCD(OPCD));

  syntax = ( "wait");


}


action=
{







};

}


define (instr=STOP_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=STOP)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/STOP.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Forces clock control unit to disable the core and emulator clocks as well as peripheral clocks (for lowest power consumption), putting the core into the Stop processing state""";
# 400 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = STOP_family(OPCD(OPCD));

  syntax = ( "stop");


}


action=
{





   Stop = Stop::True;

};

}


define (instr=SYNCIO_family)
{

  fields = (OPCD);






  blk = pcu;



define (instr=SYNCIO)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SYNCIO.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Place an I/O memory synchronization barrier""";
attrs = (LDCH,V5);
# 439 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = SYNCIO_family(OPCD(OPCD));
}


action=
{






   if ( IsUserMode() )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
};

}


define (instr=SYNCM_family)
{

  fields = (OPCD);







  blk = pcu;



define (instr=SYNCM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SYNCM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Place a local memory synchronization barrier""";
attrs = (LDCH,V5);
# 479 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = SYNCM_family(OPCD(OPCD));
}


action=
{






   if ( IsUserMode() )
   {
      set_emr_ilpr();
      raiseException(Privelege);
   }
};

}



define (instr=CLRIC__u5_family)
{
  fields = (OPCD,immu);
  blk = pcu;
define (instr=CLRIC__u5)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CLRIC__u5.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),u5_t2(0)),
 (bits(27),u5_t2(1)),
 (bits(28),u5_t2(2)),
 (bits(29),u5_t2(3)),
 (bits(30),u5_t2(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Clear internal context (flush the BTB, invalidate RAS, flush internal program buffers, etc) - TBD""";
# 509 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = CLRIC__u5_family(OPCD(OPCD),immu(u5_t2));

  syntax = ( "clric %f",u5_t2);
}

action=
{

};

}

define (instr=DEBUG__u7_family)
{
  fields = (OPCD,immu);
  blk = pcu;
define (instr=DEBUG__u7)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DEBUG__u7.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),b1),
 (bits(33),b1),
 (bits(34),b1),
 (bits(35),b1),
 (bits(36),b1),
 (bits(37),b1),
 (bits(38),b1),
 (bits(39),b1),
 (bits(40),u7(0)),
 (bits(41),u7(1)),
 (bits(42),u7(2)),
 (bits(43),u7(3)),
 (bits(44),u7(4)),
 (bits(45),u7(5)),
 (bits(46),u7(6)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Causes the core to enter the Debug processing state - TBD""";
# 528 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = DEBUG__u7_family(OPCD(OPCD),immu(u7));

  syntax = ( "debug %f",u7);
}

action=
{

};

}

define (instr=INT__u8_Ra__u5_family)
{
  fields = (OPCD,immu,R_Src1,immu2);
  blk = pcu;
define (instr=INT__u8_Ra__u5)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/INT__u8_Ra__u5.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u5_t0(0)),
 (bits(33),u5_t0(1)),
 (bits(34),u5_t0(2)),
 (bits(35),u5_t0(3)),
 (bits(36),u5_t0(4)),
 (bits(37),b1),
 (bits(38),b1),
 (bits(39),u8(0)),
 (bits(40),u8(1)),
 (bits(41),u8(2)),
 (bits(42),u8(3)),
 (bits(43),u8(4)),
 (bits(44),u8(5)),
 (bits(45),u8(6)),
 (bits(46),u8(7)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Creates a precise software interrupt, halting execution and jumping to a code section handling this type of interrupt. - TBD""";
# 547 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_program_control.adl" 2
  alias = INT__u8_Ra__u5_family(OPCD(OPCD),immu(u8),R_Src1(Ra),immu2(u5_t0));

  syntax = ( "int %f,%f,%f",u8,Ra,u5_t0);
}

action=
{
   bits<32> tmp = R(R_Src1);


};

}
# 59 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 1
define (instr=MOVE_2L_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, R_Src1, R_Src2, MMM);



   blk = lsu;
   doc_title = "move.2l Da:Db,EA";

define (instr=MOVE_2L_Da_Db__EA_)
{

  alias = MOVE_2L_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), R_Src1(RRR), R_Src2(8), MMM(MMM));
}
define (instr=MOVE_2L_Da_Db__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two long words one from each of a data register pair to memory""";
attrs = (LMV,V2);
# 19 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.2l %f,(%f)",Dab,Rn);
}
define (instr=MOVE_2L_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two long words one from each of a data register pair to memory""";
attrs = (LMV,V2);
# 25 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.2l %f,(%f)+%f",Dab,Rn,Rk);
}
define (instr=MOVE_2L_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two long words one from each of a data register pair to memory""";
attrs = (LMV,V2);
# 31 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.2l %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVE_2L_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two long words one from each of a data register pair to memory""";
attrs = (LMV,V2);
# 37 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.2l %f,(%f+%f)",Dab,Rn,Rk);
}

   action=
   {




      bits<32> Da = D(Src1)(32 -1,0);
      bits<32> Db = D(Src2)(32 -1,0);
      bits<64> mem_data = concat(Da,Db);
      Mem(EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;
   };

}

define (instr=MOVE_2L__EA__Da_Db_family)
{

  fields = (OPCD, R_Src1, R_Src2, MMM, Res, Res2);



  blk = lsu;
  doc_title = "move.2l EA,Da:Db";


define (instr=MOVE_2L__EA__Da_Db)
{

  alias = MOVE_2L__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=MOVE_2L__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two data registers""";
attrs = (LMV,V2);
# 74 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2l (%f),%f",Rn,Dab);
}
define (instr=MOVE_2L__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two data registers""";
attrs = (LMV,V2);
# 80 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2l (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=MOVE_2L__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two data registers""";
attrs = (LMV,V2);
# 86 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2l (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE_2L__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two data registers""";
attrs = (LMV,V2);
# 92 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2l (%f+%f),%f",Rn,Rk,Dab);
}


 action=
 {




        bits<64> mem_data = Mem( EAtable(MMM,R_Src1,3,R_Src2),8);
  D(Res2) = signExtend( mem_data(31,0), 40);
  D(Res) = signExtend( mem_data(63,32), 40);






 };

}


define (instr=MOVE_2L_Da_Dc__EA__family)
{

  fields = (OPCD, Src1, Src2, R_Src1, R_Src2, MMM);



  blk = lsu;
  doc_title = "move.2l Da:Dc,EA";


define (instr=MOVE_2L_Da_Dc__EA_)
{

  alias = MOVE_2L_Da_Dc__EA__family(OPCD(OPCD), Src1(gg.Da), Src2(gg.Dc), R_Src1(RRR), R_Src2(8), MMM(MMM));
}
define (instr=MOVE_2L_Da_Dc__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Dc__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two long words one from each of a data register pair to memory (d0:d2 etc.)""";
attrs = (LMV,V5);
# 136 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Dc__EA__family(OPCD(OPCD), Src1(Dac.Da), Src2(Dac.Dc), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.2l %f,(%f)",Dac,Rn);
}
define (instr=MOVE_2L_Da_Dc__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Dc__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two long words one from each of a data register pair to memory (d0:d2 etc.)""";
attrs = (LMV,V5);
# 142 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Dc__EA__family(OPCD(OPCD), Src1(Dac.Da), Src2(Dac.Dc), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.2l %f,(%f)+%f",Dac,Rn,Rk);
}
define (instr=MOVE_2L_Da_Dc__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Dc__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two long words one from each of a data register pair to memory (d0:d2 etc.)""";
attrs = (LMV,V5);
# 148 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Dc__EA__family(OPCD(OPCD), Src1(Dac.Da), Src2(Dac.Dc), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.2l %f,(%f)%f",Dac,Rn,PM);
}
define (instr=MOVE_2L_Da_Dc__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Dc__RnpRk_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two long words one from each of a data register pair to memory (d0:d2 etc.)""";
attrs = (LMV,V5);
# 154 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Dc__EA__family(OPCD(OPCD), Src1(Dac.Da), Src2(Dac.Dc), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.2l %f,(%f+%f)",Dac,Rn,Rk);
}

 action=
 {




 bits<32> Da = D(Src1)(32 -1,0);
        bits<32> Dc = D(Src2)(32 -1,0);
 bits<64> mem_data = concat(Da,Dc);
        Mem( EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;
 };

}

define (instr=MOVE_2L__EA__Da_Dc_family)
{

  fields = (OPCD, R_Src1, R_Src2, MMM, Res, Res2);



  blk = lsu;
  doc_title = "move.2l EA,Da:Dc";


define (instr=MOVE_2L__EA__Da_Dc)
{

  alias = MOVE_2L__EA__Da_Dc_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(gg.Da), Res2(gg.Dc));
}
define (instr=MOVE_2L__Rn__Da_Dc)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn__Da_Dc.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two data registers (d0:d2 etc.)""";
attrs = (LMV,V5);
# 191 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L__EA__Da_Dc_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dac.Da), Res2(Dac.Dc));
  syntax = ( "move.2l (%f),%f",Rn,Dac);
}
define (instr=MOVE_2L__Rn_pRk_Da_Dc)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn_pRk_Da_Dc.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two data registers (d0:d2 etc.)""";
attrs = (LMV,V5);
# 197 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L__EA__Da_Dc_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dac.Da), Res2(Dac.Dc));
  syntax = ( "move.2l (%f)+%f,%f",Rn,Rk,Dac);
}
define (instr=MOVE_2L__Rn_PM_Da_Dc)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__Rn_PM_Da_Dc.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two data registers (d0:d2 etc.)""";
attrs = (LMV,V5);
# 203 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L__EA__Da_Dc_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dac.Da), Res2(Dac.Dc));
  syntax = ( "move.2l (%f)%f,%f",Rn,PM,Dac);
}
define (instr=MOVE_2L__RnpRk__Da_Dc)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L__RnpRk__Da_Dc.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dac(0)),
 (bits(17),Dac(1)),
 (bits(18),Dac(2)),
 (bits(19),Dac(3)),
 (bits(20),Dac(4)),
 (bits(21),Dac(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of long words from memory to two data registers (d0:d2 etc.)""";
attrs = (LMV,V5);
# 209 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L__EA__Da_Dc_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dac.Da), Res2(Dac.Dc));
  syntax = ( "move.2l (%f+%f),%f",Rn,Rk,Dac);
}

 action=
 {




 bits<64> mem_data = Mem( EAtable(MMM,R_Src1,3,R_Src2),8);
  D(Res2) = signExtend( mem_data(31,0), 40);
  D(Res) = signExtend( mem_data(63,32), 40);






 };

}

define (instr=MOVE_2L_Da_Db_Dc_Dd_family)
{

  fields = (OPCD, Src1, Src2, Res, Res2);



  blk = lsu;

define (instr=MOVE_2L_Da_Db_Dc_Dd)
{

  alias = MOVE_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), Res(kk.Dc), Res2(kk.Dd));
}
define (instr=MOVE_2L_Da_Db_Dm_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dmn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Dab(0)),
 (bits(26),Dab(1)),
 (bits(27),Dab(2)),
 (bits(28),Dab(3)),
 (bits(29),Dab(4)),
 (bits(30),Dab(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 D registers (2x32) to 2 R registers, independently""";
attrs = (IMREG,V5);
# 249 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), Res(Dmn.Dm), Res2(Dmn.Dn));
  syntax = ( "move.2l %f,%f",Dab,Dmn);
}

 action=
 {




  D(Res) = signExtend( D(Src1)(31,0), 40);
  D(Res2) = signExtend( D(Src2)(31,0), 40);






 };

}


define (instr=MOVE_2F__EA__Da_Db_family)
{

  fields = (OPCD, R_Src1, R_Src2, MMM, Res, Res2);



  blk = lsu;
  doc_title = "move.2f EA,Da:Db";



define (instr=MOVE_2F__EA__Da_Db)
{

  alias = MOVE_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=MOVE_2F__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of fractional words from memory to two data registers""";
attrs = (LMV,V2);
# 292 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2f (%f),%f",Rn,Dab);
}
define (instr=MOVE_2F__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of fractional words from memory to two data registers""";
attrs = (LMV,V2);
# 298 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2f (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=MOVE_2F__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of fractional words from memory to two data registers""";
attrs = (LMV,V2);
# 304 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2f (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE_2F__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2F__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of fractional words from memory to two data registers""";
attrs = (LMV,V2);
# 310 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2f (%f+%f),%f",Rn,Rk,Dab);
}


action=
{




        bits<32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2),4);
 D(Res2) = signExtend( concat(mem_data(15,0), zero(16)), 40);
 D(Res) = signExtend( concat(mem_data(31,16), zero(16)), 40);






};

}


define (instr=MOVE_2W_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, R_Src1, R_Src2, MMM);



  blk = lsu;
  doc_title = "move.2w Da:Db,EA";



define (instr=MOVE_2W_Da_Db__EA_)
{

  alias = MOVE_2W_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), R_Src1(RRR), R_Src2(8), MMM(MMM));
}
define (instr=MOVE_2W_Da_Db__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  words one from each of a data register pair to memory""";
attrs = (LMV,V2);
# 355 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2W_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.2w %f,(%f)",Dab,Rn);
}
define (instr=MOVE_2W_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  words one from each of a data register pair to memory""";
attrs = (LMV,V2);
# 361 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2W_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.2w %f,(%f)+%f",Dab,Rn,Rk);
}
define (instr=MOVE_2W_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  words one from each of a data register pair to memory""";
attrs = (LMV,V2);
# 367 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2W_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.2w %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVE_2W_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  words one from each of a data register pair to memory""";
attrs = (LMV,V2);
# 373 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2W_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.2w %f,(%f+%f)",Dab,Rn,Rk);
}


action=
{




 Mem(EAtable(MMM,R_Src1,2,R_Src2),4) = concat(D(Src1)(15,0), D(Src2)(15,0));
};

}


define (instr=MOVE_2W__EA__Da_Db_family)
{

  fields = (OPCD, R_Src1, R_Src2, MMM, Res, Res2);



  blk = lsu;
  doc_title = "move.2w EA,Da:Db";


define (instr=MOVE_2W__EA__Da_Db)
{

  alias = MOVE_2W__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=MOVE_2W__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of words from memory to two data registers""";
attrs = (LMV,V2);
# 409 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2W__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2w (%f),%f",Rn,Dab);
}
define (instr=MOVE_2W__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of words from memory to two data registers""";
attrs = (LMV,V2);
# 415 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2W__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2w (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=MOVE_2W__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of words from memory to two data registers""";
attrs = (LMV,V2);
# 421 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2W__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2w (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE_2W__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2W__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a pair of words from memory to two data registers""";
attrs = (LMV,V2);
# 427 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2W__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move.2w (%f+%f),%f",Rn,Rk,Dab);
}


  action=
  {




     bits<32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2),4);
     D(Res2) = signExtend( mem_data(15,0), 40);
     D(Res) = signExtend( mem_data(31,16), 40);







  };

}


define (instr=MOVE_4B__EA__Da_Db_Dc_Dd_family)
{

  fields = (OPCD, R_Src1, R_Src2, MMM, Res, Res2, Res3, Res4);



   blk = lsu;
   doc_title = "move.4b EA,Da:Db:Dc:Dd";


define (instr=MOVE_4B__EA__Da_Db_Dc_Dd)
{

  alias = MOVE_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=MOVE_4B__Rn__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from memory to a data register quad""";
attrs = (LMV,V3);
# 472 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4b (%f),%f",Rn,Dabcd);
}
define (instr=MOVE_4B__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from memory to a data register quad""";
attrs = (LMV,V3);
# 478 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4b (%f)+%f,%f",Rn,Rk,Dabcd);
}
define (instr=MOVE_4B__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from memory to a data register quad""";
attrs = (LMV,V3);
# 484 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4b (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVE_4B__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from memory to a data register quad""";
attrs = (LMV,V3);
# 490 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4b (%f+%f),%f",Rn,Rk,Dabcd);
}


   action=
   {




      bits<32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2),4);
      D(Res4) = signExtend( mem_data(7,0), 40);
      D(Res3) = signExtend( mem_data(15,8), 40);
      D(Res2) = signExtend( mem_data(23,16), 40);
      D(Res) = signExtend( mem_data(31,24), 40);
# 518 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
   };

}


define (instr=MOVE_4B_Da_Db_Dc_Dd__EA__family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4, R_Src1, R_Src2, MMM);



   blk = lsu;
   doc_title = "move.4b Da:Db:Dc:Dd,EA";


define (instr=MOVE_4B_Da_Db_Dc_Dd__EA_)
{

  alias = MOVE_4B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd), R_Src1(RRR), R_Src2(8), MMM(MMM));
}
define (instr=MOVE_4B_Da_Db_Dc_Dd__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  bytes, one from each of a data register quad to memory""";
attrs = (LMV,V3);
# 542 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.4b %f,(%f)",Dabcd,Rn);
}
define (instr=MOVE_4B_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  bytes, one from each of a data register quad to memory""";
attrs = (LMV,V3);
# 548 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.4b %f,(%f)+%f",Dabcd,Rn,Rk);
}
define (instr=MOVE_4B_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  bytes, one from each of a data register quad to memory""";
attrs = (LMV,V3);
# 554 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.4b %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVE_4B_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4B_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  bytes, one from each of a data register quad to memory""";
attrs = (LMV,V3);
# 560 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.4b %f,(%f+%f)",Dabcd,Rn,Rk);
}


   action=
   {




      Mem(EAtable(MMM,R_Src1,2,R_Src2),4) = concat( (D(Src1)(7,0)), (D(Src2)(7,0)), (D(Src3)(7,0)), (D(Src4)(7,0)) );
   };

}



define (instr=MOVE_4F__EA__Da_Db_Dc_Dd_family)
{

   fields = (OPCD, R_Src1, R_Src2, MMM, Res, Res2, Res3, Res4);



   blk = lsu;
   doc_title = "move.4f EA,Da:Db:Dc:Dd";



define (instr=MOVE_4F__EA__Da_Db_Dc_Dd)
{

  alias = MOVE_4F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=MOVE_4F__Rn__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional words from memory to a data register quad""";
attrs = (LMV,V2);
# 598 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4f (%f),%f",Rn,Dabcd);
}
define (instr=MOVE_4F__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional words from memory to a data register quad""";
attrs = (LMV,V2);
# 604 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4f (%f)+%f,%f",Rn,Rk,Dabcd);
}
define (instr=MOVE_4F__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional words from memory to a data register quad""";
attrs = (LMV,V2);
# 610 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4f (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVE_4F__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4F__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional words from memory to a data register quad""";
attrs = (LMV,V2);
# 616 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4F__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4f (%f+%f),%f",Rn,Rk,Dabcd);
}


   action=
   {




      bits<64> mem_data = Mem( EAtable(MMM,R_Src1,3,R_Src2),8);
      D(Res4) = signExtend( concat( mem_data(15,0), zero(16)), 40);
      D(Res3) = signExtend( concat( mem_data(31,16), zero(16)), 40);
      D(Res2) = signExtend( concat( mem_data(47,32), zero(16)), 40);
      D(Res) = signExtend( concat( mem_data(63,48), zero(16)), 40);
# 645 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
   };

}


define (instr=MOVE_4W_Da_Db_Dc_Dd__EA__family)
{

   fields = (OPCD, Src1, Src2, Src3, Src4, R_Src1, R_Src2, MMM);



   blk = lsu;
   doc_title = "move.4w Da:Db:Dc:Dd,EA";


define (instr=MOVE_4W_Da_Db_Dc_Dd__EA_)
{

  alias = MOVE_4W_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd), R_Src1(RRR), R_Src2(8), MMM(MMM));
}
define (instr=MOVE_4W_Da_Db_Dc_Dd__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  words one from each of a data register quad to memory""";
attrs = (LMV,V2);
# 669 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4W_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.4w %f,(%f)",Dabcd,Rn);
}
define (instr=MOVE_4W_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  words one from each of a data register quad to memory""";
attrs = (LMV,V2);
# 675 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4W_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.4w %f,(%f)+%f",Dabcd,Rn,Rk);
}
define (instr=MOVE_4W_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  words one from each of a data register quad to memory""";
attrs = (LMV,V2);
# 681 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4W_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.4w %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVE_4W_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four  words one from each of a data register quad to memory""";
attrs = (LMV,V2);
# 687 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4W_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.4w %f,(%f+%f)",Dabcd,Rn,Rk);
}


   action=
   {




      Mem(EAtable(MMM,R_Src1,3,R_Src2),8) = concat( D(Src1)(15,0), D(Src2)(15,0), D(Src3)(15,0), D(Src4)(15,0) );
   };

}


define (instr=MOVE_4W__EA__Da_Db_Dc_Dd_family)
{

   fields = (OPCD, R_Src1, R_Src2, MMM, Res, Res2, Res3, Res4);



   blk = lsu;
   doc_title = "move.4w EA,Da:Db:Dc:Dd";


define (instr=MOVE_4W__EA__Da_Db_Dc_Dd)
{

  alias = MOVE_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=MOVE_4W__Rn__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four words from memory to a data register quad""";
attrs = (LMV,V2);
# 723 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4w (%f),%f",Rn,Dabcd);
}
define (instr=MOVE_4W__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four words from memory to a data register quad""";
attrs = (LMV,V2);
# 729 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4w (%f)+%f,%f",Rn,Rk,Dabcd);
}
define (instr=MOVE_4W__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four words from memory to a data register quad""";
attrs = (LMV,V2);
# 735 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4w (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVE_4W__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_4W__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four words from memory to a data register quad""";
attrs = (LMV,V2);
# 741 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_4W__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move.4w (%f+%f),%f",Rn,Rk,Dabcd);
}


   action=
   {




      bits<64> mem_data = Mem( EAtable(MMM,R_Src1,3,R_Src2),8);
      D(Res4) = signExtend( mem_data(15,0), 40);
      D(Res3) = signExtend( mem_data(31,16), 40);
      D(Res2) = signExtend( mem_data(47,32), 40);
      D(Res) = signExtend( mem_data(63,48), 40);
# 770 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
   };

}




define (instr=MOVE_B__a16__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVE_B__a16__Da)
{

  alias = MOVE_B__a16__Da_family(OPCD(OPCD), immu(u16), Res(JJJ));
}
define (instr=MOVE_B__a32__Da)
{

  alias = MOVE_B__a16__Da_family(OPCD(OPCD), immu(a32), Res(Da));
  syntax = ( "move.b (%f),%f",a32,Da);
}


action=
{




 write_mem_2DTable(immu, Res, 1);
};

}




define (instr=MOVE_B__a16__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVE_B__a16__Rq)
{

  alias = MOVE_B__a16__Rq_family(OPCD(OPCD), immu(u16), R_Res(qqq));
}
define (instr=MOVE_B__a32__Ra)
{

  alias = MOVE_B__a16__Rq_family(OPCD(OPCD), immu(a32), R_Res(Ra));
  syntax = ( "move.b (%f),%f",a32,Ra);
}


action=
{




    write_mem_2RTable(immu, R_Res, 1);

};

}


define (instr=MOVE_B_Da__a16__family)
{

  fields = (OPCD, Src1, immu);



   blk = lsu;


define (instr=MOVE_B_Da__a16_)
{

  alias = MOVE_B_Da__a16__family(OPCD(OPCD), Src1(JJJ), immu(u16));
}


   action=
   {




      write_DTable_2mem(immu, Src1, 1);

   };

}



define (instr=MOVE_B_Rq__a16__family)
{

  fields = (OPCD, R_Src1, immu);



   blk = lsu;


define (instr=MOVE_B_Rq__a16_)
{

  alias = MOVE_B_Rq__a16__family(OPCD(OPCD), R_Src1(qqq), immu(u16));
}


   action=
   {





      write_RTable_2mem(immu, R_Src1, 1);

   };

}



define (instr=MOVE_B_Da__a32__family)
{

  fields = (OPCD, Src1, immu);



   blk = lsu;


define (instr=MOVE_B_Da__a32_)
{





  alias = MOVE_B_Da__a32__family(OPCD(OPCD), Src1(Da), immu(a32));
  syntax = ( "move.b %f,(%f)",Da,a32);

   }


   action=
   {




      write_DTable_2mem(immu, Src1, 1);
};

}



define (instr=MOVE_B_Rq__a32__family)
{

  fields = (OPCD, R_Src1, immu);



   blk = lsu;


define (instr=MOVE_B_Rq__a32_)
{

  alias = MOVE_B_Rq__a32__family(OPCD(OPCD), R_Src1(qqq), immu(a32));
}
define (instr=MOVE_B_Ra__a32_)
{

  alias = MOVE_B_Rq__a32__family(OPCD(OPCD), R_Src1(Ra), immu(a32));
  syntax = ( "move.b %f,(%f)",Ra,a32);
}


   action=
   {




      write_RTable_2mem(immu, R_Src1, 1);

   };

}



define (instr=MOVE_B_Da__Rnps15__family)
{

  fields = (OPCD, Src1, R_Src1, imms);



   blk = lsu;


define (instr=MOVE_B_Da__Rnps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from a data register to memory""";
attrs = (LMV,V2);
# 999 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_B_Da__Rnps15__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), imms(s15));
  syntax = ( "move.b %f,(%f+%f)",Da,Rn,s15);

   }


   action=
   {





      bits<32> eff_mem_add;
      if ((R_Src1&0xf8)==0x0) {
  eff_mem_add = Address_by_mctl2(R_Src1,imms,0,1,imms);
      }
      else {
  eff_mem_add = (imms) + R(R_Src1);
      }
      write_DTable_2mem(eff_mem_add, Src1, 1);

   };

}



define (instr=MOVE_B_Rq__Rnps15__family)
{

  fields = (OPCD, R_Src1, R_Src2, imms);



   blk = lsu;


define (instr=MOVE_B_Rq__Rnps15_)
{

  alias = MOVE_B_Rq__Rnps15__family(OPCD(OPCD), R_Src1(RRR), R_Src2(qqq), imms(s15));
}
define (instr=MOVE_B_Ra__Rnps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Ra__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from an address register to memory""";
attrs = (LMV,V2);
# 1049 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Rq__Rnps15__family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rn), imms(s15));
  syntax = ( "move.b %f,(%f+%f)",Ra,Rn,s15);
}


   action=
   {





      bits<32> eff_mem_add;
      if ((R_Src1&0xf8)==0x0) {
  eff_mem_add = Address_by_mctl2(R_Src1,imms,0,1,imms);
      }
      else {
  eff_mem_add = (imms) + R(R_Src1);
      }
      write_RTable_2mem(eff_mem_add, R_Src2, 1);

   };

}



define (instr=MOVE_B__ea__Da_family)
{

  fields = (OPCD, R_Src1, R_Src2, MM, Res);



   blk = lsu;
   doc_title = "move.b EA,Da";


define (instr=MOVE_B__ea__Da)
{

  alias = MOVE_B__ea__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MM(MM), Res(JJJ));
}
define (instr=MOVE_B__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to a data register""";
attrs = (LMV,V2);
# 1095 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__ea__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MM(3), Res(Da));
  syntax = ( "move.b (%f),%f",Rn,Da);
}
define (instr=MOVE_B__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte from memory to a data register""";
attrs = (LMV,V2);
# 1101 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__ea__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MM(4), Res(Da));
  syntax = ( "move.b (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVE_B__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to a data register""";
attrs = (LMV,V2);
# 1107 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__ea__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MM(~PM), Res(Da));
  syntax = ( "move.b (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE_B__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to a data register""";
attrs = (LMV,V2);
# 1113 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__ea__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MM(2), Res(Da));
  syntax = ( "move.b (%f+%f),%f",Rn,Rk,Da);
}


   action=
   {




      write_mem_2DTable(EAtable( ea_2EA(MM),R_Src1,0,R_Src2), Res, 1);

   };

}



define (instr=MOVE_B__ea__Rq_family)
{

  fields = (OPCD, R_Src1, R_Src2, MM, R_Res);



  blk = lsu;
  doc_title = "move.b EA,Ra";


define (instr=MOVE_B__ea__Rq)
{

  alias = MOVE_B__ea__Rq_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MM(MM), R_Res(qqq));
}
define (instr=MOVE_B__Rn__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__Rn__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to an address register""";
attrs = (LMV,V2);
# 1151 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__ea__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MM(3), R_Res(Ra));
  syntax = ( "move.b (%f),%f",Rn,Ra);
}
define (instr=MOVE_B__Rn_pRk_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__Rn_pRk_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to an address register""";
attrs = (LMV,V2);
# 1157 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__ea__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MM(4), R_Res(Ra));
  syntax = ( "move.b (%f)+%f,%f",Rn,Rk,Ra);
}
define (instr=MOVE_B__Rn_PM_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__Rn_PM_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to an address register""";
attrs = (LMV,V2);
# 1163 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__ea__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MM(~PM), R_Res(Ra));
  syntax = ( "move.b (%f)%f,%f",Rn,PM,Ra);
}
define (instr=MOVE_B__RnpRk__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__RnpRk__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from memory to an address register""";
attrs = (LMV,V2);
# 1169 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__ea__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MM(2), R_Res(Ra));
  syntax = ( "move.b (%f+%f),%f",Rn,Rk,Ra);
}


action=
{




    write_mem_2RTable(EAtable( ea_2EA(MM),R_Src1,0,R_Src2), R_Res, 1);
};

}



define (instr=MOVE_B_Da__ea__family)
{

  fields = (OPCD, Src1, R_Src1, R_Src2, MM);



   blk = lsu;
   doc_title = "move.b Da,EA";



define (instr=MOVE_B_Da__ea_)
{

  alias = MOVE_B_Da__ea__family(OPCD(OPCD), Src1(JJJ), R_Src1(RRR), R_Src2(8), MM(MM));
}
define (instr=MOVE_B_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from a data register to memory""";
attrs = (LMV,V2);
# 1207 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Da__ea__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MM(3));
  syntax = ( "move.b %f,(%f)",Da,Rn);
}
define (instr=MOVE_B_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from a data register to memory""";
attrs = (LMV,V2);
# 1213 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Da__ea__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MM(4));
  syntax = ( "move.b %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVE_B_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from a data register to memory""";
attrs = (LMV,V2);
# 1219 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Da__ea__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MM(~PM));
  syntax = ( "move.b %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVE_B_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from a data register to memory""";
attrs = (LMV,V2);
# 1225 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Da__ea__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MM(2));
  syntax = ( "move.b %f,(%f+%f)",Da,Rn,Rk);
}


   action=
   {




      write_DTable_2mem(EAtable(ea_2EA(MM),R_Src1,0,R_Src2), Src1, 1);

   };

}



define (instr=MOVE_B_Rq__ea__family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Src3, MM);



   blk = lsu;
   doc_title = "move.b Ra,EA";



define (instr=MOVE_B_Rq__ea_)
{

  alias = MOVE_B_Rq__ea__family(OPCD(OPCD), R_Src3(RRR), R_Src1(qqq), R_Src2(8), MM(MM));
}
define (instr=MOVE_B_Ra__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Ra__Rn_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from an address register to memory""";
attrs = (LMV,V2);
# 1264 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Rq__ea__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(8), MM(3));
  syntax = ( "move.b %f,(%f)",Ra,Rn);
}
define (instr=MOVE_B_Ra__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Ra__Rn_pRk.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from an address register to memory""";
attrs = (LMV,V2);
# 1270 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Rq__ea__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(Rk), MM(4));
  syntax = ( "move.b %f,(%f)+%f",Ra,Rn,Rk);
}
define (instr=MOVE_B_Ra__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Ra__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from an address register to memory""";
attrs = (LMV,V2);
# 1276 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Rq__ea__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(8), MM(~PM));
  syntax = ( "move.b %f,(%f)%f",Ra,Rn,PM);
}
define (instr=MOVE_B_Ra__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Ra__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from an address register to memory""";
attrs = (LMV,V2);
# 1282 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Rq__ea__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(Rk), MM(2));
  syntax = ( "move.b %f,(%f+%f)",Ra,Rn,Rk);
}


   action=
   {




      write_RTable_2mem(EAtable(ea_2EA(MM),R_Src1,0,R_Src2), R_Src3, 1);

   };

}



define (instr=MOVE_B__SPps15__Da_family)
{

  fields = (OPCD, imms, Res);



   blk = lsu;


define (instr=MOVE_B__SPps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from memory to a data register""";
attrs = (LMV,V2);
# 1314 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_B__SPps15__Da_family(OPCD(OPCD), imms(s15), Res(Da));
  syntax = ( "move.b (SP+%f),%f",s15,Da);

   }


   action=
   {




      bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
      write_mem_2DTable(eff_mem_add, Res, 1);

   };

}



define (instr=MOVE_B__SPps15__Rq_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVE_B__SPps15__Rq)
{

  alias = MOVE_B__SPps15__Rq_family(OPCD(OPCD), imms(s15), R_Res(qqq));
}
define (instr=MOVE_B__SPps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__SPps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from memory to an address register""";
attrs = (LMV,V2);
# 1357 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B__SPps15__Rq_family(OPCD(OPCD), imms(s15), R_Res(Ra));
  syntax = ( "move.b (SP+%f),%f",s15,Ra);
}


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2RTable(eff_mem_add, R_Res, 1);

};

}



define (instr=MOVE_B_Da__SPps15__family)
{

  fields = (OPCD, Src1, imms);



  blk = lsu;


define (instr=MOVE_B_Da__SPps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Da__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from a data register to memory""";
attrs = (LMV,V2);
# 1390 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_B_Da__SPps15__family(OPCD(OPCD), Src1(Da), imms(s15));
  syntax = ( "move.b %f,(SP+%f)",Da,s15);

   }


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_DTable_2mem(eff_mem_add , Src1, 1);

};

}



define (instr=MOVE_B_Rq__SPps15__family)
{

  fields = (OPCD, R_Src1, imms);



  blk = lsu;


define (instr=MOVE_B_Rq__SPps15_)
{

  alias = MOVE_B_Rq__SPps15__family(OPCD(OPCD), R_Src1(qqq), imms(s15));
}
define (instr=MOVE_B_Ra__SPps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_Ra__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from an address register to memory""";
attrs = (LMV,V2);
# 1433 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_Rq__SPps15__family(OPCD(OPCD), R_Src1(Ra), imms(s15));
  syntax = ( "move.b %f,(SP+%f)",Ra,s15);
}


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_RTable_2mem(eff_mem_add , R_Src1, 1);

};

}



define (instr=MOVE_B__Ea__Db_family)
{

  fields = (OPCD, R_Src1, mm, Res);



  blk = lsu;


define (instr=MOVE_B__Ea__Db)
{

  alias = MOVE_B__Ea__Db_family(OPCD(OPCD), R_Src1(RRR), mm(mm), Res(jjj));
}


action=
{




 bits<3> mm_2MMM = mm+4;
 D(Res) = signExtend( Mem( EAtable(mm_2MMM,R_Src1,0), 1), 40);



};

}


define (instr=MOVE_B_Db__Ea__family)
{

  fields = (OPCD, Src1, R_Src1, mm);



   blk = lsu;


define (instr=MOVE_B_Db__Ea_)
{

  alias = MOVE_B_Db__Ea__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), mm(mm) );
}


   action=
   {




      bits<3> mm_2MMM = mm+4;
      Mem(EAtable(mm_2MMM,R_Src1,0),1) = D(Src1)(7,0);
   };

}


define (instr=MOVE_F__s16_Db_family)
{

  fields = (OPCD, imms, Res);



   blk = lsu;


define (instr=MOVE_F__s16_Db)
{

  alias = MOVE_F__s16_Db_family(OPCD(OPCD), imms(s16), Res(jjj));
}


   action=
   {




      bits<16> tmp_imm = imms(15,0);
      D(Res) = signExtend( concat(tmp_imm,zero(16)), 40);




   };

}


define (instr=MOVE_F__a16__Db_family)
{

  fields = (OPCD, immu, Res);



   blk = lsu;


define (instr=MOVE_F__a16__Db)
{

  alias = MOVE_F__a16__Db_family(OPCD(OPCD), immu(w_a16), Res(jjj));
}


   action=
   {




      D(Res) = signExtend( concat(Mem(immu,2), zero(16)), 40);




   };

}



define (instr=MOVE_F__a32__Db_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVE_F__a32__Db)
{

  alias = MOVE_F__a32__Db_family(OPCD(OPCD), immu(a32_label), Res(jjj));
}
define (instr=MOVE_F__a32__Da)
{

  alias = MOVE_F__a32__Db_family(OPCD(OPCD), immu(a32), Res(Da));
  syntax = ( "move.f (%f),%f",a32,Da);
}


action=
{




 D(Res) = signExtend( concat(Mem(immu,2), zero(16)), 40);



};

}



define (instr=MOVE_F__EA__Db_family)
{

  fields = (OPCD, R_Src1, R_Src2, MMM, Res);



  blk = lsu;
  doc_title = "move.f EA,Da";


define (instr=MOVE_F__EA__Db)
{

  alias = MOVE_F__EA__Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(jjj));
}
define (instr=MOVE_F__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from memory to a data register""";
attrs = (LMV,V2);
# 1642 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F__EA__Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "move.f (%f),%f",Rn,Da);
}
define (instr=MOVE_F__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from memory to a data register""";
attrs = (LMV,V2);
# 1648 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F__EA__Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "move.f (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVE_F__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from memory to a data register""";
attrs = (LMV,V2);
# 1654 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F__EA__Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "move.f (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE_F__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from memory to a data register""";
attrs = (LMV,V2);
# 1660 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F__EA__Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "move.f (%f+%f),%f",Rn,Rk,Da);
}


action=
{




 D(Res) = signExtend( concat(Mem( EAtable(MMM,R_Src1,1,R_Src2), 2), zero(16)), 40);



};

}


define (instr=MOVE_F__Rnps15__Db_family)
{

  fields = (OPCD, R_Src1, imms, Res);



  blk = lsu;


define (instr=MOVE_F__Rnps15__Db)
{

  alias = MOVE_F__Rnps15__Db_family(OPCD(OPCD), R_Src1(RRR), imms(w_s15), Res(jjj));
}
define (instr=MOVE_F__Rnps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional word from memory to a data register""";
attrs = (LMV,V2);
# 1698 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F__Rnps15__Db_family(OPCD(OPCD), R_Src1(Rn), imms(s15), Res(Da));
  syntax = ( "move.f (%f+%f),%f",Rn,s15,Da);
}


action=
{





   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,2,imms);
   }
   else {
      eff_mem_add = imms + R(R_Src1);
   }
   D(Res) = signExtend( concat(Mem(eff_mem_add,2), zero(16)),40);



};

}



define (instr=MOVE_F__SPps15__Db_family)
{

  fields = (OPCD, imms, Res);



  blk = lsu;


define (instr=MOVE_F__SPps15__Db)
{

  alias = MOVE_F__SPps15__Db_family(OPCD(OPCD), imms(w_s15), Res(jjj));
}
define (instr=MOVE_F__SPps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional word from memory to a data register""";
attrs = (LMV,V2);
# 1745 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F__SPps15__Db_family(OPCD(OPCD), imms(s15), Res(Da));
  syntax = ( "move.f (SP+%f),%f",s15,Da);
}


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 D(Res) = signExtend( concat(Mem(eff_mem_add,2), zero(16)),40);



};

}



define (instr=MOVE_F_Db__ea__family)
{

  fields = (OPCD, Src1, R_Src1, R_Src2, MM);



  blk = lsu;
  doc_title = "move.f Da,EA";


define (instr=MOVE_F_Db__ea_)
{

  alias = MOVE_F_Db__ea__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), R_Src2(8), MM(MM));
}
define (instr=MOVE_F_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from a data register to memory""";
attrs = (LMV,V5);
# 1786 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F_Db__ea__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MM(3));
  syntax = ( "move.f %f,(%f)",Da,Rn);
}
define (instr=MOVE_F_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from a data register to memory""";
attrs = (LMV,V5);
# 1792 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F_Db__ea__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MM(4));
  syntax = ( "move.f %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVE_F_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from a data register to memory""";
attrs = (LMV,V5);
# 1798 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F_Db__ea__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MM(~PM));
  syntax = ( "move.f %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVE_F_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_F_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word from a data register to memory""";
attrs = (LMV,V5);
# 1804 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_F_Db__ea__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MM(2));
  syntax = ( "move.f %f,(%f+%f)",Da,Rn,Rk);
}


action=
{




 Mem(EAtable(ea_2EA(MM),R_Src1,1,R_Src2),2) = D(Src1).H;
};

}



define (instr=MOVE_F_Db__Ea__family)
{

  fields = (OPCD, Src1, R_Src1, mm);



  blk = lsu;

define (instr=MOVE_F_Db__Ea_)
{

  alias = MOVE_F_Db__Ea__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), mm(mm));
}

action=
{




    bits<3> mm_2MMM = mm+4;
    Mem(EAtable(mm_2MMM,R_Src1,1),2) = D(Src1).H;
};

}



define (instr=MOVE_W_Da__EA__family)
{

  fields = (OPCD, Src1, R_Src1, R_Src2, MMM);



  blk = lsu;
  doc_title = "move.w Da,EA";


define (instr=MOVE_W_Da__EA_)
{

  alias = MOVE_W_Da__EA__family(OPCD(OPCD), Src1(JJJ), R_Src1(RRR), R_Src2(8), MMM(MMM));
}
define (instr=MOVE_W_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from a data register to memory""";
attrs = (LMV,V2);
# 1870 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.w %f,(%f)",Da,Rn);
}
define (instr=MOVE_W_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from a data register to memory""";
attrs = (LMV,V2);
# 1876 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.w %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVE_W_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from a data register to memory""";
attrs = (LMV,V2);
# 1882 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.w %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVE_W_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from a data register to memory""";
attrs = (LMV,V2);
# 1888 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.w %f,(%f+%f)",Da,Rn,Rk);
}


 action =
 {




    write_DTable_2mem(EAtable(MMM,R_Src1,1,R_Src2), Src1, 2);
 };

}

define (instr=MOVE_W_Rq__EA__family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Src3, MMM);



   blk = lsu;
   doc_title = "move.w Ra,EA";


define (instr=MOVE_W_Rq__EA_)
{

  alias = MOVE_W_Rq__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src3(qqq), R_Src2(8), MMM(MMM));
}
define (instr=MOVE_W_Ra__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Ra__Rn_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from an address register to memory""";
attrs = (LMV,V2);
# 1923 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Rq__EA__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.w %f,(%f)",Ra,Rn);
}
define (instr=MOVE_W_Ra__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Ra__Rn_pRk.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from an address register to memory""";
attrs = (LMV,V2);
# 1929 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Rq__EA__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.w %f,(%f)+%f",Ra,Rn,Rk);
}
define (instr=MOVE_W_Ra__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Ra__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from an address register to memory""";
attrs = (LMV,V2);
# 1935 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Rq__EA__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.w %f,(%f)%f",Ra,Rn,PM);
}
define (instr=MOVE_W_Ra__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Ra__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from an address register to memory""";
attrs = (LMV,V2);
# 1941 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Rq__EA__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.w %f,(%f+%f)",Ra,Rn,Rk);
}


   action =
   {




      write_RTable_2mem(EAtable(MMM,R_Src1,1,R_Src2), R_Src3, 2);

   };

}

define (instr=MOVE_W__EA__Da_family)
{

   fields = (OPCD, R_Src1, R_Src2, MMM, Res);



   blk = lsu;
   doc_title = "move.w EA,Da";


   define (instr=MOVE_W__EA__Da)
   {

      alias = MOVE_W__EA__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(JJJ));
}
define (instr=MOVE_W__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to a data register""";
attrs = (LMV,V2);
# 1977 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
      alias = MOVE_W__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "move.w (%f),%f",Rn,Da);
}
define (instr=MOVE_W__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to a data register""";
attrs = (LMV,V2);
# 1983 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
      alias = MOVE_W__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "move.w (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVE_W__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to a data register""";
attrs = (LMV,V2);
# 1989 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
      alias = MOVE_W__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "move.w (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE_W__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to a data register""";
attrs = (LMV,V2);
# 1995 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
      alias = MOVE_W__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "move.w (%f+%f),%f",Rn,Rk,Da);
}

   action={




      write_mem_2DTable(EAtable(MMM,R_Src1,1,R_Src2), Res, 2);

   };

}


define (instr=MOVE_W__EA__Rq_family)
{

   fields = (OPCD, R_Src1, R_Src2, MMM, R_Res);



   blk = lsu;
   doc_title = "move.w EA,Ra";


   define (instr=MOVE_W__EA__Rq)
   {

      alias = MOVE_W__EA__Rq_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), R_Res(qqq));
}
define (instr=MOVE_W__Rn__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rn__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to an address register""";
attrs = (LMV,V2);
# 2030 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
      alias = MOVE_W__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), R_Res(Ra));
  syntax = ( "move.w (%f),%f",Rn,Ra);
}
define (instr=MOVE_W__Rn_pRk_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rn_pRk_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to an address register""";
attrs = (LMV,V2);
# 2036 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
      alias = MOVE_W__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), R_Res(Ra));
  syntax = ( "move.w (%f)+%f,%f",Rn,Rk,Ra);
}
define (instr=MOVE_W__Rn_PM_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rn_PM_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to an address register""";
attrs = (LMV,V2);
# 2042 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
      alias = MOVE_W__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), R_Res(Ra));
  syntax = ( "move.w (%f)%f,%f",Rn,PM,Ra);
}
define (instr=MOVE_W__RnpRk__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__RnpRk__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to an address register""";
attrs = (LMV,V2);
# 2048 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
      alias = MOVE_W__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), R_Res(Ra));
  syntax = ( "move.w (%f+%f),%f",Rn,Rk,Ra);
}

   action={




      write_mem_2RTable(EAtable(MMM,R_Src1,1,R_Src2), R_Res, 2);

   };

}


define (instr=MOVE_L__EA__Da_family)
{

  fields = (OPCD, R_Src1, R_Src2, MMM, Res);
   blk = lsu;
   doc_title = "move.l EA,Da";




define (instr=MOVE_L__EA__Da)
{

  alias = MOVE_L__EA__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(JJJ));
}
define (instr=MOVE_L__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to a data register""";
attrs = (LMV,V2);
# 2082 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "move.l (%f),%f",Rn,Da);
}
define (instr=MOVE_L__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to a data register""";
attrs = (LMV,V2);
# 2088 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "move.l (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVE_L__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to a data register""";
attrs = (LMV,V2);
# 2094 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "move.l (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE_L__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to a data register""";
attrs = (LMV,V2);
# 2100 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "move.l (%f+%f),%f",Rn,Rk,Da);
}

   action =
   {



      write_mem_2DTable( EAtable(MMM,R_Src1,2,R_Src2), Res, 4);
   };
}

define (instr=MOVE_L__EA__Rq_family)
{

   fields = (OPCD, R_Src1, R_Src2, MMM, R_Res);
   blk = lsu;
   doc_title = "move.l EA,Ra";



define (instr=MOVE_L__EA__Rq)
{

  alias = MOVE_L__EA__Rq_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), R_Res(qqq));
}
define (instr=MOVE_L__Rn__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rn__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to an address register""";
attrs = (LMV,V2);
# 2130 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), R_Res(Ra));
  syntax = ( "move.l (%f),%f",Rn,Ra);
}
define (instr=MOVE_L__Rn_pRk_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rn_pRk_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to an address register""";
attrs = (LMV,V2);
# 2136 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), R_Res(Ra));
  syntax = ( "move.l (%f)+%f,%f",Rn,Rk,Ra);
}
define (instr=MOVE_L__Rn_PM_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rn_PM_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to an address register""";
attrs = (LMV,V2);
# 2142 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), R_Res(Ra));
  syntax = ( "move.l (%f)%f,%f",Rn,PM,Ra);
}
define (instr=MOVE_L__RnpRk__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__RnpRk__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to an address register""";
attrs = (LMV,V2);
# 2148 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), R_Res(Ra));
  syntax = ( "move.l (%f+%f),%f",Rn,Rk,Ra);
}

   action =
   {



      write_mem_2RTable( EAtable(MMM,R_Src1,2,R_Src2), R_Res, 4);
   };


}

define (instr=MOVE_L_Da__EA__family)
{

  fields = (OPCD, Src1, R_Src1, R_Src2, MMM);
   blk = lsu;
   doc_title = "move.l Da,EA";




define ( instr=MOVE_L_Da__EA_ )
{

  alias = MOVE_L_Da__EA__family(OPCD(OPCD), Src1(JJJ), R_Src1(RRR), MMM(MMM));
}

define (instr=MOVE_L_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from a data register to memory""";
attrs = (LMV,V2);
# 2182 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.l %f,(%f)",Da,Rn);
}
define (instr=MOVE_L_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from a data register to memory""";
attrs = (LMV,V2);
# 2188 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.l %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVE_L_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from a data register to memory""";
attrs = (LMV,V2);
# 2194 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.l %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVE_L_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from a data register to memory""";
attrs = (LMV,V2);
# 2200 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.l %f,(%f+%f)",Da,Rn,Rk);
}

   action =
   {



      write_DTable_2mem(EAtable(MMM,R_Src1,2,R_Src2), Src1, 4);
   };

}





define (instr=MOVE_L_Rq__EA__family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Src3, MMM);
   blk = lsu;
   doc_title = "move.l Ra,EA";




define ( instr=MOVE_L_Rq__EA_ )
{

  alias = MOVE_L_Rq__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(qqq), MMM(MMM));
}

define (instr=MOVE_L_Ra__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra__Rn_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from an address register to memory""";
attrs = (LMV,V2);
# 2237 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Rq__EA__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.l %f,(%f)",Ra,Rn);
}
define (instr=MOVE_L_Ra__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra__Rn_pRk.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from an address register to memory""";
attrs = (LMV,V2);
# 2243 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Rq__EA__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move.l %f,(%f)+%f",Ra,Rn,Rk);
}
define (instr=MOVE_L_Ra__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from an address register to memory""";
attrs = (LMV,V2);
# 2249 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Rq__EA__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.l %f,(%f)%f",Ra,Rn,PM);
}
define (instr=MOVE_L_Ra__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from an address register to memory""";
attrs = (LMV,V2);
# 2255 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Rq__EA__family(OPCD(OPCD), R_Src3(Ra), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move.l %f,(%f+%f)",Ra,Rn,Rk);
}

   action =
   {



      write_RTable_2mem(EAtable(MMM,R_Src1,2,R_Src2), R_Src3, 4);

   };

}




define (instr=MOVE_L__s32_C3_family)
{

  fields = (OPCD, imms, G_Res);
   blk = lsu;



define (instr=MOVE_L__s32_C3)
{

  alias = MOVE_L__s32_C3_family(OPCD(OPCD), imms(s32), G_Res(DDDD));
}

   action = {



      C3Table(G_Res) = imms;
   };

}



define (instr=MOVE_L__u32_C1_family)
{

  fields = (OPCD, immu, CCC);
   blk = lsu;




define (instr=MOVE_L__u32_C1)
{

  alias = MOVE_L__u32_C1_family(OPCD(OPCD), immu(u32), CCC(CCC));
}

   action = {




      if ( ((CCC==1) || (CCC==2)) )
      {
  if (IsUserMode()) {
     EMR_LOW = true;
     EMR.ILPR=1;
     raiseException(Privelege);
  } else {
     C1Table(CCC) = immu;
  }
      }
      else { C1Table(CCC) = immu; }
   };

}



define (instr=MOVE_L_C3_Df_family)
{

  fields = (OPCD, G_Src1, Res);
   blk = lsu;




define (instr=MOVE_L_C3_Df)
{

  alias = MOVE_L_C3_Df_family(OPCD(OPCD), G_Src1(DDDD), Res(uuu));
}

   action = {



      D(Res) = signExtend( C3Table(G_Src1)(31,0), 40);



   };

}

define (instr=MOVE_L_Da_Df_family)
{

  fields = (OPCD, Src1, Res);
   blk = lsu;




define (instr=MOVE_L_Da_Df)
{

  alias = MOVE_L_Da_Df_family(OPCD(OPCD), Src1(JJJ), Res(uuu));
}

   action = {




      D(Res) = signExtend( D(Src1)(31,0), 40);



   };

}


define (instr=MOVE_L_C2_Db_family)
{

  fields = (OPCD, G_Src1, Res);
   blk = lsu;




define (instr=MOVE_L_C2_Db)
{

  alias = MOVE_L_C2_Db_family(OPCD(OPCD), G_Src1(CCCC), Res(jjj));
}
define (instr=MOVE_L_CTRL_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_CTRL_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),CTRL(0)),
 (bits(27),CTRL(1)),
 (bits(28),CTRL(2)),
 (bits(29),CTRL(3)),
 (bits(30),CTRL(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a control register to a D register""";
attrs = (LMREG,V2);
# 2408 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_C2_Db_family(OPCD(OPCD), G_Src1(CTRL), Res(Dn));
  syntax = ( "move.l %f,%f",CTRL,Dn);
}

action = {




      if ( IsUserMode() && ( (G_Src1==1) || (G_Src1==2) ) )
      {
  EMR.ILPR=1;
  raiseException(Privelege);
      } else {
  D(Res) = signExtend( C2Table(G_Src1), 40);



      }
   };

}

define (instr=MOVE_L_Df_C3_family)
{
   fields = (OPCD, Src1, R_Res);
   blk = lsu;




   define (instr=MOVE_L_Df_C3)
   {

      alias = MOVE_L_Df_C3_family(OPCD(OPCD), Src1(uuu), R_Res(DDDD));
   }

   action = {





      C3Table(R_Res) = D(Src1)(31,0);
   };

}



define (instr=MOVE_L_Db_C2_family)
{

   fields = (OPCD, Src1, G_Res);
   blk = lsu;




define (instr=MOVE_L_Db_C2)
{

  alias = MOVE_L_Db_C2_family(OPCD(OPCD), Src1(jjj), G_Res(CCCC));
}
define (instr=MOVE_L_Da_CTRL)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da_CTRL.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Da(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a D register to a control register""";
attrs = (LMREG,V2);
# 2475 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Db_C2_family(OPCD(OPCD), Src1(Da), G_Res(CTRL));
  syntax = ( "move.l %f,%f",Da,CTRL);
}

   action = {





      if ( IsUserMode() && ((G_Res==1) || (G_Res==2)) )
      {
  EMR.ILPR=1;
  raiseException(Privelege);
      }

      else C2Table(G_Res) = ( D(Src1)(31,0) );
   };

}





define (instr=MOVE_L__a32__Da_family)
{

  fields = (OPCD, immu, Res);
   blk = lsu;




define (instr=MOVE_L__a32__Da)
{





  alias = MOVE_L__a32__Da_family(OPCD(OPCD), immu(a32), Res(Da));
  syntax = ( "move.l (%f),%f",a32,Da);

   }

   action =
   {




      write_mem_2DTable( immu, Res, 4);

   };

}



define (instr=MOVE_L__a32__Rq_family)
{

  fields = (OPCD, immu, R_Res);
   blk = lsu;




define (instr=MOVE_L__a32__Rq)
{

  alias = MOVE_L__a32__Rq_family(OPCD(OPCD), immu(l_a32), R_Res(qqq));
}
define (instr=MOVE_L__a32__Ra)
{

  alias = MOVE_L__a32__Rq_family(OPCD(OPCD), immu(a32), R_Res(Ra));
  syntax = ( "move.l (%f),%f",a32,Ra);
}

   action =
   {




      write_mem_2RTable( immu, R_Res, 4);

   };

}


define (instr=MOVE_L_Da__a32__family)
{

  fields = (OPCD, immu, Src1);



   blk = lsu;


define (instr=MOVE_L_Da__a32_)
{





  alias = MOVE_L_Da__a32__family(OPCD(OPCD), immu(a32), Src1(Da));
  syntax = ( "move.l %f,(%f)",Da,a32);

   }


   action=
   {




      write_DTable_2mem(immu, Src1, 4);

   };

}



define (instr=MOVE_L_Rq__a32__family)
{

  fields = (OPCD, immu, R_Src1);



   blk = lsu;


define (instr=MOVE_L_Rq__a32_)
{

  alias = MOVE_L_Rq__a32__family(OPCD(OPCD), immu(l_a32), R_Src1(qqq));
}
define (instr=MOVE_L_Ra__a32_)
{

  alias = MOVE_L_Rq__a32__family(OPCD(OPCD), immu(a32), R_Src1(Ra));
  syntax = ( "move.l %f,(%f)",Ra,a32);
}


   action=
   {




      write_RTable_2mem(immu, R_Src1, 4);

   };

}



define (instr=MOVE_L__a16__C3_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;
define (instr=MOVE_L__a16__C3)
{

  alias = MOVE_L__a16__C3_family(OPCD(OPCD), immu(l_a16), R_Res(DDDD));
}


action=
{




    write_mem_2C3Table(immu, R_Res, 4);
};

}



define (instr=MOVE_L__a16__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;

define (instr=MOVE_L__a16__Da)
{

  alias = MOVE_L__a16__Da_family(OPCD(OPCD), immu(l_a16), Res(JJJ));
}

action=
{



    write_mem_2DTable(immu, Res, 4);

};

}



define (instr=MOVE_L__a16__Rq_family)
{

  fields = (OPCD, immu, R_Res);



   blk = lsu;

define (instr=MOVE_L__a16__Rq)
{

  alias = MOVE_L__a16__Rq_family(OPCD(OPCD), immu(l_a16), R_Res(qqq));
}

   action=
   {




      write_mem_2RTable(immu, R_Res, 4);


   };

}



define (instr=MOVE_L_C3__a16__family)
{

  fields = (OPCD, immu, G_Src1);



   blk = lsu;

define (instr=MOVE_L_C3__a16_)
{

  alias = MOVE_L_C3__a16__family(OPCD(OPCD), immu(l_a16), G_Src1(DDDD));
}


   action=
   {



      write_C3Table_2mem( immu, G_Src1, 4);


   };

}


define (instr=MOVE_L_Da__a16__family)
{

  fields = (OPCD, immu, Src1);



   blk = lsu;


define (instr=MOVE_L_Da__a16_)
{

  alias = MOVE_L_Da__a16__family(OPCD(OPCD), immu(l_a16), Src1(JJJ));
}


   action=
   {




      write_DTable_2mem( immu, Src1, 4);


   };

}


define (instr=MOVE_L_Rq__a16__family)
{

  fields = (OPCD, immu, R_Src1);



   blk = lsu;

define (instr=MOVE_L_Rq__a16_)
{

  alias = MOVE_L_Rq__a16__family(OPCD(OPCD), immu(l_a16), R_Src1(qqq));
}


   action=
   {




      write_RTable_2mem( immu, R_Src1, 4);
   };

}


define (instr=MOVE_L__Rnpu3__Da_family)
{

  fields = (OPCD, immu, R_Src1, Res);



   blk = lsu;

define (instr=MOVE_L__Rnpu3__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rnpu3__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),u3(0)),
 (bits(24),u3(1)),
 (bits(25),u3(2)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to a data register""";
attrs = (LMV,V2);
# 2829 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_L__Rnpu3__Da_family(OPCD(OPCD), immu(u3), R_Src1(Rn), Res(Da));
  syntax = ( "move.l (%f+%f),%f",Rn,u3,Da);

   }

   action=
   {





      bits<32> eff_mem_add;
      if ((R_Src1&0xf8)==0x0) {
  eff_mem_add = Address_by_mctl2(R_Src1(2,0),(immu<<2),0,4,immu);
      }
      else {
  eff_mem_add = (immu<<2) + R(R_Src1);
      }
      write_mem_2DTable( eff_mem_add, Res, 4);
   };

}


define (instr=MOVE_L__Rnpu3__Rq_family)
{

  fields = (OPCD, immu, R_Src1, R_Res);



   blk = lsu;


define (instr=MOVE_L__Rnpu3__Rq)
{

  alias = MOVE_L__Rnpu3__Rq_family(OPCD(OPCD), immu(l_u3), R_Src1(RRR), R_Res(qqq));
}
define (instr=MOVE_L__Rnpu3__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rnpu3__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),u3(0)),
 (bits(24),u3(1)),
 (bits(25),u3(2)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to an adderess register""";
attrs = (LMV,V2);
# 2876 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__Rnpu3__Rq_family(OPCD(OPCD), immu(u3), R_Src1(Rn), R_Res(Ra));
  syntax = ( "move.l (%f+%f),%f",Rn,u3,Ra);
}


   action=
   {







      bits<32> eff_mem_add;
      if ((R_Src1&0xf8)==0x0) {
  eff_mem_add = Address_by_mctl2(R_Src1(2,0),(immu<<2),0,4,immu);
      }
      else {
  eff_mem_add = (immu<<2) + R(R_Src1);
      }
      write_mem_2RTable( eff_mem_add, R_Res, 4);
   };

}


define (instr=MOVE_L_Da__Rnpu3__family)
{

  fields = (OPCD, Src1, immu, R_Src1);



   blk = lsu;


define (instr=MOVE_L_Da__Rnpu3_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da__Rnpu3_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),u3(0)),
 (bits(24),u3(1)),
 (bits(25),u3(2)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from a data register to memory""";
attrs = (LMV,V2);
# 2916 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_L_Da__Rnpu3__family(OPCD(OPCD), Src1(Da), immu(u3), R_Src1(Rn));
  syntax = ( "move.l %f,(%f+%f)",Da,Rn,u3);

   }


   action=
   {







      bits<32> eff_mem_add;
      if ((R_Src1&0xf8)==0x0) {
  eff_mem_add = Address_by_mctl2(R_Src1(2,0),(immu<<2),0,4,immu);
      }
      else {
  eff_mem_add = (immu<<2) + R(R_Src1);
      }
      write_DTable_2mem(eff_mem_add,Src1,4);

   };

}



define (instr=MOVE_L_Rq__Rnpu3__family)
{

  fields = (OPCD, R_Src1, immu, R_Src2);



   blk = lsu;


define (instr=MOVE_L_Rq__Rnpu3_)
{

  alias = MOVE_L_Rq__Rnpu3__family(OPCD(OPCD), R_Src1(RRR),immu(l_u3), R_Src2(qqq));
}
define (instr=MOVE_L_Ra__Rnpu3_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra__Rnpu3_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),u3(0)),
 (bits(24),u3(1)),
 (bits(25),u3(2)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from an address register to memory""";
attrs = (LMV,V2);
# 2968 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Rq__Rnpu3__family(OPCD(OPCD), R_Src1(Ra),immu(u3), R_Src2(Rn));
  syntax = ( "move.l %f,(%f+%f)",Ra,Rn,u3);
}


action=
{







   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(immu<<2),0,4,immu);
   }
   else {
      eff_mem_add = (immu<<2) + R(R_Src1);
   }
   write_RTable_2mem(eff_mem_add,R_Src2,4);

};

}



define (instr=MOVE_L__Rnps15__Da_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;


define (instr=MOVE_L__Rnps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a long word from memory to a data register""";
attrs = (LMV,V2);
# 3010 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_L__Rnps15__Da_family(OPCD(OPCD), imms(s15), R_Src1(Rn), Res(Da));
  syntax = ( "move.l (%f+%f),%f",Rn,s15,Da);

   }


action=
{
# 3030 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,4,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_mem_2DTable(eff_mem_add,Res,4);
};

}



define (instr=MOVE_L__Rnps15__Rq_family)
{

  fields = (OPCD, imms, R_Src1, R_Res);



  blk = lsu;


define (instr=MOVE_L__Rnps15__Rq)
{

  alias = MOVE_L__Rnps15__Rq_family(OPCD(OPCD), imms(l_s15), R_Src1(RRR), R_Res(qqq));
}
define (instr=MOVE_L__Rnps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rnps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a long word from memory to an address register""";
attrs = (LMV,V2);
# 3062 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__Rnps15__Rq_family(OPCD(OPCD), imms(s15), R_Src1(Rn), R_Res(Ra));
  syntax = ( "move.l (%f+%f),%f",Rn,s15,Ra);
}


action=
{
# 3077 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,4,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_mem_2RTable(eff_mem_add,R_Res,4);
};

}



define (instr=MOVE_L_Da__Rnps15__family)
{

  fields = (OPCD, Src1, imms, R_Src1);



  blk = lsu;


define (instr=MOVE_L_Da__Rnps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a long word from a data register to memory""";
attrs = (LMV,V2);
# 3104 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_L_Da__Rnps15__family(OPCD(OPCD), Src1(Da), imms(s15), R_Src1(Rn));
  syntax = ( "move.l %f,(%f+%f)",Da,Rn,s15);

   }


action=
{






   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,4,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_DTable_2mem(eff_mem_add, Src1, 4);
};

}




define (instr=MOVE_L_Rq__Rnps15__family)
{

  fields = (OPCD, R_Src1, imms, R_Src2);



  blk = lsu;


define (instr=MOVE_L_Rq__Rnps15_)
{

  alias = MOVE_L_Rq__Rnps15__family(OPCD(OPCD), R_Src1(RRR), imms(l_s15), R_Src2(qqq));
}
define (instr=MOVE_L_Ra__Rnps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a long word from an address register to memory""";
attrs = (LMV,V2);
# 3155 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Rq__Rnps15__family(OPCD(OPCD), R_Src1(Ra), imms(s15), R_Src2(Rn));
  syntax = ( "move.l %f,(%f+%f)",Ra,Rn,s15);
}


action=
{






   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,4,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_RTable_2mem(eff_mem_add, R_Src2, 4);
};

}




define (instr=MOVE_L__RnpRr__Da_family)
{

  fields = (OPCD, R_Src1, R_Src2, Res);



  blk = lsu;

define (instr=MOVE_L__RnpRr__Da)
{

  alias = MOVE_L__RnpRr__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(rrr), Res(JJJ));
}


  action=
  {




     bits<32> eff_mem_add;
     if ((R_Src1&0xf8)==0x0) {
 eff_mem_add = Address_by_mctl2(R_Src1(2,0),(R(R_Src2)<<2),0,4,R(R_Src2));
     }
     else {
 eff_mem_add = (R(R_Src2)<<2) + R(R_Src1);
     }
     write_mem_2DTable( eff_mem_add, Res, 4);
  };

}



define (instr=MOVE_L__RnpRr__Rq_family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Res);



   blk = lsu;

define (instr=MOVE_L__RnpRr__Rq)
{

  alias = MOVE_L__RnpRr__Rq_family(OPCD(OPCD), R_Src1(RRR), R_Src2(rrr), R_Res(qqq));
}


   action=
   {




      bits<32> eff_mem_add;
      if ((R_Src1&0xf8)==0x0) {
  eff_mem_add = Address_by_mctl2(R_Src1(2,0),(R(R_Src2)<<2),0,4,R(R_Src2));
      }
      else {
  eff_mem_add = (R(R_Src2)<<2) + R(R_Src1);
      }
      write_mem_2RTable( eff_mem_add, R_Res, 4);
   };

}



define (instr=MOVE_L_Da__RnpRr__family)
{

  fields = (OPCD, Src1, R_Src1, R_Src2);



   blk = lsu;

define (instr=MOVE_L_Da__RnpRr_)
{

  alias = MOVE_L_Da__RnpRr__family(OPCD(OPCD), Src1(JJJ), R_Src1(RRR), R_Src2(rrr));
}

   action=
   {




      bits<32> eff_mem_add;
      if ((R_Src1&0xf8)==0x0) {
  eff_mem_add = Address_by_mctl2(R_Src1(2,0),(R(R_Src2)<<2),0,4,R(R_Src2));
      }
      else {
  eff_mem_add = (R(R_Src2)<<2) + R(R_Src1);
      }
      write_DTable_2mem(eff_mem_add, Src1, 4);

   };

}



define (instr=MOVE_L_Rq__RnpRr__family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Src3);



   blk = lsu;

define (instr=MOVE_L_Rq__RnpRr_)
{

  alias = MOVE_L_Rq__RnpRr__family(OPCD(OPCD), R_Src1(RRR), R_Src2(qqq), R_Src3(rrr));
}

   action=
   {




      bits<32> eff_mem_add;
      if ((R_Src1&0xf8)==0x0) {
  eff_mem_add = Address_by_mctl2(R_Src1(2,0),(R(R_Src3)<<2),0,4,R(R_Src3));
      }
      else {
  eff_mem_add = (R(R_Src3)<<2) + R(R_Src1);
      }
      write_RTable_2mem(eff_mem_add, R_Src2, 4);

   };

}



define (instr=MOVE_L__Rn__C3_family)
{

  fields = (OPCD, R_Src1, R_Res);



   blk = lsu;

define (instr=MOVE_L__Rn__C3)
{

  alias = MOVE_L__Rn__C3_family(OPCD(OPCD), R_Src1(RRR), R_Res(DDDD));
}


   action=
   {




      C3Table(R_Res) = Mem(R(R_Src1), 4);
   };

}




define (instr=MOVE_L_C3__Rn__family)
{

  fields = (OPCD, G_Src1, R_Src1);



   blk = lsu;


define (instr=MOVE_L_C3__Rn_)
{

  alias = MOVE_L_C3__Rn__family(OPCD(OPCD), G_Src1(DDDD), R_Src1(RRR));
}


   action=
   {




      Mem(R(R_Src1), 4) = C3Table(G_Src1);
   };

}




define (instr=MOVE_L__SPmu6__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVE_L__SPmu6__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to a data register""";
attrs = (LMV,V2);
# 3401 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_L__SPmu6__Da_family(OPCD(OPCD), immu(u6), Res(Da));
  syntax = ( "move.l (SP-%f),%f",u6,Da);

   }



action=
{




    bits<32> eff_mem_add = SP - (immu*4);
    write_mem_2DTable( eff_mem_add, Res, 4);


};

}


define (instr=MOVE_L__SPmu6__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVE_L__SPmu6__Rq)
{

  alias = MOVE_L__SPmu6__Rq_family(OPCD(OPCD), immu(l_u6), R_Res(qqq));
}
define (instr=MOVE_L__SPmu6__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__SPmu6__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to an address register""";
attrs = (LMV,V2);
# 3445 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__SPmu6__Rq_family(OPCD(OPCD), immu(u6), R_Res(Ra));
  syntax = ( "move.l (SP-%f),%f",u6,Ra);
}



action=
{




    bits<32> eff_mem_add = SP - (immu*4);
    write_mem_2RTable( eff_mem_add, R_Res, 4);


};

}


define (instr=MOVE_L_Da__SPmu6__family)
{

  fields = (OPCD, Src1, immu);



  blk = lsu;


define (instr=MOVE_L_Da__SPmu6_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from a data register to memory""";
attrs = (LMV,V2);
# 3479 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_L_Da__SPmu6__family(OPCD(OPCD), Src1(Da), immu(u6));
  syntax = ( "move.l %f,(SP-%f)",Da,u6);

   }


action=
{




    bits<32> eff_mem_add = SP - (immu*4);
    write_DTable_2mem(eff_mem_add, Src1, 4);

};

}




define (instr=MOVE_L_Rq__SPmu6__family)
{

  fields = (OPCD, R_Src1, immu);



  blk = lsu;


define (instr=MOVE_L_Rq__SPmu6_)
{

  alias = MOVE_L_Rq__SPmu6__family(OPCD(OPCD), R_Src1(qqq), immu(l_u6));
}
define (instr=MOVE_L_Ra__SPmu6_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from an address register to memory""";
attrs = (LMV,V2);
# 3523 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Rq__SPmu6__family(OPCD(OPCD), R_Src1(Ra), immu(u6));
  syntax = ( "move.l %f,(SP-%f)",Ra,u6);
}


action=
{




    bits<32> eff_mem_add = SP - (immu*4);
    write_RTable_2mem(eff_mem_add, R_Src1, 4);

};

}




define (instr=MOVE_L__SPps15__C3_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVE_L__SPps15__C3)
{

  alias = MOVE_L__SPps15__C3_family(OPCD(OPCD), imms(l_s15), R_Res(DDDD));
}


action=
{




    bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
    write_mem_2C3Table(eff_mem_add, R_Res, 4);

};

}




define (instr=MOVE_L__SPps15__Da_family)
{

  fields = (OPCD, imms, Res);



  blk = lsu;


define (instr=MOVE_L__SPps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a long word from memory to a data register""";
attrs = (LMV,V2);
# 3590 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_L__SPps15__Da_family(OPCD(OPCD), imms(s15), Res(Da));
  syntax = ( "move.l (SP+%f),%f",s15,Da);

   }


action=
{




   bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
   write_mem_2DTable(eff_mem_add, Res, 4);

};

}




define (instr=MOVE_L__SPps15__Rq_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVE_L__SPps15__Rq)
{

  alias = MOVE_L__SPps15__Rq_family(OPCD(OPCD), imms(l_s15), R_Res(qqq));
}


define (instr=MOVE_L__SPps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__SPps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a long word from memory to an address register""";
attrs = (LMV,V2);
# 3636 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L__SPps15__Rq_family(OPCD(OPCD), imms(s15), R_Res(Ra));
  syntax = ( "move.l (SP+%f),%f",s15,Ra);
}


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2RTable(eff_mem_add, R_Res, 4);

};

}




define (instr=MOVE_L_C3__SPps15__family)
{

  fields = (OPCD, G_Src1, imms);



   blk = lsu;


define (instr=MOVE_L_C3__SPps15_)
{

  alias = MOVE_L_C3__SPps15__family(OPCD(OPCD), G_Src1(DDDD), imms(l_s15));
}


   action=
   {




      bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
      write_C3Table_2mem( eff_mem_add, G_Src1, 4);
   };

}




define (instr=MOVE_L_Da__SPps15__family)
{

  fields = (OPCD, Src1, imms);



   blk = lsu;

define (instr=MOVE_L_Da__SPps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a long word from a data register to memory""";
attrs = (LMV,V2);
# 3701 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_L_Da__SPps15__family(OPCD(OPCD), Src1(Da), imms(s15));
  syntax = ( "move.l %f,(SP+%f)",Da,s15);

   }

   action=
   {




      bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
      write_DTable_2mem( eff_mem_add, Src1, 4);
   };

}




define (instr=MOVE_L_Rq__SPps15__family)
{

  fields = (OPCD, R_Src1, imms);



   blk = lsu;

define (instr=MOVE_L_Rq__SPps15_)
{

  alias = MOVE_L_Rq__SPps15__family(OPCD(OPCD), R_Src1(qqq), imms(l_s15));
}
define (instr=MOVE_L_Ra__SPps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a long word from an address register to memory""";
attrs = (LMV,V2);
# 3742 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_Rq__SPps15__family(OPCD(OPCD), R_Src1(Ra), imms(s15));
  syntax = ( "move.l %f,(SP+%f)",Ra,s15);
}

   action=
   {




      bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
      write_RTable_2mem( eff_mem_add, R_Src1, 4);


   };

}




define (instr=MOVE_W__s7_Da_family)
{

  fields = (OPCD, imms, Res);



   blk = lsu;


define (instr=MOVE_W__s7_Da)
{

  alias = MOVE_W__s7_Da_family(OPCD(OPCD), imms(s7), Res(JJJ));
}


   action=
   {




      D(Res) = signExtend(imms, 40);



   };

}



define (instr=MOVE_W__s7_Rq_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVE_W__s7_Rq)
{

  alias = MOVE_W__s7_Rq_family(OPCD(OPCD), imms(s7), R_Res(qqq));
}



action=
{




    R(R_Res) = signExtend(imms, 32);

};

}



define (instr=MOVE_W__s16_C3_family)
{
  fields = (OPCD, imms, G_Res);



  blk = lsu;


define (instr=MOVE_W__s16_C3)
{

  alias = MOVE_W__s16_C3_family(OPCD(OPCD), imms(s16), G_Res(DDDD));
}


action=
{




    C3Table(G_Res) = signExtend( imms, 32);

};

}




define (instr=MOVE_W__s16_Da_family)
{

  fields = (OPCD, imms, Res);



  blk = lsu;


define (instr=MOVE_W__s16_Da)
{

  alias = MOVE_W__s16_Da_family(OPCD(OPCD), imms(s16), Res(JJJ));
}


action=
{




    D(Res) = signExtend( imms, 40);




};

}




define (instr=MOVE_W__s16_Rq_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVE_W__s16_Rq)
{

  alias = MOVE_W__s16_Rq_family(OPCD(OPCD), imms(s16), R_Res(qqq));
}


action=
{





    R(R_Res) = imms;

};

}




define (instr=MOVE_W__s16__a16__family)
{

  fields = (OPCD, imms, immu);



  blk = lsu;

define (instr=MOVE_W__s16__a16_)
{

  alias = MOVE_W__s16__a16__family(OPCD(OPCD), imms(s16_t2), immu(w_a16));
}

action=
{




 Mem(immu,2) = imms(15,0);
};

}



define (instr=MOVE_W__s16__SPmu5__family)
{

  fields = (OPCD, imms, immu);



  blk = lsu;

define (instr=MOVE_W__s16__SPmu5_)
{

  alias = MOVE_W__s16__SPmu5__family(OPCD(OPCD), imms(s16), immu(w_u5));
}


action=
{




 bits<32> eff_mem_add = SP - (immu*2);
 Mem(eff_mem_add,2) = imms(15,0);
};

}



define (instr=MOVE_W__s16__Rn__family)
{

  fields = (OPCD, imms, R_Src1);



  blk = lsu;

define (instr=MOVE_W__s16__Rn_)
{

  alias = MOVE_W__s16__Rn__family(OPCD(OPCD), imms(s16), R_Src1(RRR));
}

action=
{




    Mem(R(R_Src1),2) = imms(15,0);
};

}



define (instr=MOVE_W__s16__SPpsa16__family)
{

  fields = (OPCD, imms, imms2);



  blk = lsu;


define (instr=MOVE_W__s16__SPpsa16_)
{

  alias = MOVE_W__s16__SPpsa16__family(OPCD(OPCD), imms(s16_t2), imms2(sa16));
}
define (instr=MOVE_W__S16__SPps16_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__S16__SPps16_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),S16(0)),
 (bits(11),s16_t3(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),S16(1)),
 (bits(17),S16(2)),
 (bits(18),S16(3)),
 (bits(19),S16(4)),
 (bits(20),S16(5)),
 (bits(21),S16(6)),
 (bits(22),S16(7)),
 (bits(23),S16(8)),
 (bits(24),S16(9)),
 (bits(25),S16(10)),
 (bits(26),S16(11)),
 (bits(27),S16(12)),
 (bits(28),S16(13)),
 (bits(29),S16(14)),
 (bits(30),S16(15)),
 (bits(31),b0),
 (bits(32),s16_t3(1)),
 (bits(33),s16_t3(2)),
 (bits(34),s16_t3(3)),
 (bits(35),s16_t3(4)),
 (bits(36),s16_t3(5)),
 (bits(37),s16_t3(6)),
 (bits(38),s16_t3(7)),
 (bits(39),s16_t3(8)),
 (bits(40),s16_t3(9)),
 (bits(41),s16_t3(10)),
 (bits(42),s16_t3(11)),
 (bits(43),s16_t3(12)),
 (bits(44),s16_t3(13)),
 (bits(45),s16_t3(14)),
 (bits(46),s16_t3(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an immediate word to stack memory""";
attrs = (LMV,V2);
# 4031 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W__s16__SPpsa16__family(OPCD(OPCD), imms(S16), imms2(s16_t3));
  syntax = ( "move.w #%f,(sp+%f)",S16,s16_t3);
}


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms2;
 Mem(eff_mem_add,2) = imms(15,0);
};

}


define (instr=MOVE_W__a32__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVE_W__a32__Da)
{





  alias = MOVE_W__a32__Da_family(OPCD(OPCD), immu(a32), Res(Da));
  syntax = ( "move.w (%f),%f",a32,Da);

   }


action=
{




    write_mem_2DTable(immu, Res, 2);

};

}



define (instr=MOVE_W__a32__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVE_W__a32__Rq)
{

  alias = MOVE_W__a32__Rq_family(OPCD(OPCD), immu(a32_label), R_Res(qqq));
}
define (instr=MOVE_W__a32__Ra)
{

  alias = MOVE_W__a32__Rq_family(OPCD(OPCD), immu(a32), R_Res(Ra));
  syntax = ( "move.w (%f),%f",a32,Ra);
}


action=
{




    write_mem_2RTable(immu, R_Res, 2);

};

}



define (instr=MOVE_W_Da__a32__family)
{

  fields = (OPCD, Src1, immu);



  blk = lsu;


define (instr=MOVE_W_Da__a32_)
{





  alias = MOVE_W_Da__a32__family(OPCD(OPCD), Src1(Da), immu(a32));
  syntax = ( "move.w %f,(%f)",Da,a32);

   }


action=
{




    write_DTable_2mem(immu, Src1, 2);

};

}



define (instr=MOVE_W_Rq__a32__family)
{

  fields = (OPCD, R_Src1, immu);



  blk = lsu;


define (instr=MOVE_W_Rq__a32_)
{

  alias = MOVE_W_Rq__a32__family(OPCD(OPCD), R_Src1(qqq), immu(a32_label));
}
define (instr=MOVE_W_Ra__a32_)
{

  alias = MOVE_W_Rq__a32__family(OPCD(OPCD), R_Src1(Ra), immu(a32));
  syntax = ( "move.w %f,(%f)",Ra,a32);
}


action=
{




    write_RTable_2mem(immu, R_Src1, 2);

};

}



define (instr=MOVE_W__a16__C3_family)
{

  fields = (OPCD, immu, R_Res );



  blk = lsu;


define (instr=MOVE_W__a16__C3)
{

  alias = MOVE_W__a16__C3_family(OPCD(OPCD), immu(w_a16), R_Res(DDDD));
}


action=
{




    write_mem_2C3Table(immu, R_Res, 2);

};

}


define (instr=MOVE_W__a16__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVE_W__a16__Da)
{

  alias = MOVE_W__a16__Da_family(OPCD(OPCD), immu(w_a16), Res(JJJ));
}


action=
{




    write_mem_2DTable(immu, Res, 2);

};

}


define (instr=MOVE_W__a16__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;

define (instr=MOVE_W__a16__Rq)
{

  alias = MOVE_W__a16__Rq_family(OPCD(OPCD), immu(w_a16), R_Res(qqq));
}


action=
{



    write_mem_2RTable(immu, R_Res, 2);

};

}


define (instr=MOVE_W_C3__a16__family)
{

  fields = (OPCD, G_Src1, immu);



  blk = lsu;

define (instr=MOVE_W_C3__a16_)
{

  alias = MOVE_W_C3__a16__family(OPCD(OPCD), G_Src1(DDDD), immu(w_a16));
}


action=
{




    write_C3Table_2mem( immu,G_Src1,2);

};

}




define (instr=MOVE_W_Da__a16__family)
{

  fields = (OPCD, Src1, immu);



  blk = lsu;

define (instr=MOVE_W_Da__a16_)
{

  alias = MOVE_W_Da__a16__family(OPCD(OPCD), Src1(JJJ), immu(w_a16));
}

action=
{



    write_DTable_2mem(immu, Src1, 2);

};

}




define (instr=MOVE_W_Rq__a16__family)
{

  fields = (OPCD, R_Src1, immu);



  blk = lsu;

define (instr=MOVE_W_Rq__a16_)
{

  alias = MOVE_W_Rq__a16__family(OPCD(OPCD), R_Src1(qqq), immu(w_a16));
}

action=
{




    write_RTable_2mem( immu, R_Src1, 2);

};

}




define (instr=MOVE_W__Rnpu3__Da_family)
{

  fields = (OPCD, R_Src1, immu, Res);



  blk = lsu;

define (instr=MOVE_W__Rnpu3__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rnpu3__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),u3(0)),
 (bits(24),u3(1)),
 (bits(25),u3(2)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to a data register""";
attrs = (LMV,V2);
# 4387 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_W__Rnpu3__Da_family(OPCD(OPCD), R_Src1(Rn), immu(u3), Res(Da));
  syntax = ( "move.w (%f+%f),%f",Rn,u3,Da);

   }

action=
{




   bits<32> eff_mem_add;

   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(immu<<1),0,2,immu);
   }
   else {
      eff_mem_add = (immu<<1) + R(R_Src1);
   }
   write_mem_2DTable(eff_mem_add, Res, 2);
};

}




define (instr=MOVE_W__Rnpu3__Rq_family)
{

  fields = (OPCD, R_Src1, immu, R_Res);



  blk = lsu;

define (instr=MOVE_W__Rnpu3__Rq)
{

  alias = MOVE_W__Rnpu3__Rq_family(OPCD(OPCD), R_Src1(RRR), immu(w_u3), R_Res(qqq));
}
define (instr=MOVE_W__Rnpu3__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rnpu3__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),u3(0)),
 (bits(24),u3(1)),
 (bits(25),u3(2)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a long word from memory to an adderess register""";
attrs = (LMV,V2);
# 4435 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W__Rnpu3__Rq_family(OPCD(OPCD), R_Src1(Rn), immu(u3), R_Res(Ra));
  syntax = ( "move.w (%f+%f),%f",Rn,u3,Ra);
}

action=
{




   bits<32> eff_mem_add;

   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(immu<<1),0,2,immu);
   }
   else {
      eff_mem_add = (immu<<1) + R(R_Src1);
   }
   write_mem_2RTable(eff_mem_add, R_Res, 2);
};

}




define (instr=MOVE_W_Da__Rnpu3__family)
{

  fields = (OPCD, Src1, immu, R_Src1);



  blk = lsu;

define (instr=MOVE_W_Da__Rnpu3_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Da__Rnpu3_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),u3(0)),
 (bits(24),u3(1)),
 (bits(25),u3(2)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from a data register to memory""";
attrs = (LMV,V2);
# 4473 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_W_Da__Rnpu3__family(OPCD(OPCD), Src1(Da), immu(u3), R_Src1(Rn));
  syntax = ( "move.w %f,(%f+%f)",Da,Rn,u3);

   }


  action=
  {




     bits<32> eff_mem_add;

     if ((R_Src1&0xf8)==0x0) {
 eff_mem_add = Address_by_mctl2(R_Src1(2,0),(immu<<1),0,2,immu);
     }
     else {
 eff_mem_add = (immu<<1) + R(R_Src1);
     }
     write_DTable_2mem(eff_mem_add, Src1, 2);
  };

}




define (instr=MOVE_W_Rq__Rnpu3__family)
{

  fields = (OPCD, R_Src1, immu, R_Src2);



  blk = lsu;

define (instr=MOVE_W_Rq__Rnpu3_)
{

  alias = MOVE_W_Rq__Rnpu3__family(OPCD(OPCD), R_Src1(qqq), immu(w_u3), R_Src2(RRR));
}
define (instr=MOVE_W_Ra__Rnpu3_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Ra__Rnpu3_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),u3(0)),
 (bits(24),u3(1)),
 (bits(25),u3(2)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from an address register to memory""";
attrs = (LMV,V2);
# 4522 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Rq__Rnpu3__family(OPCD(OPCD), R_Src1(Ra), immu(u3), R_Src2(Rn));
  syntax = ( "move.w %f,(%f+%f)",Ra,Rn,u3);
}

  action=
  {




     bits<32> eff_mem_add;



     if ((R_Src2&0xf8)==0x0) {
 eff_mem_add = Address_by_mctl2(R_Src2(2,0),(immu<<1),0,2,immu);
     }
     else {
 eff_mem_add = (immu<<1) + R(R_Src2);
     }
     write_RTable_2mem(eff_mem_add, R_Src1, 2);
  };

}




define (instr=MOVE_W__Rnps15__Da_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;

define (instr=MOVE_W__Rnps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a word from memory to a data register""";
attrs = (LMV,V2);
# 4562 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_W__Rnps15__Da_family(OPCD(OPCD), imms(s15), R_Src1(Rn), Res(Da));
  syntax = ( "move.w (%f+%f),%f",Rn,s15,Da);

   }

action=
{




   bits<32> eff_mem_add;

   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(imms),0,2,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_mem_2DTable(eff_mem_add, Res, 2);
};

}




define (instr=MOVE_W__Rnps15__Rq_family)
{

  fields = (OPCD, imms, R_Src1, R_Res);



  blk = lsu;

define (instr=MOVE_W__Rnps15__Rq)
{

  alias = MOVE_W__Rnps15__Rq_family(OPCD(OPCD), imms(w_s15), R_Src1(RRR), R_Res(qqq));
}
define (instr=MOVE_W__Rnps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__Rnps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a word from memory to an address register""";
attrs = (LMV,V2);
# 4610 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W__Rnps15__Rq_family(OPCD(OPCD), imms(s15), R_Src1(Rn), R_Res(Ra));
  syntax = ( "move.w (%f+%f),%f",Rn,s15,Ra);
}

action=
{




   bits<32> eff_mem_add;

   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(imms),0,2,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_mem_2RTable(eff_mem_add, R_Res, 2);
};

}

define (instr=MOVE_W_Da__Rnps15__family)
{

  fields = (OPCD, Src1, imms, R_Src1);



  blk = lsu;

define (instr=MOVE_W_Da__Rnps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Da__Rnps15_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a word from a data register to memory""";
attrs = (LMV,V2);
# 4645 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_W_Da__Rnps15__family(OPCD(OPCD), Src1(Da), imms(s15), R_Src1(Rn));
  syntax = ( "move.w %f,(%f+%f)",Da,Rn,s15);

   }

action=
{




   bits<32> eff_mem_add;

   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(imms),0,2,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_DTable_2mem(eff_mem_add, Src1, 2);
};

}



define (instr=MOVE_W_Rq__Rnps15__family)
{

  fields = (OPCD, R_Src1, imms, R_Src2);



  blk = lsu;


define (instr=MOVE_W_Rq__Rnps15_)
{

  alias = MOVE_W_Rq__Rnps15__family(OPCD(OPCD), R_Src1(RRR), imms(w_s15), R_Src2(qqq));
}
define (instr=MOVE_W_Ra__Rnps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Ra__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a word from an address register to memory""";
attrs = (LMV,V2);
# 4693 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Rq__Rnps15__family(OPCD(OPCD), R_Src1(Ra), imms(s15), R_Src2(Rn));
  syntax = ( "move.w %f,(%f+%f)",Ra,Rn,s15);
}


action=
{






   bits<32> eff_mem_add;

   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(imms),0,2,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_RTable_2mem(eff_mem_add, R_Src2, 2);
};

}



define (instr=MOVE_W__RnpRr__Da_family)
{

  fields = (OPCD, R_Src1, R_Src2, Res);



  blk = lsu;


define (instr=MOVE_W__RnpRr__Da)
{

  alias = MOVE_W__RnpRr__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(rrr), Res(JJJ));
}


action=
{






   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(R(R_Src2)<<1),0,2,R(R_Src2));
   }
   else {
      eff_mem_add = (R(R_Src2)<<1) + R(R_Src1);
   }
   write_mem_2DTable( eff_mem_add, Res, 2);

};

}



define (instr=MOVE_W__RnpRr__Rq_family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Res);



  blk = lsu;


define (instr=MOVE_W__RnpRr__Rq)
{

  alias = MOVE_W__RnpRr__Rq_family(OPCD(OPCD), R_Src1(RRR), R_Src2(rrr), R_Res(qqq));
}


action=
{






   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(R(R_Src2)<<1),0,2,R(R_Src2));
   }
   else {
      eff_mem_add = (R(R_Src2)<<1) + R(R_Src1);
   }
   write_mem_2RTable( eff_mem_add, R_Res, 2);

};

}



define (instr=MOVE_W_Da__RnpRr__family)
{

  fields = (OPCD, Src1, R_Src1, R_Src2);



  blk = lsu;


define (instr=MOVE_W_Da__RnpRr_)
{

  alias = MOVE_W_Da__RnpRr__family(OPCD(OPCD), Src1(JJJ), R_Src1(RRR), R_Src2(rrr));
}


action=
{






   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(R(R_Src2)<<1),0,2,R(R_Src2));
   }
   else {
      eff_mem_add = (R(R_Src2)<<1) + R(R_Src1);
   }
   write_DTable_2mem(eff_mem_add, Src1, 2);

};

}







define (instr=MOVE_W_Rq__RnpRr__family)
{

  fields = (OPCD, R_Src1, R_Src2, R_Src3);



  blk = lsu;


define (instr=MOVE_W_Rq__RnpRr_)
{

  alias = MOVE_W_Rq__RnpRr__family(OPCD(OPCD), R_Src1(RRR), R_Src2(qqq), R_Src3(rrr));
}


action=
{






   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(R(R_Src3)<<1),0,2,R(R_Src3));
   }
   else {
      eff_mem_add = (R(R_Src3)<<1) + R(R_Src1);
   }
   write_RTable_2mem(eff_mem_add, R_Src2, 2);

};

}







define (instr=MOVE_W__Rn__C3_family)
{

  fields = (OPCD, R_Src1, R_Res);



  blk = lsu;


define (instr=MOVE_W__Rn__C3)
{

  alias = MOVE_W__Rn__C3_family(OPCD(OPCD), R_Src1(RRR), R_Res(DDDD));
}


action=
{




    C3Table(R_Res) = signExtend( Mem(R(R_Src1), 2), 32);
};

}



define (instr=MOVE_W_C3__Rn__family)
{

  fields = (OPCD, G_Src1, R_Src1);



  blk = lsu;


define (instr=MOVE_W_C3__Rn_)
{

  alias = MOVE_W_C3__Rn__family(OPCD(OPCD), G_Src1(DDDD), R_Src1(RRR));
}


action=
{




    Mem(R(R_Src1), 2) = C3Table(G_Src1)(15,0);
};

}



define (instr=MOVE_W__SPmu6__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;

define (instr=MOVE_W__SPmu6__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__SPmu6__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to a data register""";
attrs = (LMV,V2);
# 4961 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_W__SPmu6__Da_family(OPCD(OPCD), immu(u6), Res(Da));
  syntax = ( "move.w (SP-%f),%f",u6,Da);

   }

action=
{




   bits<32> eff_mem_add = SP - (immu*2);
   write_mem_2DTable( eff_mem_add, Res, 2);
};

}



define (instr=MOVE_W__SPmu6__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;

define (instr=MOVE_W__SPmu6__Rq)
{

  alias = MOVE_W__SPmu6__Rq_family(OPCD(OPCD), immu(w_u6), R_Res(qqq));
}
define (instr=MOVE_W__SPmu6__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__SPmu6__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from memory to an address register""";
attrs = (LMV,V2);
# 5001 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W__SPmu6__Rq_family(OPCD(OPCD), immu(u6), R_Res(Ra));
  syntax = ( "move.w (SP-%f),%f",u6,Ra);
}

action=
{




   bits<32> eff_mem_add = SP - (immu*2);
   write_mem_2RTable( eff_mem_add, R_Res, 2);
};

}



define (instr=MOVE_W_Da__SPmu6__family)
{

  fields = (OPCD, Src1, immu);



  blk = lsu;

define (instr=MOVE_W_Da__SPmu6_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Da__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from a data register to memory""";
attrs = (LMV,V2);
# 5031 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_W_Da__SPmu6__family(OPCD(OPCD), Src1(Da), immu(u6));
  syntax = ( "move.w %f,(SP-%f)",Da,u6);

   }

action=
{




   bits<32> eff_mem_add = SP - (immu*2);
   write_DTable_2mem(eff_mem_add, Src1, 2);
};

}




define (instr=MOVE_W_Rq__SPmu6__family)
{

  fields = (OPCD, R_Src1, immu);



  blk = lsu;


define (instr=MOVE_W_Rq__SPmu6_)
{

  alias = MOVE_W_Rq__SPmu6__family(OPCD(OPCD), R_Src1(qqq), immu(w_u6));
}
define (instr=MOVE_W_Ra__SPmu6_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Ra__SPmu6_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),u6(0)),
 (bits(23),u6(1)),
 (bits(24),u6(2)),
 (bits(25),u6(3)),
 (bits(26),u6(4)),
 (bits(27),u6(5)),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from an address register to memory""";
attrs = (LMV,V2);
# 5073 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Rq__SPmu6__family(OPCD(OPCD), R_Src1(Ra), immu(u6));
  syntax = ( "move.w %f,(SP-%f)",Ra,u6);
}


action=
{






   bits<32> eff_mem_add = SP - (immu*2);
   write_RTable_2mem(eff_mem_add, R_Src1, 2);
};

}




define (instr=MOVE_W__SPps15__C3_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVE_W__SPps15__C3)
{

  alias = MOVE_W__SPps15__C3_family(OPCD(OPCD), imms(w_s15), R_Res(DDDD));
}


action=
{





 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2C3Table(eff_mem_add, R_Res, 2);
};

}




define (instr=MOVE_W__SPps15__Da_family)
{

  fields = (OPCD, imms, Res);



  blk = lsu;


define (instr=MOVE_W__SPps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a word from memory to a data register""";
attrs = (LMV,V2);
# 5141 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_W__SPps15__Da_family(OPCD(OPCD), imms(s15), Res(Da));
  syntax = ( "move.w (SP+%f),%f",s15,Da);

   }


action=
{





 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2DTable(eff_mem_add, Res, 2);
};

}




define (instr=MOVE_W__SPps15__Rq_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVE_W__SPps15__Rq)
{

  alias = MOVE_W__SPps15__Rq_family(OPCD(OPCD), imms(w_s15), R_Res(qqq));
}

define (instr=MOVE_W__SPps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__SPps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a word from memory to an address register""";
attrs = (LMV,V2);
# 5186 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
   alias = MOVE_W__SPps15__Rq_family(OPCD(OPCD), imms(s15), R_Res(Ra));
  syntax = ( "move.w (SP+%f),%f",s15,Ra);
   }

action=
{





 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2RTable(eff_mem_add, R_Res, 2);
};

}




define (instr=MOVE_W_C3__SPps15__family)
{

  fields = (OPCD, G_Src1, imms);



  blk = lsu;


define (instr=MOVE_W_C3__SPps15_)
{

  alias = MOVE_W_C3__SPps15__family(OPCD(OPCD), G_Src1(DDDD), imms(w_s15));
}


action=
{



    bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
    write_C3Table_2mem( eff_mem_add, G_Src1, 2);
};

}




define (instr=MOVE_W_Da__SPps15__family)
{
  fields = (OPCD, Src1, imms);



  blk = lsu;


define (instr=MOVE_W_Da__SPps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Da__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a word from a data register to memory""";
attrs = (LMV,V2);
# 5249 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVE_W_Da__SPps15__family(OPCD(OPCD), Src1(Da), imms(s15));
  syntax = ( "move.w %f,(SP+%f)",Da,s15);

   }


action=
{




    bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
    write_DTable_2mem( eff_mem_add, Src1, 2);
};

}




define (instr=MOVE_W_Rq__SPps15__family)
{

  fields = (OPCD, R_Src1, imms);



  blk = lsu;


define (instr=MOVE_W_Rq__SPps15_)
{

  alias = MOVE_W_Rq__SPps15__family(OPCD(OPCD), R_Src1(qqq), imms(w_s15));
}
define (instr=MOVE_W_Ra__SPps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_Ra__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a word from an address register to memory""";
attrs = (LMV,V2);
# 5292 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_Rq__SPps15__family(OPCD(OPCD), R_Src1(Ra), imms(s15));
  syntax = ( "move.w %f,(SP+%f)",Ra,s15);
}


action=
{




    bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
    write_RTable_2mem( eff_mem_add, R_Src1, 2);
};

}




define (instr=MOVE_2L_BTR0_BTR1__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "move.2l BTR0:BTR1,ea";


define (instr=MOVE_2L_BTR0_BTR1__EA_)
{

  alias = MOVE_2L_BTR0_BTR1__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVE_2L_BTR0_BTR1__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_BTR0_BTR1__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 BTR registers to memory""";
attrs = (LMV,V5);
# 5331 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_BTR0_BTR1__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.2l BTR0:BTR1,(%f)",Rn);
}
define (instr=MOVE_2L_BTR0_BTR1__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_2L_BTR0_BTR1__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 BTR registers to memory""";
attrs = (LMV,V5);
# 5337 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_2L_BTR0_BTR1__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.2l BTR0:BTR1,(%f)%f",Rn,PM);
}


action=
{




   bits<64> mem_data = concat( S_BTR0 ,S_BTR1);
   Mem(EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;
};

}



define (instr=MOVE_L_BTR1__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "move.l BTR1,ea";

define (instr=MOVE_L_BTR1__EA_)
{

  alias = MOVE_L_BTR1__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVE_L_BTR1__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_BTR1__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move BTR1 to memoty""";
attrs = (LMV,V5);
# 5374 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_BTR1__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.l BTR1,(%f)",Rn);
}
define (instr=MOVE_L_BTR1__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_BTR1__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move BTR1 to memoty""";
attrs = (LMV,V5);
# 5380 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_L_BTR1__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.l BTR1,(%f)%f",Rn,PM);
}

action=
{




    Mem(EAtable(MMM,R_Src1,2,R_Src2),4) = S_BTR1;
};

}




define (instr=MOVE_W_BTR1_H__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "move.w BTR1.H,ea";

define (instr=MOVE_W_BTR1_H__EA_)
{

  alias = MOVE_W_BTR1_H__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVE_W_BTR1_H__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_BTR1_H__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from BTR1 to memory""";
attrs = (LMV,V5);
# 5416 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_BTR1_H__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.w BTR1.h,(%f)",Rn);
}
define (instr=MOVE_W_BTR1_H__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W_BTR1_H__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a word from BTR1 to memory""";
attrs = (LMV,V5);
# 5422 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_W_BTR1_H__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.w BTR1.h,(%f)%f",Rn,PM);
}

action=
{




    Mem(EAtable(MMM,R_Src1,1,R_Src2),2) = S_BTR1(31,16);
};

}


define (instr=MOVE_B_BTR1_HH__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "move.b BTR1.HH,ea";


define (instr=MOVE_B_BTR1_HH__EA_)
{

  alias = MOVE_B_BTR1_HH__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVE_B_BTR1_HH__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_BTR1_HH__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from BTR1 to memory""";
attrs = (LMV,V5);
# 5457 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_BTR1_HH__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move.b btr1.hh,(%f)",Rn);
}
define (instr=MOVE_B_BTR1_HH__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B_BTR1_HH__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a byte from BTR1 to memory""";
attrs = (LMV,V5);
# 5463 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE_B_BTR1_HH__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move.b btr1.hh,(%f)%f",Rn,PM);
}


action=
{




    Mem(EAtable(MMM,R_Src1,0,R_Src2),1) = S_BTR1(31,24);
};

}



define (instr=MOVE_L_BTR0__a32__family)
{

  fields = (OPCD, immu);



  blk = lsu;

define (instr=MOVE_L_BTR0__a32_)
{

  alias = MOVE_L_BTR0__a32__family(OPCD(OPCD), immu(l_a32));
}

action=
{




 Mem(immu,4) = S_BTR0;
};

}


define (instr=MOVE_L__a32__BTR0_family)
{

  fields = (OPCD, immu);



  blk = lsu;


define (instr=MOVE_L__a32__BTR0)
{

  alias = MOVE_L__a32__BTR0_family(OPCD(OPCD), immu(l_a32));
}


action=
{




    BTR0 = Mem(immu,4);
};

}


define (instr=MOVE_L_BTR1__a32__family)
{

  fields = (OPCD, immu);



  blk = lsu;


define (instr=MOVE_L_BTR1__a32_)
{

  alias = MOVE_L_BTR1__a32__family(OPCD(OPCD), immu(l_a32));
}


action=
{




    Mem(immu,4) = S_BTR1;
};

}


define (instr=MOVE_L__a32__BTR1_family)
{

  fields = (OPCD,immu);



  blk = lsu;


define (instr=MOVE_L__a32__BTR1)
{

  alias = MOVE_L__a32__BTR1_family(OPCD(OPCD), immu(l_a32));
}


action=
{




    BTR1 = Mem(immu,4);
};

}




define (instr=MOVET_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);



  blk = lsu;

define (instr=MOVET_Rq_Rn)
{

  alias = MOVET_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Res(RRR));
}
define (instr=MOVET_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVET_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Conditionally move an address register""";
attrs = (LMREG,V2);
# 5614 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVET_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "movet %f,%f",Ra,Rn);
}

action=
{




    if (SR.T==1) {
       R(R_Res) = R(R_Src1);
    } else {
       bits<32> tmp = R(R_Src1);
    }
};

}


define (instr=MOVEF_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);



  blk = lsu;


define (instr=MOVEF_Rq_Rn)
{

  alias = MOVEF_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Res(RRR));
}
define (instr=MOVEF_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEF_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Conditionally move an address register""";
attrs = (LMREG,V2);
# 5652 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEF_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "movef %f,%f",Ra,Rn);
}


action=
{




   if (SR.T==0) {
      R(R_Res) = R(R_Src1);
   } else {
       bits<32> tmp = R(R_Src1);
   }
};

}



define (instr=MOVEU_4B__EA__Da_Db_Dc_Dd_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2, Res3, Res4);



  blk = lsu;
  doc_title = "moveu.4b EA,Da:Db:Dc:Dd";


define (instr=MOVEU_4B__EA__Da_Db_Dc_Dd)
{

  alias = MOVEU_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=MOVEU_4B__Rn__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4B__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned bytes from memory to a data register quad""";
attrs = (LMV,V3);
# 5693 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "moveu.4b (%f),%f",Rn,Dabcd);
}
define (instr=MOVEU_4B__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4B__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned bytes from memory to a data register quad""";
attrs = (LMV,V3);
# 5699 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "moveu.4b (%f)+%f,%f",Rn,Rk,Dabcd);
}
define (instr=MOVEU_4B__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4B__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned bytes from memory to a data register quad""";
attrs = (LMV,V3);
# 5705 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "moveu.4b (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVEU_4B__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_4B__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned bytes from memory to a data register quad""";
attrs = (LMV,V3);
# 5711 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_4B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "moveu.4b (%f+%f),%f",Rn,Rk,Dabcd);
}


  action=
  {




     bits<32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2),4);
     D(Res4) = zeroExtend( mem_data(7,0), 40);
     D(Res3) = zeroExtend( mem_data(15,8), 40);
     D(Res2) = zeroExtend( mem_data(23,16), 40);
     D(Res) = zeroExtend( mem_data(31,24), 40);
# 5739 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
  };

}




define (instr=MOVEU_B__a16__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVEU_B__a16__Da)
{

  alias = MOVEU_B__a16__Da_family(OPCD(OPCD), immu(u16), Res(JJJ));
}


action=
{




    write_mem_2DTable_zeroextend(immu, Res, 1);
};

}




define (instr=MOVEU_B__a16__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVEU_B__a16__Rq)
{

  alias = MOVEU_B__a16__Rq_family(OPCD(OPCD), immu(u16), R_Res(qqq));
}


action=
{




    write_mem_2RTable_zeroextend(immu, R_Res, 1);
};

}




define (instr=MOVEU_B__a32__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVEU_B__a32__Da)
{





  alias = MOVEU_B__a32__Da_family(OPCD(OPCD), immu(a32), Res(Da));
  syntax = ( "moveu.b (%f),%f",a32,Da);

   }

action=
{




 write_mem_2DTable_zeroextend(immu, Res, 1);
};

}




define (instr=MOVEU_B__a32__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVEU_B__a32__Rq)
{

  alias = MOVEU_B__a32__Rq_family(OPCD(OPCD), immu(a32), R_Res(qqq));
}
define (instr=MOVEU_B__a32__Ra)
{

  alias = MOVEU_B__a32__Rq_family(OPCD(OPCD), immu(a32), R_Res(Ra));
  syntax = ( "moveu.b (%f),%f",a32,Ra);
}


action=
{




 write_mem_2RTable_zeroextend(immu, R_Res, 1);
};

}




define (instr=MOVEU_B__Rnps15__Da_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;


define (instr=MOVEU_B__Rnps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned byte from memory to a data register""";
attrs = (LMV,V2);
# 5894 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVEU_B__Rnps15__Da_family(OPCD(OPCD), imms(s15), R_Src1(Rn), Res(Da));
  syntax = ( "moveu.b (%f+%f),%f",Rn,s15,Da);

   }


action=
{






   bits<32> eff_mem_add;

   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,1,imms);
   }
   else {
      eff_mem_add = imms + R(R_Src1);
   }
   write_mem_2DTable_zeroextend(eff_mem_add, Res, 1);
};

}




define (instr=MOVEU_B__Rnps15__Rq_family)
{

  fields = (OPCD, imms, R_Src1, R_Res);



  blk = lsu;


define (instr=MOVEU_B__Rnps15__Rq)
{

  alias = MOVEU_B__Rnps15__Rq_family(OPCD(OPCD), imms(s15), R_Src1(RRR), R_Res(qqq));
}
define (instr=MOVEU_B__Rnps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__Rnps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned byte from memory to an address register""";
attrs = (LMV,V2);
# 5946 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__Rnps15__Rq_family(OPCD(OPCD), imms(s15), R_Src1(Rn), R_Res(Ra));
  syntax = ( "moveu.b (%f+%f),%f",Rn,s15,Ra);
}


action=
{






   bits<32> eff_mem_add;

   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,1,imms);
   }
   else {
      eff_mem_add = imms + R(R_Src1);
   }
   write_mem_2RTable_zeroextend(eff_mem_add, R_Res, 1);
};

}




define (instr=MOVEU_B__ea__Da_family)
{

  fields = (OPCD, MM, R_Src1, R_Src2, Res);



  blk = lsu;
  doc_title = "moveu.b EA,Da";


define (instr=MOVEU_B__ea__Da)
{

  alias = MOVEU_B__ea__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MM(MM), Res(JJJ));
}
define (instr=MOVEU_B__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to a data register""";
attrs = (LMV,V2);
# 5994 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__ea__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MM(3), Res(Da));
  syntax = ( "moveu.b (%f),%f",Rn,Da);
}
define (instr=MOVEU_B__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to a data register""";
attrs = (LMV,V2);
# 6000 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__ea__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MM(4), Res(Da));
  syntax = ( "moveu.b (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVEU_B__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to a data register""";
attrs = (LMV,V2);
# 6006 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__ea__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MM(~PM), Res(Da));
  syntax = ( "moveu.b (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVEU_B__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to a data register""";
attrs = (LMV,V2);
# 6012 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__ea__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MM(2), Res(Da));
  syntax = ( "moveu.b (%f+%f),%f",Rn,Rk,Da);
}


action=
{




 write_mem_2DTable_zeroextend(EAtable( ea_2EA(MM),R_Src1,0,R_Src2), Res, 1);
};

}



define (instr=MOVEU_B__ea__Rq_family)
{

  fields = (OPCD, MM, R_Src1, R_Src2, R_Res);



  blk = lsu;
  doc_title = "moveu.b EA,Ra";



define (instr=MOVEU_B__ea__Rq)
{

  alias = MOVEU_B__ea__Rq_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MM(MM), R_Res(qqq));
}
define (instr=MOVEU_B__Rn__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__Rn__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to an address register""";
attrs = (LMV,V2);
# 6050 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__ea__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MM(3), R_Res(Ra));
  syntax = ( "moveu.b (%f),%f",Rn,Ra);
}
define (instr=MOVEU_B__Rn_pRk_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__Rn_pRk_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to an address register""";
attrs = (LMV,V2);
# 6056 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__ea__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MM(4), R_Res(Ra));
  syntax = ( "moveu.b (%f)+%f,%f",Rn,Rk,Ra);
}
define (instr=MOVEU_B__Rn_PM_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__Rn_PM_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to an address register""";
attrs = (LMV,V2);
# 6062 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__ea__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MM(~PM), R_Res(Ra));
  syntax = ( "moveu.b (%f)%f,%f",Rn,PM,Ra);
}
define (instr=MOVEU_B__RnpRk__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__RnpRk__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned byte from memory to an address register""";
attrs = (LMV,V2);
# 6068 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__ea__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MM(2), R_Res(Ra));
  syntax = ( "moveu.b (%f+%f),%f",Rn,Rk,Ra);
}


action=
{




 write_mem_2RTable_zeroextend(EAtable( ea_2EA(MM),R_Src1,0,R_Src2), R_Res, 1);
};

}



define (instr=MOVEU_B__Ea__Db_family)
{

  fields = (OPCD, mm, R_Src1,Res);



  blk = lsu;


define (instr=MOVEU_B__Ea__Db)
{

  alias = MOVEU_B__Ea__Db_family(OPCD(OPCD), mm(mm), R_Src1(RRR), Res(jjj));
}


action=
{






   bits<3> mm_2MMM = mm+4;
   D(Res) = zeroExtend(Mem(EAtable(mm_2MMM,R_Src1,0),1), 40);



};

}




define (instr=MOVEU_B__SPps15__Da_family)
{

  fields = (OPCD, imms, Res);



  blk = lsu;


define (instr=MOVEU_B__SPps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned byte from memory to a data register""";
attrs = (LMV,V2);
# 6136 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVEU_B__SPps15__Da_family(OPCD(OPCD), imms(s15), Res(Da));
  syntax = ( "moveu.b (SP+%f),%f",s15,Da);

   }


action=
{





 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2DTable_zeroextend(eff_mem_add, Res, 1);
};

}




define (instr=MOVEU_B__SPps15__Rq_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVEU_B__SPps15__Rq)
{

  alias = MOVEU_B__SPps15__Rq_family(OPCD(OPCD), imms(s15), R_Res(qqq));
}
define (instr=MOVEU_B__SPps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_B__SPps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned byte from memory to an address register""";
attrs = (LMV,V2);
# 6180 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_B__SPps15__Rq_family(OPCD(OPCD), imms(s15), R_Res(Ra));
  syntax = ( "moveu.b (SP+%f),%f",s15,Ra);
}


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2RTable_zeroextend(eff_mem_add, R_Res, 1);
};

}




define (instr=MOVEU_L__u32_Db_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVEU_L__u32_Db)
{

  alias = MOVEU_L__u32_Db_family(OPCD(OPCD), immu(u32), Res(jjj));
}
define (instr=MOVEU_L__u32_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_L__u32_Dn_ipu.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),u32_t2(0)),
 (bits(5),u32_t2(1)),
 (bits(6),u32_t2(2)),
 (bits(7),u32_t2(3)),
 (bits(8),u32_t2(4)),
 (bits(9),u32_t2(5)),
 (bits(10),u32_t2(6)),
 (bits(11),Dn(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(1)),
 (bits(17),Dn(2)),
 (bits(18),Dn(3)),
 (bits(19),Dn(4)),
 (bits(20),Dn(5)),
 (bits(21),u32_t2(7)),
 (bits(22),u32_t2(8)),
 (bits(23),u32_t2(9)),
 (bits(24),u32_t2(10)),
 (bits(25),u32_t2(11)),
 (bits(26),u32_t2(12)),
 (bits(27),u32_t2(13)),
 (bits(28),u32_t2(14)),
 (bits(29),u32_t2(15)),
 (bits(30),u32_t2(16)),
 (bits(31),b0),
 (bits(32),u32_t2(17)),
 (bits(33),u32_t2(18)),
 (bits(34),u32_t2(19)),
 (bits(35),u32_t2(20)),
 (bits(36),u32_t2(21)),
 (bits(37),u32_t2(22)),
 (bits(38),u32_t2(23)),
 (bits(39),u32_t2(24)),
 (bits(40),u32_t2(25)),
 (bits(41),u32_t2(26)),
 (bits(42),u32_t2(27)),
 (bits(43),u32_t2(28)),
 (bits(44),u32_t2(29)),
 (bits(45),u32_t2(30)),
 (bits(46),u32_t2(31)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned immediate to D""";
attrs = (LMREG,V7);
# 6218 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_L__u32_Db_family(OPCD(OPCD), immu(u32_t2), Res(Dn));
  syntax = ( "moveu.l #%f,%f",u32_t2,Dn);
}


action=
{




 D(Res) = zeroExtend(immu, 40);



};

}



define (instr=MOVEU_W__a16__C3_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVEU_W__a16__C3)
{

  alias = MOVEU_W__a16__C3_family(OPCD(OPCD), immu(w_a16), R_Res(DDDD));
}


action=
{




 write_mem_2C3Table_zeroextend(immu, R_Res, 2);
};

}



define (instr=MOVEU_W__a16__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVEU_W__a16__Da)
{

  alias = MOVEU_W__a16__Da_family(OPCD(OPCD), immu(w_a16), Res(JJJ));
}


action=
{




 write_mem_2DTable_zeroextend(immu, Res, 2);
};

}



define (instr=MOVEU_W__a16__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVEU_W__a16__Rq)
{

  alias = MOVEU_W__a16__Rq_family(OPCD(OPCD), immu(w_a16), R_Res(qqq));
}


action=
{




 write_mem_2RTable_zeroextend(immu, R_Res, 2);
};

}



define (instr=MOVEU_W__a32__Da_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVEU_W__a32__Da)
{





  alias = MOVEU_W__a32__Da_family(OPCD(OPCD), immu(a32), Res(Da));
  syntax = ( "moveu.w (%f),%f",a32,Da);

   }


action=
{






 write_mem_2DTable_zeroextend(immu, Res, 2);
};

}



define (instr=MOVEU_W__a32__Rq_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVEU_W__a32__Rq)
{

  alias = MOVEU_W__a32__Rq_family(OPCD(OPCD), immu(a32_label), R_Res(qqq));
}
define (instr=MOVEU_W__a32__Ra)
{

  alias = MOVEU_W__a32__Rq_family(OPCD(OPCD), immu(a32), R_Res(Ra));
  syntax = ( "moveu.w (%f),%f",a32,Ra);
}


action=
{






 write_mem_2RTable_zeroextend(immu, R_Res, 2);
};

}



define (instr=MOVEU_W__Rnps15__Da_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;


define (instr=MOVEU_W__Rnps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned word from memory to a data register""";
attrs = (LMV,V2);
# 6418 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVEU_W__Rnps15__Da_family(OPCD(OPCD), imms(s15), R_Src1(Rn), Res(Da));
  syntax = ( "moveu.w (%f+%f),%f",Rn,s15,Da);

   }


action=
{







   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(imms),0,2,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_mem_2DTable_zeroextend(eff_mem_add,Res,2);

};

}




define (instr=MOVEU_W__Rnps15__Rq_family)
{

  fields = (OPCD, imms, R_Src1, R_Res);



  blk = lsu;


define (instr=MOVEU_W__Rnps15__Rq)
{

  alias = MOVEU_W__Rnps15__Rq_family(OPCD(OPCD), imms(w_s15), R_Src1(RRR), R_Res(qqq));
}
define (instr=MOVEU_W__Rnps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rnps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned word from memory to an address register""";
attrs = (LMV,V2);
# 6471 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__Rnps15__Rq_family(OPCD(OPCD), imms(s15), R_Src1(Rn), R_Res(Ra));
  syntax = ( "moveu.w (%f+%f),%f",Rn,s15,Ra);
}


action=
{







   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),(imms),0,2,imms);
   }
   else {
      eff_mem_add = (imms) + R(R_Src1);
   }
   write_mem_2RTable_zeroextend(eff_mem_add,R_Res,2);

};

}




define (instr=MOVEU_W__EA__Da_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res);



  blk = lsu;
  doc_title = "moveu.w EA,Da";


define (instr=MOVEU_W__EA__Da)
{

  alias = MOVEU_W__EA__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(JJJ));
}
define (instr=MOVEU_W__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to a data register""";
attrs = (LMV,V2);
# 6520 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "moveu.w (%f),%f",Rn,Da);
}
define (instr=MOVEU_W__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to a data register""";
attrs = (LMV,V2);
# 6526 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "moveu.w (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVEU_W__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to a data register""";
attrs = (LMV,V2);
# 6532 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "moveu.w (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVEU_W__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to a data register""";
attrs = (LMV,V2);
# 6538 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "moveu.w (%f+%f),%f",Rn,Rk,Da);
}


action=
{






   write_mem_2DTable_zeroextend(EAtable(MMM,R_Src1,1,R_Src2),Res,2);
};

}




define (instr=MOVEU_W__EA__Rq_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, R_Res);



  blk = lsu;
  doc_title = "moveu.w EA,Ra";


define (instr=MOVEU_W__EA__Rq)
{

  alias = MOVEU_W__EA__Rq_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), R_Res(qqq));
}
define (instr=MOVEU_W__Rn__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to an address register""";
attrs = (LMV,V2);
# 6578 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), R_Res(Ra));
  syntax = ( "moveu.w (%f),%f",Rn,Ra);
}
define (instr=MOVEU_W__Rn_pRk_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn_pRk_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to an address register""";
attrs = (LMV,V2);
# 6584 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), R_Res(Ra));
  syntax = ( "moveu.w (%f)+%f,%f",Rn,Rk,Ra);
}
define (instr=MOVEU_W__Rn_PM_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn_PM_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to an address register""";
attrs = (LMV,V2);
# 6590 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), R_Res(Ra));
  syntax = ( "moveu.w (%f)%f,%f",Rn,PM,Ra);
}
define (instr=MOVEU_W__RnpRk__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__RnpRk__Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to an address register""";
attrs = (LMV,V2);
# 6596 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Rq_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), R_Res(Ra));
  syntax = ( "moveu.w (%f+%f),%f",Rn,Rk,Ra);
}


action=
{






   write_mem_2RTable_zeroextend(EAtable(MMM,R_Src1,1,R_Src2),R_Res,2);
};

}




define (instr=MOVEU_W__SPps15__C3_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVEU_W__SPps15__C3)
{

  alias = MOVEU_W__SPps15__C3_family(OPCD(OPCD), imms(w_s15), R_Res(DDDD));
}


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2C3Table_zeroextend(eff_mem_add, R_Res, 2);
};

}




define (instr=MOVEU_W__SPps15__Da_family)
{

  fields = (OPCD, imms, Res);



  blk = lsu;


define (instr=MOVEU_W__SPps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__SPps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned word from memory to a data register""";
attrs = (LMV,V2);
# 6662 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2




  alias = MOVEU_W__SPps15__Da_family(OPCD(OPCD), imms(s15), Res(Da));
  syntax = ( "moveu.w (SP+%f),%f",s15,Da);

   }


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2DTable_zeroextend(eff_mem_add, Res, 2);
};

}




define (instr=MOVEU_W__SPps15__Rq_family)
{

  fields = (OPCD, imms, R_Res);



  blk = lsu;


define (instr=MOVEU_W__SPps15__Rq)
{

  alias = MOVEU_W__SPps15__Rq_family(OPCD(OPCD), imms(w_s15), R_Res(qqq));
}


define (instr=MOVEU_W__SPps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__SPps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned word from memory to an address register""";
attrs = (LMV,V2);
# 6707 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
   alias = MOVEU_W__SPps15__Rq_family(OPCD(OPCD), imms(s15), R_Res(Ra));
  syntax = ( "moveu.w (SP+%f),%f",s15,Ra);
   }


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 write_mem_2RTable_zeroextend(eff_mem_add, R_Res, 2);
};

}




define (instr=MOVEU_W__u16_Rn_family)
{

  fields = (OPCD, immu, R_Res);



  blk = lsu;


define (instr=MOVEU_W__u16_Rn)
{

  alias = MOVEU_W__u16_Rn_family(OPCD(OPCD), immu(u16), R_Res(RRR));
}


action=
{




 R(R_Res) = immu;
};

}



define (instr=MOVEU_W__EA__Db_L_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res);



  blk = lsu;
  doc_title = "moveu.w EA,Da.L";


define (instr=MOVEU_W__EA__Db_L)
{

  alias = MOVEU_W__EA__Db_L_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(jjj));
}
define (instr=MOVEU_W__Rn__Da_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn__Da_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to the low portion of a data register""";
attrs = (LMV,V5);
# 6776 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Db_L_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "moveu.w (%f),%f.l",Rn,Da);
}
define (instr=MOVEU_W__Rn_pRk_Da_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn_pRk_Da_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to the low portion of a data register""";
attrs = (LMV,V5);
# 6782 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Db_L_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "moveu.w (%f)+%f,%f.l",Rn,Rk,Da);
}
define (instr=MOVEU_W__Rn_PM_Da_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn_PM_Da_L.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to the low portion of a data register""";
attrs = (LMV,V5);
# 6788 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Db_L_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "moveu.w (%f)%f,%f.l",Rn,PM,Da);
}
define (instr=MOVEU_W__RnpRk__Da_L)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__RnpRk__Da_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to the low portion of a data register""";
attrs = (LMV,V5);
# 6794 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Db_L_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "moveu.w (%f+%f),%f.l",Rn,Rk,Da);
}


action=
{




 D(Res).L = Mem(EAtable(MMM,R_Src1,1,R_Src2),2);



};

}


define (instr=MOVEU_W__EA__Db_H_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res);



  blk = lsu;
  doc_title = "moveu.w EA,Da.H";


define (instr=MOVEU_W__EA__Db_H)
{

  alias = MOVEU_W__EA__Db_H_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(jjj));
}
define (instr=MOVEU_W__Rn__Da_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn__Da_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to the high portion of a data register""";
attrs = (LMV,V5);
# 6833 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Db_H_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "moveu.w (%f),%f.h",Rn,Da);
}
define (instr=MOVEU_W__Rn_pRk_Da_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn_pRk_Da_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to the high portion of a data register""";
attrs = (LMV,V5);
# 6839 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Db_H_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "moveu.w (%f)+%f,%f.h",Rn,Rk,Da);
}
define (instr=MOVEU_W__Rn_PM_Da_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__Rn_PM_Da_H.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to the high portion of a data register""";
attrs = (LMV,V5);
# 6845 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Db_H_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "moveu.w (%f)%f,%f.h",Rn,PM,Da);
}
define (instr=MOVEU_W__RnpRk__Da_H)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__RnpRk__Da_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an unsigned word from memory to the high portion of a data register""";
attrs = (LMV,V5);
# 6851 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU_W__EA__Db_H_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "moveu.w (%f+%f),%f.h",Rn,Rk,Da);
}


action=
{




 D(Res).H = Mem(EAtable(MMM,R_Src1,1,R_Src2),2);



};

}



define (instr=MOVEU2_2B__EA__Da_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res);



  blk = lsu;
  doc_title = "moveu2.2b EA,Da";


define (instr=MOVEU2_2B__EA__Da)
{

  alias = MOVEU2_2B__EA__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(jjj));
}
define (instr=MOVEU2_2B__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_2B__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two unsigned bytes from a data register to memory""";
attrs = (LMV,V5);
# 6891 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_2B__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "moveu2.2b (%f),%f",Rn,Da);
}
define (instr=MOVEU2_2B__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_2B__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two unsigned bytes from a data register to memory""";
attrs = (LMV,V5);
# 6897 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_2B__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "moveu2.2b (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVEU2_2B__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_2B__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two unsigned bytes from a data register to memory""";
attrs = (LMV,V5);
# 6903 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_2B__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "moveu2.2b (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVEU2_2B__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_2B__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two unsigned bytes from a data register to memory""";
attrs = (LMV,V5);
# 6909 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_2B__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "moveu2.2b (%f+%f),%f",Rn,Rk,Da);
}


action=
{




 bits <16> mem_data = Mem( EAtable(MMM,R_Src1,1,R_Src2),2);
 D(Res).WL = zeroExtend(mem_data(7,0),20);
 D(Res).WH = zeroExtend(mem_data(15,8),20);



};

}


define (instr=MOVEU2_4B__EA__Da_Db_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2);



  blk = lsu;
  doc_title = "moveu2.4b EA,Da:Db";


define (instr=MOVEU2_4B__EA__Da_Db)
{

  alias = MOVEU2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=MOVEU2_4B__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_4B__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned bytes from memory to a data register pair""";
attrs = (LMV,V4);
# 6950 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "moveu2.4b (%f),%f",Rn,Dab);
}
define (instr=MOVEU2_4B__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_4B__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned bytes from memory to a data register pair""";
attrs = (LMV,V4);
# 6956 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "moveu2.4b (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=MOVEU2_4B__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_4B__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned bytes from memory to a data register pair""";
attrs = (LMV,V4);
# 6962 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "moveu2.4b (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVEU2_4B__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_4B__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four unsigned bytes from memory to a data register pair""";
attrs = (LMV,V4);
# 6968 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "moveu2.4b (%f+%f),%f",Rn,Rk,Dab);
}


action=
{




    bits <32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2), 4);
    D(Res2).WL = zeroExtend(mem_data(7,0),20);
    D(Res2).WH = zeroExtend(mem_data(15,8),20);
    D(Res).WL = zeroExtend(mem_data(23,16),20);
    D(Res).WH = zeroExtend(mem_data(31,24),20);






};

}





define (instr=MOVEU2_8B__EA__Da_Db_Dc_Dd_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2, Res3, Res4);



  blk = lsu;
  doc_title = "moveu2.8b EA,Da:Db:Dc:Dd";


define (instr=MOVEU2_8B__EA__Da_Db_Dc_Dd)
{

  alias = MOVEU2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=MOVEU2_8B__Rn__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_8B__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight unsigned bytes from memory to a data register quad""";
attrs = (LMV,V5);
# 7017 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "moveu2.8b (%f),%f",Rn,Dabcd);
}
define (instr=MOVEU2_8B__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_8B__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight unsigned bytes from memory to a data register quad""";
attrs = (LMV,V5);
# 7023 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "moveu2.8b (%f)+%f,%f",Rn,Rk,Dabcd);
}
define (instr=MOVEU2_8B__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_8B__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight unsigned bytes from memory to a data register quad""";
attrs = (LMV,V5);
# 7029 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "moveu2.8b (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVEU2_8B__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU2_8B__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight unsigned bytes from memory to a data register quad""";
attrs = (LMV,V5);
# 7035 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEU2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "moveu2.8b (%f+%f),%f",Rn,Rk,Dabcd);
}


action=
{




 bits <64> mem_data = Mem( EAtable(MMM,R_Src1,3,R_Src2), 8);
 D(Res4).WL = zeroExtend(mem_data(7,0),20);
 D(Res4).WH = zeroExtend(mem_data(15,8),20);



 D(Res3).WL = zeroExtend(mem_data(23,16),20);
 D(Res3).WH = zeroExtend(mem_data(31,24),20);



 D(Res2).WL = zeroExtend(mem_data(39,32),20);
 D(Res2).WH = zeroExtend(mem_data(47,40),20);



 D(Res).WL = zeroExtend(mem_data(55,48),20);
 D(Res).WH = zeroExtend(mem_data(63,56),20);




};

}



define (instr=MOVE2_2B_Da__EA__family)
{

  fields = (OPCD, Src1, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "move2.2b Da,EA";


define (instr=MOVE2_2B_Da__EA_)
{

  alias = MOVE2_2B_Da__EA__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVE2_2B_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two bytes from a data register to memory""";
attrs = (LMV,V5);
# 7093 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2B_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move2.2b %f,(%f)",Da,Rn);
}
define (instr=MOVE2_2B_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two bytes from a data register to memory""";
attrs = (LMV,V5);
# 7099 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2B_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move2.2b %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVE2_2B_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two bytes from a data register to memory""";
attrs = (LMV,V5);
# 7105 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2B_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move2.2b %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVE2_2B_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two bytes from a data register to memory""";
attrs = (LMV,V5);
# 7111 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2B_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move2.2b %f,(%f+%f)",Da,Rn,Rk);
}


action=
{




   bits <16> mem_data = concat(D(Src1).HL, D(Src1).LL);
   Mem( EAtable(MMM,R_Src1,1,R_Src2),2)= mem_data;
};

}


define (instr=MOVE2_2B__EA__Da_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res);



  blk = lsu;
  doc_title = "move2.2b EA,Da";


define (instr=MOVE2_2B__EA__Da)
{

  alias = MOVE2_2B__EA__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(jjj));
}
define (instr=MOVE2_2B__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes from memory to a data register""";
attrs = (LMV,V5);
# 7148 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2B__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "move2.2b (%f),%f",Rn,Da);
}
define (instr=MOVE2_2B__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes from memory to a data register""";
attrs = (LMV,V5);
# 7154 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2B__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "move2.2b (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVE2_2B__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes from memory to a data register""";
attrs = (LMV,V5);
# 7160 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2B__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "move2.2b (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE2_2B__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2B__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  bytes from memory to a data register""";
attrs = (LMV,V5);
# 7166 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2B__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "move2.2b (%f+%f),%f",Rn,Rk,Da);
}


action=
{







 bits <16> mem_data = Mem( EAtable(MMM,R_Src1,1,R_Src2),2);
 D(Res).WL = signExtend(mem_data(7,0), 20);
 D(Res).WH = signExtend(mem_data(15,8), 20);



};

}


define (instr=MOVE2_4B__EA__Da_Db_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2);



  blk = lsu;
  doc_title = "move2.4b EA,Da:Db";


define (instr=MOVE2_4B__EA__Da_Db)
{

  alias = MOVE2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=MOVE2_4B__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from memory to a data register pair""";
attrs = (LMV,V5);
# 7210 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4b (%f),%f",Rn,Dab);
}
define (instr=MOVE2_4B__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from memory to a data register pair""";
attrs = (LMV,V5);
# 7216 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4b (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=MOVE2_4B__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from memory to a data register pair""";
attrs = (LMV,V5);
# 7222 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4b (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE2_4B__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from memory to a data register pair""";
attrs = (LMV,V5);
# 7228 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4B__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4b (%f+%f),%f",Rn,Rk,Dab);
}


action=
{




 bits <32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2),4);
 D(Res2).WL = signExtend(mem_data(7,0), 20);
 D(Res2).WH = signExtend(mem_data(15,8), 20);



 D(Res).WL = signExtend(mem_data(23,16), 20);
 D(Res).WH = signExtend(mem_data(31,24), 20);



};

}


define (instr=MOVE2_4B_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "moveu2.4b Da:Db,EA";


define (instr=MOVE2_4B_Da_Db__EA_)
{

  alias = MOVE2_4B_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVE2_4B_Da_Db__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from a data register pair to memory""";
attrs = (LMV,V4);
# 7274 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4B_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move2.4b %f,(%f)",Dab,Rn);
}
define (instr=MOVE2_4B_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from a data register pair to memory""";
attrs = (LMV,V4);
# 7280 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4B_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move2.4b %f,(%f)+%f",Dab,Rn,Rk);
}
define (instr=MOVE2_4B_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from a data register pair to memory""";
attrs = (LMV,V4);
# 7286 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4B_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move2.4b %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVE2_4B_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4B_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four bytes from a data register pair to memory""";
attrs = (LMV,V4);
# 7292 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4B_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move2.4b %f,(%f+%f)",Dab,Rn,Rk);
}


action=
{




   bits <8> Db_LL = D(Src2).LL;
   bits <8> Db_HL = D(Src2).HL;
   bits <8> Da_LL = D(Src1).LL;
   bits <8> Da_HL = D(Src1).HL;
   bits <32> mem_data = concat(Da_HL, Da_LL, Db_HL, Db_LL);
   Mem(EAtable(MMM,R_Src1,2,R_Src2),4)= mem_data;
};

}


define (instr=MOVE2_8B_Da_Db_Dc_Dd__EA__family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "move2.8b Da:Db:Dc:Dd,EA";



define (instr=MOVE2_8B_Da_Db_Dc_Dd__EA_)
{

  alias = MOVE2_8B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVE2_8B_Da_Db_Dc_Dd__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight bytes from  a data register quad to memory""";
attrs = (LMV,V5);
# 7334 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "move2.8b %f,(%f)",Dabcd,Rn);
}
define (instr=MOVE2_8B_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight bytes from  a data register quad to memory""";
attrs = (LMV,V5);
# 7340 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "move2.8b %f,(%f)+%f",Dabcd,Rn,Rk);
}
define (instr=MOVE2_8B_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight bytes from  a data register quad to memory""";
attrs = (LMV,V5);
# 7346 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "move2.8b %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVE2_8B_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight bytes from  a data register quad to memory""";
attrs = (LMV,V5);
# 7352 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8B_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "move2.8b %f,(%f+%f)",Dabcd,Rn,Rk);
}


action=
{




  bits <8> Dd_LL = D(Src4).LL;
  bits <8> Dd_HL = D(Src4).HL;
  bits <8> Dc_LL = D(Src3).LL;
  bits <8> Dc_HL = D(Src3).HL;
  bits <8> Db_LL = D(Src2).LL;
  bits <8> Db_HL = D(Src2).HL;
  bits <8> Da_LL = D(Src1).LL;
  bits <8> Da_HL = D(Src1).HL;
  bits <32> mem_data1 = concat(Da_HL, Da_LL, Db_HL, Db_LL);
  bits <32> mem_data2 = concat(Dc_HL, Dc_LL, Dd_HL, Dd_LL);
  bits <64> mem_data = concat(mem_data1,mem_data2);
  Mem( EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;
};

}


define (instr=MOVE2_8B__EA__Da_Db_Dc_Dd_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2, Res3, Res4);



  blk = lsu;
  doc_title = "move2.8b EA,Da:Db:Dc:Dd";


define (instr=MOVE2_8B__EA__Da_Db_Dc_Dd)
{

  alias = MOVE2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=MOVE2_8B__Rn__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight bytes from memory to a data register quad""";
attrs = (LMV,V5);
# 7399 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move2.8b (%f),%f",Rn,Dabcd);
}
define (instr=MOVE2_8B__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight bytes from memory to a data register quad""";
attrs = (LMV,V5);
# 7405 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move2.8b (%f)+%f,%f",Rn,Rk,Dabcd);
}
define (instr=MOVE2_8B__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight bytes from memory to a data register quad""";
attrs = (LMV,V5);
# 7411 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move2.8b (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVE2_8B__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8B__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight bytes from memory to a data register quad""";
attrs = (LMV,V5);
# 7417 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8B__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move2.8b (%f+%f),%f",Rn,Rk,Dabcd);
}


action=
{




 bits <64> mem_data = Mem( EAtable(MMM,R_Src1,3,R_Src2), 8);

 D(Res4).WL = signExtend(mem_data(7,0),20);
 D(Res4).WH = signExtend(mem_data(15,8),20);



 D(Res3).WL = signExtend(mem_data(23,16),20);
 D(Res3).WH = signExtend(mem_data(31,24),20);



 D(Res2).WL = signExtend(mem_data(39,32),20);
 D(Res2).WH = signExtend(mem_data(47,40),20);



 D(Res).WL = signExtend(mem_data(55,48),20);
 D(Res).WH = signExtend(mem_data(63,56),20);




};

}



define (instr=MOVES_2F_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, MMM, R_Src1, R_Src2);



  blk = lsu;


define (instr=MOVES_2F_Da_Db__EA_)
{

  alias = MOVES_2F_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), MMM(MMM), R_Src1(RRR), R_Src2(8));
}


action=
{




 bits<40> value_Da = scale(Src1,L(Src1));
 bits<40> value_Db = scale(Src2,L(Src2));
 value_Da = sat_moves( L(Src1), value_Da);
 value_Db = sat_moves( L(Src2), value_Db);
 bits <32> mem_data = concat(value_Da(31,16),value_Db(31,16));
 Mem( EAtable(MMM,R_Src1,2,R_Src2),4) = mem_data;
};

}



define (instr=MOVES_4F_Da_Db_Dc_Dd__EA__family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4, MMM, R_Src1, R_Src2);



  blk = lsu;


define (instr=MOVES_4F_Da_Db_Dc_Dd__EA_)
{

  alias = MOVES_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd), MMM(MMM), R_Src1(RRR), R_Src2(8));
}


action=
{




 bits<40> value_Da = scale(Src1,L(Src1));
 bits<40> value_Db = scale(Src2,L(Src2));
 bits<40> value_Dc = scale(Src3,L(Src3));
 bits<40> value_Dd = scale(Src4,L(Src4));
 value_Da = sat_moves( L(Src1), value_Da);
 value_Db = sat_moves( L(Src2), value_Db);
 value_Dc = sat_moves( L(Src3), value_Dc);
 value_Dd = sat_moves( L(Src4), value_Dd);
 bits <64> mem_data = concat(value_Da(31,16),value_Db(31,16),value_Dc(31,16),value_Dd(31,16));
 Mem( EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;
};

}




define (instr=MOVES_F_Db__a16__family)
{

  fields = (OPCD, Src1, immu);



  blk = lsu;


define (instr=MOVES_F_Db__a16_)
{

  alias = MOVES_F_Db__a16__family(OPCD(OPCD), Src1(jjj), immu(w_a16));
}


action=
{




    bits<40> value = scale(Src1,L(Src1));
    value = sat_moves( L(Src1), value);
    Mem(immu,2) = value(31,16);
};

}


define (instr=MOVES_F_Db__a32__family)
{

  fields = (OPCD, Src1, immu);



  blk = lsu;


define (instr=MOVES_F_Db__a32_)
{

  alias = MOVES_F_Db__a32__family(OPCD(OPCD), Src1(jjj), immu(a32_label));
}


action=
{




 bits<40> value = scale(Src1,L(Src1));
 value = sat_moves( L(Src1), value);
 Mem(immu,2) = value(31,16);

};

}


define (instr=MOVES_F_Db__Rnps15__family)
{

  fields = (OPCD, Src1, imms, R_Src1);



  blk = lsu;


define (instr=MOVES_F_Db__Rnps15_)
{

  alias = MOVES_F_Db__Rnps15__family(OPCD(OPCD), Src1(jjj), imms(w_s15), R_Src1(RRR));
}


action=
{





   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,2,imms);
   }
   else {
      eff_mem_add = imms + R(R_Src1);
   }
   bits<40> value = scale(Src1,L(Src1));
   value = sat_moves( L(Src1), value);
   Mem(eff_mem_add,2) = value(31,16);
};

}



define (instr=MOVES_F_Db__EA__family)
{

  fields = (OPCD, Src1, MMM, R_Src1, R_Src2);



  blk = lsu;


define (instr=MOVES_F_Db__EA_)
{

  alias = MOVES_F_Db__EA__family(OPCD(OPCD), Src1(jjj), MMM(MMM), R_Src1(RRR), R_Src2(8));
}


action=
{




    bits<40> value = scale(Src1,L(Src1));
    value = sat_moves(L(Src1),value);
    Mem( EAtable(MMM,R_Src1,1,R_Src2),2) = value(31,16);
};

}


define (instr=MOVES_F_Db__SPps15__family)
{

  fields = (OPCD, Src1, imms);



  blk = lsu;


define (instr=MOVES_F_Db__SPps15_)
{

  alias = MOVES_F_Db__SPps15__family(OPCD(OPCD), Src1(jjj), imms(w_s15));
}


action=
{




 bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
 bits<40> value = scale(Src1,L(Src1));
 value = sat_moves( L(Src1), value);
 Mem(eff_mem_add,2) = value(31,16);

};

}




define (instr=MOVES_L_Db__EA__family)
{

  fields = (OPCD, Src1, MMM, R_Src1, R_Src2);



  blk = lsu;


define (instr=MOVES_L_Db__EA_)
{

  alias = MOVES_L_Db__EA__family(OPCD(OPCD), Src1(jjj), MMM(MMM), R_Src1(RRR), R_Src2(8));
}


action=
{




 bits<40> value = scale(Src1,L(Src1));
 value = sat_moves( L(Src1), value);
 Mem( EAtable(MMM,R_Src1,2,R_Src2),4) = value(31,0);
};

}





define (instr=MOVE_L__SPps15__Dn_E_family)
{

  fields = (OPCD, imms, Res);



  blk = lsu;


define (instr=MOVE_L__SPps15__Dn_E)
{

  alias = MOVE_L__SPps15__Dn_E_family(OPCD(OPCD), imms(l_s15), Res(FFF));
}


action=
{




      bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
      bits<32> value = Mem(eff_mem_add,4);
      if (Res(0)==0)
      {
  D(Res).E = value(7,0);



      }
      else {
  D(Res).E = value(23,16);



      }
};

}


define (instr=MOVE_L_Da_E_Db_E__SPps15__family)
{

  fields = (OPCD, Src1, Src2, imms);



  blk = lsu;


define (instr=MOVE_L_Da_E_Db_E__SPps15_)
{

  alias = MOVE_L_Da_E_Db_E__SPps15__family(OPCD(OPCD), Src1(ff.Da), Src2(ff.Db), imms(l_s15));
}


action=
{




      bits<32> eff_mem = (sbits<32>)SP + (sbits<32>)imms;
      bits<32> value = concat(zero(7),L(Src2),D(Src2).E,zero(7),L(Src1),D(Src1).E );
      Mem(eff_mem,4) = value;
};

}



define (instr=MOVE_L__a32__Dn_E_family)
{

  fields = (OPCD, immu, Res);



  blk = lsu;


define (instr=MOVE_L__a32__Dn_E)
{

  alias = MOVE_L__a32__Dn_E_family(OPCD(OPCD), immu(l_a32), Res(FFF));
}


action=
{




     bits<32> value = Mem(immu,4);


     if (Res(0)==0)
     {

 D(Res).E = value(7,0);



     }
     else {

 D(Res).E = value(23,16);



     }
};

}



define (instr=MOVE_L_Da_E_Db_E__a32__family)
{

  fields = (OPCD, Src1, Src2, immu);



  blk = lsu;


define (instr=MOVE_L_Da_E_Db_E__a32_)
{

  alias = MOVE_L_Da_E_Db_E__a32__family(OPCD(OPCD), Src1(ff.Da), Src2(ff.Db), immu(l_a32));
}


action=
{




      bits<32> value = concat(zero(7),L(Src2),D(Src2).E,zero(7),L(Src1),D(Src1).E );
      Mem(immu,4) = value;

};

}


define (instr=UNPACK_2W_Df_Dj_Dk_family)
{

  fields = (OPCD, Src1, Res, Res2);



  blk = lsu;


define (instr=UNPACK_2W_Df_Dj_Dk)
{

  alias = UNPACK_2W_Df_Dj_Dk_family(OPCD(OPCD), Src1(uuu), Res(kkk.Dj), Res2(kkk.Dk));
}
define (instr=UNPACK_2W_Da_Dm_Dn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/UNPACK_2W_Da_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dmn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Da(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unpack two words from a register""";
attrs = (LMREG,V5);
# 7906 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = UNPACK_2W_Df_Dj_Dk_family(OPCD(OPCD), Src1(Da), Res(Dmn.Dm), Res2(Dmn.Dn));
  syntax = ( "unpack.2w %f,%f",Da,Dmn);
}


action=
{




   D(Res) = signExtend(D(Src1).L,40);
   D(Res2) = signExtend(D(Src1).H,40);






};

}


define (instr=vsl_4w_family)
{

   fields = (OPCD, Src1, Src2, Src3, Src4, R_Src1);



   blk = lsu;

   define (instr=VSL_4W_D2_D6_D1_D3__RnpN0)
   {

   }
   define (instr=VSL_4W_D10_D14_D9_D11__RnpN0)
   {

   }

   action =
   {




   bits<16> dreg1 = D(Src3).L;
   bits<16> dreg3 = D(Src4).L;
   bits<16> word0 = D(Src1).L;
   bits<16> word1 = D(Src2).L;
   bits<16> word2;
   bits<16> word3;
   if (SR.VF0==1) {
      word2 = dreg3<<1;
   }
   else {
      word2 = dreg1<<1;
   }
   if (SR.VF2==1) {
      word3 = (dreg3<<1)+1;
   }
   else {
      word3 = (dreg1<<1)+1;
   }


   bits<64> mem_data;
   mem_data = concat(word1,word0,word3,word2);



   Mem(EAtable(4,R_Src1,3),8) = mem_data;

};
}


define (instr=vsl_4f_family)
{

   fields = (OPCD, Src1, Src2, Src3, Src4, R_Src1);



   blk = lsu;
   define (instr=VSL_4F_D2_D6_D1_D3__RnpN0)
   {

   }
   define (instr=VSL_4F_D10_D14_D9_D11__RnpN0)
   {

   }

action=
{




   bits<16> dreg1 = D(Src3).H;
   bits<16> dreg3 = D(Src4).H;
   bits<16> word0 = D(Src1).H;
   bits<16> word1 = D(Src2).H;

   bits<16> word2;
   bits<16> word3;
   if (SR.VF1==1) {
      word2 = dreg3<<1;
   }
   else {
      word2 = dreg1<<1;
   }
   if (SR.VF3==1) {
      word3 = (dreg3<<1)+1;
   }
   else {
      word3 = (dreg1<<1)+1;
   }


   bits<64> mem_data;


   mem_data = concat(word1,word0,word3,word2);
   Mem(EAtable(4,R_Src1,3),8) = mem_data;

};

}


define (instr=vsl_2w_family)
{

   fields = (OPCD, Src1, Src2, R_Src1);



   blk = lsu;

   define (instr=VSL_2W_D1_D3__RnpN0)
   {

   }
   define (instr=VSL_2W_D9_D11__RnpN0)
   {

   }

   action =
   {




   bits<16> dreg1 = D(Src1).L;
   bits<16> dreg3 = D(Src2).L;
   bits<16> word0;
   bits<16> word1;
   if (SR.VF0==1) {
      word0 = dreg3<<1;
   }
   else {
      word0 = dreg1<<1;
   }
   if (SR.VF2==1) {
      word1 = (dreg3<<1)+1;
   }
   else {
      word1 = (dreg1<<1)+1;
   }


   bits<32> mem_data = concat(word1,word0);;



   Mem(EAtable(4,R_Src1,2),4) = mem_data;

};

}



define (instr=vsl_2f_family)
{

   fields = (OPCD, Src1, Src2, R_Src1);



   blk = lsu;

   define (instr=VSL_2F_D1_D3__RnpN0)
   {

   }
   define (instr=VSL_2F_D9_D11__RnpN0)
   {

   }

   action =
   {




   bits<16> dreg1 = D(Src1).H;
   bits<16> dreg3 = D(Src2).H;
   bits<16> word0;
   bits<16> word1;
   if (SR.VF1==1) {
      word0 = dreg3<<1;
   }
   else {
      word0 = dreg1<<1;
   }
   if (SR.VF3==1) {
      word1 = (dreg3<<1)+1;
   }
   else {
      word1 = (dreg1<<1)+1;
   }


   bits<32> mem_data = concat(word1,word0);;



   Mem(EAtable(4,R_Src1,2),4) = mem_data;


   };

}



define (instr=SETALIGN_Rn_GCR_family)
{

  fields = (OPCD, R_Src1);



  blk = lsu;


define (instr=SETALIGN_Rn_GCR)
{

  alias = SETALIGN_Rn_GCR_family(OPCD(OPCD), R_Src1(RRR));
}
define (instr=SETALIGN_Ra_GCR)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SETALIGN_Ra_GCR.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Set DOALIGN shift size """;
attrs = (LMREG,V5);
# 8167 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SETALIGN_Rn_GCR_family(OPCD(OPCD), R_Src1(Ra));
  syntax = ( "setalign %f,gcr",Ra);
}


action=
{





   GCR = concat(GCR(31,2),R(R_Src1)(1,0));
};

}



define (instr=MOVEP_W_Da__Rnps13__family)
{

  fields = (OPCD, Src1, imms, R_Src1);



  blk = lsu;


define (instr=MOVEP_W_Da__Rnps13_)
{

  alias = MOVEP_W_Da__Rnps13__family(OPCD(OPCD), Src1(JJJ), imms(s13), R_Src1(RRR));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_DTable_2mem(eff_mem_add,Src1,2);
};

}


define (instr=MOVEP_W_Rq__Rnps13__family)
{

  fields = (OPCD, R_Src1, imms, R_Src2);



  blk = lsu;


define (instr=MOVEP_W_Rq__Rnps13_)
{

  alias = MOVEP_W_Rq__Rnps13__family(OPCD(OPCD), R_Src1(RRR), imms(s13), R_Src2(qqq));
}


action=
{







   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_RTable_2mem(eff_mem_add,R_Src2,2);
};

}


define (instr=MOVEP_W__Rnps13__Da_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;


define (instr=MOVEP_W__Rnps13__Da)
{

  alias = MOVEP_W__Rnps13__Da_family(OPCD(OPCD), imms(s13), R_Src1(RRR), Res(JJJ));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_mem_2DTable(eff_mem_add,Res,2);
};

}


define (instr=MOVEP_W__Rnps13__Rq_family)
{

  fields = (OPCD, imms, R_Src1, R_Res);



  blk = lsu;


define (instr=MOVEP_W__Rnps13__Rq)
{

  alias = MOVEP_W__Rnps13__Rq_family(OPCD(OPCD), imms(s13), R_Src1(RRR), R_Res(qqq));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_mem_2RTable(eff_mem_add,R_Res,2);
};

}


define (instr=MOVEP_L_Da__Rnps13__family)
{

  fields = (OPCD, Src1, imms, R_Src1);



  blk = lsu;


define (instr=MOVEP_L_Da__Rnps13_)
{

  alias = MOVEP_L_Da__Rnps13__family(OPCD(OPCD), Src1(JJJ), imms(s13), R_Src1(RRR));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_DTable_2mem(eff_mem_add,Src1,4);
};

}

define (instr=MOVEP_L_Da_E_Db_E__Rnps13__family)
{

  fields = (OPCD, Src1, Src2, imms, R_Src1);



  blk = lsu;


define (instr=MOVEP_L_Da_E_Db_E__Rnps13_)
{

  alias = MOVEP_L_Da_E_Db_E__Rnps13__family(OPCD(OPCD), Src1(ff.Da), Src2(ff.Db), imms(s13), R_Src1(RRR));
}
define (instr=MOVE_L_Da_E_Db_E__Rnps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da_E_Db_E__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move 2 data register extensions to memory""";
attrs = (LMV,V6);
# 8360 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEP_L_Da_E_Db_E__Rnps13__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), imms(s15), R_Src1(Rn));
  syntax = ( "move.l %f,(%f+%f)",Dab_e,Rn,s15);
}


action=
{


   bits<32> eff_mem_addr = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   bits<32> value = concat(zero(7),L(Src2),D(Src2).E,zero(7),L(Src1),D(Src1).E );
   Mem(eff_mem_addr,4) = value;

};

}

define (instr=MOVEP_L_Rq__Rnps13__family)
{

  fields = (OPCD, R_Src1, imms, R_Src2);



  blk = lsu;


define (instr=MOVEP_L_Rq__Rnps13_)
{

  alias = MOVEP_L_Rq__Rnps13__family(OPCD(OPCD), R_Src1(RRR), imms(s13), R_Src2(qqq));
}


action=
{







   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_RTable_2mem(eff_mem_add,R_Src2,4);
};

}


define (instr=MOVEP_L__Rnps13__Da_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;


define (instr=MOVEP_L__Rnps13__Da)
{

  alias = MOVEP_L__Rnps13__Da_family(OPCD(OPCD), imms(s13), R_Src1(RRR), Res(JJJ));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_mem_2DTable(eff_mem_add,Res,4);
};

}


define (instr=MOVEP_L__Rnps13__Dn_E_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;


define (instr=MOVEP_L__Rnps13__Dn_E)
{

  alias = MOVEP_L__Rnps13__Dn_E_family(OPCD(OPCD), imms(s13), R_Src1(RRR), Res(FFF));
}


define (instr=MOVE_L__Rnps15__Da_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__Rnps15__Da_E.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from memory to a data register extention""";
attrs = (LMV,V6);
# 8461 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEP_L__Rnps13__Dn_E_family(OPCD(OPCD), imms(s15), R_Src1(Rn), Res(Da));
  syntax = ( "move.l (%f+%f),%f.e",Rn,s15,Da);
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   bits<32> value = Mem(eff_mem_add,4);

   if (Res%2==0) {
      D(Res).E = value(7,0);



   }
   else {
      D(Res).E = value(23,16);



   }
};
}


define (instr=MOVEP_L__Rnps13__Rq_family)
{

  fields = (OPCD, imms, R_Src1, R_Res);



  blk = lsu;


define (instr=MOVEP_L__Rnps13__Rq)
{

  alias = MOVEP_L__Rnps13__Rq_family(OPCD(OPCD), imms(s13), R_Src1(RRR), R_Res(qqq));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_mem_2RTable(eff_mem_add,R_Res,4);
};

}


define (instr=MOVEP_B_Da__Rnps13__family)
{

  fields = (OPCD, Src1, imms, R_Src1);



  blk = lsu;


define (instr=MOVEP_B_Da__Rnps13_)
{

  alias = MOVEP_B_Da__Rnps13__family(OPCD(OPCD), Src1(JJJ), imms(s13), R_Src1(RRR));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_DTable_2mem(eff_mem_add,Src1,1);
};

}


define (instr=MOVEP_B_Rq__Rnps13__family)
{

  fields = (OPCD, R_Src1, imms, R_Src2);



  blk = lsu;


define (instr=MOVEP_B_Rq__Rnps13_)
{

  alias = MOVEP_B_Rq__Rnps13__family(OPCD(OPCD), R_Src1(RRR), imms(s13), R_Src2(qqq));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_RTable_2mem(eff_mem_add,R_Src2,1);
};

}


define (instr=MOVEP_B__Rnps13__Da_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;


define (instr=MOVEP_B__Rnps13__Da)
{

  alias = MOVEP_B__Rnps13__Da_family(OPCD(OPCD), imms(s13), R_Src1(RRR), Res(JJJ));
}
define (instr=MOVE_B__Rnps15__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__Rnps15__Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from memory to a data register""";
attrs = (LMV,V6);
# 8603 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEP_B__Rnps13__Da_family(OPCD(OPCD), imms(s15), R_Src1(Rn), Res(Da));
  syntax = ( "move.b (%f+%f),%f",Rn,s15,Da);
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_mem_2DTable(eff_mem_add,Res,1);
};

}



define (instr=MOVEP_B__Rnps13__Rq_family)
{

  fields = (OPCD, R_Src1, imms, R_Res);



  blk = lsu;


define (instr=MOVEP_B__Rnps13__Rq)
{

  alias = MOVEP_B__Rnps13__Rq_family(OPCD(OPCD), R_Src1(RRR), imms(s13), R_Res(qqq));
}
define (instr=MOVE_B__Rnps15__Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_B__Rnps15__Ra.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a byte from memory to an address register""";
attrs = (LMV,V6);
# 8641 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVEP_B__Rnps13__Rq_family(OPCD(OPCD), R_Src1(Rn), imms(s15), R_Res(Ra));
  syntax = ( "move.b (%f+%f),%f",Rn,s15,Ra);
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_mem_2RTable(eff_mem_add,R_Res,1);
};

}



define (instr=MOVEPU_B__Rnps13__Da_family)
{

  fields = (OPCD, imms, R_Src1, Res);



  blk = lsu;


define (instr=MOVEPU_B__Rnps13__Da)
{

  alias = MOVEPU_B__Rnps13__Da_family(OPCD(OPCD), imms(s13), R_Src1(RRR), Res(JJJ));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_mem_2DTable_zeroextend(eff_mem_add,Res,1);
};

}

define (instr=MOVEPU_B__Rnps13__Rq_family)
{

  fields = (OPCD, imms, R_Src1, R_Res);



  blk = lsu;


define (instr=MOVEPU_B__Rnps13__Rq)
{

  alias = MOVEPU_B__Rnps13__Rq_family(OPCD(OPCD), imms(s13), R_Src1(RRR), R_Res(qqq));
}


action=
{





   bits<32> eff_mem_add = (sbits<32>)imms + (sbits<32>)R(R_Src1);
   write_mem_2RTable_zeroextend(eff_mem_add,R_Res,1);
};

}

define (instr=MOVER_L_Db__EA__family)
{

  fields = (OPCD, Src1, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover.l Da,EA";



define (instr=MOVER_L_Db__EA_)
{

  alias = MOVER_L_Db__EA__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER_L_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_L_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional long word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 8741 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_L_Db__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover.l %f,(%f)",Da,Rn);
}
define (instr=MOVER_L_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_L_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional long word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 8747 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_L_Db__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover.l %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVER_L_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_L_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional long word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 8753 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_L_Db__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover.l %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVER_L_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_L_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional long word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 8759 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_L_Db__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover.l %f,(%f+%f)",Da,Rn,Rk);
}


action=
{
# 8783 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bits<42> value = signExtend(D(Src1),42);
    int last_shifted_bit=sc3800_scale(&value);
    if (sc3800_saturate(&value,true,last_shifted_bit)==0)
       set_scaling_bit(value(31,16));

    Mem(EAtable(MMM,R_Src1,2,R_Src2),4) = value(31,0);
};

}

define (instr=MOVER_F_Db__EA__family)
{

  fields = (OPCD, Src1, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover.f Da,EA";


define (instr=MOVER_F_Db__EA_)
{

  alias = MOVER_F_Db__EA__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER_F_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_F_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 8812 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_F_Db__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover.f %f,(%f)",Da,Rn);
}
define (instr=MOVER_F_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_F_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 8818 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_F_Db__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover.f %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVER_F_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_F_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 8824 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_F_Db__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover.f %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVER_F_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_F_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 8830 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_F_Db__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover.f %f,(%f+%f)",Da,Rn,Rk);
}


action=
{
# 8851 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bits<42> value = signExtend(D(Src1),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    int last_shifted_bit=sc3800_scale(&value);

    sc3800_round(&value,conv_rnd,f_word,last_shifted_bit);

    if (sc3800_saturate(&value,f_word,last_shifted_bit)==0)
       set_scaling_bit(value(31,16));
    Mem(EAtable(MMM,R_Src1,1,R_Src2),2) = value(31,16);

};

}

define (instr=MOVER_2L_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover.2l Da:Db,EA";


define (instr=MOVER_2L_Da_Db__EA_)
{

  alias = MOVER_2L_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER_2L_Da_Db__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2L_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional long words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 8885 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2L_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover.2l %f,(%f)",Dab,Rn);
}
define (instr=MOVER_2L_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2L_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional long words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 8891 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2L_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover.2l %f,(%f)+%f",Dab,Rn,Rk);
}
define (instr=MOVER_2L_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2L_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional long words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 8897 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2L_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover.2l %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVER_2L_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2L_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional long words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 8903 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2L_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover.2l %f,(%f+%f)",Dab,Rn,Rk);
}


action=
{




   bits<42> Da = signExtend(D(Src1),42);
   int last_shifted_bit=sc3800_scale(&Da);
   if (sc3800_saturate(&Da,true,last_shifted_bit)==0)
       set_scaling_bit(Da(31,16));
   bits<42> Db = signExtend(D(Src2),42);
   int last_shifted_bit2=sc3800_scale(&Db);
   if (sc3800_saturate(&Db,true,last_shifted_bit2)==0)
       set_scaling_bit(Db(31,16));

   bits<64> mem_data = concat(Da(31,0),Db(31,0));
   Mem(EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;
};

}

define (instr=MOVE2_4F__EA__Da_Db_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2);



  blk = lsu;
  doc_title = "move2.4f EA,Da:Db";


define (instr=MOVE2_4F__EA__Da_Db)
{

  alias = MOVE2_4F__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=MOVE2_4F__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4F__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional words from memory to a data register pair""";
attrs = (LMV,V6D);
# 8948 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4f (%f),%f",Rn,Dab);
}
define (instr=MOVE2_4F__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4F__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional words from memory to a data register pair""";
attrs = (LMV,V6D);
# 8954 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4f (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=MOVE2_4F__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4F__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional words from memory to a data register pair""";
attrs = (LMV,V6D);
# 8960 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4f (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE2_4F__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4F__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional words from memory to a data register pair""";
attrs = (LMV,V6D);
# 8966 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4f (%f+%f),%f",Rn,Rk,Dab);
}


action=
{





   bits <64> mem_data = Mem( EAtable(MMM,R_Src1,3,R_Src2),8);
   D(Res2).WL = signExtend(mem_data(15,0), 20);
   D(Res2).WH = signExtend(mem_data(31,16), 20);



   D(Res).WL = signExtend(mem_data(47,32), 20);
   D(Res).WH = signExtend(mem_data(63,48), 20);





};

}

define (instr=MOVER_4F_Da_Db_Dc_Dd__EA__family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover.4f Da:Db:Dc:Dd,EA";



define (instr=MOVER_4F_Da_Db_Dc_Dd__EA_)
{

  alias = MOVER_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER_4F_Da_Db_Dc_Dd__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4F_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V6D);
# 9015 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover.4f %f,(%f)",Dabcd,Rn);
}
define (instr=MOVER_4F_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4F_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V6D);
# 9021 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover.4f %f,(%f)+%f",Dabcd,Rn,Rk);
}
define (instr=MOVER_4F_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4F_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V6D);
# 9027 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover.4f %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVER_4F_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4F_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional words with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V6D);
# 9033 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover.4f %f,(%f+%f)",Dabcd,Rn,Rk);
}

define (instr=MOVER_4F_Da_Db_Dc_Dd__EA_to_remove)
{

  alias = MOVER_4F_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Da), Src2(Db), Src3(Dc), Src4(Dd), MMM(MMM), R_Src1(RRR));
  syntax = ( "mover.4f %f,%f,%f,%f,(%f%f",Da,Db,Dc,Dd,RRR,MMM);



}


action=
{




    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;

    bits<42> value_Da= signExtend(D(Src1),42);
    int last_shifted_bit=sc3800_scale(&value_Da);
    sc3800_round(&value_Da,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Da,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Da(31,16));
    bits<42> value_Db = signExtend(D(Src2),42);
    last_shifted_bit=sc3800_scale(&value_Db);
    sc3800_round(&value_Db,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Db,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Db(31,16));
    bits<42> value_Dc = signExtend(D(Src3),42);
    last_shifted_bit=sc3800_scale(&value_Dc);
    sc3800_round(&value_Dc,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Dc,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Dc(31,16));
    bits<42> value_Dd = signExtend(D(Src4),42);
    last_shifted_bit=sc3800_scale(&value_Dd);
    sc3800_round(&value_Dd,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Dd,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Dd(31,16));

    bits <64> mem_data = concat(value_Da(31,16),value_Db(31,16),value_Dc(31,16),value_Dd(31,16));
    Mem( EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;

};

}

define (instr=MOVE2_2F__EA__Da_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res);



  blk = lsu;
  doc_title = "move2.2f EA,Da";


define (instr=MOVE2_2F__EA__Da)
{

  alias = MOVE2_2F__EA__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(jjj));
}
define (instr=MOVE2_2F__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2F__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional words from a memory to a data register""";
attrs = (LMV,V6D);
# 9104 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2F__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "move2.2f (%f),%f",Rn,Da);
}
define (instr=MOVE2_2F__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2F__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional words from a memory to a data register""";
attrs = (LMV,V6D);
# 9110 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2F__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "move2.2f (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVE2_2F__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2F__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional words from a memory to a data register""";
attrs = (LMV,V6D);
# 9116 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2F__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "move2.2f (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE2_2F__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2F__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two fractional words from a memory to a data register""";
attrs = (LMV,V6D);
# 9122 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2F__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "move2.2f (%f+%f),%f",Rn,Rk,Da);
}


action=
{




    bits <32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2),4);
    D(Res).WL = signExtend(mem_data(15,0), 20);
    D(Res).WH = signExtend(mem_data(31,16), 20);




};

}


define (instr=MOVER_2F_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover.2f Da:Db,EA";


define (instr=MOVER_2F_Da_Db__EA_)
{

  alias = MOVER_2F_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER_2F_Da_Db__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2F_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 9164 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2F_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover.2f %f,(%f)",Dab,Rn);
}
define (instr=MOVER_2F_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2F_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 9170 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2F_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover.2f %f,(%f)+%f",Dab,Rn,Rk);
}
define (instr=MOVER_2F_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2F_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 9176 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2F_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover.2f %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVER_2F_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2F_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional words with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 9182 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2F_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover.2f %f,(%f+%f)",Dab,Rn,Rk);
}


action=
{




    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;

    bits<42> value_Da= signExtend(D(Src1),42);
    int last_shifted_bit=sc3800_scale(&value_Da);
    sc3800_round(&value_Da,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Da,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Da(31,16));
    bits<42> value_Db = signExtend(D(Src2),42);
    last_shifted_bit=sc3800_scale(&value_Db);
    sc3800_round(&value_Db,conv_rnd,f_word,last_shifted_bit);
    if (sc3800_saturate(&value_Db,f_word,last_shifted_bit)==0)
       set_scaling_bit(value_Db(31,16));

    bits <32> mem_data = concat(value_Da(31,16),value_Db(31,16));
    Mem(EAtable(MMM,R_Src1,2,R_Src2),4) = mem_data;

};

}


define (instr=MOVER2_2F_Da__EA__family)
{

  fields = (OPCD, Src1, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover2.2f Da,EA";


define (instr=MOVER2_2F_Da__EA_)
{

  alias = MOVER2_2F_Da__EA__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER2_2F_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2F_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional words with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9234 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_2F_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover2.2f %f,(%f)",Da,Rn);
}
define (instr=MOVER2_2F_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2F_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional words with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9240 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_2F_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover2.2f %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVER2_2F_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2F_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional words with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9246 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_2F_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover2.2f %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVER2_2F_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2F_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional words with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9252 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_2F_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover2.2f %f,(%f+%f)",Da,Rn,Rk);
}


action=
{
# 9280 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    bool is_moverlh = false;
    bits<32> shifted_bit_L,shifted_bit_H;
    shifted_bit_L = shifted_bit_H = 0;
    bits<32> srcl = signExtend(D(Src1).WL,32);
    bits<32> srch = signExtend(D(Src1).WH,32);
    bits<42> value;
    bits<10> ext = signExtend(D(Src1).E,10);
    sc3800_scale_two_20bit_ops(ext,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if ((SR.SCM==0x1)||(SR.SCM==0x3) )
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if(sc3800_saturate_two_20bit_ops(&value,f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch,is_moverlh,is_moverlh)!=2)
    {
       info(4,"enter if!!!,srcl= "<<hex<<srcl,"srch= "<<hex<<srch );
       set_scaling_bit(srcl(15,0));
       set_scaling_bit(srch(15,0));
    }

    Mem(EAtable(MMM,R_Src1,2,R_Src2),4) = value(31,0);

};
}


define (instr=MOVER2_2BF_Da__EA__family)
{

  fields = (OPCD, Src1, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover2.2bf Da,EA";


define (instr=MOVER2_2BF_Da__EA_)
{

  alias = MOVER2_2BF_Da__EA__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER2_2BF_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2BF_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional bytes with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9324 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_2BF_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover2.2bf %f,(%f)",Da,Rn);
}
define (instr=MOVER2_2BF_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2BF_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional bytes with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9330 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_2BF_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover2.2bf %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVER2_2BF_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2BF_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional bytes with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9336 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_2BF_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover2.2bf %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVER2_2BF_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_2BF_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional bytes with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9342 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_2BF_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover2.2bf %f,(%f+%f)",Da,Rn,Rk);
}


action=
{
# 9364 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    bool is_moverlh = false;
    bits<32> shifted_bit_L,shifted_bit_H;
    shifted_bit_L = shifted_bit_H = 0;
    bits<32> srcl = signExtend(D(Src1).WL,32);
    bits<32> srch = signExtend(D(Src1).WH,32);
    bits<42> value;
    bits<10> ext = signExtend(D(Src1).E,10);
    sc3800_scale_two_20bit_ops(ext,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if(sc3800_saturate_two_20bit_ops(&value,f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch,is_moverlh,is_moverlh)!=2)
    {
       set_scaling_bit(srcl(15,0));
       set_scaling_bit(srch(15,0));
    }
    bits <16> mem_data = concat(value(31,24),value(15,8));
    Mem(EAtable(MMM,R_Src1,1,R_Src2),2) = mem_data;

};

}

define (instr=MOVE2_2BF__EA__Da_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res);



  blk = lsu;
  doc_title = "mover2.2bf EA,Da";

define (instr=MOVE2_2BF__EA__Da)
{

  alias = MOVE2_2BF__EA__Da_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(jjj));
}
define (instr=MOVE2_2BF__Rn__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF__Rn__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  fractional  bytes from memory to a data register""";
attrs = (LMV,V6D);
# 9405 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2BF__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Da));
  syntax = ( "move2.2bf (%f),%f",Rn,Da);
}
define (instr=MOVE2_2BF__Rn_pRk_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF__Rn_pRk_Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  fractional  bytes from memory to a data register""";
attrs = (LMV,V6D);
# 9411 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2BF__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Da));
  syntax = ( "move2.2bf (%f)+%f,%f",Rn,Rk,Da);
}
define (instr=MOVE2_2BF__Rn_PM_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF__Rn_PM_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  fractional  bytes from memory to a data register""";
attrs = (LMV,V6D);
# 9417 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2BF__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Da));
  syntax = ( "move2.2bf (%f)%f,%f",Rn,PM,Da);
}
define (instr=MOVE2_2BF__RnpRk__Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_2BF__RnpRk__Da.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move two  fractional  bytes from memory to a data register""";
attrs = (LMV,V6D);
# 9423 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_2BF__EA__Da_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Da));
  syntax = ( "move2.2bf (%f+%f),%f",Rn,Rk,Da);
}


action=
{




    bits <16> mem_data = Mem( EAtable(MMM,R_Src1,1,R_Src2),2);
    D(Res).WL = signExtend(concat(mem_data(7,0),zero(8)),20);
    D(Res).WH = signExtend(concat(mem_data(15,8),zero(8)),20);



};

}

define (instr=MOVER_BF_Da__EA__family)
{

  fields = (OPCD, Src1, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover.bf Da,EA";


define (instr=MOVER_BF_Da__EA_)
{

  alias = MOVER_BF_Da__EA__family(OPCD(OPCD), Src1(jjj), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER_BF_Da__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_BF_Da__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9463 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_BF_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover.bf %f,(%f)",Da,Rn);
}
define (instr=MOVER_BF_Da__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_BF_Da__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9469 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_BF_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover.bf %f,(%f)+%f",Da,Rn,Rk);
}
define (instr=MOVER_BF_Da__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_BF_Da__Rn_PM.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9475 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_BF_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover.bf %f,(%f)%f",Da,Rn,PM);
}
define (instr=MOVER_BF_Da__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_BF_Da__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a fractional byte with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 9481 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_BF_Da__EA__family(OPCD(OPCD), Src1(Da), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover.bf %f,(%f+%f)",Da,Rn,Rk);
}


action=
{
# 9498 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bits<42> value = signExtend(D(Src1),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    int last_shifted_bit;
    last_shifted_bit=sc3800_scale(&value);
    info(4,"last_shifted_bit= "<< hex<<value);
    sc3800_round(&value,conv_rnd,f_word,last_shifted_bit);

    if (sc3800_saturate(&value,f_word,last_shifted_bit)==0)
       set_scaling_bit(value(31,16));

    Mem(EAtable(MMM,R_Src1,0,R_Src2),1) = value(31,24);
};

}


define (instr=MOVER2_4F_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover2.4f Da:Db,EA";


define (instr=MOVER2_4F_Da_Db__EA_)
{

  alias = MOVER2_4F_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER2_4F_Da_Db__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4F_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional words with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V6D);
# 9534 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_4F_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover2.4f %f,(%f)",Dab,Rn);
}
define (instr=MOVER2_4F_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4F_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional words with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V6D);
# 9540 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_4F_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover2.4f %f,(%f)+%f",Dab,Rn,Rk);
}
define (instr=MOVER2_4F_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4F_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional words with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V6D);
# 9546 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_4F_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover2.4f %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVER2_4F_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4F_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional words with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V6D);
# 9552 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_4F_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover2.4f %f,(%f+%f)",Dab,Rn,Rk);
}


action=
{
# 9588 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    bool is_moverlh = false;
    bits<32> shifted_bit_L,shifted_bit_H;

    shifted_bit_L = shifted_bit_H = 0;
    bits<32> srcl = signExtend(D(Src1).WL,32);
    bits<32> srch = signExtend(D(Src1).WH,32);
    bits<42> value_Da;
    bits<10> ext = signExtend(D(Src1).E,10);
    sc3800_scale_two_20bit_ops(ext,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if ((SR.SCM==0x1)||(SR.SCM==0x3) )
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if(sc3800_saturate_two_20bit_ops(&value_Da,f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch,is_moverlh,is_moverlh)!=2)
    {
       set_scaling_bit(srcl(15,0));
       set_scaling_bit(srch(15,0));
    }
    shifted_bit_L = shifted_bit_H = 0;
    srcl = signExtend(D(Src2).WL,32);
    srch = signExtend(D(Src2).WH,32);
    bits<42> value_Db;
    ext = signExtend(D(Src2).E,10);
    sc3800_scale_two_20bit_ops(ext,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if ((SR.SCM==0x1)||(SR.SCM==0x3) )
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch);
    if(sc3800_saturate_two_20bit_ops(&value_Db,f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl,&srch,is_moverlh,is_moverlh)!=2)
    {
       set_scaling_bit(srcl(15,0));
       set_scaling_bit(srch(15,0));
    }

    bits <64> mem_data = concat(value_Da(31,0),value_Db(31,0));
    Mem(EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;

};

}

define (instr=MOVER2_4BF_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover2.4bf Da:Db,EA";


define (instr=MOVER2_4BF_Da_Db__EA_)
{

  alias = MOVER2_4BF_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER2_4BF_Da_Db__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4BF_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V6D);
# 9646 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_4BF_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover2.4bf %f,(%f)",Dab,Rn);
}
define (instr=MOVER2_4BF_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4BF_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V6D);
# 9652 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_4BF_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover2.4bf %f,(%f)+%f",Dab,Rn,Rk);
}
define (instr=MOVER2_4BF_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4BF_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V6D);
# 9658 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_4BF_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover2.4bf %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVER2_4BF_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_4BF_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a regisetr pair to memory""";
attrs = (LMV,V6D);
# 9664 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_4BF_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover2.4bf %f,(%f+%f)",Dab,Rn,Rk);
}


action=
{
# 9699 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    bool is_moverlh = false;
    int i;
    bits<32> shifted_bit_L,shifted_bit_H;
    bits<32> srcl[2], srch[2];
    bits<10> ext[2];
    srcl[0] = signExtend(D(Src1).WL,32);
    srch[0] = signExtend(D(Src1).WH,32);
    ext[0] = signExtend(D(Src1).E,10);
    srcl[1] = signExtend(D(Src2).WL,32);
    srch[1] = signExtend(D(Src2).WH,32);
    ext[1] = signExtend(D(Src2).E,10);
    bits<42> value [2];

    for (i=0;i<2;i++)
    {
       shifted_bit_L = shifted_bit_H = 0;
       sc3800_scale_two_20bit_ops(ext[i],&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       if(sc3800_saturate_two_20bit_ops(&value[i],f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i],is_moverlh,is_moverlh)!=2)
       {
   set_scaling_bit(srcl[i](15,0));
   set_scaling_bit(srch[i](15,0));
       }
    }

    bits <32> mem_data = concat(value[0](31,24),value[0](15,8),value[1](31,24),value[1](15,8));
    Mem( EAtable(MMM,R_Src1,2,R_Src2),4) = mem_data;

};

}


define (instr=MOVE2_4BF__EA__Da_Db_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2);



  blk = lsu;
  doc_title = "mover2.4bf EA,Da:Db";


define (instr=MOVE2_4BF__EA__Da_Db)
{

  alias = MOVE2_4BF__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=MOVE2_4BF__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from memory to a data register pair""";
attrs = (LMV,V6D);
# 9753 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4BF__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4bf (%f),%f",Rn,Dab);
}
define (instr=MOVE2_4BF__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from memory to a data register pair""";
attrs = (LMV,V6D);
# 9759 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4BF__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4bf (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=MOVE2_4BF__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from memory to a data register pair""";
attrs = (LMV,V6D);
# 9765 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4BF__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4bf (%f)%f,%f",Rn,PM,Dab);
}
define (instr=MOVE2_4BF__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_4BF__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move four fractional bytes from memory to a data register pair""";
attrs = (LMV,V6D);
# 9771 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_4BF__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "move2.4bf (%f+%f),%f",Rn,Rk,Dab);
}


action=
{




    bits <32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2), 4);
    D(Res2).WL = signExtend(concat(mem_data(7,0),zero(8)),20);
    D(Res2).WH = signExtend(concat(mem_data(15,8),zero(8)),20);
    D(Res).WL = signExtend(concat(mem_data(23,16),zero(8)),20);
    D(Res).WH = signExtend(concat(mem_data(31,24),zero(8)),20);







};

}


define (instr=MOVER_2BF_Da_Db__EA__family)
{

  fields = (OPCD, Src1, Src2, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover.2bf Da:Db,EA";


define (instr=MOVER_2BF_Da_Db__EA_)
{

  alias = MOVER_2BF_Da_Db__EA__family(OPCD(OPCD), Src1(hh.Da), Src2(hh.Db), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER_2BF_Da_Db__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2BF_Da_Db__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional bytes with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 9818 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2BF_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover.2bf %f,(%f)",Dab,Rn);
}
define (instr=MOVER_2BF_Da_Db__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2BF_Da_Db__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional bytes with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 9824 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2BF_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover.2bf %f,(%f)+%f",Dab,Rn,Rk);
}
define (instr=MOVER_2BF_Da_Db__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2BF_Da_Db__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional bytes with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 9830 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2BF_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover.2bf %f,(%f)%f",Dab,Rn,PM);
}
define (instr=MOVER_2BF_Da_Db__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_2BF_Da_Db__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 fractional bytes with rounding, scaling and limiting from 2 registers to memory""";
attrs = (LMV,V6D);
# 9836 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_2BF_Da_Db__EA__family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover.2bf %f,(%f+%f)",Dab,Rn,Rk);
}


action=
{
# 9858 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bits<42> value [2];
    value[0] = signExtend(D(Src1),42);
    value[1] = signExtend(D(Src2),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    int last_shifted_bit,i;

    for (i=0;i<2;i++)
    {
       last_shifted_bit=sc3800_scale(&value[i]);
       sc3800_round(&value[i],conv_rnd,f_word,last_shifted_bit);
       if (sc3800_saturate(&value[i],f_word,last_shifted_bit)==0)
   set_scaling_bit(value[i](31,16));
    }

    bits <16> mem_data = concat(value[0](31,24),value[1](31,24));
    Mem(EAtable(MMM,R_Src1,1,R_Src2),2) = mem_data;

};

}

define (instr=SUMOVE2_2F__EA__Da_Db_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2);



  blk = lsu;
  doc_title = "sumove2.2f EA,Da:Db";


define (instr=SUMOVE2_2F__EA__Da_Db)
{

  alias = SUMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=SUMOVE2_2F__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUMOVE2_2F__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 words from memory, and shift up a packed register pair""";
attrs = (LMV,V6D);
# 9899 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SUMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "sumove2.2f (%f),%f",Rn,Dab);
}
define (instr=SUMOVE2_2F__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUMOVE2_2F__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 words from memory, and shift up a packed register pair""";
attrs = (LMV,V6D);
# 9905 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SUMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "sumove2.2f (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=SUMOVE2_2F__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUMOVE2_2F__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 words from memory, and shift up a packed register pair""";
attrs = (LMV,V6D);
# 9911 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SUMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "sumove2.2f (%f)%f,%f",Rn,PM,Dab);
}
define (instr=SUMOVE2_2F__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUMOVE2_2F__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 words from memory, and shift up a packed register pair""";
attrs = (LMV,V6D);
# 9917 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SUMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "sumove2.2f (%f+%f),%f",Rn,Rk,Dab);
}


action=
{




    bits <32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2),4);
    D(Res).WL = signExtend(mem_data(15,0), 20);
    D(Res).WH = signExtend(mem_data(31,16), 20);



    D(Res2).WL = D(Res).WL;
    D(Res2).WH = signExtend(mem_data(31,16), 20);




};

}

define (instr=SDMOVE2_2F__EA__Da_Db_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2);



  blk = lsu;
  doc_title = "sdmove2.2f EA,Da:Db";



define (instr=SDMOVE2_2F__EA__Da_Db)
{

  alias = SDMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(hh.Da), Res2(hh.Db));
}
define (instr=SDMOVE2_2F__Rn__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SDMOVE2_2F__Rn__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 words from memory, and shift down a packed register pair""";
attrs = (LMV,V6D);
# 9964 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SDMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "sdmove2.2f (%f),%f",Rn,Dab);
}
define (instr=SDMOVE2_2F__Rn_pRk_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SDMOVE2_2F__Rn_pRk_Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 words from memory, and shift down a packed register pair""";
attrs = (LMV,V6D);
# 9970 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SDMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "sdmove2.2f (%f)+%f,%f",Rn,Rk,Dab);
}
define (instr=SDMOVE2_2F__Rn_PM_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SDMOVE2_2F__Rn_PM_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 words from memory, and shift down a packed register pair""";
attrs = (LMV,V6D);
# 9976 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SDMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "sdmove2.2f (%f)%f,%f",Rn,PM,Dab);
}
define (instr=SDMOVE2_2F__RnpRk__Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SDMOVE2_2F__RnpRk__Da_Db.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 2 words from memory, and shift down a packed register pair""";
attrs = (LMV,V6D);
# 9982 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = SDMOVE2_2F__EA__Da_Db_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "sdmove2.2f (%f+%f),%f",Rn,Rk,Dab);
}


action=
{




    bits <32> mem_data = Mem( EAtable(MMM,R_Src1,2,R_Src2),4);
    D(Res).WL = signExtend(mem_data(15,0), 20);
    D(Res).WH = signExtend(mem_data(31,16), 20);



    D(Res2).WL = signExtend(mem_data(15,0), 20);
    D(Res2).WH = D(Res).WH;




};

}


define (instr=MOVER2_8BF_Da_Db_Dc_Dd__EA__family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover2.8bf Da:Db:Dc:Dd,EA";



define (instr=MOVER2_8BF_Da_Db_Dc_Dd__EA_)
{

  alias = MOVER2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER2_8BF_Da_Db_Dc_Dd__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_8BF_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 8 fractional bytes with rounding, scaling and limiting from a regisetr quad to memory""";
attrs = (LMV,V6D);
# 10030 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover2.8bf %f,(%f)",Dabcd,Rn);
}
define (instr=MOVER2_8BF_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_8BF_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 8 fractional bytes with rounding, scaling and limiting from a regisetr quad to memory""";
attrs = (LMV,V6D);
# 10036 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover2.8bf %f,(%f)+%f",Dabcd,Rn,Rk);
}
define (instr=MOVER2_8BF_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_8BF_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 8 fractional bytes with rounding, scaling and limiting from a regisetr quad to memory""";
attrs = (LMV,V6D);
# 10042 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover2.8bf %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVER2_8BF_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER2_8BF_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 8 fractional bytes with rounding, scaling and limiting from a regisetr quad to memory""";
attrs = (LMV,V6D);
# 10048 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER2_8BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover2.8bf %f,(%f+%f)",Dabcd,Rn,Rk);
}


action=
{
# 10104 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    bool is_moverlh = false;
    int i;
    bits<32> shifted_bit_L,shifted_bit_H;
    bits<32> srcl[4], srch[4];
    bits<10> ext[4];
    srcl[0] = signExtend(D(Src1).WL,32);
    srch[0] = signExtend(D(Src1).WH,32);
    ext[0] = signExtend(D(Src1).E,10);
    srcl[1] = signExtend(D(Src2).WL,32);
    srch[1] = signExtend(D(Src2).WH,32);
    ext[1] = signExtend(D(Src2).E,10);
    srcl[2] = signExtend(D(Src3).WL,32);
    srch[2] = signExtend(D(Src3).WH,32);
    ext[2] = signExtend(D(Src3).E,10);
    srcl[3] = signExtend(D(Src4).WL,32);
    srch[3] = signExtend(D(Src4).WH,32);
    ext[3] = signExtend(D(Src4).E,10);
    bits<42> value [4];

    for (i=0;i<4;i++)
    {
       shifted_bit_L = shifted_bit_H = 0;
       sc3800_scale_two_20bit_ops(ext[i],&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       if(sc3800_saturate_two_20bit_ops(&value[i],f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i],is_moverlh,is_moverlh)!=2)
       {
   set_scaling_bit(srcl[i](15,0));
   set_scaling_bit(srch[i](15,0));
       }
    }

    bits <32> mem_data1 = concat(value[0](31,24),value[0](15,8),value[1](31,24),value[1](15,8));
    bits <32> mem_data2 = concat(value[2](31,24),value[2](15,8),value[3](31,24),value[3](15,8));
    Mem( EAtable(MMM,R_Src1,3,R_Src2),8) = concat(mem_data1,mem_data2);

};

}


define (instr=MOVE2_8BF__EA__Da_Db_Dc_Dd_family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2, Res, Res2, Res3, Res4);



  blk = lsu;
  doc_title = "move2.8bf EA,Da:Db:Dc:Dd";


define (instr=MOVE2_8BF__EA__Da_Db_Dc_Dd)
{

  alias = MOVE2_8BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=MOVE2_8BF__Rn__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF__Rn__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional bytes from memory to a data register quad""";
attrs = (LMV,V6D);
# 10165 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move2.8bf (%f),%f",Rn,Dabcd);
}
define (instr=MOVE2_8BF__Rn_pRk_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF__Rn_pRk_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional bytes from memory to a data register quad""";
attrs = (LMV,V6D);
# 10171 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move2.8bf (%f)+%f,%f",Rn,Rk,Dabcd);
}
define (instr=MOVE2_8BF__Rn_PM_Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF__Rn_PM_Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional bytes from memory to a data register quad""";
attrs = (LMV,V6D);
# 10177 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(PM), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move2.8bf (%f)%f,%f",Rn,PM,Dabcd);
}
define (instr=MOVE2_8BF__RnpRk__Da_Db_Dc_Dd)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE2_8BF__RnpRk__Da_Db_Dc_Dd.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move eight fractional bytes from memory to a data register quad""";
attrs = (LMV,V6D);
# 10183 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVE2_8BF__EA__Da_Db_Dc_Dd_family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(0), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "move2.8bf (%f+%f),%f",Rn,Rk,Dabcd);
}


action=
{




    bits <64> mem_data = Mem( EAtable(MMM,R_Src1,3,R_Src2), 8);

    D(Res4).WL = signExtend(concat(mem_data(7,0),zero(8)),20);
    D(Res4).WH = signExtend(concat(mem_data(15,8),zero(8)),20);



    D(Res3).WL = signExtend(concat(mem_data(23,16),zero(8)),20);
    D(Res3).WH = signExtend(concat(mem_data(31,24),zero(8)),20);



    D(Res2).WL = signExtend(concat(mem_data(39,32),zero(8)),20);
    D(Res2).WH = signExtend(concat(mem_data(47,40),zero(8)),20);



    D(Res).WL = signExtend(concat(mem_data(55,48),zero(8)),20);
    D(Res).WH = signExtend(concat(mem_data(63,56),zero(8)),20);




};

}


define (instr=MOVER_4BF_Da_Db_Dc_Dd__EA__family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "mover.4bf Da:Db:Dc:Dd,EA";


define (instr=MOVER_4BF_Da_Db_Dc_Dd__EA_)
{

  alias = MOVER_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVER_4BF_Da_Db_Dc_Dd__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4BF_Da_Db_Dc_Dd__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V6D);
# 10241 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "mover.4bf %f,(%f)",Dabcd,Rn);
}
define (instr=MOVER_4BF_Da_Db_Dc_Dd__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4BF_Da_Db_Dc_Dd__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V6D);
# 10247 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "mover.4bf %f,(%f)+%f",Dabcd,Rn,Rk);
}
define (instr=MOVER_4BF_Da_Db_Dc_Dd__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4BF_Da_Db_Dc_Dd__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V6D);
# 10253 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "mover.4bf %f,(%f)%f",Dabcd,Rn,PM);
}
define (instr=MOVER_4BF_Da_Db_Dc_Dd__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_4BF_Da_Db_Dc_Dd__RnpRk_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 fractional bytes with rounding, scaling and limiting from a register quad to memory""";
attrs = (LMV,V6D);
# 10259 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_4BF_Da_Db_Dc_Dd__EA__family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "mover.4bf %f,(%f+%f)",Dabcd,Rn,Rk);
}


action=
{
# 10289 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bits<42> value[4];
    value[0] = signExtend(D(Src1),42);
    value[1] = signExtend(D(Src2),42);
    value[2] = signExtend(D(Src3),42);
    value[3] = signExtend(D(Src4),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = false;
    int last_shifted_bit,i;
    for (i=0;i<4;i++)
    {
       last_shifted_bit=sc3800_scale(&value[i]);
       sc3800_round(&value[i],conv_rnd,f_word,last_shifted_bit);
       if (sc3800_saturate(&value[i],f_word,last_shifted_bit)==0)
   set_scaling_bit(value[i](31,16));
    }

    bits <32> mem_data = concat(value[0](31,24),value[1](31,24),value[2](31,24),value[3](31,24));
    Mem(EAtable(MMM,R_Src1,2,R_Src2),4) = mem_data;



};

}


define (instr=MOVER_F_Db__a16__family)
{

  fields = (OPCD, Src1, immu);



  blk = lsu;


define (instr=MOVER_F_Db__a16_)
{

  alias = MOVER_F_Db__a16__family(OPCD(OPCD), Src1(jjj), immu(w_a16));
}


action=
{
# 10345 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bits<42> value = signExtend(D(Src1),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    int last_shifted_bit=sc3800_scale(&value);

    sc3800_round(&value,conv_rnd,f_word,last_shifted_bit);

    if (sc3800_saturate(&value,f_word,last_shifted_bit)==0)
       set_scaling_bit(value(31,16));
    Mem(immu,2) = value(31,16);

};

}



define (instr=MOVER_F_Db__SPps15__family)
{

  fields = (OPCD, Src1, imms);



  blk = lsu;


define (instr=MOVER_F_Db__SPps15_)
{

  alias = MOVER_F_Db__SPps15__family(OPCD(OPCD), Src1(jjj), imms(w_s15));
}
define (instr=MOVER_F_Da__SPps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_F_Da__SPps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 10380 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_F_Db__SPps15__family(OPCD(OPCD), Src1(Da), imms(s15));
  syntax = ( "mover.f %f,(SP+%f)",Da,s15);
}


action=
{
# 10399 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bits<42> value = signExtend(D(Src1),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    int last_shifted_bit=sc3800_scale(&value);

    sc3800_round(&value,conv_rnd,f_word,last_shifted_bit);

    if (sc3800_saturate(&value,f_word,last_shifted_bit)==0)
       set_scaling_bit(value(31,16));
    bits<32> eff_mem_add = (sbits<32>)SP + (sbits<32>)imms;
    Mem(eff_mem_add,2) = value(31,16);
};

}


define (instr=MOVER_F_Db__Rnps15__family)
{

  fields = (OPCD, Src1, imms, R_Src1);



  blk = lsu;


define (instr=MOVER_F_Db__Rnps15_)
{

  alias = MOVER_F_Db__Rnps15__family(OPCD(OPCD), Src1(jjj), imms(w_s15), R_Src1(RRR));
}
define (instr=MOVER_F_Da__Rnps15_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVER_F_Da__Rnps15_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),s15(0)),
 (bits(33),s15(1)),
 (bits(34),s15(2)),
 (bits(35),s15(3)),
 (bits(36),s15(4)),
 (bits(37),s15(5)),
 (bits(38),s15(6)),
 (bits(39),s15(7)),
 (bits(40),s15(8)),
 (bits(41),s15(9)),
 (bits(42),s15(10)),
 (bits(43),s15(11)),
 (bits(44),s15(12)),
 (bits(45),s15(13)),
 (bits(46),s15(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move a fractional word with rounding, scaling and limiting to memory""";
attrs = (LMV,V6D);
# 10433 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVER_F_Db__Rnps15__family(OPCD(OPCD), Src1(Da), imms(s15), R_Src1(Rn));
  syntax = ( "mover.f %f,(%f+%f)",Da,Rn,s15);
}


action=
{





   bits<32> eff_mem_add;
   if ((R_Src1&0xf8)==0x0) {
      eff_mem_add = Address_by_mctl2(R_Src1(2,0),imms,0,2,imms);
   }
   else {
      eff_mem_add = imms + R(R_Src1);
   }

    bits<42> value = signExtend(D(Src1),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    int last_shifted_bit=sc3800_scale(&value);

    sc3800_round(&value,conv_rnd,f_word,last_shifted_bit);

    if (sc3800_saturate(&value,f_word,last_shifted_bit)==0)
       set_scaling_bit(value(31,16));
    Mem(eff_mem_add,2) = value(31,16);
# 10472 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
};

}

define (instr=MOVER_F_Db__a32__family)
{

  fields = (OPCD, Src1, immu);



  blk = lsu;


define (instr=MOVER_F_Db__a32_)
{

  alias = MOVER_F_Db__a32__family(OPCD(OPCD), Src1(jjj), immu(w_a32));
}
define (instr=MOVER_F_Da__a32_)
{

  alias = MOVER_F_Db__a32__family(OPCD(OPCD), Src1(Da), immu(a32));
  syntax = ( "mover.f %f,(%f)",Da,a32);
}


action=
{
# 10512 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    bits<42> value = signExtend(D(Src1),42);
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    int last_shifted_bit=sc3800_scale(&value);

    sc3800_round(&value,conv_rnd,f_word,last_shifted_bit);

    if (sc3800_saturate(&value,f_word,last_shifted_bit)==0)
       set_scaling_bit(value(31,16));
    Mem(immu,2) = value(31,16);


};

}


define (instr=MOVERL_4F_Dp_Dq_Dr_Ds__EA__family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4, MMM, R_Src1, R_Src2);




  blk = lsu;
  doc_title = "moverl.4f Da:Db:Dc:Dd,EA";



define (instr=MOVERL_4F_Dp_Dq_Dr_Ds__EA_)
{

  alias = MOVERL_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(KK.Dp), Src2(KK.Dq), Src3(KK.Dr), Src4(KK.Ds), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVERL_4F_Dp_Dq_Dr_Ds__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVERL_4F_Dp_Dq_Dr_Ds__Rn_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dpqrs(0)),
 (bits(17),Dpqrs(1)),
 (bits(18),Dpqrs(2)),
 (bits(19),Dpqrs(3)),
 (bits(20),Dpqrs(4)),
 (bits(21),Dpqrs(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 wide low fractional values with rounding, scaling and limiting""";
attrs = (LMV,V6D);
# 10550 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVERL_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(Dpqrs.Dp), Src2(Dpqrs.Dq), Src3(Dpqrs.Dr), Src4(Dpqrs.Ds), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "moverl.4f %f,(%f)",Dpqrs,Rn);
}
define (instr=MOVERL_4F_Dp_Dq_Dr_Ds__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVERL_4F_Dp_Dq_Dr_Ds__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dpqrs(0)),
 (bits(17),Dpqrs(1)),
 (bits(18),Dpqrs(2)),
 (bits(19),Dpqrs(3)),
 (bits(20),Dpqrs(4)),
 (bits(21),Dpqrs(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 wide low fractional values with rounding, scaling and limiting""";
attrs = (LMV,V6D);
# 10556 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVERL_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(Dpqrs.Dp), Src2(Dpqrs.Dq), Src3(Dpqrs.Dr), Src4(Dpqrs.Ds), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "moverl.4f %f,(%f)+%f",Dpqrs,Rn,Rk);
}
define (instr=MOVERL_4F_Dp_Dq_Dr_Ds__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVERL_4F_Dp_Dq_Dr_Ds__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dpqrs(0)),
 (bits(17),Dpqrs(1)),
 (bits(18),Dpqrs(2)),
 (bits(19),Dpqrs(3)),
 (bits(20),Dpqrs(4)),
 (bits(21),Dpqrs(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 wide low fractional values with rounding, scaling and limiting""";
attrs = (LMV,V6D);
# 10562 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVERL_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(Dpqrs.Dp), Src2(Dpqrs.Dq), Src3(Dpqrs.Dr), Src4(Dpqrs.Ds), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "moverl.4f %f,(%f)%f",Dpqrs,Rn,PM);
}
define (instr=MOVERL_4F_Dp_Dq_Dr_Ds__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVERL_4F_Dp_Dq_Dr_Ds__RnpRk_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dpqrs(0)),
 (bits(17),Dpqrs(1)),
 (bits(18),Dpqrs(2)),
 (bits(19),Dpqrs(3)),
 (bits(20),Dpqrs(4)),
 (bits(21),Dpqrs(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 wide low fractional values with rounding, scaling and limiting""";
attrs = (LMV,V6D);
# 10568 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVERL_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(Dpqrs.Dp), Src2(Dpqrs.Dq), Src3(Dpqrs.Dr), Src4(Dpqrs.Ds), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "moverl.4f %f,(%f+%f)",Dpqrs,Rn,Rk);
}

  action=
{
# 10608 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    int i;
    bits<32> srcl[4];
    bits<32> srch[4];
    bits<10> ext[4];
    srcl[0] = signExtend(D(Src1).WL,32);
    srch[0] = signExtend(D(Src1).WH,32);
    ext[0] = signExtend(D(Src1).E,10);
    srcl[1] = signExtend(D(Src2).WL,32);
    srch[1] = signExtend(D(Src2).WH,32);
    ext[1] = signExtend(D(Src2).E,10);
    srcl[2] = signExtend(D(Src3).WL,32);
    srch[2] = signExtend(D(Src3).WH,32);
    ext[2] = signExtend(D(Src3).E,10);
    srcl[3] = signExtend(D(Src4).WL,32);
    srch[3] = signExtend(D(Src4).WH,32);
    ext[3] = signExtend(D(Src4).E,10);


    bits<42> value[4];
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    bool is_moverl = true;
    bool is_moverh = false;
    bits<32> shifted_bit_L,shifted_bit_H;

    for (i=0;i<4;i++)
    {
       shifted_bit_L = shifted_bit_H = 0;



       sc3800_scale_two_20bit_ops(ext[i],&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       if(sc3800_saturate_two_20bit_ops(&value[i],f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i],is_moverl,is_moverh)!=1)
       {
   set_scaling_bit(srcl[i](15,0));
       }
    }

    bits <64> mem_data = concat(value[3](15,0),value[2](15,0),value[1](15,0),value[0](15,0));
    Mem(EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;


};

}


define (instr=MOVERH_4F_Dp_Dq_Dr_Ds__EA__family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4, MMM, R_Src1, R_Src2);



  blk = lsu;
  doc_title = "moverh.4f Da:Db:Dc:Dd,EA";



define (instr=MOVERH_4F_Dp_Dq_Dr_Ds__EA_)
{

  alias = MOVERH_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(KK.Dp), Src2(KK.Dq), Src3(KK.Dr), Src4(KK.Ds), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=MOVERH_4F_Dp_Dq_Dr_Ds__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVERH_4F_Dp_Dq_Dr_Ds__Rn_.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dpqrs(0)),
 (bits(17),Dpqrs(1)),
 (bits(18),Dpqrs(2)),
 (bits(19),Dpqrs(3)),
 (bits(20),Dpqrs(4)),
 (bits(21),Dpqrs(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 wide high fractional values with rounding, scaling and limiting""";
attrs = (LMV,V6D);
# 10676 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVERH_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(Dpqrs.Dp), Src2(Dpqrs.Dq), Src3(Dpqrs.Dr), Src4(Dpqrs.Ds), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "moverh.4f %f,(%f)",Dpqrs,Rn);
}
define (instr=MOVERH_4F_Dp_Dq_Dr_Ds__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVERH_4F_Dp_Dq_Dr_Ds__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dpqrs(0)),
 (bits(17),Dpqrs(1)),
 (bits(18),Dpqrs(2)),
 (bits(19),Dpqrs(3)),
 (bits(20),Dpqrs(4)),
 (bits(21),Dpqrs(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 wide high fractional values with rounding, scaling and limiting""";
attrs = (LMV,V6D);
# 10682 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVERH_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(Dpqrs.Dp), Src2(Dpqrs.Dq), Src3(Dpqrs.Dr), Src4(Dpqrs.Ds), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "moverh.4f %f,(%f)+%f",Dpqrs,Rn,Rk);
}
define (instr=MOVERH_4F_Dp_Dq_Dr_Ds__Rn_PM)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVERH_4F_Dp_Dq_Dr_Ds__Rn_PM.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dpqrs(0)),
 (bits(17),Dpqrs(1)),
 (bits(18),Dpqrs(2)),
 (bits(19),Dpqrs(3)),
 (bits(20),Dpqrs(4)),
 (bits(21),Dpqrs(5)),
 (bits(22),PM(0)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 wide high fractional values with rounding, scaling and limiting""";
attrs = (LMV,V6D);
# 10688 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVERH_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(Dpqrs.Dp), Src2(Dpqrs.Dq), Src3(Dpqrs.Dr), Src4(Dpqrs.Ds), R_Src1(Rn), R_Src2(8), MMM(PM));
  syntax = ( "moverh.4f %f,(%f)%f",Dpqrs,Rn,PM);
}
define (instr=MOVERH_4F_Dp_Dq_Dr_Ds__RnpRk_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVERH_4F_Dp_Dq_Dr_Ds__RnpRk_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dpqrs(0)),
 (bits(17),Dpqrs(1)),
 (bits(18),Dpqrs(2)),
 (bits(19),Dpqrs(3)),
 (bits(20),Dpqrs(4)),
 (bits(21),Dpqrs(5)),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move 4 wide high fractional values with rounding, scaling and limiting""";
attrs = (LMV,V6D);
# 10694 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl" 2
  alias = MOVERH_4F_Dp_Dq_Dr_Ds__EA__family(OPCD(OPCD), Src1(Dpqrs.Dp), Src2(Dpqrs.Dq), Src3(Dpqrs.Dr), Src4(Dpqrs.Ds), R_Src1(Rn), R_Src2(Rk), MMM(0));
  syntax = ( "moverh.4f %f,(%f+%f)",Dpqrs,Rn,Rk);
}

  action=
{
# 10730 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
    int i;

    bits<32> srcl[4];
    bits<32> srch[4];
    bits<10> ext[4];
    srcl[0] = signExtend(D(Src1).WL,32);
    srch[0] = signExtend(D(Src1).WH,32);
    ext[0] = signExtend(D(Src1).E,10);
    srcl[1] = signExtend(D(Src2).WL,32);
    srch[1] = signExtend(D(Src2).WH,32);
    ext[1] = signExtend(D(Src2).E,10);
    srcl[2] = signExtend(D(Src3).WL,32);
    srch[2] = signExtend(D(Src3).WH,32);
    ext[2] = signExtend(D(Src3).E,10);
    srcl[3] = signExtend(D(Src4).WL,32);
    srch[3] = signExtend(D(Src4).WH,32);
    ext[3] = signExtend(D(Src4).E,10);

    bits<42> value[4];
    bool conv_rnd = (SR.RM==0)?true:false;
    bool f_word = true;
    bool is_moverh = true;
    bool is_moverl = false;
    bits<32> shifted_bit_L,shifted_bit_H;

    for (i=0;i<4;i++)
    {
       shifted_bit_L = shifted_bit_H = 0;



       sc3800_scale_two_20bit_ops(ext[i],&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       sc3800_round_two_20bit_ops(f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i]);
       if(sc3800_saturate_two_20bit_ops(&value[i],f_word,conv_rnd,&shifted_bit_L,&shifted_bit_H,&srcl[i],&srch[i],is_moverl,is_moverh)!=1)
       {
   set_scaling_bit(srch[i](15,0));
       }
    }

    bits <64> mem_data = concat(value[3](31,16),value[2](31,16),value[1](31,16),value[0](31,16));
    Mem(EAtable(MMM,R_Src1,3,R_Src2),8) = mem_data;
# 10787 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_move.adl"
};

}
# 60 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 1
define (instr=PFL2C0_Rn_family)
{

  fields = (OPCD, R_Src1);






  blk = pcu;


define (instr=PFL2C0_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFL2C0_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Program cache command - TBD""";
# 17 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2




  alias = PFL2C0_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pfl2c0 %f",Rn);

   }


action=
{




   bits<32> tmp = R(R_Src1);


};

}


define (instr=PFL2C1_Rn_family)
{

  fields = (OPCD, R_Src1);






  blk = pcu;


define (instr=PFL2C1_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFL2C1_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Program cache command - TBD""";
# 57 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2




  alias = PFL2C1_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pfl2c1 %f",Rn);

   }


action=
{




   bits<32> tmp = R(R_Src1);


};

}


define (instr=PFL2C2_Rn_family)
{

  fields = (OPCD, R_Src1);






  blk = pcu;


define (instr=PFL2C2_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFL2C2_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Program cache command - TBD""";
# 97 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2




  alias = PFL2C2_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pfl2c2 %f",Rn);

   }


action=
{




   bits<32> tmp = R(R_Src1);


};

}


define (instr=PFL2C3_Rn_family)
{

  fields = (OPCD, R_Src1);






  blk = pcu;


define (instr=PFL2C3_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFL2C3_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Program cache command - TBD""";
# 137 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2




  alias = PFL2C3_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pfl2c3 %f",Rn);

   }


action=
{




   bits<32> tmp = R(R_Src1);


};

}


define (instr=PFETCH_Rn_family)
{

  fields = (OPCD, R_Src1);






  blk = pcu;


define (instr=PFETCH_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFETCH_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Program cache command - TBD""";
# 177 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2




  alias = PFETCH_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pfetch %f",Rn);

   }


action=
{




   bits<32> tmp = R(R_Src1);


};

}


define (instr=PF05_V_Rn_family)
{

  fields = (OPCD, R_Src1);






  blk = pcu;


define (instr=PF05_V_Rn)
{





  alias = PF05_V_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pf05.v %f",Rn);

   }


action=
{




   bits<32> tmp = R(R_Src1);


};

}


define (instr=PF06_V_Rn_family)
{

  fields = (OPCD, R_Src1);






  blk = pcu;


define (instr=PF06_V_Rn)
{

  alias = PF06_V_Rn_family(OPCD(OPCD), R_Src1(RRR));
}

define (instr=PF06_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PF06_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Program cache command - TBD""";
# 263 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = PF06_V_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pf06 %f",Rn);
}


action=
{
   bits<32> tmp = R(R_Src1);

};

}


define (instr=PF07_Rn_family)
{

  fields = (OPCD, R_Src1);
  blk = pcu;

define (instr=PF07_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PF07_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Program cache command - TBD""";
# 286 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = PF07_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pf07 %f",Rn);
}


action=
{
   bits<32> tmp = R(R_Src1);

};

}



define (instr=PQUERY_Rn_family)
{

  fields = (OPCD, R_Src1);






  blk = pcu;


define (instr=PQUERY_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PQUERY_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Program cache command - TBD""";
# 317 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2




  alias = PQUERY_Rn_family(OPCD(OPCD), R_Src1(Rn));
  syntax = ( "pquery %f",Rn);

   }


action=
{




   bits<32> tmp = R(R_Src1);


};

}


define (instr=DFL2C0__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dfl2c0 ea";

define (instr=DFL2C0__EA_)
{

  alias = DFL2C0__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DFL2C0__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFL2C0__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b1),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Activate L2 cache pre-fetch channel x""";
attrs = (LDCH,V6);
# 363 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFL2C0__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dfl2c0 (%f)",Rn);
}
define (instr=DFL2C0__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFL2C0__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b1),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Activate L2 cache pre-fetch channel x""";
attrs = (LDCH,V6);
# 369 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFL2C0__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dfl2c0 (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;

};

}


define (instr=DFL2C1__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dfl2c1 ea";

define (instr=DFL2C1__EA_)
{

  alias = DFL2C1__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DFL2C1__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFL2C1__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Activate L2 cache pre-fetch channel x""";
attrs = (LDCH,V6);
# 410 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFL2C1__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dfl2c1 (%f)",Rn);
}
define (instr=DFL2C1__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFL2C1__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Activate L2 cache pre-fetch channel x""";
attrs = (LDCH,V6);
# 416 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFL2C1__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dfl2c1 (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;


};

}


define (instr=DFL2C2__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dfl2c2 ea";


define (instr=DFL2C2__EA_)
{

  alias = DFL2C2__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DFL2C2__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFL2C2__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b0),
 (bits(18),b1),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Activate L2 cache pre-fetch channel x""";
attrs = (LDCH,V6);
# 459 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFL2C2__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dfl2c2 (%f)",Rn);
}
define (instr=DFL2C2__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFL2C2__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b0),
 (bits(18),b1),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Activate L2 cache pre-fetch channel x""";
attrs = (LDCH,V6);
# 465 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFL2C2__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dfl2c2 (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;


};

}


define (instr=DFL2C3__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dfl2c3 ea";


define (instr=DFL2C3__EA_)
{

  alias = DFL2C3__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DFL2C3__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFL2C3__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b0),
 (bits(18),b1),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Activate L2 cache pre-fetch channel x""";
attrs = (LDCH,V6);
# 508 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFL2C3__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dfl2c3 (%f)",Rn);
}
define (instr=DFL2C3__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFL2C3__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b0),
 (bits(18),b1),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Activate L2 cache pre-fetch channel x""";
attrs = (LDCH,V6);
# 514 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFL2C3__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dfl2c3 (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;


};

}


define (instr=DFETCH__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;


  doc_title = "dfetch ea";

define (instr=DFETCH__EA_)
{

  alias = DFETCH__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DFETCH__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFETCH__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Fetch line to the Dcache""";
attrs = (LDCH,V5);
# 557 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFETCH__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dfetch (%f)",Rn);
}
define (instr=DFETCH__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFETCH__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Fetch line to the Dcache""";
attrs = (LDCH,V5);
# 563 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFETCH__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dfetch (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;
};

}


define (instr=DF05_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF05_V__EA_)
{

  alias = DF05_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF06_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF06_V__EA_)
{

  alias = DF06_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DQUERY__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dquery ea";

define (instr=DQUERY__EA_)
{

  alias = DQUERY__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DQUERY__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DQUERY__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b1),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Query MMU on the data address""";
attrs = (LDCH,V6);
# 673 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DQUERY__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dquery (%f)",Rn);
}
define (instr=DQUERY__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DQUERY__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b1),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Query MMU on the data address""";
attrs = (LDCH,V6);
# 679 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DQUERY__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dquery (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;


};

}


define (instr=DFLUSH__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dflush ea";

define (instr=DFLUSH__EA_)
{

  alias = DFLUSH__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DFLUSH__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFLUSH__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Flush a line from the D cache""";
attrs = (LDCH,V6);
# 721 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFLUSH__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dflush (%f)",Rn);
}
define (instr=DFLUSH__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFLUSH__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b0),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Flush a line from the D cache""";
attrs = (LDCH,V6);
# 727 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFLUSH__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dflush (%f)+%f",Rn,Rk);
}


action=
{





   bits <8> mem_data = 0;
   Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;

};

}


define (instr=DF09_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF09_V__EA_)
{

  alias = DF09_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF0A_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF0A_V__EA_)
{

  alias = DF0A_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF0B_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF0B_V__EA_)
{

  alias = DF0B_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DSYNC__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dsync ea";

define (instr=DSYNC__EA_)
{

  alias = DSYNC__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DSYNC__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DSYNC__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b1),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Synchronize a date cache line""";
attrs = (LDCH,V6);
# 874 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DSYNC__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dsync (%f)",Rn);
}
define (instr=DSYNC__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DSYNC__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b1),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Synchronize a date cache line""";
attrs = (LDCH,V6);
# 880 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DSYNC__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dsync (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;
};

}


define (instr=DF0D_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF0D_V__EA_)
{

  alias = DF0D_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF0E_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF0E_V__EA_)
{

  alias = DF0E_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF0F_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF0F_V__EA_)
{

  alias = DF0F_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DMALLOC__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dmalloc ea";


define (instr=DMALLOC__EA_)
{

  alias = DMALLOC__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DMALLOC__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DMALLOC__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Allocate a line in the data cache""";
attrs = (LDCH,V6);
# 1026 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DMALLOC__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dmalloc (%f)",Rn);
}
define (instr=DMALLOC__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DMALLOC__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Allocate a line in the data cache""";
attrs = (LDCH,V6);
# 1032 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DMALLOC__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dmalloc (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0, R_Src2),1) = mem_data;


};

}


define (instr=DF11_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF11_V__EA_)
{

  alias = DF11_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{





    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;

};

}


define (instr=DF12_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF12_V__EA_)
{

  alias = DF12_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF13_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF13_V__EA_)
{

  alias = DF13_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DFETCHW__EA__family)
{

  fields = (OPCD, MMM, R_Src1, R_Src2);






  blk = lsu;

  doc_title = "dfetchw ea";

define (instr=DFETCHW__EA_)
{

  alias = DFETCHW__EA__family(OPCD(OPCD), R_Src1(RRR), R_Src2(8), MMM(MMM) );
}
define (instr=DFETCHW__Rn_)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFETCHW__Rn_.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Fetch line to the Dcache intending to write""";
attrs = (LDCH,V6);
# 1179 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFETCHW__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(8), MMM(2));
  syntax = ( "dfetchw (%f)",Rn);
}
define (instr=DFETCHW__Rn_pRk)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DFETCHW__Rn_pRk.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b0),
 (bits(18),b0),
 (bits(19),b0),
 (bits(20),b0),
 (bits(21),b1),
 (bits(22),Rk(0)),
 (bits(23),Rk(1)),
 (bits(24),Rk(2)),
 (bits(25),Rk(3)),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Fetch line to the Dcache""";
attrs = (LDCH,V6);
# 1185 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = DFETCHW__EA__family(OPCD(OPCD), R_Src1(Rn), R_Src2(Rk), MMM(4));
  syntax = ( "dfetchw (%f)+%f",Rn,Rk);
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0,R_Src2),1) = mem_data;


};

}


define (instr=DF15_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF15_V__EA_)
{

  alias = DF15_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF16_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF16_V__EA_)
{

  alias = DF16_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{



    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;



};

}


define (instr=DF17_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF17_V__EA_)
{

  alias = DF17_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF18_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF18_V__EA_)
{

  alias = DF18_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF19_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF19_V__EA_)
{

  alias = DF19_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF1A_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF1A_V__EA_)
{

  alias = DF1A_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF1B_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF1B_V__EA_)
{

  alias = DF1B_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF1C_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF1C_V__EA_)
{

  alias = DF1C_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF1D_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF1D_V__EA_)
{

  alias = DF1D_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF1E_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF1E_V__EA_)
{

  alias = DF1E_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




   bits <8> mem_data = 0;
   Mem(EAtable(MMM,R_Src1,0),1) = mem_data;


};

}


define (instr=DF1F_V__EA__family)
{

  fields = (OPCD, MMM, R_Src1);






  blk = pcu;


define (instr=DF1F_V__EA_)
{

  alias = DF1F_V__EA__family(OPCD(OPCD), MMM(MMM), R_Src1(RRR));
}


action=
{




    bits <8> mem_data = 0;
    Mem(EAtable(MMM,R_Src1,0),1) = mem_data;
};

}


define (instr=PFL2C0_label_family)
{

  fields = (OPCD);






  blk = pcu;


define (instr=PFL2C0_label)
{

  alias = PFL2C0_label_family(OPCD(OPCD) );
}
define (instr=PFL2C0_RelAdd15_4)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFL2C0_RelAdd15_4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b0),
 (bits(27),b0),
 (bits(28),b1),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),RelAdd15_4(0)),
 (bits(33),RelAdd15_4(1)),
 (bits(34),RelAdd15_4(2)),
 (bits(35),RelAdd15_4(3)),
 (bits(36),RelAdd15_4(4)),
 (bits(37),RelAdd15_4(5)),
 (bits(38),RelAdd15_4(6)),
 (bits(39),RelAdd15_4(7)),
 (bits(40),RelAdd15_4(8)),
 (bits(41),RelAdd15_4(9)),
 (bits(42),RelAdd15_4(10)),
 (bits(43),RelAdd15_4(11)),
 (bits(44),RelAdd15_4(12)),
 (bits(45),RelAdd15_4(13)),
 (bits(46),RelAdd15_4(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Program cache command - TBD""";
# 1609 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = PFL2C0_label_family(OPCD(OPCD) );
  syntax = ( "pfl2c0 %f",RelAdd15_4);
}


action=
{







};

}


define (instr=PFL2C1_label_family)
{

  fields = (OPCD);






  blk = pcu;


define (instr=PFL2C1_label)
{

  alias = PFL2C1_label_family(OPCD(OPCD));
}
define (instr=PFL2C1_RelAdd15_4)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFL2C1_RelAdd15_4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b0),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),RelAdd15_4(0)),
 (bits(33),RelAdd15_4(1)),
 (bits(34),RelAdd15_4(2)),
 (bits(35),RelAdd15_4(3)),
 (bits(36),RelAdd15_4(4)),
 (bits(37),RelAdd15_4(5)),
 (bits(38),RelAdd15_4(6)),
 (bits(39),RelAdd15_4(7)),
 (bits(40),RelAdd15_4(8)),
 (bits(41),RelAdd15_4(9)),
 (bits(42),RelAdd15_4(10)),
 (bits(43),RelAdd15_4(11)),
 (bits(44),RelAdd15_4(12)),
 (bits(45),RelAdd15_4(13)),
 (bits(46),RelAdd15_4(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Program cache command - TBD""";
# 1649 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
   alias = PFL2C1_label_family(OPCD(OPCD));
  syntax = ( "pfl2c1 %f",RelAdd15_4);
}


action=
{







};

}


define (instr=PFL2C2_label_family)
{

  fields = (OPCD);






  blk = pcu;


define (instr=PFL2C2_label)
{

  alias = PFL2C2_label_family(OPCD(OPCD));
}
define (instr=PFL2C2_RelAdd15_4)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFL2C2_RelAdd15_4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b0),
 (bits(27),b1),
 (bits(28),b0),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),RelAdd15_4(0)),
 (bits(33),RelAdd15_4(1)),
 (bits(34),RelAdd15_4(2)),
 (bits(35),RelAdd15_4(3)),
 (bits(36),RelAdd15_4(4)),
 (bits(37),RelAdd15_4(5)),
 (bits(38),RelAdd15_4(6)),
 (bits(39),RelAdd15_4(7)),
 (bits(40),RelAdd15_4(8)),
 (bits(41),RelAdd15_4(9)),
 (bits(42),RelAdd15_4(10)),
 (bits(43),RelAdd15_4(11)),
 (bits(44),RelAdd15_4(12)),
 (bits(45),RelAdd15_4(13)),
 (bits(46),RelAdd15_4(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Program cache command - TBD""";
# 1689 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
   alias = PFL2C2_label_family(OPCD(OPCD));
  syntax = ( "pfl2c2 %f",RelAdd15_4);
}


action=
{







};

}


define (instr=PFL2C3_label_family)
{

  fields = (OPCD);






  blk = pcu;


define (instr=PFL2C3_label)
{

  alias = PFL2C3_label_family(OPCD(OPCD));
}
define (instr=PFL2C3_RelAdd15_4)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFL2C3_RelAdd15_4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b0),
 (bits(28),b0),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),RelAdd15_4(0)),
 (bits(33),RelAdd15_4(1)),
 (bits(34),RelAdd15_4(2)),
 (bits(35),RelAdd15_4(3)),
 (bits(36),RelAdd15_4(4)),
 (bits(37),RelAdd15_4(5)),
 (bits(38),RelAdd15_4(6)),
 (bits(39),RelAdd15_4(7)),
 (bits(40),RelAdd15_4(8)),
 (bits(41),RelAdd15_4(9)),
 (bits(42),RelAdd15_4(10)),
 (bits(43),RelAdd15_4(11)),
 (bits(44),RelAdd15_4(12)),
 (bits(45),RelAdd15_4(13)),
 (bits(46),RelAdd15_4(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Program cache command - TBD""";
# 1729 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
   alias = PFL2C3_label_family(OPCD(OPCD));
  syntax = ( "pfl2c3 %f",RelAdd15_4);
}


action=
{







};

}


define (instr=PFETCH_label_family)
{

  fields = (OPCD);






  blk = pcu;


define (instr=PFETCH_label)
{

  alias = PFETCH_label_family(OPCD(OPCD));
}
define (instr=PFETCH_RelAdd15_4)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PFETCH_RelAdd15_4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b0),
 (bits(28),b1),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),RelAdd15_4(0)),
 (bits(33),RelAdd15_4(1)),
 (bits(34),RelAdd15_4(2)),
 (bits(35),RelAdd15_4(3)),
 (bits(36),RelAdd15_4(4)),
 (bits(37),RelAdd15_4(5)),
 (bits(38),RelAdd15_4(6)),
 (bits(39),RelAdd15_4(7)),
 (bits(40),RelAdd15_4(8)),
 (bits(41),RelAdd15_4(9)),
 (bits(42),RelAdd15_4(10)),
 (bits(43),RelAdd15_4(11)),
 (bits(44),RelAdd15_4(12)),
 (bits(45),RelAdd15_4(13)),
 (bits(46),RelAdd15_4(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Program cache command - TBD""";
# 1769 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
   alias = PFETCH_label_family(OPCD(OPCD));
  syntax = ( "pfetch %f",RelAdd15_4);
}


action=
{







};

}



define (instr=PF05_V_label_family)
{

  fields = (OPCD);






  blk = pcu;


define (instr=PF05_V_label)
{

  alias = PF05_V_label_family(OPCD(OPCD));
}
define (instr=PF05_V_RelAdd15_4)
{

   alias = PF05_V_label_family(OPCD(OPCD));
  syntax = ( "pf05.v %f",RelAdd15_4);
}


action=
{







};

}


define (instr=PF06_V_label_family)
{

  fields = (OPCD);






  blk = pcu;


define (instr=PF06_V_label)
{

  alias = PF06_V_label_family(OPCD(OPCD));
}
define (instr=PF06_RelAdd15_4)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PF06_RelAdd15_4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b0),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),RelAdd15_4(0)),
 (bits(33),RelAdd15_4(1)),
 (bits(34),RelAdd15_4(2)),
 (bits(35),RelAdd15_4(3)),
 (bits(36),RelAdd15_4(4)),
 (bits(37),RelAdd15_4(5)),
 (bits(38),RelAdd15_4(6)),
 (bits(39),RelAdd15_4(7)),
 (bits(40),RelAdd15_4(8)),
 (bits(41),RelAdd15_4(9)),
 (bits(42),RelAdd15_4(10)),
 (bits(43),RelAdd15_4(11)),
 (bits(44),RelAdd15_4(12)),
 (bits(45),RelAdd15_4(13)),
 (bits(46),RelAdd15_4(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Program cache command - TBD""";
# 1850 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
   alias = PF06_V_label_family(OPCD(OPCD));
  syntax = ( "pf06 %f",RelAdd15_4);
}


action=
{







};

}


define (instr=PF07_label_family)
{
  fields = (OPCD);
  blk = pcu;

define (instr=PF07_RelAdd15_4)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PF07_RelAdd15_4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),RelAdd15_4(0)),
 (bits(33),RelAdd15_4(1)),
 (bits(34),RelAdd15_4(2)),
 (bits(35),RelAdd15_4(3)),
 (bits(36),RelAdd15_4(4)),
 (bits(37),RelAdd15_4(5)),
 (bits(38),RelAdd15_4(6)),
 (bits(39),RelAdd15_4(7)),
 (bits(40),RelAdd15_4(8)),
 (bits(41),RelAdd15_4(9)),
 (bits(42),RelAdd15_4(10)),
 (bits(43),RelAdd15_4(11)),
 (bits(44),RelAdd15_4(12)),
 (bits(45),RelAdd15_4(13)),
 (bits(46),RelAdd15_4(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Program cache command - TBD""";
# 1877 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
   alias = PF07_label_family(OPCD(OPCD));
  syntax = ( "pf07 %f",RelAdd15_4);
}

action=
{


};

}



define (instr=PQUERY_label_family)
{

  fields = (OPCD);






  blk = pcu;


define (instr=PQUERY_label)
{

  alias = PQUERY_label_family(OPCD(OPCD));
}
define (instr=PQUERY_RelAdd15_4)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PQUERY_RelAdd15_4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b0),
 (bits(27),b0),
 (bits(28),b0),
 (bits(29),b0),
 (bits(30),b0),
 (bits(31),b0),
 (bits(32),RelAdd15_4(0)),
 (bits(33),RelAdd15_4(1)),
 (bits(34),RelAdd15_4(2)),
 (bits(35),RelAdd15_4(3)),
 (bits(36),RelAdd15_4(4)),
 (bits(37),RelAdd15_4(5)),
 (bits(38),RelAdd15_4(6)),
 (bits(39),RelAdd15_4(7)),
 (bits(40),RelAdd15_4(8)),
 (bits(41),RelAdd15_4(9)),
 (bits(42),RelAdd15_4(10)),
 (bits(43),RelAdd15_4(11)),
 (bits(44),RelAdd15_4(12)),
 (bits(45),RelAdd15_4(13)),
 (bits(46),RelAdd15_4(14)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Program cache command - TBD""";
# 1912 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
   alias = PQUERY_label_family(OPCD(OPCD));
  syntax = ( "pquery %f",RelAdd15_4);
}


action=
{







};

}



define (instr=TFETCH_REL_family)
{

  fields = (OPCD, imms, imms2,NF);



  blk = pcu;

define (instr=TFETCH_REL)
{

  alias = TFETCH_REL_family(OPCD(OPCD),imms(a16_label_t6), imms2(a16_rs17),NF(NF));
  syntax = ( "tfetchrel %f,%f (%f)",a16_label_t6,a16_rs17,NF);
}

define (instr=TFETCH_RelAdd20_RelAdd7)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFETCH_RelAdd20_RelAdd7.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),NF(0)),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),RelAdd7_t1(0)),
 (bits(20),RelAdd7_t1(1)),
 (bits(21),RelAdd7_t1(2)),
 (bits(22),RelAdd7_t1(3)),
 (bits(23),RelAdd7_t1(4)),
 (bits(24),RelAdd7_t1(5)),
 (bits(25),RelAdd7_t1(6)),
 (bits(26),RelAdd20_t1(0)),
 (bits(27),RelAdd20_t1(1)),
 (bits(28),RelAdd20_t1(2)),
 (bits(29),RelAdd20_t1(3)),
 (bits(30),RelAdd20_t1(4)),
 (bits(31),b0),
 (bits(32),RelAdd20_t1(5)),
 (bits(33),RelAdd20_t1(6)),
 (bits(34),RelAdd20_t1(7)),
 (bits(35),RelAdd20_t1(8)),
 (bits(36),RelAdd20_t1(9)),
 (bits(37),RelAdd20_t1(10)),
 (bits(38),RelAdd20_t1(11)),
 (bits(39),RelAdd20_t1(12)),
 (bits(40),RelAdd20_t1(13)),
 (bits(41),RelAdd20_t1(14)),
 (bits(42),RelAdd20_t1(15)),
 (bits(43),RelAdd20_t1(16)),
 (bits(44),RelAdd20_t1(17)),
 (bits(45),RelAdd20_t1(18)),
 (bits(46),RelAdd20_t1(19)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Hint to the core to fetch ahead the target in the specified address, for the COF instruction in the specified label""";
# 1951 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = TFETCH_REL_family(OPCD(OPCD),imms(RelAdd20_t1), imms2(RelAdd7_t1),NF(NF));
  syntax = ( "tfetchrel %f,%f (%f)",RelAdd20_t1,RelAdd7_t1,NF);
}

action=
{
    TF_COF_SRC = (PC_ST_VLES + (imms2) -PC);
    TF_COF_DES = (PC_ST_VLES + (imms) -PC);
    TF_COF_INDEX = 0;



};

}


define (instr=TFETCH_family)
{

  fields = (OPCD, R_Src1, imms, NF);



  blk = pcu;

define (instr=TFETCH)
{

  alias = TFETCH_family(OPCD(OPCD), R_Src1(RRR),imms(a16_label_t6),NF(NF));
  syntax = ( "tfetch %f,%f (%f)",RRR,a16_label_t6,NF);
}

define (instr=TFETCH_Ra_RelAdd7)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFETCH_Ra_RelAdd7.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),NF(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd7(0)),
 (bits(17),RelAdd7(1)),
 (bits(18),RelAdd7(2)),
 (bits(19),RelAdd7(3)),
 (bits(20),RelAdd7(4)),
 (bits(21),RelAdd7(5)),
 (bits(22),RelAdd7(6)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Hint to the core to fetch ahead the target specified in the address register, for the COF instruction in the specified label""";
# 1987 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = TFETCH_family(OPCD(OPCD), R_Src1(Ra),imms(RelAdd7),NF(NF));
  syntax = ( "tfetch %f,%f (%f)",Ra,RelAdd7,NF);
}



action=
{

    TF_COF_SRC = (PC_ST_VLES + (imms) -PC);
    TF_COF_DES = R(R_Src1);
    TF_COF_INDEX = 0;



};

}



define (instr=TFRAS_family)
{

  fields = (OPCD, imms, NF);



  blk = pcu;


define (instr=TFRAS)
{

  alias = TFRAS_family(OPCD(OPCD),imms(a16_label_t6),NF(NF));
  syntax = ( "tfras %f (%f)",a16_label_t6, NF);
}


define (instr=TFRAS_RelAdd7)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRAS_RelAdd7.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),NF(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd7(0)),
 (bits(17),RelAdd7(1)),
 (bits(18),RelAdd7(2)),
 (bits(19),RelAdd7(3)),
 (bits(20),RelAdd7(4)),
 (bits(21),RelAdd7(5)),
 (bits(22),RelAdd7(6)),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Hint to the core to fetch ahead the RAS target, for the COF instruction in the specified label""";
# 2029 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_cache.adl" 2
  alias = TFRAS_family(OPCD(OPCD),imms(RelAdd7),NF(NF));
  syntax = ( "tfras %f (%f)",RelAdd7,NF);
}


action=
{
   TF_COF_SRC = (PC_ST_VLES + (imms) -PC);
   TF_COF_DES = RAS(0);
   TF_COF_INDEX = 0;
   TF_RTS = TF_RTS::True;




};

}


define (instr=TFETCH_ABS_family)
{

  fields = (OPCD, imms, imms2);



  blk = pcu;


define (instr=TFETCH_ABS)
{

  alias = TFETCH_ABS_family(OPCD(OPCD),imms(a32_label),imms2(a16_rst17));
  syntax = ( "tfetchabs (%f),%f",a32_label,a16_rst17);
}


action=
{
    TF_COF_SRC = (PC_ST_VLES + (imms2) -PC);
    TF_COF_DES = imms;
    TF_COF_INDEX = 0;

    info(4,"TF_COF_SRC = "<<hex<<TF_COF_SRC,", TF_COF_DES = "<<hex<<TF_COF_DES );
    info(4,"imms = "<<hex<<imms,", imms2 = "<<hex<<imms2 );

};

}
# 61 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 1


define (instr=SKIPLS_label_family)
{

  fields = (OPCD,imms );






  blk = pcu;





define (instr=SKIPLS_label)
{

  alias = SKIPLS_label_family(OPCD(OPCD), imms(a16_label_t6));
}

define (instr=SKIPLS_RelAdd16)
{

  alias = SKIPLS_label_family(OPCD(OPCD), imms(RelAdd16));
  syntax = ( "skipls %f",RelAdd16);
}

   action =
   {




      uint32_t active_loop = FindActiveLoop();
      CofValid = CofValid::True;
      NoBtb = NoBtb::True;

      if ( LC(active_loop).signedLT(1) )
      {
  Cof_instr = Cof_instr::Taken;
  NVPC = (PC_ST_VLES + (imms) -PC) ;
  clear_SR_LF(active_loop);
  SR.SLF = 0;
      }
   };

}


define (instr=BREAK_label_family)
{

  fields = (OPCD, imms);




  blk = pcu;





define (instr=BREAK_label)
{

  alias = BREAK_label_family(OPCD(OPCD), imms(a16_label_t6) );
}

   action =
   {




      uint32_t active_loop = FindActiveLoop();
      CofValid = CofValid::True;
      Cof_instr = Cof_instr::Taken;
      NoBtb = NoBtb::True;
      NVPC = (PC_ST_VLES + (imms) -PC) ;
      clear_SR_LF(active_loop);
   };

}


define (instr=CONT_label_family)
{

  fields = (OPCD, imms);




  blk = pcu;





define (instr=CONT_label)
{

  alias = CONT_label_family(OPCD(OPCD), imms(a16_label_t6) );
}
define (instr=CONT_RelAdd16)
{

  alias = CONT_label_family(OPCD(OPCD), imms(RelAdd16));
  syntax = ( "cont %f",RelAdd16);
}

   action =
   {



      uint32_t active_loop = FindActiveLoop();
      Cof_instr = Cof_instr::Taken;
      CofValid = CofValid::True;
      NoBtb = NoBtb::True;

      if ( ( (LC(active_loop) & 0xFFFFFFFE)!=0 ) && ( LC(active_loop)(31)==0 ) )
      {
  NVPC = SA(active_loop);
  LC(active_loop)=LC(active_loop)-1;
      }
      else
      {
  NVPC = (PC_ST_VLES + (imms) -PC) ;
  clear_SR_LF(active_loop);
  LC(active_loop)=0;
      }
   };

}




define (instr=CONTD_label_family)
{

  fields = (OPCD, imms);





  blk = pcu;





define (instr=CONTD_label)
{

  alias = CONTD_label_family(OPCD(OPCD), imms(a16_label_t6));
}

   action =
   {



      uint32_t active_loop = FindActiveLoop();
      CofValid = CofValid::True;
      CofTaken = CofTaken::True;
      NoBtb = NoBtb::True;
      DelayedCof = DelayedCof::True;

      if ( ( (LC(active_loop) & 0xFFFFFFFE)!=0 ) && ( LC(active_loop)(31)==0 ) )
      {
  DSPC = SA(active_loop);
  Fetch = Fetch::DelaySlot;
  LC(active_loop)=LC(active_loop)-1;
      }
     else
     {
  DSPC = (PC_ST_VLES + (imms) -PC);
  Fetch = Fetch::DelaySlot;
  clear_SR_LF(active_loop);
  LC(active_loop)=0;
      }
   };

}


define (instr=DOSETUPn_label_family)
{

  fields = (OPCD,imms,n );


  blk = lsu;




define (instr=DOSETUPn_label)
{

  alias = DOSETUPn_label_family(OPCD(OPCD), imms(a16_label_t6),n(n));
}

   action =
   {




      SA(n) = (PC_ST_VLES + (imms) -PC);
   };

}


define (instr=DOENn__u16_family)
{

  fields = (OPCD, immu,nn,HWLOOPS_SEQUENTIAL);




  blk = lsu;



  doc_title = "doen[sq]n #u16";

define (instr=DOENn__u16)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DOENn__u16.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),n(0)),
 (bits(9),n(1)),
 (bits(10),b0),
 (bits(11),u16_t3(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),u16_t3(1)),
 (bits(17),u16_t3(2)),
 (bits(18),u16_t3(3)),
 (bits(19),u16_t3(4)),
 (bits(20),u16_t3(5)),
 (bits(21),u16_t3(6)),
 (bits(22),u16_t3(7)),
 (bits(23),u16_t3(8)),
 (bits(24),u16_t3(9)),
 (bits(25),u16_t3(10)),
 (bits(26),u16_t3(11)),
 (bits(27),u16_t3(12)),
 (bits(28),u16_t3(13)),
 (bits(29),u16_t3(14)),
 (bits(30),u16_t3(15)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Enable hardware loop n""";
attrs = (LMREG,V2);
# 241 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2






  alias = DOENn__u16_family(OPCD(OPCD), immu(u16_t3), nn(n),HWLOOPS_SEQUENTIAL(0));
  syntax = ( "doen%f #%f",n,u16_t3);

}


define (instr=DOENSQn__u16)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DOENSQn__u16.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),n(0)),
 (bits(9),n(1)),
 (bits(10),b1),
 (bits(11),u16_t3(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),u16_t3(1)),
 (bits(17),u16_t3(2)),
 (bits(18),u16_t3(3)),
 (bits(19),u16_t3(4)),
 (bits(20),u16_t3(5)),
 (bits(21),u16_t3(6)),
 (bits(22),u16_t3(7)),
 (bits(23),u16_t3(8)),
 (bits(24),u16_t3(9)),
 (bits(25),u16_t3(10)),
 (bits(26),u16_t3(11)),
 (bits(27),u16_t3(12)),
 (bits(28),u16_t3(13)),
 (bits(29),u16_t3(14)),
 (bits(30),u16_t3(15)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Enable sequential hardware loop n""";
attrs = (LMREG,V7);
# 256 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
   alias = DOENn__u16_family(OPCD(OPCD), immu(u16_t3), nn(n),HWLOOPS_SEQUENTIAL(1));
  syntax = ( "doensq%f #%f",n,u16_t3);
}

   action =
   {
# 274 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl"
      set_doen_flag(nn,HWLOOPS_SEQUENTIAL);


      LC(nn) = zeroExtend(immu,32);
      set_SR_LF(nn);
   };

}


define (instr=DOENn__u6_family)
{



  fields = (OPCD, u6, nn);



  blk = lsu;




define (instr=DOENn__u6)
{
# 308 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl"
  alias = DOENn__u6_family(OPCD(OPCD), u6(u6), nn(n));
  syntax = ( "doen%f #%f",n,u6);

}

   action =
   {
# 327 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl"
 set_doen_flag(nn);



      LC(nn)= zeroExtend(u6,32);
      set_SR_LF(nn);
   };

}


define (instr=DOENn_Da_family)
{

  fields = (OPCD, Src1, nn, HWLOOPS_SEQUENTIAL);




  blk = lsu;



  doc_title = "doen[sq]n D";

define (instr=DOENn_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DOENn_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),n(0)),
 (bits(17),n(1)),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Da(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Enable hardware loop n""";
attrs = (LMREG,V2);
# 355 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2






  alias = DOENn_Da_family(OPCD(OPCD), Src1(Da), nn(n),HWLOOPS_SEQUENTIAL(0));
  syntax = ( "doen%f %f",n,Da);

}

define (instr=DOENSQn_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DOENSQn_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),n(0)),
 (bits(17),n(1)),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Da(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Enable sequential hardware loop n""";
attrs = (LMREG,V7);
# 369 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
   alias = DOENn_Da_family(OPCD(OPCD), Src1(Da), nn(n),HWLOOPS_SEQUENTIAL(1));
  syntax = ( "doensq%f %f",n,Da);
}


   action =
   {
# 390 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl"
      set_doen_flag(nn,HWLOOPS_SEQUENTIAL);



      LC(nn)= D(Src1)(32 -1,0);
      set_SR_LF(nn);
   };

}


define (instr=DOENn_Rq_family)
{

  fields = (OPCD, R_Src1, nn,HWLOOPS_SEQUENTIAL);




  blk = lsu;



  doc_title = "doen[sq]n R";


define (instr=DOENn_Rq)
{
# 426 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl"
}
define (instr=DOENn_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DOENn_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),n(0)),
 (bits(17),n(1)),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Enable hardware loop n""";
attrs = (LMREG,V2);
# 430 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
   alias = DOENn_Rq_family(OPCD(OPCD), R_Src1(Ra), nn(n),HWLOOPS_SEQUENTIAL(0));
  syntax = ( "doen%f %f",n,Ra);
}

define (instr=DOENSQn_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DOENSQn_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),n(0)),
 (bits(17),n(1)),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Enable sequential hardware loop n""";
attrs = (LMREG,V7);
# 437 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
   alias = DOENn_Rq_family(OPCD(OPCD), R_Src1(Ra), nn(n),HWLOOPS_SEQUENTIAL(1));
  syntax = ( "doensq%f %f",n,Ra);
}

action =
{
# 457 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl"
      set_doen_flag(nn,HWLOOPS_SEQUENTIAL);



    LC(nn)= R(R_Src1)(32 -1,0);
    set_SR_LF(nn);
};
}


define (instr=DOENSHn__u16_family)
{

   fields = (OPCD, u16, nn);




  blk = pcu;





   define (instr=DOENSHn__u16)
   {

      alias = DOENSHn__u16_family(OPCD(OPCD), u16(u16), nn(nn));
}
define (instr=DOENSHN__u16)
{

      alias = DOENSHn__u16_family(OPCD(OPCD), u16(u16), nn(n));
  syntax = ( "doensh%f #%f",n,u16);
}

   action =
   {




      LC(nn)= zeroExtend(u16, 32);
      set_SR_LF(nn);
      SR.SLF=1;
   };





}


define (instr=DOENSHn__u6_family)
{
   fields = (OPCD, u6, nn);




  blk = pcu;




   define (instr=DOENSHn__u6)
   {

      alias = DOENSHn__u6_family(OPCD(OPCD), u6(u6), nn(nn));
}
define (instr=DOENSHN__u6)
{

      alias = DOENSHn__u6_family(OPCD(OPCD), u6(u6), nn(n));
  syntax = ( "doensh%f %f",n,u6);
}

   action =
   {




      LC(nn) = zeroExtend(u6,32);
      set_SR_LF(nn);
      SR.SLF=1;
   };




}


define (instr=DOENSHn_Da_family)
{

   fields = (OPCD, Src1, nn);




  blk = pcu;




   define (instr=DOENSHn_Da)
   {

      alias = DOENSHn_Da_family(OPCD(OPCD), Src1(JJJ), nn(nn));
}
define (instr=DOENSHN_Da)
{

      alias = DOENSHn_Da_family(OPCD(OPCD), Src1(Da), nn(n));
  syntax = ( "doensh%f %f",n,Da);
}

   action =
   {




      LC(nn)= D(Src1)(32 -1,0);
      set_SR_LF(nn);
      SR.SLF=1;
   };




}


define (instr=DOENSHn_Rq_family)
{
   fields = (OPCD, R_Src1, nn);




  blk = pcu;




   define (instr=DOENSHn_Rq)
   {

      alias = DOENSHn_Rq_family(OPCD(OPCD), R_Src1(qqq), nn(nn));
}
define (instr=DOENSHN_Ra)
{

      alias = DOENSHn_Rq_family(OPCD(OPCD), R_Src1(Ra), nn(n));
  syntax = ( "doensh%f %f",n,Ra);
}

   action =
   {




      LC(nn)= R(R_Src1)(32 -1,0);
      set_SR_LF(nn);
      SR.SLF=1;
   };




}


define (instr=RTPE_family)
{

  fields = (OPCD);







  blk = pcu;


define (instr=RTPE)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/RTPE.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Returns from an exception routine by popping the PC and SR from the active stack with one 64-bit memory access. Program execution continues at the new address in the PC - TBD""";
# 652 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
  alias = RTPE_family(OPCD(OPCD));
}


action=
{






};

}


define (instr=LPST_family)
{
  fields = (OPCD, imms, n, HWLOOPS_SEQUENTIAL);
  blk = pcu;



  doc_title = "lpst[sq]n label";

define (instr=LPST_label)
{

   alias = LPST_family(OPCD(OPCD), imms(a20), n(n), HWLOOPS_SEQUENTIAL(0));
   syntax = ("lpst%f %f", n, a20);
}

define (instr=LPSTSQ_label)
{

   alias = LPST_family(OPCD(OPCD), imms(a20), n(n), HWLOOPS_SEQUENTIAL(1));
   syntax = ("lpstsq%f %f", n, a20);
}

define (instr=LPSTSQn_RelAdd10)
   {

      alias = LPST_family(OPCD(OPCD),imms(RelAdd10), n(n), HWLOOPS_SEQUENTIAL(1));
      syntax = ( "lpstsq%f %f",n,RelAdd10);
   }

define (instr=LPSTSQn_RelAdd20)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LPSTSQn_RelAdd20.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),RelAdd20(0)),
 (bits(8),RelAdd20(1)),
 (bits(9),RelAdd20(2)),
 (bits(10),RelAdd20(3)),
 (bits(11),RelAdd20(4)),
 (bits(12),n(0)),
 (bits(13),n(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd20(5)),
 (bits(17),RelAdd20(6)),
 (bits(18),RelAdd20(7)),
 (bits(19),RelAdd20(8)),
 (bits(20),RelAdd20(9)),
 (bits(21),RelAdd20(10)),
 (bits(22),RelAdd20(11)),
 (bits(23),RelAdd20(12)),
 (bits(24),RelAdd20(13)),
 (bits(25),RelAdd20(14)),
 (bits(26),RelAdd20(15)),
 (bits(27),RelAdd20(16)),
 (bits(28),RelAdd20(17)),
 (bits(29),RelAdd20(18)),
 (bits(30),RelAdd20(19)),
 (bits(31),b0),
 (bits(32),reserved),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Indicates a sequential HWL starts next VLES""";
# 702 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = LPST_family(OPCD(OPCD),imms(RelAdd20), n(n), HWLOOPS_SEQUENTIAL(1));
      syntax = ( "lpstsq%f %f",n,RelAdd20);
   }

define (instr=LPSTn_RelAdd10)
   {

      alias = LPST_family(OPCD(OPCD),imms(RelAdd10), n(n), HWLOOPS_SEQUENTIAL(0));
      syntax = ( "lpst%f %f",n,RelAdd10);
   }

define (instr=LPSTn_RelAdd20)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LPSTn_RelAdd20.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),RelAdd20(0)),
 (bits(8),RelAdd20(1)),
 (bits(9),RelAdd20(2)),
 (bits(10),RelAdd20(3)),
 (bits(11),RelAdd20(4)),
 (bits(12),n(0)),
 (bits(13),n(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd20(5)),
 (bits(17),RelAdd20(6)),
 (bits(18),RelAdd20(7)),
 (bits(19),RelAdd20(8)),
 (bits(20),RelAdd20(9)),
 (bits(21),RelAdd20(10)),
 (bits(22),RelAdd20(11)),
 (bits(23),RelAdd20(12)),
 (bits(24),RelAdd20(13)),
 (bits(25),RelAdd20(14)),
 (bits(26),RelAdd20(15)),
 (bits(27),RelAdd20(16)),
 (bits(28),RelAdd20(17)),
 (bits(29),RelAdd20(18)),
 (bits(30),RelAdd20(19)),
 (bits(31),b0),
 (bits(32),reserved),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Indicates a HWL starts next VLES""";
# 716 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = LPST_family(OPCD(OPCD),imms(RelAdd20), n(n), HWLOOPS_SEQUENTIAL(0));
      syntax = ( "lpst%f %f",n,RelAdd20);
   }



   action =
   {
      var ActiveLoop = n;

      bool sequential;

      if (HWLOOPS_SEQUENTIAL==0) {
  LpstFlag = LpstFlag::True;
  sequential = false;
      } else {
  LpstSqFlag = LpstSqFlag::True;
  sequential = true;
      }
      set_lpst_idx(ActiveLoop.uint32(), sequential);
      LpstSqAddr = (PC_ST_VLES + (imms) -PC);
   };

}


define (instr=LPEND_family)
{
  fields = (OPCD, n, imms, HWLOOPS_SEQUENTIAL);
  blk = pcu;



  doc_title = "lpend[sq]n label";

define (instr=LPEND_label)
{

   alias = LPEND_family(OPCD(OPCD), n(n), imms(a20), HWLOOPS_SEQUENTIAL(0));
   syntax = ("lpend%f %f", n, a20);
}

define (instr=LPENDSQ_label)
{

   alias = LPEND_family(OPCD(OPCD), n(n), imms(a20), HWLOOPS_SEQUENTIAL(1));
   syntax = ("lpendsq%f %f", n, a20);
}

define (instr=LPENDSQn_RelAdd10)
{

   alias = LPEND_family(OPCD(OPCD), n(n), imms(RelAdd10), HWLOOPS_SEQUENTIAL(1));
   syntax = ( "lpendsq%f %f",n,RelAdd10);
}

define (instr=LPENDSQn_RelAdd20)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LPENDSQn_RelAdd20.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),RelAdd20(0)),
 (bits(8),RelAdd20(1)),
 (bits(9),RelAdd20(2)),
 (bits(10),RelAdd20(3)),
 (bits(11),RelAdd20(4)),
 (bits(12),n(0)),
 (bits(13),n(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd20(5)),
 (bits(17),RelAdd20(6)),
 (bits(18),RelAdd20(7)),
 (bits(19),RelAdd20(8)),
 (bits(20),RelAdd20(9)),
 (bits(21),RelAdd20(10)),
 (bits(22),RelAdd20(11)),
 (bits(23),RelAdd20(12)),
 (bits(24),RelAdd20(13)),
 (bits(25),RelAdd20(14)),
 (bits(26),RelAdd20(15)),
 (bits(27),RelAdd20(16)),
 (bits(28),RelAdd20(17)),
 (bits(29),RelAdd20(18)),
 (bits(30),RelAdd20(19)),
 (bits(31),b0),
 (bits(32),reserved),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""If LCn>1 transfers program execution of sequential loop to the specified address. In any case, Decrements LCn by 1. """;
# 775 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = LPEND_family(OPCD(OPCD), n(n), imms(RelAdd20), HWLOOPS_SEQUENTIAL(1));
      syntax = ( "lpendsq%f %f",n,RelAdd20);
}

define (instr=LPENDn_RelAdd10)
{

      alias = LPEND_family(OPCD(OPCD), n(n),imms(RelAdd10), HWLOOPS_SEQUENTIAL(0));
      syntax = ( "lpend%f %f",n,RelAdd10);
}


define (instr=LPENDn_RelAdd20)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LPENDn_RelAdd20.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),RelAdd20(0)),
 (bits(8),RelAdd20(1)),
 (bits(9),RelAdd20(2)),
 (bits(10),RelAdd20(3)),
 (bits(11),RelAdd20(4)),
 (bits(12),n(0)),
 (bits(13),n(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd20(5)),
 (bits(17),RelAdd20(6)),
 (bits(18),RelAdd20(7)),
 (bits(19),RelAdd20(8)),
 (bits(20),RelAdd20(9)),
 (bits(21),RelAdd20(10)),
 (bits(22),RelAdd20(11)),
 (bits(23),RelAdd20(12)),
 (bits(24),RelAdd20(13)),
 (bits(25),RelAdd20(14)),
 (bits(26),RelAdd20(15)),
 (bits(27),RelAdd20(16)),
 (bits(28),RelAdd20(17)),
 (bits(29),RelAdd20(18)),
 (bits(30),RelAdd20(19)),
 (bits(31),b0),
 (bits(32),reserved),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""If LCn>1 transfers program execution to the specified address. In any case, Decrements LCn by 1. """;
# 790 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = LPEND_family(OPCD(OPCD), n(n),imms(RelAdd20), HWLOOPS_SEQUENTIAL(0));
      syntax = ( "lpend%f %f",n,RelAdd20);
}


   action =
   {
      var ActiveLoop = n;


      bool sequential;



      if (HWLOOPS_SEQUENTIAL==0) {
  LpendFlag = LpendFlag::True;
  sequential = false;
      } else {
  LpendSqFlag = LpendSqFlag::True;
  sequential = true;
      }
      set_lpend_idx(ActiveLoop.uint32(), sequential);

      if (LC(ActiveLoop).signedGT(1) ) {
  LC(ActiveLoop) = LC(ActiveLoop)-1;

  CofValid = CofValid::True;
  Cof_instr = Cof_instr::Taken;

  if (HWLOOPS_SEQUENTIAL==0) {
     LpendCof = LpendCof::Taken;
  } else {
     LpendSqCof = LpendSqCof::Taken;
  }







  NVPC = (PC_ST_VLES + (imms) -PC);
      } else {
  LC(ActiveLoop) = 0;
      }

   };

}



define (instr=LPSKIP_RelAdd20_RelAdd4_family)
{
  fields = (OPCD,n,imms1,imms2,HWLOOPS_SEQUENTIAL);
   blk = pcu;
   doc_title = "lpskip[sq]n RelAdd20,RRelAdd4";

   define (instr=LPSKIPn_RelAdd20_RRelAdd4)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LPSKIPn_RelAdd20_RRelAdd4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),b0),
 (bits(13),b0),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),n(0)),
 (bits(17),n(1)),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),RRelAdd4(0)),
 (bits(23),RRelAdd4(1)),
 (bits(24),RRelAdd4(2)),
 (bits(25),RRelAdd4(3)),
 (bits(26),RelAdd20_t1(0)),
 (bits(27),RelAdd20_t1(1)),
 (bits(28),RelAdd20_t1(2)),
 (bits(29),RelAdd20_t1(3)),
 (bits(30),RelAdd20_t1(4)),
 (bits(31),b0),
 (bits(32),RelAdd20_t1(5)),
 (bits(33),RelAdd20_t1(6)),
 (bits(34),RelAdd20_t1(7)),
 (bits(35),RelAdd20_t1(8)),
 (bits(36),RelAdd20_t1(9)),
 (bits(37),RelAdd20_t1(10)),
 (bits(38),RelAdd20_t1(11)),
 (bits(39),RelAdd20_t1(12)),
 (bits(40),RelAdd20_t1(13)),
 (bits(41),RelAdd20_t1(14)),
 (bits(42),RelAdd20_t1(15)),
 (bits(43),RelAdd20_t1(16)),
 (bits(44),RelAdd20_t1(17)),
 (bits(45),RelAdd20_t1(18)),
 (bits(46),RelAdd20_t1(19)),
 (bits(47),b0),
 (bits(48),reserved),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Indicates a HWL starts next VLES. If LCn<1 transfer program execution to the specified address""";
# 851 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = LPSKIP_RelAdd20_RelAdd4_family(OPCD(OPCD), n(n),imms1(RelAdd20_t1),imms2(RRelAdd4), HWLOOPS_SEQUENTIAL(0));
      syntax = ( "lpskip%f %f,%f",n,RelAdd20_t1,RRelAdd4);
   }

   define (instr=LPSKIPSQn_RelAdd20_RRelAdd4)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LPSKIPSQn_RelAdd20_RRelAdd4.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),b0),
 (bits(13),b0),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),n(0)),
 (bits(17),n(1)),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),RRelAdd4(0)),
 (bits(23),RRelAdd4(1)),
 (bits(24),RRelAdd4(2)),
 (bits(25),RRelAdd4(3)),
 (bits(26),RelAdd20_t1(0)),
 (bits(27),RelAdd20_t1(1)),
 (bits(28),RelAdd20_t1(2)),
 (bits(29),RelAdd20_t1(3)),
 (bits(30),RelAdd20_t1(4)),
 (bits(31),b0),
 (bits(32),RelAdd20_t1(5)),
 (bits(33),RelAdd20_t1(6)),
 (bits(34),RelAdd20_t1(7)),
 (bits(35),RelAdd20_t1(8)),
 (bits(36),RelAdd20_t1(9)),
 (bits(37),RelAdd20_t1(10)),
 (bits(38),RelAdd20_t1(11)),
 (bits(39),RelAdd20_t1(12)),
 (bits(40),RelAdd20_t1(13)),
 (bits(41),RelAdd20_t1(14)),
 (bits(42),RelAdd20_t1(15)),
 (bits(43),RelAdd20_t1(16)),
 (bits(44),RelAdd20_t1(17)),
 (bits(45),RelAdd20_t1(18)),
 (bits(46),RelAdd20_t1(19)),
 (bits(47),b0),
 (bits(48),reserved),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Indicates a sequential HWL starts next VLES. If LCn<1 transfer program execution to the specified address""";
# 858 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = LPSKIP_RelAdd20_RelAdd4_family(OPCD(OPCD), n(n),imms1(RelAdd20_t1),imms2(RRelAdd4), HWLOOPS_SEQUENTIAL(1));
      syntax = ( "lpskipsq%f %f,%f",n,RelAdd20_t1,RRelAdd4);
   }


action=
{
      var ActiveLoop = n;
      CofValid = CofValid::True;
      NoBtb = NoBtb::True;

      imms2 += (PC_ST_VLES + (imms1) -PC);

      if ( LC(ActiveLoop).signedLT(1) )
      {
  Cof_instr = Cof_instr::Taken;
  NVPC = (PC_ST_VLES + (imms1) -PC) ;
      } else {
  bool sequential;
  if (HWLOOPS_SEQUENTIAL==0) {
     LpstFlag = LpstFlag::True;
     sequential = false;
  } else {
     LpstSqFlag = LpstSqFlag::True;
     sequential = true;
  }
  set_lpst_idx(ActiveLoop.uint32(), sequential);
  LpstSqAddr = (PC_ST_VLES + (imms2) -PC);
      }

};

}


define (instr=SKIP_RelAdd16_family)
{
  fields = (OPCD, n, imms);
   blk = pcu;
   define (instr=SKIPn_RelAdd16)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SKIPn_RelAdd16.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),n(0)),
 (bits(7),n(1)),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),RelAdd16(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd16(1)),
 (bits(17),RelAdd16(2)),
 (bits(18),RelAdd16(3)),
 (bits(19),RelAdd16(4)),
 (bits(20),RelAdd16(5)),
 (bits(21),RelAdd16(6)),
 (bits(22),RelAdd16(7)),
 (bits(23),RelAdd16(8)),
 (bits(24),RelAdd16(9)),
 (bits(25),RelAdd16(10)),
 (bits(26),RelAdd16(11)),
 (bits(27),RelAdd16(12)),
 (bits(28),RelAdd16(13)),
 (bits(29),RelAdd16(14)),
 (bits(30),RelAdd16(15)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""If LCn<1 transfers program execution to the specified address""";
# 900 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = SKIP_RelAdd16_family(OPCD(OPCD),imms(RelAdd16), n(n));
      syntax = ( "skip%f %f",n,RelAdd16);
   }

action=
{
      var ActiveLoop = n;
      CofValid = CofValid::True;
      NoBtb = NoBtb::True;

      if ( LC(ActiveLoop).signedLT(1) )
      {
  Cof_instr = Cof_instr::Taken;
  NVPC = (PC_ST_VLES + (imms) -PC) ;
      }

};

}


define (instr=SKIPLS_label_new_family)
{

  fields = (OPCD,imms,n);

  blk = lsu;

define (instr=SKIPLS_label_new)
{

  syntax = ( "skipls%f %f",a16_label_t6,n);
  alias = SKIPLS_label_new_family(OPCD(OPCD), imms(a16_label_t6), n(n));
}

   action =
   {
      var ActiveLoop = n;
      CofValid = CofValid::True;
      NoBtb = NoBtb::True;

      if ( LC(ActiveLoop).signedLT(1) )
      {
  Cof_instr = Cof_instr::Taken;
  NVPC = (PC_ST_VLES + (imms) -PC) ;
  clear_SR_LF(ActiveLoop.uint32());
  SR.SLF = 0;
      }
   };

}


define (instr=BREAK_RelAdd16_family)
{
  fields = (OPCD,n,imms);
   blk = pcu;
   define (instr=BREAKn_RelAdd16)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BREAKn_RelAdd16.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),n(0)),
 (bits(7),n(1)),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),RelAdd16(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),RelAdd16(1)),
 (bits(17),RelAdd16(2)),
 (bits(18),RelAdd16(3)),
 (bits(19),RelAdd16(4)),
 (bits(20),RelAdd16(5)),
 (bits(21),RelAdd16(6)),
 (bits(22),RelAdd16(7)),
 (bits(23),RelAdd16(8)),
 (bits(24),RelAdd16(9)),
 (bits(25),RelAdd16(10)),
 (bits(26),RelAdd16(11)),
 (bits(27),RelAdd16(12)),
 (bits(28),RelAdd16(13)),
 (bits(29),RelAdd16(14)),
 (bits(30),RelAdd16(15)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unconditionally exits loop n before the loop counter (LCn) equals one, and transfers execution to the specified address.""";
# 960 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = BREAK_RelAdd16_family(OPCD(OPCD),imms(RelAdd16), n(n));
      syntax = ( "break%f %f",n,RelAdd16);
   }

action=
{
      var ActiveLoop = n;
      CofValid = CofValid::True;
      Cof_instr = Cof_instr::Taken;
      NoBtb = NoBtb::True;
      NVPC = (PC_ST_VLES + (imms) -PC) ;

};

}



define (instr=CONT_Ra_RelAdd16_family)
{
  fields = (OPCD, n,R_Src1,imms);
   blk = pcu;
   define (instr=CONTn_Ra_RelAdd16)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CONTn_Ra_RelAdd16.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),n(0)),
 (bits(17),n(1)),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),RelAdd16_t1(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),RelAdd16_t1(1)),
 (bits(33),RelAdd16_t1(2)),
 (bits(34),RelAdd16_t1(3)),
 (bits(35),RelAdd16_t1(4)),
 (bits(36),RelAdd16_t1(5)),
 (bits(37),RelAdd16_t1(6)),
 (bits(38),RelAdd16_t1(7)),
 (bits(39),RelAdd16_t1(8)),
 (bits(40),RelAdd16_t1(9)),
 (bits(41),RelAdd16_t1(10)),
 (bits(42),RelAdd16_t1(11)),
 (bits(43),RelAdd16_t1(12)),
 (bits(44),RelAdd16_t1(13)),
 (bits(45),RelAdd16_t1(14)),
 (bits(46),RelAdd16_t1(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""If the loop counter (LCn) for loop n is greater than one, continues executing loop n from the start address of the loop specified in the Rn register, otherwise, branches to the specified address. In either case, decrements the LCn""";
# 985 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_loop_control.adl" 2
      alias = CONT_Ra_RelAdd16_family(OPCD(OPCD),R_Src1(Ra),imms(RelAdd16_t1), n(n));
      syntax = ( "cont%f %f,%f",n,Ra,RelAdd16_t1);
   }

action=
{
      var ActiveLoop = n;
      Cof_instr = Cof_instr::Taken;
      CofValid = CofValid::True;
      NoBtb = NoBtb::True;

      if ( ( (LC(ActiveLoop) & 0xFFFFFFFE)!=0 ) && ( LC(ActiveLoop)(31)==0 ) )
      {
  NVPC = R(R_Src1);
  LC(ActiveLoop)=LC(ActiveLoop)-1;
      }
      else
      {
  NVPC = (PC_ST_VLES + (imms) -PC) ;
  LC(ActiveLoop)=0;
      }

};

}
# 62 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 1

define (instr=ABS_2X_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=ABS_2X_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ABS_2X_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) absolute Two Data Register to Register Pair""";
attrs = (DARIT,V7);
# 9 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ABS_2X_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "abs.2x %f,%f",Dab,Dmn);
   }

action=
{
   bits<41> tmp;
   tmp = signExtend(D(Src1),41);
   if (tmp(39)==1) {
      tmp = ((bits<41>)0x0)-(tmp);

   }
   D(Res1) = tmp(39,0);

   tmp = signExtend(D(Src2),41);
   if (tmp(39)==1) {
      tmp = ((bits<41>)0x0)-(tmp);

   }
   D(Res2) = tmp(39,0);

};

}

define (instr=ABS_L_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=ABS_L_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ABS_L_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit Absolute  """;
attrs = (DARIT,V7);
# 41 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ABS_L_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "abs.l %f,%f",Da,Dn);
   }

action=
{
   D(Res) = signExtend(ABS32(D(Src1)(31,0)),40);
};

}

define (instr=ADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=ADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) add to first destination and sub to second destination with crossed operands""";
attrs = (DARIT,V7);
# 59 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "addsubx.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bits <41> sum1 = (bits<41>)D(Src3) - (bits<41>)D(Src2);
   bits <41> sum2 = (bits<41>)D(Src1) + (bits<41>)D(Src4);
   D(Res1) = sum1(39,0);
   D(Res2) = sum2(39,0);

};

}

define (instr=ADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=ADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) add to one destination and SIMD2(2x16) sub to second destination with crossed operands""";
attrs = (DARIT,V7);
# 81 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "addsubx.4w %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bits <17> sum_h = (bits<17>)D(Src4).H + (bits<17>)D(Src1).H;
   bits <17> sum_l = (bits<17>)D(Src4).L + (bits<17>)D(Src1).L;
   D(Res2) = concat(sum_h(15,0),sum_l(15,0));

   sum_h = (bits<17>)D(Src3).H - (bits<17>)D(Src2).H;
   sum_l = (bits<17>)D(Src3).L - (bits<17>)D(Src2).L;
   D(Res1) = concat(sum_h(15,0),sum_l(15,0));
};

}

define (instr=ADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=ADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) add to first destination and sub to second destination""";
attrs = (DARIT,V7);
# 105 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "addsub.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bits <41> sum1 = (bits<41>)D(Src4) - (bits<41>)D(Src2);
   bits <41> sum2 = (bits<41>)D(Src1) + (bits<41>)D(Src3);
   D(Res1) = sum1(39,0);
   D(Res2) = sum2(39,0);

};

}

define (instr=ADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=ADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) add to one destination and SIMD2(2x16) sub to second destination""";
attrs = (DARIT,V7);
# 127 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "addsub.4w %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bits <17> sum_h = (bits<17>)D(Src3).H + (bits<17>)D(Src1).H;
   bits <17> sum_l = (bits<17>)D(Src3).L + (bits<17>)D(Src1).L;
   D(Res2) = concat(sum_h(15,0),sum_l(15,0));

   sum_h = (bits<17>)D(Src4).H - (bits<17>)D(Src2).H;
   sum_l = (bits<17>)D(Src4).L - (bits<17>)D(Src2).L;
   D(Res1) = concat(sum_h(15,0),sum_l(15,0));
};

}

define (instr=ADD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=ADD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) add to two destinations""";
attrs = (DARIT,V7);
# 151 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ADD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "add.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
      bits <41> sum = (sbits<41>)D(Src1) + (sbits<41>)D(Src3);
      D(Res1) = sum(39,0);
      sum = (sbits<41>)D(Src2) + (sbits<41>)D(Src4);
      D(Res2) = sum(39,0);



};

}

define (instr=AND_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=AND_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/AND_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) bitwise AND to two destinations""";
attrs = (DBIT,V7);
# 175 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = AND_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "and.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   D(Res1) = D(Src1) & D(Src3);
   D(Res2) = D(Src2) & D(Src4);
};

}

define (instr=ASLL_L_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=ASLL_L_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLL_L_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit arithmetic Shift Left of 32-bit long (by register/immediate)""";
attrs = (DSHFT,V7);
# 194 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ASLL_L_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "asll.l %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bool shift_left = true;
   bool saturation = false;
   bits<7> shift_size = D(Src1)(6,0);
   D(Res) = concat(D(Res).E,multiple_bit_shift_long(Src2,shift_size,shift_left,saturation));
};

}

define (instr=ASLL_L__u5_Da_Dn_family)
{
  fields = (OPCD,Src1,immu,Res);
   blk = dalu;
   define (instr=ASLL_L__u5_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLL_L__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit arithmetic Shift Left of 32-bit long (by register/immediate)""";
attrs = (DSHFT,V7);
# 215 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ASLL_L__u5_Da_Dn_family(OPCD(OPCD),Src1(Da),immu(u5),Res(Dn));
      syntax = ( "asll.l #%f,%f,%f",u5,Da,Dn);
   }

action=
{
   bool shift_left = true;
   bool saturation = false;
   D(Res) = concat(D(Res).E,multiple_bit_shift_long(Src1,immu,shift_left,saturation));
};

}

define (instr=ASRR_L_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=ASRR_L_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRR_L_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit arithmetic shift right of 32-bit long (by register/immediate)""";
attrs = (DSHFT,V7);
# 235 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ASRR_L_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "asrr.l %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bool shift_left = false;
   bool saturation = false;
   bits<7> shift_size = D(Src1)(6,0);
   D(Res) = concat(D(Res).E,multiple_bit_shift_long(Src2,shift_size,shift_left,saturation));
};

}

define (instr=ASRR_L__u5_Da_Dn_family)
{
  fields = (OPCD,immu,Src1,Res);
   blk = dalu;
   define (instr=ASRR_L__u5_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRR_L__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit arithmetic shift right of 32-bit long (by register/immediate)""";
attrs = (DSHFT,V7);
# 256 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ASRR_L__u5_Da_Dn_family(OPCD(OPCD),immu(u5),Src1(Da),Res(Dn));
      syntax = ( "asrr.l #%f,%f,%f",u5,Da,Dn);
   }

action=
{
   bool shift_left = false;
   bool saturation = false;
   D(Res) = concat(D(Res).E,multiple_bit_shift_long(Src1,immu,shift_left,saturation));

};

}

define (instr=CLBF_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=CLBF_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CLBF_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Count Leading Bits - FIXED BUG AT 0 """;
attrs = (DBIT,V7);
# 277 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CLBF_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "clbf %f,%f",Da,Dn);
   }

action=
{
      bits<32> res=0;
      var src = D(Src1);
      if (src == 0) {
  res = 0;
      }
      else
      {
  if ( src(39) == 0 ) { res = -31;
  } else {
     res = 9-NumberOfOnes(src);
  }
      }
      D(Res) = signExtend(res, 40);

};

}

define (instr=CLR_2X_Dm_Dn_family)
{
  fields = (OPCD,Res1,Res2);
   blk = dalu;
   define (instr=CLR_2X_Dm_Dn)
   {

      alias = CLR_2X_Dm_Dn_family(OPCD(OPCD),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "clr.2x %f",Dmn);
   }

action=
{
};

}

define (instr=CMPEQ_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=CMPEQ_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQ_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 16-bit Compare Equal into a Data Register """;
attrs = (DCMP,V7);
# 325 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPEQ_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "cmpeq.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{

   bits<16> high_p = (D(Src1).H == D(Src2).H)?0xffff:0x0000;
   bits<16> low_p = (D(Src1).L == D(Src2).L)?0xffff:0x0000;
   D(Res)(31,0) = concat(high_p,low_p);
};

}

define (instr=CMPEQ_2W_Da_Db_Pm_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res,P_Res2);
   blk = dalu;
   define (instr=CMPEQ_2W_Da_Db_Pm_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQ_2W_Da_Db_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 16-bit Compare Equal into predication pair """;
attrs = (DCMP,V7);
# 346 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPEQ_2W_Da_Db_Pm_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpeq.2w %f,%f,%f",Da,Db,Pmn);
   }

action=
{
   if ( D(Src1).H == D(Src2).H) {
      set_SR_PR(P_Res);
   } else {
      clear_SR_PR(P_Res);
   }

   if ( D(Src1).L == D(Src2).L) {
      set_SR_PR(P_Res2);
   } else {
      clear_SR_PR(P_Res2);
   }


};

}

define (instr=CMPEQ_L__s32_Da_Pn_family)
{
  fields = (OPCD,imms,Src1,P_Res);
   blk = dalu;
   define (instr=CMPEQ_L__s32_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQ_L__s32_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Pn(0)),
 (bits(49),Pn(1)),
 (bits(50),Pn(2)),
 (bits(51),b1),
 (bits(52),b1),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),reserved));

type = FourWords;
attrs = (serial_four_word);
"""32-bit compare equal with register/immediate""";
attrs = (DCMP,V7);
# 376 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPEQ_L__s32_Da_Pn_family(OPCD(OPCD),imms(s32),Src1(Da),P_Res(Pn));
      syntax = ( "cmpeq.l #%f,%f,%f",s32,Da,Pn);
   }

action=
{
   if ( D(Src1)(31,0) == imms ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}

define (instr=CMPEQ_L__u5_Da_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = dalu;
   define (instr=CMPEQ_L__u5_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQ_L__u5_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit compare equal with register/immediate""";
attrs = (DCMP,V7);
# 399 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPEQ_L__u5_Da_Pn_family(OPCD(OPCD),immu(u5),Src1(Da),P_Res(Pn));
      syntax = ( "cmpeq.l #%f,%f,%f",u5,Da,Pn);
   }

action=
{
   if ( D(Src1)(31,0) == immu ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPGE_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=CMPGE_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGE_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 16-bit Compare Greater-Equal into a Data Register """;
attrs = (DCMP,V7);
# 423 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGE_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "cmpge.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<16> high_p = (D(Src1).H.signedGE(D(Src2).H))?0xffff:0x0000;
   bits<16> low_p = (D(Src1).L.signedGE(D(Src2).L))?0xffff:0x0000;
   D(Res)(31,0) = concat(high_p,low_p);

};

}

define (instr=CMPGE_2W_Da_Db_Pm_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res,P_Res2);
   blk = dalu;
   define (instr=CMPGE_2W_Da_Db_Pm_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGE_2W_Da_Db_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 16-bit Compare Greater-Equal into predication pair """;
attrs = (DCMP,V7);
# 444 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGE_2W_Da_Db_Pm_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpge.2w %f,%f,%f",Da,Db,Pmn);
   }

action=
{
   if ( D(Src1).H.signedGE(D(Src2).H)) {
      set_SR_PR(P_Res);
   } else {
      clear_SR_PR(P_Res);
   }

   if ( D(Src1).L.signedGE(D(Src2).L)) {
      set_SR_PR(P_Res2);
   } else {
      clear_SR_PR(P_Res2);
   }

};

}

define (instr=CMPGE_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPGE_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGE_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""compare greater or equal """;
attrs = (DCMP,V7);
# 473 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGE_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmpge %f,%f,%f",Da,Db,Pn);
   }

action=
{
   if (D(Src2).signedGE(D(Src1))) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPGE_L_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPGE_L_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGE_L_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit compare greater or equal with register""";
attrs = (DCMP,V7);
# 497 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGE_L_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmpge.l %f,%f,%f",Da,Db,Pn);
   }

action=
{
   bits<32> Da_long = D(Src1)(31,0);
   bits<32> Db_long = D(Src2)(31,0);
   if (Db_long.signedGE(Da_long)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPGT_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=CMPGT_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGT_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 16-bit Compare Greater-Than into a Data Register """;
attrs = (DCMP,V7);
# 523 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGT_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "cmpgt.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<16> high_p = (D(Src1).H.signedGT(D(Src2).H))?0xffff:0x0000;
   bits<16> low_p = (D(Src1).L.signedGT(D(Src2).L))?0xffff:0x0000;
   D(Res)(31,0) = concat(high_p,low_p);
};

}

define (instr=CMPGT_2W_Da_Db_Pm_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res,P_Res2);
   blk = dalu;
   define (instr=CMPGT_2W_Da_Db_Pm_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGT_2W_Da_Db_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 16-bit Compare Greater-Than into predication pair """;
attrs = (DCMP,V7);
# 543 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGT_2W_Da_Db_Pm_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpgt.2w %f,%f,%f",Da,Db,Pmn);
   }

action=
{
   if ( D(Src1).H.signedGT(D(Src2).H)) {
      set_SR_PR(P_Res);
   } else {
      clear_SR_PR(P_Res);
   }

   if ( D(Src1).L.signedGT(D(Src2).L)) {
      set_SR_PR(P_Res2);
   } else {
      clear_SR_PR(P_Res2);
   }

};

}

define (instr=CMPGT_L_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPGT_L_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGT_L_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit compare greater than with register/immediate""";
attrs = (DCMP,V7);
# 572 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGT_L_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmpgt.l %f,%f,%f",Da,Db,Pn);
   }

action=
{
   bits<32> Da_long = D(Src1)(31,0);
   bits<32> Db_long = D(Src2)(31,0);
   if (Db_long.signedGT(Da_long)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPGT_L__s32_Da_Pn_family)
{
  fields = (OPCD,imms,Src1,P_Res);
   blk = dalu;
   define (instr=CMPGT_L__s32_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGT_L__s32_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Pn(0)),
 (bits(49),Pn(1)),
 (bits(50),Pn(2)),
 (bits(51),b1),
 (bits(52),b1),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),reserved));

type = FourWords;
attrs = (serial_four_word);
"""32-bit compare greater than with register/immediate""";
attrs = (DCMP,V7);
# 598 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGT_L__s32_Da_Pn_family(OPCD(OPCD),imms(s32),Src1(Da),P_Res(Pn));
      syntax = ( "cmpgt.l #%f,%f,%f",s32,Da,Pn);
   }

action=
{
   bits<32> Da_long = D(Src1)(31,0);
   if (Da_long.signedGT(imms)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPGT_L__u5_Da_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = dalu;
   define (instr=CMPGT_L__u5_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGT_L__u5_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit compare greater than with register/immediate""";
attrs = (DCMP,V7);
# 623 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPGT_L__u5_Da_Pn_family(OPCD(OPCD),immu(u5),Src1(Da),P_Res(Pn));
      syntax = ( "cmpgt.l #%f,%f,%f",u5,Da,Pn);
   }

action=
{
   bits<40> Da_long = zeroExtend(D(Src1)(31,0),40);
   bits<40> imm = zeroExtend(immu,40);
   if (Da_long.signedGT(imm)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPLE_L__s32_Da_Pn_family)
{
  fields = (OPCD,imms,Src1,P_Res);
   blk = dalu;
   define (instr=CMPLE_L__s32_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLE_L__s32_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Pn(0)),
 (bits(49),Pn(1)),
 (bits(50),Pn(2)),
 (bits(51),b1),
 (bits(52),b1),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),reserved));

type = FourWords;
attrs = (serial_four_word);
"""32-bit compare less or equal with register/immediate""";
attrs = (DCMP,V7);
# 649 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPLE_L__s32_Da_Pn_family(OPCD(OPCD),imms(s32),Src1(Da),P_Res(Pn));
      syntax = ( "cmple.l #%f,%f,%f",s32,Da,Pn);
   }

action=
{
   bits<32> Da_long = D(Src1)(31,0);
   if (Da_long.signedLE(imms)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}

define (instr=CMPLE_L__u5_Da_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = dalu;
   define (instr=CMPLE_L__u5_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLE_L__u5_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit compare less or equal with register/immediate""";
attrs = (DCMP,V7);
# 673 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPLE_L__u5_Da_Pn_family(OPCD(OPCD),immu(u5),Src1(Da),P_Res(Pn));
      syntax = ( "cmple.l #%f,%f,%f",u5,Da,Pn);
   }

action=
{
   bits<40> Da_long = zeroExtend(D(Src1)(31,0),40);
   bits<40> imm = zeroExtend(immu,40);
   if (Da_long.signedLE(imm)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPLE__s32_Da_Pn_family)
{
  fields = (OPCD,imms,Src1,P_Res);
   blk = dalu;
   define (instr=CMPLE__s32_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLE__s32_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Pn(0)),
 (bits(49),Pn(1)),
 (bits(50),Pn(2)),
 (bits(51),b1),
 (bits(52),b1),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),reserved));

type = FourWords;
attrs = (serial_four_word);
"""compare less or equal """;
attrs = (DCMP,V7);
# 699 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPLE__s32_Da_Pn_family(OPCD(OPCD),imms(s32),Src1(Da),P_Res(Pn));
      syntax = ( "cmple #%f,%f,%f",s32,Da,Pn);
   }

action=
{
   bits<40> imm = signExtend(imms,40);
   if (D(Src1).signedLE(imm)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPLE__u5_Da_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = dalu;
   define (instr=CMPLE__u5_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLE__u5_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""compare less or equal """;
attrs = (DCMP,V7);
# 724 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPLE__u5_Da_Pn_family(OPCD(OPCD),immu(u5),Src1(Da),P_Res(Pn));
      syntax = ( "cmple #%f,%f,%f",u5,Da,Pn);
   }

action=
{
   bits<41> imm = zeroExtend(immu,41);
   bits<41> Da_long = zeroExtend(D(Src1),41);
   if (Da_long.signedLE(imm)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPNE_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=CMPNE_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNE_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 16-bit Compare Not-Equal into a Data Register """;
attrs = (DCMP,V7);
# 750 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPNE_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "cmpne.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<16> high_p = (D(Src1).H != D(Src2).H)?0xffff:0x0000;
   bits<16> low_p = (D(Src1).L != D(Src2).L)?0xffff:0x0000;
   D(Res)(31,0) = concat(high_p,low_p);

};

}

define (instr=CMPNE_2W_Da_Db_Pm_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res,P_Res2);
   blk = dalu;
   define (instr=CMPNE_2W_Da_Db_Pm_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNE_2W_Da_Db_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 16-bit Compare Not-Equal into predication pair """;
attrs = (DCMP,V7);
# 771 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPNE_2W_Da_Db_Pm_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpne.2w %f,%f,%f",Da,Db,Pmn);
   }

action=
{
   if ( D(Src1).H != D(Src2).H) {
      set_SR_PR(P_Res);
   } else {
      clear_SR_PR(P_Res);
   }

   if ( D(Src1).L != D(Src2).L) {
      set_SR_PR(P_Res2);
   } else {
      clear_SR_PR(P_Res2);
   }

};

}

define (instr=CMPNE_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPNE_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNE_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare data register with register/immediate""";
attrs = (DCMP,V7);
# 800 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPNE_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmpne %f,%f,%f",Da,Db,Pn);
   }

action=
{
   if (D(Src2)!=D(Src1)) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}

define (instr=CMPNE_L_Da_Db_Pn_family)
{
  fields = (OPCD,Src1,Src2,P_Res);
   blk = dalu;
   define (instr=CMPNE_L_Da_Db_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNE_L_Da_Db_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit compare not equal with register/immediate""";
attrs = (DCMP,V7);
# 823 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPNE_L_Da_Db_Pn_family(OPCD(OPCD),Src1(Da),Src2(Db),P_Res(Pn));
      syntax = ( "cmpne.l %f,%f,%f",Da,Db,Pn);
   }

action=
{
   if ( D(Src1)(31,0) != D(Src2)(31,0) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }
};

}

define (instr=CMPNE_L__s32_Da_Pn_family)
{
  fields = (OPCD,imms,Src1,P_Res);
   blk = dalu;
   define (instr=CMPNE_L__s32_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNE_L__s32_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Pn(0)),
 (bits(49),Pn(1)),
 (bits(50),Pn(2)),
 (bits(51),b1),
 (bits(52),b1),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),reserved));

type = FourWords;
attrs = (serial_four_word);
"""32-bit compare not equal with register/immediate""";
attrs = (DCMP,V7);
# 846 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPNE_L__s32_Da_Pn_family(OPCD(OPCD),imms(s32),Src1(Da),P_Res(Pn));
      syntax = ( "cmpne.l #%f,%f,%f",s32,Da,Pn);
   }

action=
{
   if ( D(Src1)(31,0) != imms ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPNE_L__u5_Da_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = dalu;
   define (instr=CMPNE_L__u5_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNE_L__u5_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit compare not equal with register/immediate""";
attrs = (DCMP,V7);
# 870 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPNE_L__u5_Da_Pn_family(OPCD(OPCD),immu(u5),Src1(Da),P_Res(Pn));
      syntax = ( "cmpne.l #%f,%f,%f",u5,Da,Pn);
   }

action=
{
   if ( D(Src1)(31,0) != immu ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPNE__s32_Da_Pn_family)
{
  fields = (OPCD,imms,Src1,P_Res);
   blk = dalu;
   define (instr=CMPNE__s32_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNE__s32_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),s32(0)),
 (bits(20),s32(1)),
 (bits(21),s32(2)),
 (bits(22),s32(3)),
 (bits(23),s32(4)),
 (bits(24),s32(5)),
 (bits(25),s32(6)),
 (bits(26),s32(7)),
 (bits(27),s32(8)),
 (bits(28),s32(9)),
 (bits(29),s32(10)),
 (bits(30),s32(11)),
 (bits(31),b0),
 (bits(32),s32(12)),
 (bits(33),s32(13)),
 (bits(34),s32(14)),
 (bits(35),s32(15)),
 (bits(36),s32(16)),
 (bits(37),s32(17)),
 (bits(38),s32(18)),
 (bits(39),s32(19)),
 (bits(40),s32(20)),
 (bits(41),s32(21)),
 (bits(42),s32(22)),
 (bits(43),s32(23)),
 (bits(44),s32(24)),
 (bits(45),s32(25)),
 (bits(46),s32(26)),
 (bits(47),b0),
 (bits(48),Pn(0)),
 (bits(49),Pn(1)),
 (bits(50),Pn(2)),
 (bits(51),b1),
 (bits(52),b1),
 (bits(53),s32(27)),
 (bits(54),s32(28)),
 (bits(55),s32(29)),
 (bits(56),s32(30)),
 (bits(57),s32(31)),
 (bits(58),Da(0)),
 (bits(59),Da(1)),
 (bits(60),Da(2)),
 (bits(61),Da(3)),
 (bits(62),Da(4)),
 (bits(63),b0),
 (bits(64),PR(2)),
 (bits(65),Da(5)),
 (bits(66),reserved),
 (bits(67),reserved));

type = FourWords;
attrs = (serial_four_word);
"""Compare data register with register/immediate""";
attrs = (DCMP,V7);
# 894 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPNE__s32_Da_Pn_family(OPCD(OPCD),imms(s32),Src1(Da),P_Res(Pn));
      syntax = ( "cmpne #%f,%f,%f",s32,Da,Pn);
   }

action=
{
   if ( D(Src1) != signExtend(imms,40) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=CMPNE__u5_Da_Pn_family)
{
  fields = (OPCD,immu,Src1,P_Res);
   blk = dalu;
   define (instr=CMPNE__u5_Da_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNE__u5_Da_Pn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare data register with register/immediate""";
attrs = (DCMP,V7);
# 918 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = CMPNE__u5_Da_Pn_family(OPCD(OPCD),immu(u5),Src1(Da),P_Res(Pn));
      syntax = ( "cmpne #%f,%f,%f",u5,Da,Pn);
   }

action=
{
   if ( D(Src1) != zeroExtend(immu,40) ) {
      set_SR_PR(P_Res);
   }
   else {
      clear_SR_PR(P_Res);
   }

};

}

define (instr=EOR_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=EOR_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EOR_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) bitwise exclusive OR to two destinations""";
attrs = (DBIT,V7);
# 942 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = EOR_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "eor.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   D(Res1) = ( D(Src1) ^ D(Src3) );
   D(Res2) = ( D(Src2) ^ D(Src4) );

};

}

define (instr=IMAC32H_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,Res);
   blk = dalu;
   define (instr=IMAC32H_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMAC32H_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32x32 bit integer Multiply into a single register, accumulating hi 32-bit of the 64-bit result into 40bit register """;
attrs = (DMPY,V7);
# 962 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMAC32H_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dn),Res(Dn));
      syntax = ( "imac32h %f,%f,%f",Da,Db,Dn);
   }

action=
{
      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      bits<41> mult = signExtend(mult32_32(64,32),41);
      bits<41> tmp = (sbits<41>)D(SrcAcc1) + (sbits<41>)mult;
      D(Res) = tmp(39,0);
};

}

define (instr=IMACCXCR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,Res);
   blk = dalu;
   define (instr=IMACCXCR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACCXCR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply accumulate complex by conjugate with round and saturate into packed form (integer) """;
attrs = (DMPY,V7);
# 983 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACCXCR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dn),Res(Dn));
      syntax = ( "imaccxcr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1+mult2);
   mult1 = round16(mult1,1);
   mult1 = mult1 + ((D(SrcAcc1)>>16)<<16);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2-mult1);
   mult1 = round16(mult1,1);
   mult1 = mult1 + (D(SrcAcc1)<<16);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}

define (instr=IMACCXC_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=IMACCXC_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACCXC_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply accumulate complex by conjugate (integer) """;
attrs = (DMPY,V7);
# 1016 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACCXC_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imaccxc %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) );
   sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(15,0),41) );
   sbits<41> tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc2);
   D(Res2) = tmp(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   tmp = (mult2 - mult1) + (sbits<41>)D(SrcAcc1);
   D(Res1) = tmp(39,0);

};

}

define (instr=IMACCXR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,Res);
   blk = dalu;
   define (instr=IMACCXR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACCXR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply accumulate complex by complex with round and saturate into packed form (integer) """;
attrs = (DMPY,V7);
# 1045 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACCXR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dn),Res(Dn));
      syntax = ( "imaccxr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2);
   mult1 = round16(mult1,1);
   mult1 = mult1 + ((D(SrcAcc1)>>16)<<16);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2+mult1);
   mult1 = round16(mult1,1);
   mult1 = mult1 + (D(SrcAcc1)<<16);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}

define (instr=IMACCX_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=IMACCX_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACCX_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply accumulate complex by complex (integer) """;
attrs = (DMPY,V7);
# 1078 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACCX_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imaccx %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) );
   sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(15,0),41) );
   sbits<41> tmp = (mult1 - mult2) + (sbits<41>)D(SrcAcc2);
   D(Res2) = tmp(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc1);
   D(Res1) = tmp(39,0);

};

}


define (instr=IMACD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=IMACD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot Product Signed Integer Multiply and Accumulate""";
attrs = (DMPY,V7);
# 1108 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imacd.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{

    sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).L,41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).H,41) );
    sbits<41> tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc1);
    D(Res1) = tmp(39,0);

    mult1 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).L,41) );
    mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src4).H,41) );
    tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc2);
    D(Res2) = tmp(39,0);

};

}


define (instr=ISMACD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;


   define (instr=ISMACD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMACD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot Product Signed Integer Multiply and Accumulate - Saturating regardless of SM bit""";
attrs = (DMPY,V7);
# 1140 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMACD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismacd.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{

    sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).L,41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).H,41) );
    sbits<41> tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc1);
    overflow40(tmp);
    saturation32_nochk (tmp,Res1);

    mult1 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).L,41) );
    mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src4).H,41) );
    tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc2);
    overflow40(tmp);
    saturation32_nochk (tmp,Res2);

};

}


define (instr=IMACIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=IMACIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Complex Integer Multiply and Accumulate - Imaginary Portion""";
attrs = (DMPY,V7);
# 1172 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imacim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }



action=
{
      sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).H,41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).L,41) );
      sbits<41> tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc1);
      D(Res1) = tmp(39,0);

      mult1 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).H,41) );
      mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src4).L,41) );
      tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc2);
      D(Res2) = tmp(39,0);

};

}




define (instr=ISMACIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;

   define (instr=ISMACIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMACIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Complex Integer Multiply and Accumulate - Imaginary Portion - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 1205 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMACIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismacim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
      sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).H,41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).L,41) );
      sbits<41> tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res1);

      mult1 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).H,41) );
      mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src4).L,41) );
      tmp = (mult1 + mult2) + (sbits<41>)D(SrcAcc2);
      overflow40(tmp);
      saturation32 (tmp,Res2);

};

}

define (instr=IMACM_2X_Da_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=IMACM_2X_Da_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACM_2X_Da_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Mixed Precision 16x32 Multiply-accumulate to registers pair(integer) """;
attrs = (DMPY,V7);
# 1235 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACM_2X_Da_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Dcd.Dc),Src3(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imacm.2x %f,%f,%f",Da,Dcd,Dmn);
   }

action=
{
   bits<64> mult = signedMultiply( signExtend( D(Src1).L,64),signExtend( D(Src2)(31,0),64) );
   mult = (sbits<64>)D(SrcAcc2) + (mult>>16);
   D(Res2) = mult(39,0);

   mult = signedMultiply( signExtend( D(Src1).H,64),signExtend( D(Src3)(31,0),64) );
   mult = (sbits<64>)D(SrcAcc1) + (mult>>16);
   D(Res1) = mult(39,0);
};

}

define (instr=IMACQ_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res);
   blk = dalu;
   define (instr=IMACQ_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACQ_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Quad multiply and accumulation to 1 register(integer) """;
attrs = (DMPY,V7);
# 1259 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACQ_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res(Dn));
      syntax = ( "imacq %f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
   bits<41> mult1 = signedMultiply( signExtend(D(Src1).H,41), signExtend(D(Src3).H,41) );
      bits<41> mult2 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).L,41) );
      bits<41> mult3 = signedMultiply( signExtend(D(Src2).H,41), signExtend(D(Src4).H,41) );
      bits<41> mult4 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).L,41) );
      bits<41> tmp = (sbits<41>)D(Res)+((sbits<41>)mult1+(sbits<41>)mult2+(sbits<41>)mult3+(sbits<41>)mult4);
      D(Res) = tmp(39,0);



};

}

define (instr=IMACRE_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=IMACRE_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACRE_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Complex Integer Multiply and Accumulate - Real Portion""";
attrs = (DMPY,V7);
# 1285 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACRE_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imacre.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
      sbits<41> mult1 = signedMultiply((signExtend(D(Src1).H,41)), (signExtend(D(Src3).H,41))) ;
      sbits<41> mult2 = signedMultiply((signExtend(D(Src1).L,41)), (signExtend(D(Src3).L,41))) ;
      sbits<41> tmp = (mult1 - mult2) + (sbits<41>)D(SrcAcc1);
      D(Res1) = tmp(39,0);

      mult1 = signedMultiply((signExtend(D(Src2).H,41)), (signExtend(D(Src4).H,41))) ;
      mult2 = signedMultiply((signExtend(D(Src2).L,41)), (signExtend(D(Src4).L,41))) ;
      tmp = (mult1 - mult2) + (sbits<41>)D(SrcAcc2);
      D(Res2) = tmp(39,0);

};

}


define (instr=ISMACRE_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;


   define (instr=ISMACRE_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMACRE_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Complex Integer Multiply and Accumulate - Real Portion - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 1316 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMACRE_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismacre.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
      sbits<41> mult1 = signedMultiply((signExtend(D(Src1).H,41)), (signExtend(D(Src3).H,41))) ;
      sbits<41> mult2 = signedMultiply((signExtend(D(Src1).L,41)), (signExtend(D(Src3).L,41))) ;
      sbits<41> tmp = (mult1 - mult2) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res1);

      mult1 = signedMultiply((signExtend(D(Src2).H,41)), (signExtend(D(Src4).H,41))) ;
      mult2 = signedMultiply((signExtend(D(Src2).L,41)), (signExtend(D(Src4).L,41))) ;
      tmp = (mult1 - mult2) + (sbits<41>)D(SrcAcc2);
      overflow40(tmp);
      saturation32 (tmp,Res2);

};

}


define (instr=IMPY32H_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=IMPY32H_Da_Db_Dn)
   {

      alias = IMPY32H_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "impy32h %f,%f,%f",Da,Db,Dn);
   }

action=
{
     bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
     D(Res) = signExtend(mult32_32(64,32),40);

};

}

define (instr=IMPY32L_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=IMPY32L_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPY32L_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32x32 bit integer Multiply into a single register, keeping lower 32-bit of the 64-bit result """;
attrs = (DMPY,V7);
# 1367 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPY32L_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "impy32l %f,%f,%f",Da,Db,Dn);
   }

action=
{
      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      D(Res) = zeroExtend(mult32_32(31,0),40);

};

}

define (instr=IMPY32SU_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=IMPY32SU_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPY32SU_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32x32 bit integer Multiply into a 64-bit result in 2 registers (signed*unsigned) """;
attrs = (DMPY,V7);
# 1387 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPY32SU_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impy32su %f,%f,%f",Da,Db,Dmn);
   }

action=
{
    bits<80> mult32_32 = signedMultiply( (signExtend(D(Src1)(31,0),40)),(zeroExtend(D(Src2)(31,0),40)) );
    D(Res1) = zeroExtend(mult32_32(31,0),40);
    D(Res2) = signExtend(mult32_32(63,32),40);

};

}

define (instr=IMPY32UU_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=IMPY32UU_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPY32UU_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32x32 bit integer Multiply into a 64-bit result in 2 registers  (unsigned*unsigned) """;
attrs = (DMPY,V7);
# 1408 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPY32UU_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impy32uu %f,%f,%f",Da,Db,Dmn);
   }

action=
{
    bits<80> mult32_32 = (zeroExtend(D(Src1)(31,0),40))*(zeroExtend(D(Src2)(31,0),40));
    D(Res1) = zeroExtend(mult32_32(31,0),40);
    D(Res2) = signExtend(mult32_32(63,32),40);
};

}

define (instr=IMPY32_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=IMPY32_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPY32_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32x32 bit integer Multiply into  a 64-bit result in 2 registers """;
attrs = (DMPY,V7);
# 1428 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPY32_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impy32 %f,%f,%f",Da,Db,Dmn);
   }

action=
{
      bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
      D(Res2) = signExtend(mult32_32(64,32),40);
      D(Res1) = zeroExtend(mult32_32(31,0),40);
};

}

define (instr=IMPYCXCR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=IMPYCXCR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYCXCR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by conjugate with round and saturate into packed form (integer) """;
attrs = (DMPY,V7);
# 1448 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYCXCR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "impycxcr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1+mult2);
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2-mult1);
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}

define (instr=IMPYCXC_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=IMPYCXC_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYCXC_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by conjugate to Register Pair(integer) """;
attrs = (DMPY,V7);
# 1479 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYCXC_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impycxc %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1+mult2);
   D(Res2) = mult1(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2-mult1);
   D(Res1) = mult1(39,0);

};

}

define (instr=IMPYCXR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=IMPYCXR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYCXR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex with round and saturate into packed form (integer) """;
attrs = (DMPY,V7);
# 1508 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYCXR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "impycxr %f,%f,%f",Da,Db,Dn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2);
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);



   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult1+mult2);
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);
};

}

define (instr=IMPYCX_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=IMPYCX_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYCX_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex to Register Pair(integer) """;
attrs = (DMPY,V7);
# 1541 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYCX_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impycx %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2);
   D(Res2) = mult1(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult1+mult2);
   D(Res1) = mult1(39,0);


};

}



define (instr=IMPYD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=IMPYD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) two dot product of two multiplications(integer)""";
attrs = (DMPY,V7);
# 1573 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impyd.2x %f,%f,%f",Dab,Dcd,Dmn);
   }




action=
{
   bits<40> res;
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
  mult1 = (mult1+mult2);
  res = mult1(39,0);
  D(Res1) = res;

  mult1 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
  mult2 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41)));
  mult1 = (mult1+mult2);
  res = mult1(39,0);
  D(Res2) = res;

};

}


define (instr=ISMPYD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=ISMPYD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMPYD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) two dot product of two multiplications with saturation(integer)""";
attrs = (DMPY,V7);
# 1608 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMPYD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismpyd.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
   bits<40> res;
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
  mult1 = (mult1+mult2);
  set_OVF(mult1);
  res = ll_saturate_mpy(mult1,0);
  D(Res1) = res;

  mult1 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
  mult2 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41)));
  mult1 = (mult1+mult2);
  set_OVF(mult1);
  res = ll_saturate_mpy(mult1,0);
  D(Res2) = res;

};

}


define (instr=IMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=IMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Imaginary Portion(integer)""";
attrs = (DMPY,V7);
# 1642 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impyim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41)));
  mult1 = (mult1+mult2);
  D(Res1) = mult1(39,0);

  mult1 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41)));
  mult2 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41)));
  mult1 = (mult1+mult2);
  D(Res2) = mult1(39,0);

};

}



define (instr=ISMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;


   define (instr=ISMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Imaginary Portion with saturation(integer)""";
attrs = (DMPY,V7);
# 1674 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismpyim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41)));
  mult1 = (mult1+mult2);
  saturation32(mult1,Res1);

  mult1 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41)));
  mult2 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41)));
  mult1 = (mult1+mult2);
  saturation32(mult1,Res2);

};

}

define (instr=IMPYM_2X_Da_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=IMPYM_2X_Da_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYM_2X_Da_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Mixed Precision 16x32 Multiply (integer) """;
attrs = (DMPY,V7);
# 1702 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYM_2X_Da_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Dcd.Dc),Src3(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impym.2x %f,%f,%f",Da,Dcd,Dmn);
   }

action=
{
   bits<64> mult = signedMultiply( signExtend( D(Src1).L,64),signExtend( D(Src2)(31,0),64) );
   D(Res2) = mult(55,16);

   mult = signedMultiply( signExtend( D(Src1).H,64),signExtend( D(Src3)(31,0),64) );
   D(Res1) = mult(55,16);

};

}

define (instr=IMPYQ_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res);
   blk = dalu;
   define (instr=IMPYQ_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYQ_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Quad Multiply to 1 register(integer)""";
attrs = (DMPY,V7);
# 1725 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYQ_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res(Dn));
      syntax = ( "impyq %f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
   sbits<41> mult3 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41) ));
   sbits<41> mult4 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
   mult1 = (mult1+mult2+mult3+mult4);
   D(Res) = mult1(39,0);
};

}

define (instr=IMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=IMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Real Portion(integer)""";
attrs = (DMPY,V7);
# 1748 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impyre.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
   bits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
    bits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
    mult1 = (mult1-mult2);
    D(Res1) = mult1(39,0);

    mult1 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41)));
    mult2 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
    mult1 = (mult1-mult2);
    D(Res2) = mult1(39,0);

};

}


define (instr=ISMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=ISMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Real Portion with saturation(integer)""";
attrs = (DMPY,V7);
# 1778 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismpyre.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
   bits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
    bits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
    mult1 = (mult1-mult2);
    saturation32(mult1,Res1);

    mult1 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41)));
    mult2 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
    mult1 = (mult1-mult2);
    saturation32(mult1,Res2);

};

}


define (instr=IMPY_2X_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=IMPY_2X_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPY_2X_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) integer multiply to registers pair """;
attrs = (DMPY,V7);
# 1807 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPY_2X_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impy.2x %f,%f,%f",Da,Db,Dmn);
   }

action=
{
   D(Res1) = signedMultiply( signExtend( D(Src1).L,40) ,signExtend( D(Src2).L,40) );
   D(Res2) = signedMultiply( signExtend( D(Src1).H,40) ,signExtend( D(Src2).H,40) );
};

}


define (instr=ISMPYCXC_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=ISMPYCXC_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMPYCXC_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by conjugate and saturate to Register Pair(integer) """;
attrs = (DMPY,V7);
# 1827 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMPYCXC_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismpycxc %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1+mult2);
   saturation32_nochk (mult1,Res2);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2-mult1);
   saturation32_nochk (mult1,Res1);

};

}

define (instr=ISMPYCX_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=ISMPYCX_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMPYCX_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex and saturate to Register Pair(integer) """;
attrs = (DMPY,V7);
# 1856 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMPYCX_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismpycx %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2);
   saturation32_nochk (mult1,Res2);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult1+mult2);
   saturation32_nochk (mult1,Res1);

};

}




define (instr=LSLL_L_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=LSLL_L_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSLL_L_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit logic shift left """;
attrs = (DSHFT,V7);
# 1888 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = LSLL_L_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "lsll.l %f,%f,%f",Da,Db,Dn);
   }

action=
{
  sbits<7> shift = D(Src1)(6,0);
  bits<8> abs_shift;
  bool limit ;
  bool limit40 ;
  abs_shift = (shift > 0) ? shift : -shift;
  limit = (abs_shift > 32) ? true : false ;
  limit40 = (abs_shift > 39) ? true : false ;
  abs_shift = (abs_shift > 32) ? 32 : abs_shift ;

  if ( D(Src1)(6)==0 )
  {
     bits<32> tmp = ( D(Src2)(31,0) ) << abs_shift;
     D(Res) = zeroExtend( tmp, 40 );
     SR.C = (limit40) ? D(Src2)(0) : (abs_shift==0 || (limit==true) ) ? 0 : D(Src2)(32-abs_shift);
  }
  else
  {
     bits<32> tmp = ( D(Src2)(31,0) ) >> abs_shift;
     D(Res) = zeroExtend( tmp, 40 );
     SR.C =(abs_shift==0 || (limit==true) ) ? 0: D(Src2)(abs_shift-1);
  }

};

}

define (instr=MAC32H_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res);
   blk = dalu;
   define (instr=MAC32H_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAC32H_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32x32 bit Multiply into a single register, accumulating hi 32-bit of the 64-bit result into 40bit register """;
attrs = (DMPY,V7);
# 1927 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MAC32H_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn));
      syntax = ( "mac32h %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
   bits<41> mult = signExtend(mult32_32(64,32),41)<<1;
   bits<41> tmp = (sbits<41>)D(Src3) + (sbits<41>)mult;
   overflow40(tmp);
   saturation32(tmp,Res);

};

}

define (instr=MACCXCR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res);
   blk = dalu;
   define (instr=MACCXCR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACCXCR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply accumulate complex by conjugate with round and saturate into packed form """;
attrs = (DMPY,V7);
# 1950 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACCXCR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn));
      syntax = ( "maccxcr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1+mult2) << 1;
   mult1 = round16(mult1,1);
   mult1 = mult1 + ((D(Src3)>>16)<<16);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2-mult1) << 1;
   mult1 = round16(mult1,1);
   mult1 = mult1 + (D(Src3)<<16);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}

define (instr=MACCXC_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACCXC_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACCXC_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply accumulate complex by conjugate """;
attrs = (DMPY,V7);
# 1983 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACCXC_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "maccxc %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) );
   sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(15,0),41) );
   sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc2);
   D(Res2) = tmp(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   tmp = ((mult2 - mult1) << 1 ) + (sbits<41>)D(SrcAcc1);
   D(Res1) = tmp(39,0);



};

}

define (instr=MACCXJR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res);
   blk = dalu;
   define (instr=MACCXJR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACCXJR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex by J and Accumulate with rounding and saturate into packed form """;
attrs = (DMPY,V7);
# 2014 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACCXJR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn));
      syntax = ( "maccxjr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) );
   sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(15,0),41) );
   mult1 = ((mult1 - mult2) << 1 );
   mult1 = round16(mult1,1);
   mult1 = mult1 + (D(Src3)<<16);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = ((mult1 + mult2) << 1 );
   mult1 = round16(mult1,1);
   mult1 = ((D(Src3)>>16)<<16) - mult1;
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);


};

}

define (instr=MACCXJ_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACCXJ_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACCXJ_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex by J and Accumulate  """;
attrs = (DMPY,V7);
# 2048 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACCXJ_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "maccxj %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = signedMultiply( signExtend(D(Src1)(31,16),41), signExtend(D(Src2)(31,16),41) );
   sbits<41> mult2 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(15,0),41) );
   sbits<41> tmp = ((mult1 - mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
   D(Res1) = tmp(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   tmp = (sbits<41>)D(SrcAcc2) - ((mult1 + mult2) << 1 );
   D(Res2) = tmp(39,0);



};

}

define (instr=MACCXR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res);
   blk = dalu;
   define (instr=MACCXR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACCXR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply accumulate complex by complex with round and saturate into packed form """;
attrs = (DMPY,V7);
# 2079 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACCXR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn));
      syntax = ( "maccxr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2) << 1;
   mult1 = round16(mult1,1);
   mult1 = mult1 + ((D(Src3)>>16)<<16);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2+mult1) << 1;
   mult1 = round16(mult1,1);
   mult1 = mult1 + (D(Src3)<<16);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}

define (instr=MACCX_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,SrcAcc2,Res1,Res2,Subtraction);
   blk = dalu;
   define (instr=MACCX_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACCX_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply accumulate complex by complex""";
attrs = (DMPY,V7);
# 2112 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACCX_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn),Subtraction(0));
      syntax = ( "maccx %f,%f,%f",Da,Db,Dmn);
   }

   define (instr=MACCX_mDa_Db_Dm_Dn)
   {

      alias = MACCX_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn),Subtraction(1));
      syntax = ( "maccx -%f,%f,%f",Da,Db,Dmn);
   }


action=
{

   sbits<41> mult1 = signedMultiply( signExtend(D(Src1).H,41), signExtend(D(Src2).H,41) );
   sbits<41> mult2 = signedMultiply( signExtend(D(Src1).L,41),signExtend(D(Src2).L,41) );
   sbits<41> tmp;
   if (Subtraction==1) {
      tmp = (sbits<41>)D(SrcAcc2) - ((mult1 - mult2) << 1 );
   }

   D(Res2) = tmp(39,0);


   mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src2).H,41) );
   mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src2).L,41) );
   tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
   D(Res1) = tmp(39,0);



};

}


define (instr=MACD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot Product Signed Fractional Multiply and Accumulate""";
attrs = (DMPY,V7);
# 2156 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "macd.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
    sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).L,41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).H,41) );
    sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
    D(Res1) = tmp(39,0);

    mult1 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).L,41) );
    mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src4).H,41) );
    tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc2);
    D(Res2) = tmp(39,0);

};

}



define (instr=SMACD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;

   define (instr=SMACD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMACD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot Product Signed Fractional Multiply and Accumulate - Saturating regardless of SM bit""";
attrs = (DMPY,V7);
# 2187 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMACD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smacd.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
    sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).L,41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).H,41) );
    sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
    overflow40(tmp);
    saturation32_nochk (tmp,Res1);

    mult1 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).L,41) );
    mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src4).H,41) );
    tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc2);
    overflow40(tmp);
    saturation32_nochk (tmp,Res2);

};

}


define (instr=MACIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Complex Fractional Multiply and Accumulate - Imaginary Portion""";
attrs = (DMPY,V7);
# 2218 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "macim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
      sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).H,41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).L,41) );
      sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      D(Res1) = tmp(39,0);

      mult1 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).H,41) );
      mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src4).L,41) );
      tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc2);
      D(Res2) = tmp(39,0);

};

}



define (instr=SMACIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;

   define (instr=SMACIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMACIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Complex Fractional Multiply and Accumulate - Imaginary Portion - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 2249 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMACIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smacim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
      sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).H,41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).L,41) );
      sbits<41> tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res1);

      mult1 = signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).H,41) );
      mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src4).L,41) );
      tmp = ((mult1 + mult2) << 1 ) + (sbits<41>)D(SrcAcc2);
      overflow40(tmp);
      saturation32 (tmp,Res2);

};

}

define (instr=MACIM_mDa_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res);
   blk = dalu;
   define (instr=MACIM_mDa_Db_Dn)
   {

      alias = MACIM_mDa_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn));
      syntax = ( "macim -%f,%f,%f",Da,Db,Dn);
   }

action=
{
      sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src2).H,41) );
      sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src2).L,41) );
      sbits<41> tmp = (sbits<41>)D(Src3) - ((mult1 + mult2) << 1 );
      overflow40(tmp);
      saturation32 (tmp,Res);

};

}

define (instr=MACM_2X_Da_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACM_2X_Da_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACM_2X_Da_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Mixed Precision 16x32 Multiply-accumulate to registers pair(fraction) """;
attrs = (DMPY,V7);
# 2302 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACM_2X_Da_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Dcd.Dc),Src3(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "macm.2x %f,%f,%f",Da,Dcd,Dmn);
   }

action=
{
   bits<64> mult = (signedMultiply( signExtend( D(Src1).L,64),signExtend( D(Src2)(31,0),64) ))<<1;
   mult = (sbits<64>)D(SrcAcc2) + (mult>>16);
   D(Res2) = mult(39,0);

   mult = (signedMultiply( signExtend( D(Src1).H,64),signExtend( D(Src3)(31,0),64) ))<<1;
   mult = (sbits<64>)D(SrcAcc1) + (mult>>16);
   D(Res1) = mult(39,0);

};

}

define (instr=MACQX_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res);
   blk = dalu;
   define (instr=MACQX_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACQX_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Quad multiply and accumulation with crossed operands to 1 register(fraction) """;
attrs = (DMPY,V7);
# 2327 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACQX_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res(Dn));
      syntax = ( "macqx %f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
      bits<41> mult1 = ((signedMultiply( signExtend(D(Src1).H,41), signExtend(D(Src3).L,41) ))<<1);
      bits<41> mult2 = ((signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).H,41) ))<<1);
      bits<41> mult3 = ((signedMultiply( signExtend(D(Src2).H,41), signExtend(D(Src4).L,41) ))<<1);
      bits<41> mult4 = ((signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).H,41) ))<<1);
      bits<41> tmp = (sbits<41>)D(Res)+((sbits<41>)mult1+(sbits<41>)mult2+(sbits<41>)mult3+(sbits<41>)mult4);
      D(Res) = tmp(39,0);


};

}

define (instr=MACQ_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res);
   blk = dalu;
   define (instr=MACQ_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACQ_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Quad multiply and accumulation to 1 register(fraction) """;
attrs = (DMPY,V7);
# 2352 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACQ_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res(Dn));
      syntax = ( "macq %f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
      bits<41> mult1 = ((signedMultiply( signExtend(D(Src1).H,41), signExtend(D(Src3).H,41) ))<<1);
      bits<41> mult2 = ((signedMultiply( signExtend(D(Src1).L,41), signExtend(D(Src3).L,41) ))<<1);
      bits<41> mult3 = ((signedMultiply( signExtend(D(Src2).H,41), signExtend(D(Src4).H,41) ))<<1);
      bits<41> mult4 = ((signedMultiply( signExtend(D(Src2).L,41), signExtend(D(Src4).L,41) ))<<1);
      bits<41> tmp = (sbits<41>)D(Res)+((sbits<41>)mult1+(sbits<41>)mult2+(sbits<41>)mult3+(sbits<41>)mult4);
      D(Res) = tmp(39,0);


};

}

define (instr=MACRE_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACRE_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACRE_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Complex Fractional Multiply and Accumulate - Real Portion""";
attrs = (DMPY,V7);
# 2377 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACRE_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "macre.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
      sbits<41> mult1 = signedMultiply((signExtend(D(Src1).H,41)), (signExtend(D(Src3).H,41))) ;
      sbits<41> mult2 = signedMultiply((signExtend(D(Src1).L,41)), (signExtend(D(Src3).L,41))) ;
      sbits<41> tmp = ((mult1 - mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      D(Res1) = tmp(39,0);

      mult1 = signedMultiply((signExtend(D(Src2).H,41)), (signExtend(D(Src4).H,41))) ;
      mult2 = signedMultiply((signExtend(D(Src2).L,41)), (signExtend(D(Src4).L,41))) ;
      tmp = ((mult1 - mult2) << 1 ) + (sbits<41>)D(SrcAcc2);
      D(Res2) = tmp(39,0);

};

}



define (instr=SMACRE_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;

   define (instr=SMACRE_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMACRE_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Complex Fractional Multiply and Accumulate - Real Portion - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 2408 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMACRE_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smacre.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
      sbits<41> mult1 = signedMultiply((signExtend(D(Src1).H,41)), (signExtend(D(Src3).H,41))) ;
      sbits<41> mult2 = signedMultiply((signExtend(D(Src1).L,41)), (signExtend(D(Src3).L,41))) ;
      sbits<41> tmp = ((mult1 - mult2) << 1 ) + (sbits<41>)D(SrcAcc1);
      overflow40(tmp);
      saturation32 (tmp,Res1);

      mult1 = signedMultiply((signExtend(D(Src2).H,41)), (signExtend(D(Src4).H,41))) ;
      mult2 = signedMultiply((signExtend(D(Src2).L,41)), (signExtend(D(Src4).L,41))) ;
      tmp = ((mult1 - mult2) << 1 ) + (sbits<41>)D(SrcAcc2);
      overflow40(tmp);
      saturation32 (tmp,Res2);

};

}

define (instr=MACRE_mDa_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res);
   blk = dalu;
   define (instr=MACRE_mDa_Db_Dn)
   {

      alias = MACRE_mDa_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn));
      syntax = ( "macre -%f,%f,%f",Da,Db,Dn);
   }

action=
{
      sbits<41> mult1 = signedMultiply((signExtend(D(Src1).H,41)), (signExtend(D(Src2).H,41))) ;
      sbits<41> mult2 = signedMultiply((signExtend(D(Src1).L,41)), (signExtend(D(Src2).L,41))) ;
      sbits<41> tmp = (sbits<41>)D(Src3)- ((mult1 - mult2) << 1 );
      overflow40(tmp);
      saturation32 (tmp,Res);

};

}

define (instr=MAXMSEARCH4_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MAXMSEARCH4_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAXMSEARCH4_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Find maximum absolute value and Index between four signed 16-bit words  and previous result """;
attrs = (DARIT,V7);
# 2461 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MAXMSEARCH4_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "maxmsearch4 %f,%f,%f",Da,Db,Dmn);
   }

action=
{
   int local_max_index=4;
   D(Res1).L = maxm(D(SrcAcc1).L, D(Src1).L, D(Src2).L, D(Src1).H, D(Src2).H,&local_max_index);
   bits<2> index = 0;
   if (local_max_index!=4) {
      bits<2> index = local_max_index;
      D(Res2).L = concat(D(SrcAcc2)(31,18),index);
   }
   D(Res2).H = D(SrcAcc2).H + D(SrcAcc1).H;

};

}

define (instr=MAXSEARCH4_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MAXSEARCH4_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAXSEARCH4_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Find maximum (not absolute) value and Index between four signed 16-bit words  and previous result """;
attrs = (DARIT,V7);
# 2487 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MAXSEARCH4_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "maxsearch4 %f,%f,%f",Da,Db,Dmn);
   }

action=
{
   int local_max_index=4;
   D(Res1).L = max_5inputs(D(SrcAcc1).L, D(Src1).L, D(Src2).L, D(Src1).H, D(Src2).H,&local_max_index);
   bits<2> index = 0;
   if (local_max_index!=4) {
      bits<2> index = local_max_index;
      D(Res2).L = concat(D(SrcAcc2)(31,18),index);
   }
   D(Res2).H = D(SrcAcc2).H + D(SrcAcc1).H;
};

}

define (instr=MINSEARCH4_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MINSEARCH4_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MINSEARCH4_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Find minimum value and Index between four signed 16-bit words  and previous result """;
attrs = (DARIT,V7);
# 2512 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MINSEARCH4_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "minsearch4 %f,%f,%f",Da,Db,Dmn);
   }

action=
{
   int local_min_index=4;
   D(Res1).L = min_5inputs(D(SrcAcc1).L, D(Src1).L, D(Src2).L, D(Src1).H, D(Src2).H,&local_min_index);
   bits<2> index = 0;
   if (local_min_index!=4) {
      bits<2> index = local_min_index;
      D(Res2).L = concat(D(SrcAcc2)(31,18),index);
   }
   D(Res2).H = D(SrcAcc2).H + D(SrcAcc1).H;

};

}

define (instr=MOVEPK_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=MOVEPK_Da_Db_Dc_Dm_Dn)
   {

      alias = MOVEPK_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dabc.Da),Src2(Dabc.Db),Src3(Dabc.Dc),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "movepk %f,%f",Dabc,Dmn);
   }

action=
{
   D(Res2) = zeroExtend(concat(D(Src2).L, D(Src3).H),40);
   D(Res1) = zeroExtend(concat(D(Src1).L, D(Src2).H),40);
};

}

define (instr=MPY32H_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=MPY32H_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY32H_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32x32 bit Multiply into a single register, keeping higher 32-bit of the 64-bit result """;
attrs = (DMPY,V7);
# 2557 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPY32H_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "mpy32h %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
   bits<41> mult = signExtend(mult32_32(64,32),41)<<1;
   saturation32(mult,Res);

};

}

define (instr=MPY32L_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=MPY32L_Da_Db_Dn)
   {

      alias = MPY32L_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "mpy32l %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
   bits<41> mult = signExtend(mult32_32(31,0),41)<<1;
   saturation32(mult,Res);

};

}

define (instr=MPY32_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=MPY32_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY32_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32x32 bit Multiply into a 64-bit result in 2 registers """;
attrs = (DMPY,V7);
# 2599 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPY32_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpy32 %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   bits<65> mult32_32 = signedMultiply( D(Src1)(31,0), D(Src2)(31,0));
   bits<41> mult = signExtend(mult32_32(31,0),41)<<1;
   saturation32(mult,Res1);
   mult = signExtend(mult32_32(64,32),41)<<1;
   saturation32(mult,Res2);

};

}

define (instr=MPYCXCR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=MPYCXCR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYCXCR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by conjugate with round and saturate into packed form """;
attrs = (DMPY,V7);
# 2623 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYCXCR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "mpycxcr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1+mult2) << 1;
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41), signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2-mult1) << 1;
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}

define (instr=MPYCXC_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=MPYCXC_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYCXC_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by conjugate to Register Pair""";
attrs = (DMPY,V7);
# 2654 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYCXC_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpycxc %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1+mult2) << 1;
   D(Res2) = mult1(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2-mult1) << 1;
   D(Res1) = mult1(39,0);


};

}

define (instr=MPYCXJR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=MPYCXJR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYCXJR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex by J and saturate into packed form """;
attrs = (DMPY,V7);
# 2684 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYCXJR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "mpycxjr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src2).H,41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src2).L,41)));
   mult1 = (mult1-mult2) << 1;
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src1).L,41),signExtend(D(Src2).H,41) );
   mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src2).L,41) );
   mult1 = (-(mult1+mult2)) << 1;
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

};

}

define (instr=MPYCXJ_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=MPYCXJ_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYCXJ_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex by J""";
attrs = (DMPY,V7);
# 2715 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYCXJ_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpycxj %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2) << 1;
   D(Res1) = mult1(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (-(mult1+mult2)) << 1;
   D(Res2) = mult1(39,0);


};

}

define (instr=MPYCXR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=MPYCXR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYCXR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex with round and saturate into packed form """;
attrs = (DMPY,V7);
# 2745 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYCXR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "mpycxr %f,%f,%f",Da,Db,Dn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2) << 1;
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);



   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult1+mult2) << 1;
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);


};

}

define (instr=MPYCX_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=MPYCX_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYCX_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex""";
attrs = (DMPY,V7);
# 2780 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYCX_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpycx %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2) << 1;
   D(Res2) = mult1(39,0);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult1+mult2) << 1;
   D(Res1) = mult1(39,0);


};

}


define (instr=MPYD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=MPYD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) two dot product of two multiplications(fraction)""";
attrs = (DMPY,V7);
# 2811 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpyd.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<40> res;
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
  mult1 = (mult1+mult2) << 1;
  res = mult1(39,0);
  D(Res1) = res;

  mult1 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
  mult2 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41)));
  mult1 = (mult1+mult2) << 1;
  res = mult1(39,0);
  D(Res2) = res;


};

}



define (instr=SMPYD_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=SMPYD_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYD_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) two dot product of two multiplications with saturation(fraction)""";
attrs = (DMPY,V7);
# 2846 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYD_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smpyd.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
  bits<40> res;
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
  mult1 = (mult1+mult2) << 1;
  set_OVF(mult1);
  res = ll_saturate_mpy(mult1,0);
  D(Res1) = res;

  mult1 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
  mult2 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41)));
  mult1 = (mult1+mult2) << 1;
  set_OVF(mult1);
  res = ll_saturate_mpy(mult1,0);
  D(Res2) = res;


};

}


define (instr=MPYIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=MPYIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Imaginary Portion(fraction)""";
attrs = (DMPY,V7);
# 2880 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpyim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41)));
  mult1 = (mult1+mult2) << 1;
  D(Res1) = mult1(39,0);

  mult1 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41)));
  mult2 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41)));
  mult1 = (mult1+mult2) << 1;
  D(Res2) = mult1(39,0);

};

}



define (instr=SMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=SMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Imaginary Portion with saturation(fraction)""";
attrs = (DMPY,V7);
# 2911 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smpyim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41)));
  mult1 = (mult1+mult2) << 1;
  saturation32(mult1,Res1);

  mult1 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41)));
  mult2 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41)));
  mult1 = (mult1+mult2) << 1;
  saturation32(mult1,Res2);

};

}


define (instr=MPYM_2X_Da_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=MPYM_2X_Da_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYM_2X_Da_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Mixed Precision 16x32 Multiply (fraction) """;
attrs = (DMPY,V7);
# 2940 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYM_2X_Da_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Dcd.Dc),Src3(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpym.2x %f,%f,%f",Da,Dcd,Dmn);
   }

action=
{
   bits<64> mult = (signedMultiply( signExtend( D(Src1).L,64),signExtend( D(Src2)(31,0),64) ))<<1;
   D(Res2) = mult(55,16);

   mult = (signedMultiply( signExtend( D(Src1).H,64),signExtend( D(Src3)(31,0),64) ))<<1;
   D(Res1) = mult(55,16);
};

}

define (instr=MPYM_Da_L_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=MPYM_Da_L_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYM_Da_L_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Mixed-Precision Signed Fractional Multiply """;
attrs = (DMPY,V7);
# 2962 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYM_Da_L_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "mpym %f.l,%f,%f",Da,Db,Dn);
   }

action=
{
    bits<64> mult = (signedMultiply( signExtend( D(Src1).L,64),signExtend( D(Src2)(31,0),64) ))<<1;
    D(Res) = mult(55,16);

};

}

define (instr=MPYM_Da_H_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=MPYM_Da_H_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYM_Da_H_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Mixed-Precision Signed Fractional Multiply """;
attrs = (DMPY,V6D);
# 2982 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYM_Da_H_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "mpym %f.h,%f,%f",Da,Db,Dn);
   }

action=
{
    bits<64> mult = (signedMultiply( signExtend( D(Src1).H,64),signExtend( D(Src2)(31,0),64) ))<<1;
    D(Res) = mult(55,16);

};

}

define (instr=MPYQ_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res);
   blk = dalu;
   define (instr=MPYQ_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYQ_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Quad Signed Multiply to 1 register(fraction)""";
attrs = (DMPY,V7);
# 3002 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYQ_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res(Dn));
      syntax = ( "mpyq %f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
   sbits<41> mult3 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41) ));
   sbits<41> mult4 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
   mult1 = (mult1+mult2+mult3+mult4) << 1;
   D(Res) = mult1(39,0);

};

}

define (instr=MPYRE_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=MPYRE_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYRE_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Real Portion(fraction)""";
attrs = (DMPY,V7);
# 3026 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYRE_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpyre.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
    bits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
    bits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
    mult1 = (mult1-mult2) << 1;
    D(Res1) = mult1(39,0);

    mult1 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41)));
    mult2 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
    mult1 = (mult1-mult2) << 1;
    D(Res2) = mult1(39,0);

};

}



define (instr=SMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=SMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Real Portion with saturation(fraction)""";
attrs = (DMPY,V7);
# 3057 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smpyre.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
    bits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
    bits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
    mult1 = (mult1-mult2) << 1;
    saturation32(mult1,Res1);

    mult1 = (signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41)));
    mult2 = (signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41)));
    mult1 = (mult1-mult2) << 1;
    saturation32(mult1,Res2);

};

}


define (instr=MPY_2X_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=MPY_2X_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPY_2X_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Signed Fractional Multiply """;
attrs = (DMPY,V7);
# 3086 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPY_2X_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpy.2x %f,%f,%f",Da,Db,Dmn);
   }

action=
{
   bits<41> mult = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src2).H,41)))<<1;
   D(Res1) = mult(39,0);
   mult = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src2).L,41)))<<1;
   D(Res2) = mult(39,0);

};

}

define (instr=NEG_2X_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=NEG_2X_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NEG_2X_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Negate Two Data Register to Register Pair""";
attrs = (DARIT,V7);
# 3108 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = NEG_2X_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "neg.2x %f,%f",Dab,Dmn);
   }

action=
{
   bits <41> neg = (sbits<41>)(0x0) - (sbits<41>)D(Src1);
   D(Res1) = neg(39,0);
   neg = (sbits<41>)(0x0) - (sbits<41>)D(Src2);
   D(Res2) = neg(39,0);

};

}

define (instr=NEG_L_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=NEG_L_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NEG_L_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""32-bit Negate """;
attrs = (DARIT,V7);
# 3130 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = NEG_L_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "neg.l %f,%f",Da,Dn);
   }

action=
{
   bits <41> res = (sbits<41>)(0x0) - (sbits<41>)(D(Src1)(31,0));
   D(Res) = res(39,0);

};

}

define (instr=NEOR_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=NEOR_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NEOR_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) bitwise exclusive NOR to two destinations""";
attrs = (DBIT,V7);
# 3150 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = NEOR_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "neor.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   D(Res1) = ~( D(Src1) ^ D(Src3) );
   D(Res2) = ~( D(Src2) ^ D(Src4) );

};

}

define (instr=NOR_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=NOR_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NOR_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) bitwise NOR to two destinations""";
attrs = (DBIT,V7);
# 3170 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = NOR_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "nor.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   D(Res1) = ~( D(Src1) | D(Src3) );
   D(Res2) = ~( D(Src2) | D(Src4) );

};

}

define (instr=NOT_2X_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=NOT_2X_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NOT_2X_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) bitwise complement Two Data Register to Register Pair""";
attrs = (DBIT,V7);
# 3190 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = NOT_2X_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "not.2x %f,%f",Dab,Dmn);
   }

action=
{
   D(Res1) = ~( D(Src1) );
   D(Res2) = ~( D(Src2) );

};

}

define (instr=SAT_2L_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SAT_2L_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SAT_2L_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x32) saturate two 32-bits data Registers to Register pair""";
attrs = (DARIT,V7);
# 3210 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SAT_2L_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sat.2l %f,%f",Dab,Dmn);
   }

action=
{
   bits<40> pos_val = 0x007fffffffull;
   bits<40> neg_val = 0xff80000000ull;
   bool sat = false;
   if ( (D(Src1).signedGT(pos_val) )) {
      sat = true;
      D(Res1) = pos_val;
   }
   else {
      if ( (D(Src1)).signedLT(neg_val) ) {
  sat = true;
  D(Res1) = neg_val;
      }
   }
   if ( (D(Src2).signedGT(pos_val) )) {
      sat = true;
      D(Res2) = pos_val;
   }
   else {
      if ( (D(Src2)).signedLT(neg_val) ) {
  sat = true;
  D(Res2) = neg_val;
      }
   }







};

}


define (instr=OR_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=OR_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/OR_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) bitwise OR to two destinations""";
attrs = (DBIT,V7);
# 3258 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = OR_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "or.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   D(Res1) = ( D(Src1) | D(Src3) );
   D(Res2) = ( D(Src2) | D(Src4) );

};

}

define (instr=PNOT_Pa_Pn_family)
{
  fields = (OPCD,P_Src1,P_Res);
   blk = dalu;
   define (instr=PNOT_Pa_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PNOT_Pa_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate logic operation: NOT """;
attrs = (DCMP,V7);
# 3278 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PNOT_Pa_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Res(Pn));
      syntax = ( "pnot %f,%f",Pa,Pn);
   }

action=
{
   SetByVal_SR_PR(P_Res,(!get_SR_PR(P_Src1)));
};

}

define (instr=PAND_Pa_Pb_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res);
   blk = dalu;
   define (instr=PAND_Pa_Pb_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PAND_Pa_Pb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""and predicates """;
attrs = (DCMP,V7);
# 3296 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PAND_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "pand %f,%f,%f",Pa,Pb,Pn);
   }

action=
{
   SetByVal_SR_PR(P_Res,get_SR_PR(P_Src1)&get_SR_PR(P_Src2));
};

}

define (instr=POR_Pa_Pb_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res);
   blk = dalu;
   define (instr=POR_Pa_Pb_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POR_Pa_Pb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Or predicates""";
attrs = (DCMP,V7);
# 3314 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = POR_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "por %f,%f,%f",Pa,Pb,Pn);
   }

action=
{
   SetByVal_SR_PR(P_Res,get_SR_PR(P_Src1)|get_SR_PR(P_Src2));
};

}

define (instr=PEOR_Pa_Pb_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res);
   blk = dalu;
   define (instr=PEOR_Pa_Pb_Pn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PEOR_Pa_Pb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""exclusive or predicates""";
attrs = (DCMP,V7);
# 3332 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PEOR_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "peor %f,%f,%f",Pa,Pb,Pn);
   }

action=
{
   SetByVal_SR_PR(P_Res,get_SR_PR(P_Src1)^get_SR_PR(P_Src2));
};

}


define (instr=SABS_2W_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=SABS_2W_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SABS_2W_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) Absolute Values of Two Words - Saturating regardless of SM2 bit """;
attrs = (DARIT,V7);
# 3351 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SABS_2W_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "sabs.2w %f,%f",Da,Dn);
   }

action=
{
   sbits<41> val = signExtend(ABS20(D(Src1).WH),41);
   saturate16_nocheck(&val);
   D(Res).WH = val(19,0);
   val = signExtend(ABS20(D(Src1).WL),41);
   saturate16_nocheck(&val);
   D(Res).WL = val(19,0);

};

}

define (instr=SABS_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=SABS_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SABS_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Absolute Value - Saturating regardless of SM bit """;
attrs = (DARIT,V7);
# 3375 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SABS_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "sabs %f,%f",Da,Dn);
   }

action=
{
   bits<41> tmp;
   tmp = signExtend(D(Src1),41);
   if (tmp(39)==1) {
      tmp = ((bits<41>)0x0)-(tmp);
      set_OVF(tmp);
   }
   D(Res) = (ll_saturate_nochk(tmp,0))(39,0);
};

}

define (instr=SADD_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SADD_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SADD_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Add - Saturating regardless of SM bit """;
attrs = (DARIT,V7);
# 3399 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SADD_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "sadd %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits <41> sum = (sbits<41>)D(Src1) + (sbits<41>)D(Src2);
   overflow40 ( sum );
   bits<40> Gcarry = Carry( D(Src1), D(Src2), 0);
   SR.C = Gcarry(40 -1);
   saturation32_nochk( sum, Res );

};

}

define (instr=SSUB_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SSUB_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSUB_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Subtract - Saturating regardless of SM bit """;
attrs = (DARIT,V7);
# 3422 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSUB_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "ssub %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<41> sum = (sbits<41>)D(Src2) - (sbits<41>)D(Src1);
   overflow40(sum);
   Borrow(sum, D(Src2), D(Src1) );
   saturation32_nochk(sum,Res);
};

}

define (instr=SADD_Da__u5_Dn_family)
{
  fields = (OPCD,Src1,immu,Res);
   blk = dalu;
   define (instr=SADD_Da__u5_Dn)
   {

      alias = SADD_Da__u5_Dn_family(OPCD(OPCD),Src1(Da),immu(u5),Res(Dn));
      syntax = ( "sadd %f,#%f,%f",Da,u5,Dn);
   }

action=
{
};

}

define (instr=SADD_W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SADD_W_Da_Db_Dn)
   {

      alias = SADD_W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "sadd.w %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}

define (instr=SASLL_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SASLL_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASLL_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left of Two Words - Saturating regardless of SM2 bit """;
attrs = (DSHFT,V7);
# 3477 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASLL_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "sasll.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{
    bool shift_left,always_sat = true;
    sbits<6> shift_size ;
    shift_size = (sbits<6>)(D(Src1)(4,0));
    multiple_bit_shift2(Res,Src2,shift_size,shift_left,always_sat);

};

}

define (instr=SASLL_2W__u5_Da_Dn_family)
{
  fields = (OPCD,Src1,immu,Res);
   blk = dalu;
   define (instr=SASLL_2W__u5_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASLL_2W__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16)Multiple-Bit Arithmetic Shift Left of Two Words - Saturating regardless of SM2 bit """;
attrs = (DSHFT,V7);
# 3499 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASLL_2W__u5_Da_Dn_family(OPCD(OPCD),Src1(Da),immu(u5),Res(Dn));
      syntax = ( "sasll.2w #%f,%f,%f",u5,Da,Dn);
   }

action=
{
   bool shift_left,always_sat = true;
   bits<6> shift_size = immu;
   multiple_bit_shift2(Res,Src1,shift_size,shift_left,always_sat);
};

}

define (instr=SASLL_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SASLL_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASLL_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left - Saturating regardless of SM bit """;
attrs = (DSHFT,V7);
# 3519 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASLL_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "sasll %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<32> shift_count, mask;
   mask=0x7f;
   bool always_sat = true;
   shift_count = zeroExtend(D(Src1)(6,0),32);

   if(D(Src1)(6)==1)
   {
      shift_count|=~mask;
      shift_count=0-shift_count;
      D(Res) = f_inst_asrrsi(Src2,shift_count,always_sat);
   }
   else
   {
      D(Res) = f_inst_asllsi(Src2,shift_count,always_sat);
   }

};

}

define (instr=SASLL__u5_Da_Dn_family)
{
  fields = (OPCD,Src1,immu,Res);
   blk = dalu;
   define (instr=SASLL__u5_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASLL__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left - Saturating regardless of SM bit """;
attrs = (DSHFT,V7);
# 3552 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASLL__u5_Da_Dn_family(OPCD(OPCD),Src1(Da),immu(u5),Res(Dn));
      syntax = ( "sasll #%f,%f,%f",u5,Da,Dn);
   }

action=
{
   bool shift_left = true;
   bool saturation = true;
   bool saturate_always = true;
   D(Res) = multiple_bit_shift(Src1,immu,shift_left,saturation,saturate_always);

};

}

define (instr=SASL_2W_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=SASL_2W_Da_Dn)
   {

      alias = SASL_2W_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "sasl.2w %f,%f",Da,Dn);
   }

action=
{
};

}

define (instr=SASL_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=SASL_Da_Dn)
   {

      alias = SASL_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "sasl %f,%f",Da,Dn);
   }

action=
{
};

}

define (instr=SASRR_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SASRR_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASRR_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right of Two Words - Saturating regardless of SM2 bit """;
attrs = (DSHFT,V7);
# 3608 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASRR_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "sasrr.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{
    bool shift_left = false;
    bool always_sat = true;
    sbits<6> shift_size ;
    shift_size = (sbits<6>)(D(Src1)(4,0));
    multiple_bit_shift2(Res,Src2,shift_size,shift_left,always_sat);

};

}

define (instr=SASRR_2W_Da__u5_Dn_family)
{
  fields = (OPCD,Src1,immu,Res);
   blk = dalu;
   define (instr=SASRR_2W_Da__u5_Dn)
   {

      alias = SASRR_2W_Da__u5_Dn_family(OPCD(OPCD),Src1(Da),immu(u5),Res(Dn));
      syntax = ( "sasrr.2w %f,#%f,%f",Da,u5,Dn);
   }

action=
{
};

}

define (instr=SASRR_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SASRR_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASRR_Da_Db_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right - Saturating regardless of SM bit """;
attrs = (DSHFT,V7);
# 3648 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASRR_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "sasrr %f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<32> shift_count, mask;
   mask=0x7f;
   shift_count = zeroExtend(D(Src1)(6,0),32);
   bool always_sat = true;

   if(D(Src1)(6)==1)
   {
      shift_count|=~mask;
      shift_count=0-shift_count;
      D(Res) = f_inst_asllsi(Src2,shift_count,always_sat);
   }
   else
   {
      D(Res) = f_inst_asrrsi(Src2,shift_count,always_sat);
   }
};

}

define (instr=SASRR__u5_Da_Dn_family)
{
  fields = (OPCD,Src1,immu,Res);
   blk = dalu;
   define (instr=SASRR__u5_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASRR__u5_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right - Saturating regardless of SM bit """;
attrs = (DSHFT,V7);
# 3680 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASRR__u5_Da_Dn_family(OPCD(OPCD),Src1(Da),immu(u5),Res(Dn));
      syntax = ( "sasrr #%f,%f,%f",u5,Da,Dn);
   }

action=
{
   bool shift_left = false;
   bool saturation = true;
   bool always_sat = true;
   D(Res) = multiple_bit_shift(Src1,immu,shift_left,saturation,always_sat);

};

}

define (instr=SASR_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SASR_2W_Da_Db_Dn)
   {

      alias = SASR_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "sasr.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}

define (instr=SASR_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=SASR_Da_Dn)
   {

      alias = SASR_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "sasr %f,%f",Da,Dn);
   }

action=
{
};

}

define (instr=SMACCIM_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMACCIM_Da_Db_Dn)
   {

      alias = SMACCIM_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smaccim %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}


define (instr=SMACD_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMACD_Da_Db_Dn)
   {

      alias = SMACD_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smacd %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}


define (instr=SMACIM_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMACIM_Da_Db_Dn)
   {

      alias = SMACIM_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smacim %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}

define (instr=SMACM_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMACM_Da_Db_Dn)
   {

      alias = SMACM_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smacm %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}


define (instr=SMACRE_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMACRE_Da_Db_Dn)
   {

      alias = SMACRE_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smacre %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}

define (instr=SMACR_2W_Da_Db_Dn_family)
{
   fields = (OPCD,Src1,Src2,Src3,Res,Subtraction);
   blk = dalu;
   doc_title = "smacr.2w [+/-]Da,Db,Dn";
   define (instr=SMACR_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMACR_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply-Accumulate with Rounding - Saturating regardless of SM2 bit """;
attrs = (DMPY,V7);
# 3825 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMACR_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn),Subtraction(0));
      syntax = ( "smacr.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SMACR_2W_mDa_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMACR_2W_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply-Accumulate with Rounding - Saturating regardless of SM2 bit """;
attrs = (DMPY,V7);
# 3832 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMACR_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn),Subtraction(1));
      syntax = ( "smacr.2w -%f,%f,%f",Da,Db,Dn);
   }

action=
{
   bits<40> rnd_res =((signedMultiply( signExtend(D(Src1).L,40), signExtend(D(Src2).L,40) ))<<1);
   if (Subtraction==1) {
       rnd_res = 0-rnd_res;
   }
   rnd_res += (rnd_res&0x0000008000ull)<<1;
   rnd_res = signExtend(rnd_res(32,16),40);
   bits<40> operand20bit = signExtend(D(Src3).WL,40);
   bits<40> result = rnd_res + operand20bit;

   sbits<41> tvalL= signExtend(D(Src3).L,41);
   tvalL += rnd_res;
   if(saturate16_nocheck(&tvalL) ) {
      result=tvalL;
   }
   D(Res).WL = result(19,0);

   rnd_res = ((signedMultiply( signExtend(D(Src1).H,40), signExtend(D(Src2).H,40) ))<<1);
   if (Subtraction==1) {
       rnd_res = 0-rnd_res;
   }
   rnd_res += (rnd_res&0x0000008000ull)<<1;
   rnd_res = signExtend(rnd_res(32,16),40);
   operand20bit = signExtend(D(Src3).WH,40);
   result = rnd_res + operand20bit;

   sbits<41> tvalH= signExtend(D(Src3).H,41);
   tvalH += rnd_res;
   if(saturate16_nocheck(&tvalH)) {
      result=tvalH;
   }
   D(Res).WH = result(19,0);

};

}

define (instr=SMACX_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMACX_Da_Db_Dn)
   {

      alias = SMACX_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smacx %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}

define (instr=SMAC_2W_Da_Db_Dn_family)
{
   fields = (OPCD,Src1,Src2,Src3,Res,Subtraction);
   blk = dalu;
   doc_title = "smac.2w [+/-]Da,Db,Dn";

   define (instr=SMAC_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMAC_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply-Accumulate - Saturating regardless of SM2 bit """;
attrs = (DMPY,V7);
# 3900 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMAC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn),Subtraction(0));
      syntax = ( "smac.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SMAC_2W_mDa_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMAC_2W_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply-Accumulate - Saturating regardless of SM2 bit """;
attrs = (DMPY,V7);
# 3907 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMAC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Src3(Dn),Res(Dn),Subtraction(1));
      syntax = ( "smac.2w -%f,%f,%f",Da,Db,Dn);
   }


action=
{
    bits<40> rnd_res =((signedMultiply( signExtend(D(Src1).L,40), signExtend(D(Src2).L,40) ))<<1);
    if (Subtraction==1) {
       rnd_res = 0-rnd_res;
    }
    rnd_res = signExtend(rnd_res(32,16),40);
    bits<40> operand20bit = signExtend(D(Src3).WL,40);
    bits<40> result = rnd_res + operand20bit;

    sbits<41> tvalL= signExtend(D(Src3).L,41);
    tvalL += rnd_res;
    if(saturate16_nocheck(&tvalL) ) {
       result=tvalL;
    }
    D(Res).WL = result(19,0);

    rnd_res = ((signedMultiply( signExtend(D(Src1).H,40), signExtend(D(Src2).H,40) ))<<1);
    if (Subtraction==1) {
       rnd_res = 0-rnd_res;
    }
    rnd_res = signExtend(rnd_res(32,16),40);
    operand20bit = signExtend(D(Src3).WH,40);
    result = rnd_res + operand20bit;

    sbits<41> tvalH= signExtend(D(Src3).H,41);
    tvalH += rnd_res;
    if(saturate16_nocheck(&tvalH)) {
       result=tvalH;
    }
    D(Res).WH = result(19,0);

};

}

define (instr=SMAC_Da_P_Db_P_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMAC_Da_P_Db_P_Dn)
   {

      alias = SMAC_Da_P_Db_P_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smac %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}

define (instr=SMPYCIM_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMPYCIM_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYCIM_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply-Conjugate Imaginary Portion - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 3972 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYCIM_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smpycim %f,%f,%f",Da,Db,Dn);
   }

action=
{
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(31,16),41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(15,0),41)));
  mult1 = (mult1-mult2) << 1;
  saturation32_nochk (mult1,Res);

};

}

define (instr=SMPYCXC_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SMPYCXC_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYCXC_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by conjugate and saturate to Register Pair""";
attrs = (DMPY,V7);
# 3994 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYCXC_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smpycxc %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1+mult2) << 1;
   saturation32_nochk (mult1,Res2);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult2-mult1) << 1;
   saturation32_nochk (mult1,Res1);
};

}

define (instr=SMPYCXJ_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SMPYCXJ_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYCXJ_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex by J and saturate to Register Pair""";
attrs = (DMPY,V7);
# 4022 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYCXJ_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smpycxj %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2) << 1;
   saturation32_nochk (mult1,Res1);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (-(mult1+mult2)) << 1;
   saturation32_nochk (mult2,Res2);


};

}

define (instr=SMPYCX_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SMPYCX_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYCX_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""multiply complex by complex and saturate to Register Pair""";
attrs = (DMPY,V7);
# 4052 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYCX_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smpycx %f,%f,%f",Da,Db,Dmn);
   }

action=
{

   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41) ));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41)));
   mult1 = (mult1-mult2) << 1;
   saturation32_nochk (mult1,Res2);


   mult1 = signedMultiply( signExtend(D(Src1)(15,0),41),signExtend(D(Src2)(31,16),41) );
   mult2 = signedMultiply( signExtend(D(Src1)(31,16),41),signExtend(D(Src2)(15,0),41) );
   mult1 = (mult1+mult2) << 1;
   saturation32_nochk (mult1,Res1);

};

}


define (instr=SMPYD_pm_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res,Subtraction);
   blk = dalu;
   doc_title = "smpyd [+/-]Da,Db,Dn";

   define (instr=SMPYD_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYD_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Signed Fractional Multiply - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4084 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYD_pm_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Subtraction(0));
      syntax = ( "smpyd %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SMPYD_mDa_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYD_mDa_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Dual Signed Fractional Multiply - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4091 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYD_pm_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Subtraction(1));
      syntax = ( "smpyd %f,%f,%f",Da,Db,Dn);
   }


action=
{
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1)(15,0),41),signExtend( D(Src2)(15,0),41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1)(31,16),41),signExtend( D(Src2)(31,16),41)));
  if (Subtraction==0) {
     mult1 = (mult1+mult2) << 1;
  } else {
     mult1 = ((0-mult1)-mult2) << 1;
  }
  set_OVF(mult1);
  D(Res) = ll_saturate_mpy_nochk(mult1,0);

};

}


define (instr=SMPYIM_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMPYIM_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYIM_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply-Imaginary Portion - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4120 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYIM_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smpyim %f,%f,%f",Da,Db,Dn);
   }

action=
{
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src2).H,41)));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src2).L,41)));
  mult1 = (mult1+mult2) << 1;
  saturation32_nochk (mult1,Res);

};

}

define (instr=SMPYM_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMPYM_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYM_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Mixed Precision Signed Fractional Multiply - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4142 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYM_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smpym %f,%f,%f",Da,Db,Dn);
   }

action=
{
    bits<64> mult = (signedMultiply( signExtend( D(Src1).H,64),signExtend( D(Src2)(31,0),64) ))<<1;
    saturation32_nochk(mult(56,16),Res);

};

}


define (instr=SMPYRE_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMPYRE_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYRE_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Complex Fractional Multiply-Real Portion - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4163 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYRE_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smpyre %f,%f,%f",Da,Db,Dn);
   }

action=
{
  bits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src2).H,41) ));
  bits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src2).L,41)));
  mult1 = (mult1-mult2) << 1;
  saturation32_nochk(mult1,Res);

};

}

define (instr=SMPYR_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMPYR_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYR_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply with Rounding - Saturating regardless of SM2 bit """;
attrs = (DMPY,V7);
# 4185 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYR_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smpyr.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{
    bits<16> low_des,high_des;
    bits<8> ext_des;
    bits<40> tmp_result;
    sbits<41> result = ((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    result+= (result&0x00008000)<<1;
    result >>= 16;
    saturate16_nocheck(&result);
    low_des=result(15,0);
    if ((result&0x0000008000ull)!=0)
    {
       ext_des = (result&0x00000f0000ull)>>16;
    } else {
       ext_des = 0;
    }

    result = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    result+= (result&0x00008000)<<1;
    result >>= 16;
    saturate16_nocheck(&result);
    high_des=(result&0x000000ffffull);
    if ((result&0x0000008000ull)!=0)
    {
       ext_des |= (result&0x00000f0000ull)>>12;
    }

    D(Res) = concat(ext_des,high_des,low_des);
};

}

define (instr=SMPYX_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMPYX_Da_Db_Dn)
   {

      alias = SMPYX_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smpyx %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}

define (instr=SMPY_2W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SMPY_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPY_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2 Signed Fractional Multiply - Saturating regardless of SM2 bit """;
attrs = (DMPY,V7);
# 4245 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPY_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "smpy.2w %f,%f,%f",Da,Db,Dn);
   }

action=
{
    bits<16> low_des,high_des;
    bits<8> ext_des;
    bits<40> tmp_result;
    sbits<41> result = ((signedMultiply( signExtend(D(Src1)(15,0),40), signExtend(D(Src2)(15,0),40) ))<<1);
    result >>= 16;
    saturate16_nocheck(&result);
    low_des=result(15,0);
    if ((result&0x0000008000ull)!=0)
    {
       ext_des = (result&0x00000f0000ull)>>16;
    } else {
       ext_des = 0;
    }

    result = ((signedMultiply( signExtend(D(Src1)(31,16),40), signExtend(D(Src2)(31,16),40) ))<<1);
    result >>= 16;
    saturate16_nocheck(&result);
    high_des=(result&0x000000ffffull);

    if ((result&0x0000008000ull)!=0)
    {
       ext_des |= (result&0x00000f0000ull)>>12;
    }

    D(Res) = concat(ext_des,high_des,low_des);

};

}

define (instr=SMPY_2X_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SMPY_2X_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPY_2X_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) fractional multiply with saturation to registers pair """;
attrs = (DMPY,V7);
# 4288 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPY_2X_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smpy.2x %f,%f,%f",Da,Db,Dmn);
   }

action=
{
   bits<41> mult = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src2).H,41) ))<<1;
   saturation32_nochk(mult,Res2);
   mult = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src2).L,41) )<<1;
   saturation32_nochk(mult,Res1);

};

}

define (instr=SMPY_Da_P_Db_P_Dn_family)
{
   fields = (OPCD,Src1,Src2,Res,Config);
   blk = dalu;
   doc_title = "smpy Da.[HL],Db.[HL],Dn";

   define (instr=SMPY_Da_H_Db_H_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPY_Da_H_Db_H_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4312 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPY_Da_P_Db_P_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(0));
      syntax = ( "smpy %f.h,%f.h,%f",Da,Db,Dn);
   }
   define (instr=SMPY_Da_H_Db_L_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPY_Da_H_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4318 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPY_Da_P_Db_P_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(1));
      syntax = ( "smpy %f.h,%f.l,%f",Da,Db,Dn);
   }
   define (instr=SMPY_Da_L_Db_H_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPY_Da_L_Db_H_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4324 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPY_Da_P_Db_P_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(2));
      syntax = ( "smpy %f.l,%f.h,%f",Da,Db,Dn);
   }
   define (instr=SMPY_Da_L_Db_L_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPY_Da_L_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Signed Fractional Multiply - Saturating regardless of SM bit """;
attrs = (DMPY,V7);
# 4330 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPY_Da_P_Db_P_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(3));
      syntax = ( "smpy %f.l,%f.l,%f",Da,Db,Dn);
   }

action=
{
   bits<16> src1,src2;
   GetSourcesPortions(Src1,&src1,Src2,&src2,Config);
   bits<41> mult = (signedMultiply( signExtend(src1,41),signExtend(src2,41) ))<<1;
   saturation32_nochk (mult,Res);
};

}

define (instr=SNEG_2W_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=SNEG_2W_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SNEG_2W_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) Negate - Saturating regardless of SM2 bit """;
attrs = (DARIT,V7);
# 4351 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SNEG_2W_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "sneg.2w %f,%f",Da,Dn);
   }

action=
{
    sbits <20> zero;
    zero=0;
    sbits<41> val = signExtend(zero - D(Src1).WH,41);
    saturate16_nocheck(&val);
    D(Res).WH = val(19,0);
    val = signExtend(zero - D(Src1).WL,41);
    saturate16_nocheck(&val);
    D(Res).WL = val(19,0);

};

}

define (instr=SNEG_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=SNEG_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SNEG_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Negate - Saturating regardless of SM bit """;
attrs = (DARIT,V7);
# 4377 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SNEG_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "sneg %f,%f",Da,Dn);
   }

action=
{
   bits <41> sum = (sbits<41>)(0x0) - (sbits<41>)D(Src1);
   overflow40 ( sum );
   saturation32_nochk( sum, Res );

};

}

define (instr=SRND_Da_Dn_family)
{
  fields = (OPCD,Src1,Res);
   blk = dalu;
   define (instr=SRND_Da_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SRND_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),reserved),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Round - Saturating regardless of SM bit """;
attrs = (DARIT,V7);
# 4398 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SRND_Da_Dn_family(OPCD(OPCD),Src1(Da),Res(Dn));
      syntax = ( "srnd %f,%f",Da,Dn);
   }

action=
{
   bits<40> tmp = round_sat_on( D(Src1) );
   D(Res) = tmp;

};

}

define (instr=SSODFFCC_2W_Da_Db_Dn_family)
{
   fields = (OPCD,Src1,Src2,Res,Config);
   blk = dalu;
   doc_title = "ssod[as][as][ix][ix] Da,Db,Dn";

   define (instr=SSODAAII_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSODAAII_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""saturated Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V7);
# 4420 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSODFFCC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(0));
      syntax = ( "ssodaaii.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SSODAAXX_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSODAAXX_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""saturated Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V7);
# 4427 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSODFFCC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(1));
      syntax = ( "ssodaaxx.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SSODASII_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSODASII_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""saturated Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V7);
# 4434 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSODFFCC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(2));
      syntax = ( "ssodasii.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SSODASXX_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSODASXX_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""saturated Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V7);
# 4441 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSODFFCC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(3));
      syntax = ( "ssodasxx.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SSODSAII_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSODSAII_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""saturated Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V7);
# 4448 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSODFFCC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(4));
      syntax = ( "ssodsaii.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SSODSAXX_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSODSAXX_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""saturated Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V7);
# 4455 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSODFFCC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(5));
      syntax = ( "ssodsaxx.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SSODSSII_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSODSSII_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""saturated Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V7);
# 4462 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSODFFCC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(6));
      syntax = ( "ssodssii.2w %f,%f,%f",Da,Db,Dn);
   }

   define (instr=SSODSSXX_2W_Da_Db_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSODSSXX_2W_Da_Db_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""saturated Sum or Difference of Two Word Values-Function and Cross""";
attrs = (DARIT,V7);
# 4469 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSODFFCC_2W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(7));
      syntax = ( "ssodssxx.2w %f,%f,%f",Da,Db,Dn);
   }





action=
{
   bits<20> dest_h = ssodffcc_high(Src1,Src2,Config);
   bits<20> dest_l = ssodffcc_low(Src1,Src2,Config);
   D(Res).H = dest_h(15,0);
   D(Res).L = dest_l(15,0);
   D(Res).E = concat(dest_h(19,16),dest_l(19,16));

};

}

define (instr=SSUBL_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SSUBL_Da_Db_Dn)
   {

      alias = SSUBL_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "ssubl %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}


define (instr=SSUB_Da__u5_Dn_family)
{
  fields = (OPCD,Src1,immu,Res);
   blk = dalu;
   define (instr=SSUB_Da__u5_Dn)
   {

      alias = SSUB_Da__u5_Dn_family(OPCD(OPCD),Src1(Da),immu(u5),Res(Dn));
      syntax = ( "ssub %f,#%f,%f",Da,u5,Dn);
   }

action=
{
};

}

define (instr=SSUB_W_Da_Db_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res);
   blk = dalu;
   define (instr=SSUB_W_Da_Db_Dn)
   {

      alias = SSUB_W_Da_Db_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn));
      syntax = ( "ssub.w %f,%f,%f",Da,Db,Dn);
   }

action=
{
};

}

define (instr=SUB_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=SUB_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUB_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) sub to two destinations""";
attrs = (DARIT,V7);
# 4548 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SUB_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sub.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
      bits<41> sub = (sbits<41>)D(Src1) - (sbits<41>)D(Src3);
      D(Res1) = sub(39,0);
      sub = (sbits<41>)D(Src2) - (sbits<41>)D(Src4);
      D(Res2) = sub(39,0);





};

}

define (instr=TFR_2X_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=TFR_2X_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFR_2X_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Transfer Two Data Register to Register Pair """;
attrs = (DARIT,V7);
# 4574 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = TFR_2X_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "tfr.2x %f,%f,%f",Da,Db,Dmn);
   }

action=
{
   D(Res1) = D(Src1);
   D(Res2) = D(Src2);
};

}
# 4593 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl"
define (instr=MACCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACCIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACCIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Conjugate Imaginary Portion with accumulation (fraction)""";
attrs = (DMPY,V7);
# 4600 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "maccim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1-mult2);
  mult1 <<= 1;
  mult1 += (sbits<41>)D(SrcAcc1);
  D(Res1) = mult1(39,0);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41));
  mult1 = (mult1-mult2);
  mult1 <<= 1;
  mult1 += (sbits<41>)D(SrcAcc2);
  D(Res2) = mult1(39,0);

};

}


define (instr=SMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=SMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Conjugate Imaginary Portion with accumulation and saturation (fraction)""";
attrs = (DMPY,V7);
# 4633 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smaccim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1-mult2);
  mult1 <<= 1;
  mult1 += (sbits<41>)D(SrcAcc1);
  saturation32_nochk (mult1,Res1);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41));
  mult1 = (mult1-mult2);
  mult1 <<= 1;
  mult1 += (sbits<41>)D(SrcAcc2);
  saturation32_nochk (mult1,Res2);

};

}



define (instr=IMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=IMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Conjugate Imaginary Portion with accumulation (integer)""";
attrs = (DMPY,V7);
# 4667 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imaccim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }




action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1-mult2);
  mult1 += (sbits<41>)D(SrcAcc1);
  D(Res1) = mult1(39,0);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41));
  mult1 = (mult1-mult2);
  mult1 += (sbits<41>)D(SrcAcc2);
  D(Res2) = mult1(39,0);

};

}


define (instr=ISMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=ISMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Conjugate Imaginary Portion with accumulation and saturation (integer)""";
attrs = (DMPY,V7);
# 4700 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismaccim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }



action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1-mult2);
  mult1 += (sbits<41>)D(SrcAcc1);
  saturation32_nochk (mult1,Res1);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41));
  mult1 = (mult1-mult2);
  mult1 += (sbits<41>)D(SrcAcc2);
  saturation32_nochk (mult1,Res2);

};

}


define (instr=MACDH_2X_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACDH_2X_Da_Db_Dc_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACDH_2X_Da_Db_Dc_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dc(0)),
 (bits(22),Dc(1)),
 (bits(23),Dc(2)),
 (bits(24),Dc(3)),
 (bits(25),Dc(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dc(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot multiplication and accumulation, result in 2 registers(fraction)""";
attrs = (DMPY,V7);
# 4732 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACDH_2X_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dc),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "macdh.2x %f,%f,%f",Dab,Dc,Dmn);
   }


action=
{
    sbits<41> mult1 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).H,41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1).L,41),signExtend(D(Src3).L,41) );
    mult1 = (mult1 + mult2);
    mult1 <<= 1;
    mult1 += (sbits<41>)D(SrcAcc1);
    D(Res1) = mult1(39,0);

    mult1 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src3).H,41) );
    mult2 = signedMultiply( signExtend(D(Src2).L,41),signExtend(D(Src3).L,41) );
    mult1 = (mult1 + mult2);
    mult1 <<= 1;
    mult1 += (sbits<41>)D(SrcAcc2);
    D(Res2) = mult1(39,0);

};

}


define (instr=IMACDH_2X_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;

   define (instr=IMACDH_2X_Da_Db_Dc_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACDH_2X_Da_Db_Dc_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dc(0)),
 (bits(22),Dc(1)),
 (bits(23),Dc(2)),
 (bits(24),Dc(3)),
 (bits(25),Dc(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dc(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot multiplication and accumulation, result in 2 registers(integer) """;
attrs = (DMPY,V7);
# 4766 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACDH_2X_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dc),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imacdh.2x %f,%f,%f",Dab,Dc,Dmn);
   }


action=
{
    sbits<41> mult1 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).H,41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1).L,41),signExtend(D(Src3).L,41) );
    mult1 = (mult1 + mult2);
    mult1 += (sbits<41>)D(SrcAcc1);
    D(Res1) = mult1(39,0);

    mult1 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src3).H,41) );
    mult2 = signedMultiply( signExtend(D(Src2).L,41),signExtend(D(Src3).L,41) );
    mult1 = (mult1 + mult2);
    mult1 += (sbits<41>)D(SrcAcc2);
    D(Res2) = mult1(39,0);

};

}


define (instr=MACDL_2X_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;
   define (instr=MACDL_2X_Da_Db_Dc_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACDL_2X_Da_Db_Dc_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dc(0)),
 (bits(22),Dc(1)),
 (bits(23),Dc(2)),
 (bits(24),Dc(3)),
 (bits(25),Dc(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dc(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot multiplication and accumulation, result in 2 registers(fraction)""";
attrs = (DMPY,V7);
# 4797 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACDL_2X_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dc),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "macdl.2x %f,%f,%f",Dab,Dc,Dmn);
   }



action=
{
   sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41),signExtend(D(Src3).H,41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).L,41) );
    mult1 = (mult1 + mult2);
    mult1 <<= 1;
    mult1 += (sbits<41>)D(SrcAcc1);
    D(Res1) = mult1(39,0);

    mult1 = signedMultiply( signExtend(D(Src2).L,41),signExtend(D(Src3).H,41) );
    mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src3).L,41) );
    mult1 = (mult1 + mult2);
    mult1 <<= 1;
    mult1 += (sbits<41>)D(SrcAcc2);
    D(Res2) = mult1(39,0);

};

}


define (instr=IMACDL_2X_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,SrcAcc1,SrcAcc2,Res1,Res2);
   blk = dalu;

   define (instr=IMACDL_2X_Da_Db_Dc_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACDL_2X_Da_Db_Dc_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dc(0)),
 (bits(22),Dc(1)),
 (bits(23),Dc(2)),
 (bits(24),Dc(3)),
 (bits(25),Dc(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dc(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot multiplication and accumulation, result in 2 registers(integer) """;
attrs = (DMPY,V7);
# 4832 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACDL_2X_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dc),SrcAcc1(Dmn.Dm),SrcAcc2(Dmn.Dn),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "imacdl.2x %f,%f,%f",Dab,Dc,Dmn);
   }


action=
{
   sbits<41> mult1 = signedMultiply( signExtend(D(Src1).L,41),signExtend(D(Src3).H,41) );
    sbits<41> mult2 = signedMultiply( signExtend(D(Src1).H,41),signExtend(D(Src3).L,41) );
    mult1 = (mult1 + mult2);
    mult1 += (sbits<41>)D(SrcAcc1);
    D(Res1) = mult1(39,0);

    mult1 = signedMultiply( signExtend(D(Src2).L,41),signExtend(D(Src3).H,41) );
    mult2 = signedMultiply( signExtend(D(Src2).H,41),signExtend(D(Src3).L,41) );
    mult1 = (mult1 + mult2);
    mult1 += (sbits<41>)D(SrcAcc2);
    D(Res2) = mult1(39,0);

};

}


define (instr=MPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=MPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Conjugate Imaginary Portion(fraction)""";
attrs = (DMPY,V7);
# 4863 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpycim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }



action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1-mult2);
  mult1 <<= 1;
  D(Res1) = mult1(39,0);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41));
  mult1 = (mult1-mult2);
  mult1 <<= 1;
  D(Res2) = mult1(39,0);

};

}



define (instr=SMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=SMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Conjugate Imaginary Portion with saturation(fraction)""";
attrs = (DMPY,V7);
# 4897 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "smpycim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1-mult2);
  mult1 <<= 1;
  saturation32_nochk (mult1,Res1);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41));
  mult1 = (mult1-mult2);
  mult1 <<= 1;
  saturation32_nochk (mult1,Res2);

};

}



define (instr=IMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=IMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Conjugate Imaginary Portion(integer)""";
attrs = (DMPY,V7);
# 4929 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impycim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }



action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1-mult2);
  D(Res1) = mult1(39,0);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41));
  mult1 = (mult1-mult2);
  D(Res2) = mult1(39,0);

};

}


define (instr=ISMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=ISMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual Complex Fractional Multiply-Conjugate Imaginary Portion with saturation(integer)""";
attrs = (DMPY,V7);
# 4960 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ismpycim.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1-mult2);
  saturation32_nochk (mult1,Res1);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).L,41));
  mult1 = (mult1-mult2);
  saturation32_nochk (mult1,Res2);

};

}

define (instr=MPYDH_2X_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=MPYDH_2X_Da_Db_Dc_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYDH_2X_Da_Db_Dc_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dc(0)),
 (bits(22),Dc(1)),
 (bits(23),Dc(2)),
 (bits(24),Dc(3)),
 (bits(25),Dc(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dc(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot multiplication to registers pair(fraction)""";
attrs = (DMPY,V7);
# 4988 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYDH_2X_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dc),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpydh.2x %f,%f,%f",Dab,Dc,Dmn);
   }

action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41));
  mult1 = (mult1+mult2);
  mult1 <<= 1;
  D(Res1) = mult1(39,0);

  mult1 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src3).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src3).L,41));
  mult1 = (mult1+mult2);
  mult1 <<= 1;
  D(Res2) = mult1(39,0);

};

}



define (instr=IMPYDH_2X_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;

   define (instr=IMPYDH_2X_Da_Db_Dc_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYDH_2X_Da_Db_Dc_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dc(0)),
 (bits(22),Dc(1)),
 (bits(23),Dc(2)),
 (bits(24),Dc(3)),
 (bits(25),Dc(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dc(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot multiplication to registers pair (integer) """;
attrs = (DMPY,V7);
# 5020 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYDH_2X_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dc),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impydh.2x %f,%f,%f",Dab,Dc,Dmn);
   }


action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41));
  mult1 = (mult1+mult2);
  D(Res1) = mult1(39,0);

  mult1 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src3).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src3).L,41));
  mult1 = (mult1+mult2);
  D(Res2) = mult1(39,0);

};

}


define (instr=MPYDL_2X_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=MPYDL_2X_Da_Db_Dc_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYDL_2X_Da_Db_Dc_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dc(0)),
 (bits(22),Dc(1)),
 (bits(23),Dc(2)),
 (bits(24),Dc(3)),
 (bits(25),Dc(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dc(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot multiplication to registers pair(fraction)""";
attrs = (DMPY,V7);
# 5049 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYDL_2X_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dc),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpydl.2x %f,%f,%f",Dab,Dc,Dmn);
   }

action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1+mult2);
  mult1 <<= 1;
  D(Res1) = mult1(39,0);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src3).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1+mult2);
  mult1 <<= 1;
  D(Res2) = mult1(39,0);
};

}



define (instr=IMPYDL_2X_Da_Db_Dc_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;

   define (instr=IMPYDL_2X_Da_Db_Dc_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYDL_2X_Da_Db_Dc_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dc(0)),
 (bits(22),Dc(1)),
 (bits(23),Dc(2)),
 (bits(24),Dc(3)),
 (bits(25),Dc(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dc(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) Dot multiplication to registers pair(integer) """;
attrs = (DMPY,V7);
# 5080 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYDL_2X_Da_Db_Dc_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dc),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impydl.2x %f,%f,%f",Dab,Dc,Dmn);
   }

action=
{
  bits<41> mult1 = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).H,41));
  bits<41> mult2 = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1+mult2);
  D(Res1) = mult1(39,0);

  mult1 = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src3).H,41));
  mult2 = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src3).L,41));
  mult1 = (mult1+mult2);
  D(Res2) = mult1(39,0);
};

}


define (instr=MPYHH_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=MPYHH_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYHH_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual multiply high portions(fraction)""";
attrs = (DMPY,V7);
# 5107 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYHH_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpyhh.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
   bits<41> mult = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41));
   mult <<= 1;
   D(Res1) = mult(39,0);

   mult = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41));
   mult <<= 1;
   D(Res2) = mult(39,0);

};

}



define (instr=IMPYHH_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=IMPYHH_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYHH_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual multiply high portions(integer)""";
attrs = (DMPY,V7);
# 5136 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYHH_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "impyhh.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
   bits<41> mult = signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41));
   D(Res1) = mult(39,0);

   mult = signedMultiply( signExtend( D(Src2).H,41),signExtend( D(Src4).H,41));
   D(Res2) = mult(39,0);

};

}


define (instr=MPYLL_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=MPYLL_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MPYLL_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual multiply low portions(fraction)""";
attrs = (DMPY,V7);
# 5161 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MPYLL_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "mpyll.2x %f,%f,%f",Dab,Dcd,Dmn);
   }


action=
{
   bits<41> mult = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41));
   mult <<= 1;
   D(Res1) = mult(39,0);

   mult = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41));
   mult <<= 1;
   D(Res2) = mult(39,0);

};

}



define (instr=IMPYLL_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;

   define (instr=IMPYLL_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMPYLL_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) dual multiply low portions(integer)""";
attrs = (DMPY,V7);
# 5190 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMPYLL_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));

      syntax = ( "impyll.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bits<41> mult = signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41));
   D(Res1) = mult(39,0);

   mult = signedMultiply( signExtend( D(Src2).L,41),signExtend( D(Src4).L,41));
   D(Res2) = mult(39,0);

};

}


define (instr=PACK20_Da_WH_Db_WH_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res,Config);
   blk = dalu;
   doc_title = "pack20 Da.[HL],Db.[HL],Dn";

   define (instr=PACK20_Da_WH_Db_WH_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK20_Da_WH_Db_WH_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 2 20 bits operands to SIMD2 Format in a Register""";
attrs = (DARIT,V7);
# 5217 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PACK20_Da_WH_Db_WH_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(0));
      syntax = ( "pack20 %f.h,%f.h,%f",Da,Db,Dn);
   }
   define (instr=PACK20_Da_WH_Db_WL_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK20_Da_WH_Db_WL_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 2 20 bits operands to SIMD2 Format in a Register""";
attrs = (DARIT,V7);
# 5223 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PACK20_Da_WH_Db_WH_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(1));
      syntax = ( "pack20 %f.h,%f.l,%f",Da,Db,Dn);
   }
   define (instr=PACK20_Da_WL_Db_WH_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK20_Da_WL_Db_WH_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 2 20 bits operands to SIMD2 Format in a Register""";
attrs = (DARIT,V7);
# 5229 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PACK20_Da_WH_Db_WH_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(2));
      syntax = ( "pack20 %f.l,%f.h,%f",Da,Db,Dn);
   }
   define (instr=PACK20_Da_WL_Db_WL_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK20_Da_WL_Db_WL_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 2 20 bits operands to SIMD2 Format in a Register""";
attrs = (DARIT,V7);
# 5235 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PACK20_Da_WH_Db_WH_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(3));
      syntax = ( "pack20 %f.l,%f.l,%f",Da,Db,Dn);
   }


action=
{
   bits<20> src1,src2;
   GetSourcesPortions20(Src1,&src1,Src2,&src2,Config);
   D(Res).WH = src1;
   D(Res).WL = src2;
};

}



define (instr=PACK_2W_Da_H_Db_H_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res,Config);
   blk = dalu;
   doc_title = "pack.2w Da.[HL],Db.[HL],Dn";

   define (instr=PACK_2W_Da_H_Db_H_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK_2W_Da_H_Db_H_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 2 Words to SIMD2 Format in a Register""";
attrs = (DARIT,V7);
# 5261 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PACK_2W_Da_H_Db_H_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(0));
      syntax = ( "pack.2w %f.h,%f.h,%f",Da,Db,Dn);
   }
   define (instr=PACK_2W_Da_H_Db_L_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK_2W_Da_H_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 2 Words to SIMD2 Format in a Register""";
attrs = (DARIT,V7);
# 5267 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PACK_2W_Da_H_Db_H_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(1));
      syntax = ( "pack.2w %f.h,%f.l,%f",Da,Db,Dn);
   }
   define (instr=PACK_2W_Da_L_Db_H_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK_2W_Da_L_Db_H_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 2 Words to SIMD2 Format in a Register""";
attrs = (DARIT,V7);
# 5273 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PACK_2W_Da_H_Db_H_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(2));
      syntax = ( "pack.2w %f.l,%f.h,%f",Da,Db,Dn);
   }
   define (instr=PACK_2W_Da_L_Db_L_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PACK_2W_Da_L_Db_L_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Db(0)),
 (bits(22),Db(1)),
 (bits(23),Db(2)),
 (bits(24),Db(3)),
 (bits(25),Db(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Db(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Packing 2 Words to SIMD2 Format in a Register""";
attrs = (DARIT,V7);
# 5279 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = PACK_2W_Da_H_Db_H_Dn_family(OPCD(OPCD),Src1(Da),Src2(Db),Res(Dn),Config(3));
      syntax = ( "pack.2w %f.l,%f.l,%f",Da,Db,Dn);
   }


action=
{
   bits<16> src1,src2;
   GetSourcesPortions(Src1,&src1,Src2,&src2,Config);
   D(Res).H = src1;
   D(Res).L = src2;

};

}


define (instr=SABS_4W_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SABS_4W_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SABS_4W_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD4(4x16)absolute 4 words to register pair - Saturating regardless of SM2 bit """;
attrs = (DARIT,V7);
# 5303 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SABS_4W_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sabs.4w %f,%f",Dab,Dmn);
   }

action=
{
      D(Res1).H = ABSword(D(Src1).H);
      D(Res1).L = ABSword(D(Src1).L);
      D(Res2).H = ABSword(D(Src2).H);
      D(Res2).L = ABSword(D(Src2).L);
};

}

define (instr=SADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=SADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) add to first destination and sub to second destination with crossed operands and saturation""";
attrs = (DARIT,V7);
# 5324 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "saddsubx.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bits <41> sum2 = (bits<41>)D(Src3) - (bits<41>)D(Src2);
   bits <41> sum1 = (bits<41>)D(Src1) + (bits<41>)D(Src4);
   saturation32_nochk (sum1,Res1);
   saturation32_nochk (sum2,Res2);

};

}

define (instr=SADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=SADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) add to one destination and SIMD2(2x16) sub to second destination with crossed operands and saturation""";
attrs = (DARIT,V7);
# 5346 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "saddsubx.4w %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bool always_sat=true;
   bits <17> sum_h = (bits<17>)D(Src4).H + (bits<17>)D(Src1).H;
   bits <17> sum_l = (bits<17>)D(Src4).L + (bits<17>)D(Src1).L;
   D(Res2).H = saturation16_noexception(signExtend(sum_h,40),always_sat);
   D(Res2).L = saturation16_noexception(signExtend(sum_l,40),always_sat);

   sum_h = (bits<17>)D(Src3).H - (bits<17>)D(Src2).H;
   sum_l = (bits<17>)D(Src3).L - (bits<17>)D(Src2).L;
   D(Res1).H = saturation16_noexception(signExtend(sum_h,40),always_sat);
   D(Res1).L = saturation16_noexception(signExtend(sum_l,40),always_sat);
};

}

define (instr=SADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=SADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x40) add to first destination and sub to second destination with saturation""";
attrs = (DARIT,V7);
# 5373 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "saddsub.2x %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bits <41> sum2 = (bits<41>)D(Src4) - (bits<41>)D(Src2);
   bits <41> sum1 = (bits<41>)D(Src1) + (bits<41>)D(Src3);
   saturation32_nochk (sum1,Res1);
   saturation32_nochk (sum2,Res2);
};

}

define (instr=SADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=SADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) add to one destination and SIMD2(2x16) sub to second destination with saturation""";
attrs = (DARIT,V7);
# 5394 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "saddsub.4w %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bool always_sat=true;
   bits <17> sum_h = (bits<17>)D(Src3).H + (bits<17>)D(Src1).H;
   bits <17> sum_l = (bits<17>)D(Src3).L + (bits<17>)D(Src1).L;
   D(Res2).H = saturation16_noexception(signExtend(sum_h,40),always_sat);
   D(Res2).L = saturation16_noexception(signExtend(sum_l,40),always_sat);

   sum_h = (bits<17>)D(Src4).H - (bits<17>)D(Src2).H;
   sum_l = (bits<17>)D(Src4).L - (bits<17>)D(Src2).L;
   D(Res1).H = saturation16_noexception(signExtend(sum_h,40),always_sat);
   D(Res1).L = saturation16_noexception(signExtend(sum_l,40),always_sat);

};

}

define (instr=SADD_4W_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=SADD_4W_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SADD_4W_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD4(4x16) four 16 bits adders to two destinations with saturation """;
attrs = (DARIT,V7);
# 5422 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SADD_4W_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sadd.4w %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bool always_sat=true;
   sbits<17> high = (sbits<17>)D(Src1).H + (sbits<17>)D(Src3).H;
   D(Res1).H = saturation16_noexception(signExtend(high,40),always_sat);
   sbits<17> low = (sbits<17>)D(Src1).L + (sbits<17>)D(Src3).L;
   D(Res1).L = saturation16_noexception(signExtend(low,40),always_sat);

   high = (sbits<17>)D(Src2).H + (sbits<17>)D(Src4).H;
   D(Res2).H = saturation16_noexception(signExtend(high,40),always_sat);
   low = (sbits<17>)D(Src2).L + (sbits<17>)D(Src4).L;
   D(Res2).L = saturation16_noexception(signExtend(low,40),always_sat);

};

}

define (instr=SIGN_4W_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SIGN_4W_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SIGN_4W_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD4(4x16) generate 4 sign words in register pair according to 4 words inputs sign""";
attrs = (DARIT,V7);
# 5450 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SIGN_4W_Da_Db_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sign.4w %f,%f",Dab,Dmn);
   }

action=
{
   D(Res1).L = (D(Src1).L).signedGT(0) ? 1 : (D(Src1).L == 0) ? 0 : 0xffff;
   D(Res1).H = (D(Src1).H).signedGT(0) ? 1 : (D(Src1).H == 0) ? 0 : 0xffff;
   D(Res2).L = (D(Src2).L).signedGT(0) ? 1 : (D(Src2).L == 0) ? 0 : 0xffff;
   D(Res2).H = (D(Src2).H).signedGT(0) ? 1 : (D(Src2).H == 0) ? 0 : 0xffff;

};

}



define (instr=SSUB_4W_Da_Db_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res1,Res2);
   blk = dalu;
   define (instr=SSUB_4W_Da_Db_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SSUB_4W_Da_Db_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD4(4x16) four 16 bits subtractions to two destinations with saturation """;
attrs = (DARIT,V7);
# 5474 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SSUB_4W_Da_Db_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "ssub.4w %f,%f,%f",Dab,Dcd,Dmn);
   }

action=
{
   bool always_sat=true;
   sbits<17> high = (sbits<17>)D(Src1).H - (sbits<17>)D(Src3).H;
   D(Res1).H = saturation16_noexception(signExtend(high,40),always_sat);
   sbits<17> low = (sbits<17>)D(Src1).L - (sbits<17>)D(Src3).L;
   D(Res1).L = saturation16_noexception(signExtend(low,40),always_sat);

   high = (sbits<17>)D(Src2).H - (sbits<17>)D(Src4).H;
   D(Res2).H = saturation16_noexception(signExtend(high,40),always_sat);
   low = (sbits<17>)D(Src2).L - (sbits<17>)D(Src4).L;
   D(Res2).L = saturation16_noexception(signExtend(low,40),always_sat);

};

}



define (instr=ASLL_2L_Da_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=ASLL_2L_Da_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLL_2L_Da_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x32) Multiple-Bit Arithmetic Shift Left of two data registers as two 32-bit long to registers pair (by register/immediate) """;
attrs = (DSHFT,V7);
# 5504 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ASLL_2L_Da_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Dcd.Dc),Src3(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "asll.2l %f,%f,%f",Da,Dcd,Dmn);
   }

action=
{
   bool shift_left = true;
   bool saturation = false;
   bits<7> shift_size = D(Src1)(6,0);
   bits<32> shift_res = multiple_bit_shift_long(Src2,shift_size,shift_left,saturation);
   D(Res1).L = shift_res(15,0);
   D(Res1).H = shift_res(31,16);
   shift_res = multiple_bit_shift_long(Src3,shift_size,shift_left,saturation);
   D(Res2).L = shift_res(15,0);
   D(Res2).H = shift_res(31,16);

};

}

define (instr=ASLL_2L__u5_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,immu,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=ASLL_2L__u5_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLL_2L__u5_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left of two data registers as two 32-bit long (by register/immediate) """;
attrs = (DSHFT,V7);
# 5531 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ASLL_2L__u5_Da_Db_Dm_Dn_family(OPCD(OPCD),immu(u5),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "asll.2l #%f,%f,%f",u5,Dab,Dmn);
   }

action=
{
   bool shift_left = true;
   bool saturation = false;
   bits<7> shift_size = (bits<7>)immu;
   bits<32> shift_res = multiple_bit_shift_long(Src1,shift_size,shift_left,saturation);
   D(Res1).L = shift_res(15,0);
   D(Res1).H = shift_res(31,16);
   shift_res = multiple_bit_shift_long(Src2,shift_size,shift_left,saturation);
   D(Res2).L = shift_res(15,0);
   D(Res2).H = shift_res(31,16);
};

}

define (instr=ASRR_2L_Da_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=ASRR_2L_Da_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRR_2L_Da_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x32) Multiple-Bit Arithmetic Shift Right of two data registers as two 32-bit long to registers pair (by register/immediate) """;
attrs = (DSHFT,V7);
# 5557 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ASRR_2L_Da_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Dcd.Dc),Src3(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "asrr.2l %f,%f,%f",Da,Dcd,Dmn);
   }

action=
{
   bool shift_left = false;
   bool saturation = false;
   bits<7> shift_size = D(Src1)(6,0);
   bits<32> shift_res = multiple_bit_shift_long(Src2,shift_size,shift_left,saturation);
   D(Res1).L = shift_res(15,0);
   D(Res1).H = shift_res(31,16);
   shift_res = multiple_bit_shift_long(Src3,shift_size,shift_left,saturation);
   D(Res2).L = shift_res(15,0);
   D(Res2).H = shift_res(31,16);

};

}

define (instr=ASRR_2L__u5_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,immu,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=ASRR_2L__u5_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRR_2L__u5_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right of two data registers as two 32-bit long (by register/immediate) """;
attrs = (DSHFT,V7);
# 5584 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ASRR_2L__u5_Da_Db_Dm_Dn_family(OPCD(OPCD),immu(u5),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "asrr.2l #%f,%f,%f",u5,Dab,Dmn);
   }

action=
{
   bool shift_left = false;
   bool saturation = false;
   bits<7> shift_size = (bits<7>)immu;
   bits<32> shift_res = multiple_bit_shift_long(Src1,shift_size,shift_left,saturation);
   D(Res1).L = shift_res(15,0);
   D(Res1).H = shift_res(31,16);
   shift_res = multiple_bit_shift_long(Src2,shift_size,shift_left,saturation);
   D(Res2).L = shift_res(15,0);
   D(Res2).H = shift_res(31,16);
};

}

define (instr=SASLL_4W_Da_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=SASLL_4W_Da_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASLL_4W_Da_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD4(4x16) Multiple-Bit Arithmetic Shift Left of Values to registers pair(DALU) """;
attrs = (DSHFT,V7);
# 5610 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASLL_4W_Da_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Dcd.Dc),Src3(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sasll.4w %f,%f,%f",Da,Dcd,Dmn);
   }

action=
{
    bool shift_left= true;
    bool always_sat = true;
    sbits<6> shift_size ;
    shift_size = (sbits<6>)(D(Src1)(4,0));
    multiple_bit_shift2(Res1,Src2,shift_size,shift_left,always_sat);
    multiple_bit_shift2(Res2,Src3,shift_size,shift_left,always_sat);

};

}

define (instr=SASLL_4W__u4_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,immu,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SASLL_4W__u4_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASLL_4W__u4_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),u4(0)),
 (bits(22),u4(1)),
 (bits(23),u4(2)),
 (bits(24),u4(3)),
 (bits(25),b1),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Left of Values (DALU) """;
attrs = (DSHFT,V7);
# 5634 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASLL_4W__u4_Da_Db_Dm_Dn_family(OPCD(OPCD),immu(u4),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sasll.4w #%f,%f,%f",u4,Dab,Dmn);
   }

action=
{
    bool shift_left= true;
    bool always_sat = true;
    bits<6> shift_size ;
    shift_size = (bits<6>)(immu);
    multiple_bit_shift2(Res1,Src1,shift_size,shift_left,always_sat);
    multiple_bit_shift2(Res2,Src2,shift_size,shift_left,always_sat);

};

}

define (instr=SASRR_4W_Da_Dc_Dd_Dm_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Res1,Res2);
   blk = dalu;
   define (instr=SASRR_4W_Da_Dc_Dd_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASRR_4W_Da_Dc_Dd_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Da(0)),
 (bits(27),Da(1)),
 (bits(28),Da(2)),
 (bits(29),Da(3)),
 (bits(30),Da(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Da(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD4(4x16) Multiple-Bit Arithmetic Shift Right of Values to registers pair(DALU) """;
attrs = (DSHFT,V7);
# 5658 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASRR_4W_Da_Dc_Dd_Dm_Dn_family(OPCD(OPCD),Src1(Da),Src2(Dcd.Dc),Src3(Dcd.Dd),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sasrr.4w %f,%f,%f",Da,Dcd,Dmn);
   }

action=
{
    bool shift_left= false;
    bool always_sat = true;
    sbits<6> shift_size ;
    shift_size = (sbits<6>)(D(Src1)(4,0));
    multiple_bit_shift2(Res1,Src2,shift_size,shift_left,always_sat);
    multiple_bit_shift2(Res2,Src3,shift_size,shift_left,always_sat);


};

}

define (instr=SASRR_4W__u4_Da_Db_Dm_Dn_family)
{
  fields = (OPCD,immu,Src1,Src2,Res1,Res2);
   blk = dalu;
   define (instr=SASRR_4W__u4_Da_Db_Dm_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SASRR_4W__u4_Da_Db_Dm_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dmn(0)),
 (bits(17),Dmn(1)),
 (bits(18),Dmn(2)),
 (bits(19),Dmn(3)),
 (bits(20),Dmn(4)),
 (bits(21),u4(0)),
 (bits(22),u4(1)),
 (bits(23),u4(2)),
 (bits(24),u4(3)),
 (bits(25),b1),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),reserved),
 (bits(35),Dmn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""Multiple-Bit Arithmetic Shift Right of Values (DALU) """;
attrs = (DSHFT,V7);
# 5683 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SASRR_4W__u4_Da_Db_Dm_Dn_family(OPCD(OPCD),immu(u4),Src1(Dab.Da),Src2(Dab.Db),Res1(Dmn.Dm),Res2(Dmn.Dn));
      syntax = ( "sasrr.4w #%f,%f,%f",u4,Dab,Dmn);
   }

action=
{
    bool shift_left= false;
    bool always_sat = true;
    bits<6> shift_size ;
    shift_size = (bits<6>)(immu);
    multiple_bit_shift2(Res1,Src1,shift_size,shift_left,always_sat);
    multiple_bit_shift2(Res2,Src2,shift_size,shift_left,always_sat);

};

}


define (instr=MACDR_2W_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,Res,Subtraction);
   blk = dalu;
   doc_title = "macdr.2w [+/-]Da:Db,Dc:Dd,Dn";
   define (instr=MACDR_2W_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACDR_2W_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) Dot multiplication and accumulation with round, result in 1 register(fraction)""";
attrs = (DMPY,V7);
# 5709 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACDR_2W_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dn),Res(Dn),Subtraction(0));
      syntax = ( "macdr.2w %f,%f,%f",Dab,Dcd,Dn);
   }

   define (instr=MACDR_2W_mDa_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MACDR_2W_mDa_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) Dot multiplication and accumulation with round, result in 1 register(fraction)""";
attrs = (DMPY,V7);
# 5716 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = MACDR_2W_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dn),Res(Dn),Subtraction(1));
      syntax = ( "macdr.2w -%f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
   mult1 = (mult1+mult2) << 1;
   mult1 = round16(mult1,1);
   if (Subtraction==1) {
      mult1 = mult1 - ((D(SrcAcc1)>>16)<<16);
   } else {
      mult1 = mult1 + ((D(SrcAcc1)>>16)<<16);
   }
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src2).H,41), signExtend(D(Src4).H,41) );
   mult2 = signedMultiply( signExtend(D(Src2).L,41),signExtend(D(Src4).L,41) );
   mult1 = (mult2+mult1) << 1;
   mult1 = round16(mult1,1);
   if (Subtraction==1) {
      mult1 = mult1 - (D(SrcAcc1)<<16);
   } else {
      mult1 = mult1 + (D(SrcAcc1)<<16);
   }
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}


define (instr=IMACDR_2W_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,SrcAcc1,Res,Subtraction);
   blk = dalu;
   doc_title = "imacdr.2w [+/-]Da:Db,Dc:Dd,Dn";
   define (instr=IMACDR_2W_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACDR_2W_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) Dot multiplication and accumulation with round, result in 1 register(integer)""";
attrs = (DMPY,V7);
# 5759 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACDR_2W_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dn),Res(Dn),Subtraction(0));
      syntax = ( "imacdr.2w %f,%f,%f",Dab,Dcd,Dn);
   }

   define (instr=IMACDR_2W_mDa_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/IMACDR_2W_mDa_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) Dot multiplication and accumulation with round, result in 1 register(integer)""";
attrs = (DMPY,V7);
# 5766 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = IMACDR_2W_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),SrcAcc1(Dn),Res(Dn),Subtraction(1));
      syntax = ( "imacdr.2w -%f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
   mult1 += mult2;
   mult1 = round16(mult1,1);
   if (Subtraction==1) {
      mult1 = mult1 - ((D(SrcAcc1)>>16)<<16);
   } else {
      mult1 = mult1 + ((D(SrcAcc1)>>16)<<16);
   }
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src2).H,41), signExtend(D(Src4).H,41) );
   mult2 = signedMultiply( signExtend(D(Src2).L,41),signExtend(D(Src4).L,41) );
   mult1 = (mult2+mult1) << 1;
   mult1 = round16(mult1,1);
   if (Subtraction==1) {
      mult1 = mult1 - (D(SrcAcc1)<<16);
   } else {
      mult1 = mult1 + (D(SrcAcc1)<<16);
   }
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}




define (instr=SMPYDR_2W_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res);
   blk = dalu;
   define (instr=SMPYDR_2W_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SMPYDR_2W_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) Dot multiplication with round to 1 register(fraction)""";
attrs = (DMPY,V7);
# 5810 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = SMPYDR_2W_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res(Dn));
      syntax = ( "smpydr.2w %f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
   mult1 = (mult1+mult2) << 1;
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src2).H,41), signExtend(D(Src4).H,41) );
   mult2 = signedMultiply( signExtend(D(Src2).L,41),signExtend(D(Src4).L,41) );
   mult1 = (mult2+mult1) << 1;
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}


define (instr=ISMPYDR_2W_Da_Db_Dc_Dd_Dn_family)
{
  fields = (OPCD,Src1,Src2,Src3,Src4,Res);
   blk = dalu;
   define (instr=ISMPYDR_2W_Da_Db_Dc_Dd_Dn)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ISMPYDR_2W_Da_Db_Dc_Dd_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dcd(0)),
 (bits(22),Dcd(1)),
 (bits(23),Dcd(2)),
 (bits(24),Dcd(3)),
 (bits(25),Dcd(4)),
 (bits(26),Dab(0)),
 (bits(27),Dab(1)),
 (bits(28),Dab(2)),
 (bits(29),Dab(3)),
 (bits(30),Dab(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),Dab(5)),
 (bits(34),Dcd(5)),
 (bits(35),Dn(5)));

type = TwoWords;
attrs = (serial_two_word);
"""SIMD2(2x16) Dot multiplication with round to 1 register(integer)""";
attrs = (DMPY,V7);
# 5842 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_dalu_new_instructions.adl" 2
      alias = ISMPYDR_2W_Da_Db_Dc_Dd_Dn_family(OPCD(OPCD),Src1(Dab.Da),Src2(Dab.Db),Src3(Dcd.Dc),Src4(Dcd.Dd),Res(Dn));
      syntax = ( "ismpydr.2w %f,%f,%f",Dab,Dcd,Dn);
   }

action=
{
   sbits<41> mult1 = (signedMultiply( signExtend( D(Src1).H,41),signExtend( D(Src3).H,41)));
   sbits<41> mult2 = (signedMultiply( signExtend( D(Src1).L,41),signExtend( D(Src3).L,41)));
   mult1 = (mult1+mult2);
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).H = mult1(31,16);

   mult1 = signedMultiply( signExtend(D(Src2).H,41), signExtend(D(Src4).H,41) );
   mult2 = signedMultiply( signExtend(D(Src2).L,41),signExtend(D(Src4).L,41) );
   mult1 = (mult2+mult1);
   mult1 = round16(mult1,1);
   saturate16_nocheck(&mult1);
   D(Res).L = mult1(31,16);

};

}
# 63 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 1
define (instr=ABSA_Ra_Rn_family)
{
  fields = (OPCD, R_Src1, R_Res);
  blk = (lsu,ipu);


define (instr=ABSA_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ABSA_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Absolute value""";
attrs = (LARIT,V7);
# 11 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = ABSA_Ra_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "absa %f,%f",Ra,Rn);
}

define (instr=ABSA_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ABSA_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Absolute value""";
attrs = (LARIT,V7);
# 19 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = ABSA_Ra_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "absa %f,%f",Ra,Rn);
}


   action=
   {

      bits<33> tmp = signExtend(R(R_Src1),33);
      if (tmp(31)==1) {
  tmp = ((bits<33>)0x0)-(tmp);
      }
      R(R_Res) = tmp(31,0);
   };
}

define (instr=NOTA_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);



   blk = (lsu,ipu);
   doc_title = "nota Ra,Rn";

define (instr=NOTA_Rq_Rn)
{

  alias = NOTA_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Res(RRR));
}

define (instr=NOTA_Ra_Rn_ipu)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NOTA_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise negate""";
attrs = (LLOG,V7);
# 54 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  syntax = ( "nota %f,%f",Ra,Rn);
  alias = NOTA_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
}

define (instr=NOTA_Ra_Rn)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NOTA_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise negate""";
attrs = (LLOG,V7);
# 61 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  syntax = ( "nota %f,%f",Ra,Rn);
  alias = NOTA_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
}


   action =
   {




      R(R_Res) = ~( R(R_Src1) );
   };
}


define (instr=adda_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = (lsu,ipu);




define (instr=ADDA_Rq_Rn)
{

}
define (instr=ADDA_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDA_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive addition""";
attrs = (LARIT,V2);
# 93 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = adda_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "adda %f,%f,%f",Ra,Rb,Rn);
}

define (instr=ADDA_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive addition""";
attrs = (LARIT,V7);
# 101 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = adda_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "adda %f,%f,%f",Ra,Rb,Rn);
}

define (instr=ADDA_Rq_Rr_Rn)
{

}

action=
{
   R(R_Res) = Address_by_MCTL(R_Src2,R(R_Src1),1,0,1,R(R_Src1));
};

}



define (instr=ADDA__s16_Rq_Rn_family)
{

  fields = (OPCD, imms, R_Src1, R_Res);



  blk = (lsu,ipu);


define (instr=ADDA__s16_Rq_Rn)
{

  alias = ADDA__s16_Rq_Rn_family(OPCD(OPCD), imms(s16), R_Src1(qqq), R_Res(RRR));
}

define (instr=ADDA__s16_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDA__s16_Ra_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Modulo sensitive addition""";
attrs = (LARIT,V2);
# 139 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
   alias = ADDA__s16_Rq_Rn_family(OPCD(OPCD),imms(s16), R_Src1(Ra), R_Res(Rn));
  syntax = ( "adda #%f,%f,%f",s16,Ra,Rn);
}

define (instr=ADDA__s16_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDA__s16_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Modulo sensitive addition""";
attrs = (LARIT,V7);
# 147 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
   alias = ADDA__s16_Rq_Rn_family(OPCD(OPCD),imms(s16), R_Src1(Ra), R_Res(Rn));
  syntax = ( "adda #%f,%f,%f",s16,Ra,Rn);
}


action=
{





   R(R_Res) = Address_by_MCTL(R_Src1, imms,0,0,1,imms);
};

}



define (instr=ADDSPA_Ra_SP_family)
{
  fields = (OPCD,R_Src1);
   blk = (lsu,ipu);

   define (instr=ADDSPA_Ra_SP)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSPA_Ra_SP.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Add an R register into SP""";
attrs = (LARIT,V7);
# 175 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = ADDSPA_Ra_SP_family(OPCD(OPCD),R_Src1(Ra));
      syntax = ( "addspa %f,sp",Ra);
   }

   define (instr=ADDSPA_Ra_SP_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSPA_Ra_SP_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Add Ra into SP""";
attrs = (IARIT,V7);
# 183 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = ADDSPA_Ra_SP_family(OPCD(OPCD),R_Src1(Ra));
      syntax = ( "addspa %f,sp",Ra);
   }


action=
{
   SP = (SP+R(R_Src1))&0xfffffff0;
};

}

define (instr=ADDSPA__s10_Rn_family)
{
  fields = (OPCD,imms,R_Res);
  blk = (lsu,ipu);

   define (instr=ADDSPA__s10_Rn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSPA__s10_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Add from SP""";
attrs = (LARIT,V7);
# 204 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = ADDSPA__s10_Rn_family(OPCD(OPCD),imms(s10),R_Res(Rn));
      syntax = ( "addspa #%f,%f",s10,Rn);
   }

   define (instr=ADDSPA__s10_Rn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSPA__s10_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Add from SP""";
attrs = (LARIT,V7);
# 212 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = ADDSPA__s10_Rn_family(OPCD(OPCD),imms(s10),R_Res(Rn));
      syntax = ( "addspa #%f,%f",s10,Rn);
   }


action=
{
   R(R_Res) = (SP+imms)&0xfffffff0;
};

}

define (instr=ADDSPA__s10_SP_family)
{
  fields = (OPCD,imms);
  blk = (lsu,ipu);

   define (instr=ADDSPA__s10_SP)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSPA__s10_SP.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Add into SP""";
attrs = (LARIT,V7);
# 233 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = ADDSPA__s10_SP_family(OPCD(OPCD),imms(s10));
      syntax = ( "addspa #%f,sp",s10);
   }

   define (instr=ADDSPA__s10_SP_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDSPA__s10_SP_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Add into SP""";
attrs = (LARIT,V7);
# 241 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = ADDSPA__s10_SP_family(OPCD(OPCD),imms(s10));
      syntax = ( "addspa #%f,sp",s10);
   }


action=
{
   SP = (SP+imms)&0xfffffff0;
};

}


define (instr=ASLLA__u5_Ra_Rn_family)
{

  fields = (OPCD, immu, R_Src1, R_Res);
   blk = (lsu,ipu);

define (instr=ASLLA__u5_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLLA__u5_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit shift left""";
attrs = (LLOG,V7);
# 264 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = ASLLA__u5_Ra_Rn_family(OPCD(OPCD), immu(u5), R_Src1(Ra), R_Res(Rn));
  syntax = ( "aslla #%f,%f,%f",u5,Ra,Rn);
}

define (instr=ASLLA__u5_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASLLA__u5_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Ra(0)),
 (bits(22),Ra(1)),
 (bits(23),Ra(2)),
 (bits(24),Ra(3)),
 (bits(25),Ra(4)),
 (bits(26),u5_t2(0)),
 (bits(27),u5_t2(1)),
 (bits(28),u5_t2(2)),
 (bits(29),u5_t2(3)),
 (bits(30),u5_t2(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit shift left""";
attrs = (LLOG,V7);
# 272 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = ASLLA__u5_Ra_Rn_family(OPCD(OPCD), immu(u5_t2), R_Src1(Ra), R_Res(Rn));
  syntax = ( "aslla #%f,%f,%f",u5_t2,Ra,Rn);
}


action=
{

   bool shift_left = true;
   bool saturation = false;
   R(R_Res) = multiple_bit_shift_agu(R_Src1,immu(6,0),shift_left,saturation);
};

}


define (instr=ASRRA__u5_Ra_Rn_family)
{

  fields = (OPCD, u5, R_Src1, R_Res);
  blk = (lsu,ipu);


define (instr=ASRRA__u5_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRRA__u5_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit arithmetic shift right""";
attrs = (LLOG,V7);
# 299 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = ASRRA__u5_Ra_Rn_family(OPCD(OPCD), u5(u5), R_Src1(Ra), R_Res(Rn));
  syntax = ( "asrra #%f,%f,%f",u5,Ra,Rn);
}

define (instr=ASRRA__u5_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ASRRA__u5_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Ra(0)),
 (bits(22),Ra(1)),
 (bits(23),Ra(2)),
 (bits(24),Ra(3)),
 (bits(25),Ra(4)),
 (bits(26),u5_t2(0)),
 (bits(27),u5_t2(1)),
 (bits(28),u5_t2(2)),
 (bits(29),u5_t2(3)),
 (bits(30),u5_t2(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit arithmetic shift right""";
attrs = (LLOG,V7);
# 307 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = ASRRA__u5_Ra_Rn_family(OPCD(OPCD), u5(u5_t2), R_Src1(Ra), R_Res(Rn));
  syntax = ( "asrra #%f,%f,%f",u5_t2,Ra,Rn);
}

action=
{
   bool shift_left = false;
   bool saturation = false;
   R(R_Res) = multiple_bit_shift_agu(R_Src1,zeroExtend(u5,6),shift_left,saturation);
};

}

define (instr=CLBA_Ra_Rn_family)
{
  fields = (OPCD,R_Src1,R_Res);
  blk = (lsu,ipu);

   define (instr=CLBA_Ra_Rn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CLBA_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Count leading bits""";
attrs = (LARIT,V7);
# 329 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CLBA_Ra_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Res(Rn));
      syntax = ( "clba %f,%f",Ra,Rn);
   }
   define (instr=CLBA_Ra_Rn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CLBA_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Count leading bits""";
attrs = (LARIT,V7);
# 336 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CLBA_Ra_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Res(Rn));
      syntax = ( "clba %f,%f",Ra,Rn);
   }


action=
{
   bits<32> res=0;
   var src = R(R_Src1);
   if (src == 0) {
      res = 0;
   }
   else
   {
      if ( src(31) == 0 ) { src = ~src; }
      res = 9-NumberOfOnes32(src);
   }
   R(R_Res) = res;

};

}



define (instr=CMPEQA_Ra_Rb_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res);
   blk = (lsu,ipu);


   define (instr=CMPEQA_Ra_Rb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA_Ra_Rb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for equal""";
attrs = (ICMP,V2);
# 371 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmpeqa %f,%f,%f",Ra,Rb,Pn);
   }

    define (instr=CMPEQA_Ra_Rb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA_Ra_Rb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for equal""";
attrs = (ICMP,V7);
# 379 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmpeqa %f,%f,%f",Ra,Rb,Pn);
   }


action=
{
      if (R(R_Src1)==R(R_Src2)) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res); }
};

}


define (instr=CMPEQA_Ra_Rb_Pm_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res,P_Res2);
   blk = (lsu,ipu);


   define (instr=CMPEQA_Ra_Rb_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA_Ra_Rb_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for equal - complementary""";
attrs = (ICMP,V7);
# 403 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA_Ra_Rb_Pm_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpeqa %f,%f,%f",Ra,Rb,Pmn);
   }
   define (instr=CMPEQA_Ra_Rb_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA_Ra_Rb_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for equal - complementary""";
attrs = (ICMP,V7);
# 410 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA_Ra_Rb_Pm_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpeqa %f,%f,%f",Ra,Rb,Pmn);
   }


action=
{
    if (R(R_Src1)==R(R_Src2)) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
    else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}



define (instr=CMPEQA__s16_Ra_Pn_family)
{
  fields = (OPCD,imms,R_Src1,P_Res);
   blk = (lsu,ipu);


   define (instr=CMPEQA__s16_Ra_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA__s16_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for equal""";
attrs = (ICMP,V5);
# 436 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpeqa #%f,%f,%f",s16,Ra,Pn);
   }
   define (instr=CMPEQA__s16_Ra_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA__s16_Ra_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for equal""";
attrs = (ICMP,V7);
# 443 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpeqa #%f,%f,%f",s16,Ra,Pn);
   }


action=
{
      if ( R(R_Src1) == imms ) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res);}
};

}

define (instr=CMPEQA__s16_Ra_Pm_Pn_family)
{
  fields = (OPCD,imms,R_Src1,P_Res,P_Res2);
   blk = (lsu,ipu);


   define (instr=CMPEQA__s16_Ra_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA__s16_Ra_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for equal - complementary""";
attrs = (ICMP,V7);
# 466 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA__s16_Ra_Pm_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpeqa #%f,%f,%f",s16,Ra,Pmn);
   }
   define (instr=CMPEQA__s16_Ra_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA__s16_Ra_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for equal - complementary""";
attrs = (ICMP,V7);
# 473 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA__s16_Ra_Pm_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpeqa #%f,%f,%f",s16,Ra,Pmn);
   }


action=
{
   if ( R(R_Src1) == imms ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }
};

}


define (instr=CMPEQA__u5_Ra_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = (lsu,ipu);


   define (instr=CMPEQA__u5_Ra_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA__u5_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for equal""";
attrs = (ICMP,V5);
# 497 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA__u5_Ra_Pn_family(OPCD(OPCD),immu(u5),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpeqa #%f,%f,%f",u5,Ra,Pn);
   }

   define (instr=CMPEQA__u5_Ra_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPEQA__u5_Ra_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Ra(0)),
 (bits(22),Ra(1)),
 (bits(23),Ra(2)),
 (bits(24),Ra(3)),
 (bits(25),Ra(4)),
 (bits(26),u5_t2(0)),
 (bits(27),u5_t2(1)),
 (bits(28),u5_t2(2)),
 (bits(29),u5_t2(3)),
 (bits(30),u5_t2(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for equal""";
attrs = (ICMP,V7);
# 505 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPEQA__u5_Ra_Pn_family(OPCD(OPCD),immu(u5_t2),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpeqa #%f,%f,%f",u5_t2,Ra,Pn);
   }


action=
{
      if (R(R_Src1)==immu) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res);}
};

}

define (instr=CMPGEA_Ra_Rb_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res);
  blk = (lsu,ipu);


   define (instr=CMPGEA_Ra_Rb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGEA_Ra_Rb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for greater or equal""";
attrs = (LCMP,V7);
# 528 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGEA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmpgea %f,%f,%f",Ra,Rb,Pn);
   }
   define (instr=CMPGEA_Ra_Rb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGEA_Ra_Rb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for greater or equal""";
attrs = (LCMP,V7);
# 535 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGEA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmpgea %f,%f,%f",Ra,Rb,Pn);
   }


action=
{
    if (R(R_Src2).signedGE(R(R_Src1))) { set_SR_PR(P_Res); }
    else { clear_SR_PR(P_Res); }
};

}


define (instr=CMPGEA__s16_Ra_Pn_family)
{
  fields = (OPCD,imms,R_Src1,P_Res);
  blk = (lsu,ipu);

   define (instr=CMPGEA__s16_Ra_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGEA__s16_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for greater or equal""";
attrs = (LCMP,V7);
# 558 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGEA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpgea #%f,%f,%f",s16,Ra,Pn);
   }
   define (instr=CMPGEA__s16_Ra_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGEA__s16_Ra_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for greater or equal""";
attrs = (LCMP,V7);
# 565 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGEA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpgea #%f,%f,%f",s16,Ra,Pn);
   }


action=
{
    if (R(R_Src1).signedGE(imms)) { set_SR_PR(P_Res); }
    else { clear_SR_PR(P_Res); }

};

}


define (instr=CMPGTA_Ra_Rb_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res);
   blk = (lsu,ipu);


   define (instr=CMPGTA_Ra_Rb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA_Ra_Rb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for greater""";
attrs = (ICMP,V2);
# 590 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmpgta %f,%f,%f",Ra,Rb,Pn);
   }
   define (instr=CMPGTA_Ra_Rb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA_Ra_Rb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for greater""";
attrs = (ICMP,V7);
# 597 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmpgta %f,%f,%f",Ra,Rb,Pn);
   }


action=
{
      if ( R(R_Src2).signedGT(R(R_Src1)) ) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res); }

};

}


define (instr=CMPGTA_Ra_Rb_Pm_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res,P_Res2);
  blk = (lsu,ipu);

   define (instr=CMPGTA_Ra_Rb_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA_Ra_Rb_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for greater or equal - complementary""";
attrs = (ICMP,V7);
# 621 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA_Ra_Rb_Pm_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpgta %f,%f,%f",Ra,Rb,Pmn);
   }
   define (instr=CMPGTA_Ra_Rb_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA_Ra_Rb_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for greater or equal - complementary""";
attrs = (ICMP,V7);
# 628 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA_Ra_Rb_Pm_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpgta %f,%f,%f",Ra,Rb,Pmn);
   }

action=
{
   if ( R(R_Src2).signedGT(R(R_Src1)) ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}


define (instr=CMPGTA__s16_Ra_Pn_family)
{
  fields = (OPCD,imms,R_Src1,P_Res);
   blk = (lsu,ipu);


   define (instr=CMPGTA__s16_Ra_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA__s16_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for greater""";
attrs = (ICMP,V5);
# 652 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpgta #%f,%f,%f",s16,Ra,Pn);
   }
   define (instr=CMPGTA__s16_Ra_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA__s16_Ra_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for greater""";
attrs = (ICMP,V7);
# 659 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpgta #%f,%f,%f",s16,Ra,Pn);
   }


action=
{
      if ( R(R_Src1).signedGT(imms) ) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res);}
};

}

define (instr=CMPGTA__s16_Ra_Pm_Pn_family)
{
  fields = (OPCD,imms,R_Src1,P_Res,P_Res2);
   blk = (lsu,ipu);


   define (instr=CMPGTA__s16_Ra_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA__s16_Ra_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for greater - complementary""";
attrs = (ICMP,V7);
# 682 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA__s16_Ra_Pm_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpgta #%f,%f,%f",s16,Ra,Pmn);
   }
   define (instr=CMPGTA__s16_Ra_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA__s16_Ra_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for greater - complementary""";
attrs = (ICMP,V7);
# 689 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA__s16_Ra_Pm_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmpgta #%f,%f,%f",s16,Ra,Pmn);
   }


action=
{
   if ( R(R_Src1).signedGT(imms) ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }
};

}

define (instr=CMPGTA__u5_Ra_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = (lsu,ipu);


   define (instr=CMPGTA__u5_Ra_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA__u5_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for greater""";
attrs = (ICMP,V5);
# 712 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA__u5_Ra_Pn_family(OPCD(OPCD),immu(u5),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpgta #%f,%f,%f",u5,Ra,Pn);
   }
   define (instr=CMPGTA__u5_Ra_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPGTA__u5_Ra_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Ra(0)),
 (bits(22),Ra(1)),
 (bits(23),Ra(2)),
 (bits(24),Ra(3)),
 (bits(25),Ra(4)),
 (bits(26),u5_t2(0)),
 (bits(27),u5_t2(1)),
 (bits(28),u5_t2(2)),
 (bits(29),u5_t2(3)),
 (bits(30),u5_t2(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for greater""";
attrs = (ICMP,V7);
# 719 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPGTA__u5_Ra_Pn_family(OPCD(OPCD),immu(u5_t2),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpgta #%f,%f,%f",u5_t2,Ra,Pn);
   }


action=
{
   if ( R(R_Src1).signedGT(immu) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res);}
};

}

define (instr=CMPHEA_Ra_Rb_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res);
   blk = (lsu,ipu);

   define (instr=CMPHEA_Ra_Rb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPHEA_Ra_Rb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unsigned compare for high or equal""";
attrs = (LCMP,V7);
# 741 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPHEA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmphea %f,%f,%f",Ra,Rb,Pn);
   }
   define (instr=CMPHEA_Ra_Rb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPHEA_Ra_Rb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unsigned compare for high or equal""";
attrs = (LCMP,V7);
# 748 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPHEA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmphea %f,%f,%f",Ra,Rb,Pn);
   }


action=
{
   bits<33> val1 = zeroExtend(R(R_Src2), 32 +1);
   bits<33> val2 = zeroExtend(R(R_Src1), 32 +1);
   if ( val1.signedGE(val2) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}


define (instr=CMPHIA_Ra_Rb_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res);
   blk = (lsu,ipu);


   define (instr=CMPHIA_Ra_Rb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPHIA_Ra_Rb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unsigned compare for high""";
# 775 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPHIA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmphia %f,%f,%f",Ra,Rb,Pn);
   }
   define (instr=CMPHIA_Ra_Rb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPHIA_Ra_Rb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unsigned compare for high""";
attrs = (ICMP,V7);
# 782 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPHIA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmphia %f,%f,%f",Ra,Rb,Pn);
   }


action=
{
      bits<33> val1 = zeroExtend(R(R_Src2), 32 +1);
      bits<33> val2 = zeroExtend(R(R_Src1), 32 +1);
      if ( val1.signedGT(val2) ) { set_SR_PR(P_Res); }
      else { clear_SR_PR(P_Res); }

};

}


define (instr=CMPHIA_Ra_Rb_Pm_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res,P_Res2);
  blk = (lsu,ipu);

   define (instr=CMPHIA_Ra_Rb_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPHIA_Ra_Rb_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unsigned compare for higher or equal - complementary""";
attrs = (ICMP,V7);
# 808 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPHIA_Ra_Rb_Pm_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmphia %f,%f,%f",Ra,Rb,Pmn);
   }
   define (instr=CMPHIA_Ra_Rb_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPHIA_Ra_Rb_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Unsigned compare for high - complementary""";
attrs = (LCMP,V7);
# 815 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPHIA_Ra_Rb_Pm_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "cmphia %f,%f,%f",Ra,Rb,Pmn);
   }

action=
{
   bits<33> val1 = zeroExtend(R(R_Src2), 32 +1);
   bits<33> val2 = zeroExtend(R(R_Src1), 32 +1);
   if ( val1.signedGT(val2) ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2);}


};

}



define (instr=CMPLEA__s16_Ra_Pn_family)
{
  fields = (OPCD,imms,R_Src1,P_Res);
   blk = (lsu,ipu);

   define (instr=CMPLEA__s16_Ra_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLEA__s16_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for less or equal""";
attrs = (LCMP,V7);
# 842 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPLEA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmplea #%f,%f,%f",s16,Ra,Pn);
   }
   define (instr=CMPLEA__s16_Ra_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLEA__s16_Ra_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for less or equal""";
attrs = (LCMP,V7);
# 849 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPLEA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmplea #%f,%f,%f",s16,Ra,Pn);
   }


action=
{
   if ( R(R_Src1).signedLE(imms) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res);}
};

}

define (instr=CMPLTA__s16_Ra_Pn_family)
{
  fields = (OPCD,imms,R_Src1,P_Res);
   blk = (lsu,ipu);

   define (instr=CMPLTA__s16_Ra_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLTA__s16_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for less""";
attrs = (LCMP,V7);
# 871 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPLTA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmplta #%f,%f,%f",s16,Ra,Pn);
   }
   define (instr=CMPLTA__s16_Ra_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPLTA__s16_Ra_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for less""";
attrs = (LCMP,V7);
# 878 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPLTA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmplta #%f,%f,%f",s16,Ra,Pn);
   }

action=
{
   if ( R(R_Src1).signedLT(imms) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res);}
};

}

define (instr=CMPNEA_Ra_Rb_Pn_family)
{
  fields = (OPCD,R_Src1,R_Src2,P_Res);
   blk = (lsu,ipu);

   define (instr=CMPNEA_Ra_Rb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNEA_Ra_Rb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for not equal""";
attrs = (LCMP,V7);
# 899 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPNEA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmpnea %f,%f,%f",Ra,Rb,Pn);
   }
   define (instr=CMPNEA_Ra_Rb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNEA_Ra_Rb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Compare for not equal""";
attrs = (LCMP,V7);
# 906 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPNEA_Ra_Rb_Pn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),P_Res(Pn));
      syntax = ( "cmpnea %f,%f,%f",Ra,Rb,Pn);
   }


action=
{
   if ( R(R_Src1)!=R(R_Src2) ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res);}
};

}

define (instr=CMPNEA__s16_Ra_Pn_family)
{
  fields = (OPCD,imms,R_Src1,P_Res);
   blk = (lsu,ipu);

   define (instr=CMPNEA__s16_Ra_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNEA__s16_Ra_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for not equal""";
attrs = (ICMP,V7);
# 928 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPNEA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpnea #%f,%f,%f",s16,Ra,Pn);
   }
   define (instr=CMPNEA__s16_Ra_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/CMPNEA__s16_Ra_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Compare for not equal""";
attrs = (ICMP,V7);
# 935 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = CMPNEA__s16_Ra_Pn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "cmpnea #%f,%f,%f",s16,Ra,Pn);
   }

action=
{
   if ( R(R_Src1)!=imms ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res);}
};

}



define (instr=DECEQA_Rn_Pm_Pn_family)
{
  fields = (OPCD,R_Src1,R_Res,P_Res,P_Res2);
    blk = (lsu,ipu);


   define (instr=DECEQA_Rn_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECEQA_Rn_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for equal to zero - complementary""";
attrs = (ICMP,V7);
# 959 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECEQA_Rn_Pm_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "deceqa %f,%f",Rn,Pmn);
   }
   define (instr=DECEQA_Rn_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECEQA_Rn_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for equal to zero - complementary""";
attrs = (ICMP,V7);
# 966 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECEQA_Rn_Pm_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "deceqa %f,%f",Rn,Pmn);
   }


action=
{
   bits<32> val = R(R_Src1)-1;
   R(R_Res) = val;
   if (val == 0 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}

define (instr=DECEQA_Rn_Pn_family)
{
  fields = (OPCD,R_Src1,R_Res,P_Res);
    blk = (lsu,ipu);


   define (instr=DECEQA_Rn_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECEQA_Rn_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for equal to zero""";
attrs = (ICMP,V2);
# 992 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECEQA_Rn_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pn));
      syntax = ( "deceqa %f,%f",Rn,Pn);
   }
   define (instr=DECEQA_Rn_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECEQA_Rn_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for equal to zero""";
attrs = (ICMP,V7);
# 999 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECEQA_Rn_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pn));
      syntax = ( "deceqa %f,%f",Rn,Pn);
   }


action=
{
   bits<32> val = R(R_Src1)-1;
   R(R_Res) = val;
   if (val == 0 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}

define (instr=DECGEA_Rn_Pm_Pn_family)
{
  fields = (OPCD,R_Src1,R_Res,P_Res,P_Res2);
    blk = (lsu,ipu);


   define (instr=DECGEA_Rn_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECGEA_Rn_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for greater or equal to zero - complementary""";
attrs = (ICMP,V7);
# 1025 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECGEA_Rn_Pm_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "decgea %f,%f",Rn,Pmn);
   }
   define (instr=DECGEA_Rn_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECGEA_Rn_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for greater or equal to zero - complementary""";
attrs = (ICMP,V7);
# 1032 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECGEA_Rn_Pm_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "decgea %f,%f",Rn,Pmn);
   }


action=
{
    bits<32> orig_val = R(R_Src1);
    bits<32> val = R(R_Src1)-1;
    R(R_Res) = val;
    if (val.signedGE(0) && orig_val!=0x80000000 ) {
       set_SR_PR(P_Res);
       clear_SR_PR(P_Res2);
    }
    else {
       clear_SR_PR(P_Res);
       set_SR_PR(P_Res2);
    }

};

}

define (instr=DECGEA_Rn_Pn_family)
{
  fields = (OPCD,R_Src1,R_Res,P_Res);
    blk = (lsu,ipu);


   define (instr=DECGEA_Rn_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECGEA_Rn_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for greater than zero""";
attrs = (ICMP,V2);
# 1065 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECGEA_Rn_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pn));
      syntax = ( "decgea %f,%f",Rn,Pn);
   }
   define (instr=DECGEA_Rn_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECGEA_Rn_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for greater than zero""";
attrs = (ICMP,V7);
# 1072 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECGEA_Rn_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pn));
      syntax = ( "decgea %f,%f",Rn,Pn);
   }


action=
{
    bits<32> orig_val = R(R_Src1);
    bits<32> val = R(R_Src1)-1;
    R(R_Res) = val;
    if (val.signedGE(0) && orig_val!=0x80000000 ) {
       set_SR_PR(P_Res);
    }
    else {
       clear_SR_PR(P_Res);
    }

};

}

define (instr=DECNEA_Rn_Pn_family)
{
  fields = (OPCD,R_Src1,R_Res,P_Res);
    blk = (lsu,ipu);


   define (instr=DECNEA_Rn_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECNEA_Rn_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for not equal to zero""";
attrs = (LCMP,V7);
# 1103 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECNEA_Rn_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pn));
      syntax = ( "decnea %f,%f",Rn,Pn);
   }
   define (instr=DECNEA_Rn_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/DECNEA_Rn_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Rn(0)),
 (bits(27),Rn(1)),
 (bits(28),Rn(2)),
 (bits(29),Rn(3)),
 (bits(30),Rn(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Decrement and compare for not equal to zero""";
attrs = (LCMP,V7);
# 1110 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = DECNEA_Rn_Pn_family(OPCD(OPCD),R_Src1(Rn),R_Res(Rn),P_Res(Pn));
      syntax = ( "decnea %f,%f",Rn,Pn);
   }


action=
{
   bits<32> val = R(R_Src1)-1;
   R(R_Res) = val;
   if (val != 0 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}


define (instr=LSRRA__u5_Ra_Rn_family)
{
  fields = (OPCD,immu,R_Src1,R_Res);
  blk = (lsu,ipu);

   define (instr=LSRRA__u5_Ra_Rn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRRA__u5_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),u5(0)),
 (bits(22),u5(1)),
 (bits(23),u5(2)),
 (bits(24),u5(3)),
 (bits(25),u5(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit logical shift right""";
attrs = (LLOG,V7);
# 1136 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = LSRRA__u5_Ra_Rn_family(OPCD(OPCD),immu(u5),R_Src1(Ra),R_Res(Rn));
      syntax = ( "lsrra #%f,%f,%f",u5,Ra,Rn);
   }
   define (instr=LSRRA__u5_Ra_Rn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/LSRRA__u5_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Ra(0)),
 (bits(22),Ra(1)),
 (bits(23),Ra(2)),
 (bits(24),Ra(3)),
 (bits(25),Ra(4)),
 (bits(26),u5_t2(0)),
 (bits(27),u5_t2(1)),
 (bits(28),u5_t2(2)),
 (bits(29),u5_t2(3)),
 (bits(30),u5_t2(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Multi-bit logical shift right""";
attrs = (LLOG,V7);
# 1143 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = LSRRA__u5_Ra_Rn_family(OPCD(OPCD),immu(u5_t2),R_Src1(Ra),R_Res(Rn));
      syntax = ( "lsrra #%f,%f,%f",u5_t2,Ra,Rn);
   }


action=
{
   R(R_Res) = R(R_Src1) >> immu;

};

}


define (instr=MAXA_Ra_Rb_Rn_family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Res);
  blk = (lsu,ipu);

   define (instr=MAXA_Ra_Rb_Rn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAXA_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Maximum value""";
attrs = (LARIT,V7);
# 1166 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MAXA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "maxa %f,%f,%f",Ra,Rb,Rn);
   }
   define (instr=MAXA_Ra_Rb_Rn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MAXA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Maximum value""";
attrs = (LARIT,V7);
# 1173 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MAXA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "maxa %f,%f,%f",Ra,Rb,Rn);
   }


action=
{
   if ( (R(R_Src1)).signedGT( R(R_Src2) ) ) {
      R(R_Res) = R(R_Src1);
   } else {
      R(R_Res) = R(R_Src2);
   }
};

}


define (instr=MINA_Ra_Rb_Rn_family)
{
  fields = (OPCD,R_Src1,R_Src2,R_Res);
  blk = (lsu,ipu);

   define (instr=MINA_Ra_Rb_Rn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MINA_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Minimum value""";
attrs = (LARIT,V7);
# 1199 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MINA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "mina %f,%f,%f",Ra,Rb,Rn);
   }
   define (instr=MINA_Ra_Rb_Rn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MINA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Minimum value""";
attrs = (LARIT,V7);
# 1206 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MINA_Ra_Rb_Rn_family(OPCD(OPCD),R_Src1(Ra),R_Src2(Rb),R_Res(Rn));
      syntax = ( "mina %f,%f,%f",Ra,Rb,Rn);
   }


action=
{
   if ( (R(R_Src1)).signedLT( R(R_Src2) ) ) {
       R(R_Res) = R(R_Src1);
    } else {
       R(R_Res) = R(R_Src2);
    }
};

}


define (instr=MOVE_L_Df_Da_family)
{

   fields = (OPCD, Src1, Res);
   blk = (lsu,ipu);




define (instr=MOVE_L_Df_Da)
{
  blk = lsu;

  alias = MOVE_L_Df_Da_family(OPCD(OPCD), Src1(uuu), Res(JJJ));
}
define (instr=MOVE_L_Da_Dn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Da(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a D register to another D register (32 bits)""";
attrs = (LMREG,V2);
# 1242 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVE_L_Df_Da_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "move.l %f,%f",Da,Dn);
}

define (instr=MOVE_L_Da_Dn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da_Dn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),Dn(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(1)),
 (bits(17),Dn(2)),
 (bits(18),Dn(3)),
 (bits(19),Dn(4)),
 (bits(20),Dn(5)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Da(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a D register to another D register (32 bits)""";
attrs = (LMREG,V7);
# 1250 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVE_L_Df_Da_family(OPCD(OPCD), Src1(Da), Res(Dn));
  syntax = ( "move.l %f,%f",Da,Dn);
}

   action = {
      D(Res) = signExtend( D(Src1)(31,0), 40 );



   };

}



define (instr=MOVEU_W__u16_Db_L_family)
{

  fields = (OPCD, immu, Res);



  blk = (lsu,ipu);


define (instr=MOVEU_W__u16_Db_L)
{
  blk = lsu;

  alias = MOVEU_W__u16_Db_L_family(OPCD(OPCD), immu(u16), Res(jjj));
}
define (instr=MOVEU_W__u16_Dn_L)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__u16_Dn_L.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned immediate to the low portion of D""";
attrs = (LMREG,V2);
# 1285 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVEU_W__u16_Db_L_family(OPCD(OPCD), immu(u16), Res(Dn));
  syntax = ( "moveu.w #%f,%f.l",u16,Dn);
}
define (instr=MOVEU_W__u16_Dn_L_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__u16_Dn_L_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),Dn(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(1)),
 (bits(17),Dn(2)),
 (bits(18),Dn(3)),
 (bits(19),Dn(4)),
 (bits(20),Dn(5)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned immediate to the low portion of D""";
attrs = (LMREG,V7);
# 1292 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVEU_W__u16_Db_L_family(OPCD(OPCD), immu(u16), Res(Dn));
  syntax = ( "moveu.w #%f,%f.l",u16,Dn);
}


action=
{




 D(Res).L = immu(15,0);



};

}



define (instr=MOVEU_W__u16_Db_H_family)
{

  fields = (OPCD, immu, Res);



  blk = (lsu,ipu);


define (instr=MOVEU_W__u16_Db_H)
{
  blk = lsu;

  alias = MOVEU_W__u16_Db_H_family(OPCD(OPCD), immu(u16), Res(jjj));
}
define (instr=MOVEU_W__u16_Dn_H)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__u16_Dn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned immediate to the high portion of D""";
attrs = (LMREG,V2);
# 1333 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVEU_W__u16_Db_H_family(OPCD(OPCD), immu(u16), Res(Dn));
  syntax = ( "moveu.w #%f,%f.h",u16,Dn);
}
define (instr=MOVEU_W__u16_Dn_H_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVEU_W__u16_Dn_H_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),Dn(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(1)),
 (bits(17),Dn(2)),
 (bits(18),Dn(3)),
 (bits(19),Dn(4)),
 (bits(20),Dn(5)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned immediate to the high portion of D""";
attrs = (LMREG,V7);
# 1340 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVEU_W__u16_Db_H_family(OPCD(OPCD), immu(u16), Res(Dn));
  syntax = ( "moveu.w #%f,%f.h",u16,Dn);
}



action=
{




 D(Res).H = immu(15,0);



};

}



define (instr=MOVE_L_Df_Rq_family)
{

   fields = (OPCD, Src1, R_Res);
   blk = (lsu,ipu);





define (instr=MOVE_L_Df_Rq)
{
  blk = lsu;

  alias = MOVE_L_Df_Rq_family(OPCD(OPCD), Src1(uuu), R_Res(qqq));
}

define (instr=MOVE_L_Da_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Da(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a D register to an R register""";
attrs = (LMREG,V2);
# 1383 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
   alias = MOVE_L_Df_Rq_family(OPCD(OPCD),Src1(Da),R_Res(Rn));
   syntax = ( "move.l %f,%f",Da,Rn);
}
define (instr=MOVE_L_Da_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Da_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),Da(0)),
 (bits(26),Da(1)),
 (bits(27),Da(2)),
 (bits(28),Da(3)),
 (bits(29),Da(4)),
 (bits(30),Da(5)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a D register to an R register""";
attrs = (LMREG,V7);
# 1390 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
   alias = MOVE_L_Df_Rq_family(OPCD(OPCD),Src1(Da),R_Res(Rn));
   syntax = ( "move.l %f,%f",Da,Rn);
}



   action = {
      R(R_Res) = D(Src1)(31,0);
   };

}


define (instr=MOVE_L_Rq_Df_family)
{

  fields = (OPCD, R_Src1, Res);
  blk = (lsu,ipu);





define (instr=MOVE_L_Rq_Df)
{
  blk = lsu;

  alias = MOVE_L_Rq_Df_family(OPCD(OPCD), R_Src1(qqq), Res(uuu));
}
define (instr=MOVE_L_Ra_Dn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra_Dn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an R register to a D register""";
attrs = (LMREG,V2);
# 1423 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVE_L_Rq_Df_family(OPCD(OPCD), R_Src1(Ra), Res(Dn));
  syntax = ( "move.l %f,%f",Ra,Dn);
}
define (instr=MOVE_L_Ra_Dn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L_Ra_Dn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),Dn(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(1)),
 (bits(17),Dn(2)),
 (bits(18),Dn(3)),
 (bits(19),Dn(4)),
 (bits(20),Dn(5)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move an R register to a D register""";
attrs = (LMREG,V7);
# 1430 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVE_L_Rq_Df_family(OPCD(OPCD), R_Src1(Ra), Res(Dn));
  syntax = ( "move.l %f,%f",Ra,Dn);
}


   action = {
      D(Res) = signExtend( R(R_Src1)(31,0), 40);



   };

}


define (instr=MOVE_L__s32_Da_family)
{

  fields = (OPCD, imms, Res);
   blk = (lsu,ipu);




define (instr=MOVE_L__s32_Da)
{
  blk = lsu;

  alias = MOVE_L__s32_Da_family(OPCD(OPCD), imms(s32), Res(JJJ));
}
define (instr=MOVE_L__s32_Dn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__s32_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),s32_t4(0)),
 (bits(5),s32_t4(1)),
 (bits(6),s32_t4(2)),
 (bits(7),s32_t4(3)),
 (bits(8),s32_t4(4)),
 (bits(9),s32_t4(5)),
 (bits(10),s32_t4(6)),
 (bits(11),s32_t4(7)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),s32_t4(8)),
 (bits(23),s32_t4(9)),
 (bits(24),s32_t4(10)),
 (bits(25),s32_t4(11)),
 (bits(26),s32_t4(12)),
 (bits(27),s32_t4(13)),
 (bits(28),s32_t4(14)),
 (bits(29),s32_t4(15)),
 (bits(30),s32_t4(16)),
 (bits(31),b0),
 (bits(32),s32_t4(17)),
 (bits(33),s32_t4(18)),
 (bits(34),s32_t4(19)),
 (bits(35),s32_t4(20)),
 (bits(36),s32_t4(21)),
 (bits(37),s32_t4(22)),
 (bits(38),s32_t4(23)),
 (bits(39),s32_t4(24)),
 (bits(40),s32_t4(25)),
 (bits(41),s32_t4(26)),
 (bits(42),s32_t4(27)),
 (bits(43),s32_t4(28)),
 (bits(44),s32_t4(29)),
 (bits(45),s32_t4(30)),
 (bits(46),s32_t4(31)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an immediate to a D register""";
attrs = (LMREG,V2);
# 1464 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVE_L__s32_Da_family(OPCD(OPCD), imms(s32_t4), Res(Dn));
  syntax = ( "move.l #%f,%f",s32_t4,Dn);
}
define (instr=MOVE_L__s32_Dn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__s32_Dn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b1),
 (bits(4),s32_t2(0)),
 (bits(5),s32_t2(1)),
 (bits(6),s32_t2(2)),
 (bits(7),s32_t2(3)),
 (bits(8),s32_t2(4)),
 (bits(9),s32_t2(5)),
 (bits(10),s32_t2(6)),
 (bits(11),Dn(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(1)),
 (bits(17),Dn(2)),
 (bits(18),Dn(3)),
 (bits(19),Dn(4)),
 (bits(20),Dn(5)),
 (bits(21),s32_t2(7)),
 (bits(22),s32_t2(8)),
 (bits(23),s32_t2(9)),
 (bits(24),s32_t2(10)),
 (bits(25),s32_t2(11)),
 (bits(26),s32_t2(12)),
 (bits(27),s32_t2(13)),
 (bits(28),s32_t2(14)),
 (bits(29),s32_t2(15)),
 (bits(30),s32_t2(16)),
 (bits(31),b0),
 (bits(32),s32_t2(17)),
 (bits(33),s32_t2(18)),
 (bits(34),s32_t2(19)),
 (bits(35),s32_t2(20)),
 (bits(36),s32_t2(21)),
 (bits(37),s32_t2(22)),
 (bits(38),s32_t2(23)),
 (bits(39),s32_t2(24)),
 (bits(40),s32_t2(25)),
 (bits(41),s32_t2(26)),
 (bits(42),s32_t2(27)),
 (bits(43),s32_t2(28)),
 (bits(44),s32_t2(29)),
 (bits(45),s32_t2(30)),
 (bits(46),s32_t2(31)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an immediate to a D register""";
attrs = (LMREG,V7);
# 1471 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVE_L__s32_Da_family(OPCD(OPCD), imms(s32_t2), Res(Dn));
  syntax = ( "move.l #%f,%f",s32_t2,Dn);
}


   action = {




      D(Res) = signExtend(imms,40);



   };

}

define (instr=MOVE_L__u32_CTRL_family)
{
  fields = (OPCD,immu,CTRL);
   blk = (lsu,ipu);

   define (instr=MOVE_L__u32_CTRL)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__u32_CTRL.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),u32(0)),
 (bits(6),u32(1)),
 (bits(7),u32(2)),
 (bits(8),u32(3)),
 (bits(9),u32(4)),
 (bits(10),u32(5)),
 (bits(11),u32(6)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),u32(7)),
 (bits(22),u32(8)),
 (bits(23),u32(9)),
 (bits(24),u32(10)),
 (bits(25),u32(11)),
 (bits(26),u32(12)),
 (bits(27),u32(13)),
 (bits(28),u32(14)),
 (bits(29),u32(15)),
 (bits(30),u32(16)),
 (bits(31),b0),
 (bits(32),u32(17)),
 (bits(33),u32(18)),
 (bits(34),u32(19)),
 (bits(35),u32(20)),
 (bits(36),u32(21)),
 (bits(37),u32(22)),
 (bits(38),u32(23)),
 (bits(39),u32(24)),
 (bits(40),u32(25)),
 (bits(41),u32(26)),
 (bits(42),u32(27)),
 (bits(43),u32(28)),
 (bits(44),u32(29)),
 (bits(45),u32(30)),
 (bits(46),u32(31)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned immediate to a control register""";
attrs = (IMREG,V2);
# 1497 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      blk = lsu;
      alias = MOVE_L__u32_CTRL_family(OPCD(OPCD),immu(u32),CTRL(CTRL));
      syntax = ( "move.l #%f,%f",u32,CTRL);
   }

   define (instr=MOVE_L__u32_CTRL_ipu)
   {
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__u32_CTRL_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),u32(0)),
 (bits(6),u32(1)),
 (bits(7),u32(2)),
 (bits(8),u32(3)),
 (bits(9),u32(4)),
 (bits(10),u32(5)),
 (bits(11),u32(6)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),u32(7)),
 (bits(22),u32(8)),
 (bits(23),u32(9)),
 (bits(24),u32(10)),
 (bits(25),u32(11)),
 (bits(26),u32(12)),
 (bits(27),u32(13)),
 (bits(28),u32(14)),
 (bits(29),u32(15)),
 (bits(30),u32(16)),
 (bits(31),b0),
 (bits(32),u32(17)),
 (bits(33),u32(18)),
 (bits(34),u32(19)),
 (bits(35),u32(20)),
 (bits(36),u32(21)),
 (bits(37),u32(22)),
 (bits(38),u32(23)),
 (bits(39),u32(24)),
 (bits(40),u32(25)),
 (bits(41),u32(26)),
 (bits(42),u32(27)),
 (bits(43),u32(28)),
 (bits(44),u32(29)),
 (bits(45),u32(30)),
 (bits(46),u32(31)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an unsigned immediate to a control register""";
attrs = (IMREG,V7);
# 1505 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      blk = ipu;
      alias = MOVE_L__u32_CTRL_family(OPCD(OPCD),immu(u32),CTRL(CTRL));
      syntax = ( "move.l #%f,%f",u32,CTRL);
   }

action=
{
   if ( ((CTRL==10) || (CTRL==12)) )
      {
  if (IsUserMode()) {
     EMR_LOW = true;
     EMR.ILPR=1;
     raiseException(Privelege);
  } else {
     CtrlTable(CTRL) = immu;
  }
      }
      else {
  CtrlTable(CTRL) = immu;
      }
};

}


define (instr=MOVE_L__s32_Rq_family)
{

   fields = (OPCD, imms, R_Res);
   blk = (lsu,ipu);





define (instr=MOVE_L__s32_Rq)
{
  blk = lsu;

  alias = MOVE_L__s32_Rq_family(OPCD(OPCD), imms(s32), R_Res(qqq));
}
define (instr=MOVE_L__s32_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__s32_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),s32_t1(0)),
 (bits(6),s32_t1(1)),
 (bits(7),s32_t1(2)),
 (bits(8),s32_t1(3)),
 (bits(9),s32_t1(4)),
 (bits(10),s32_t1(5)),
 (bits(11),s32_t1(6)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),s32_t1(7)),
 (bits(22),s32_t1(8)),
 (bits(23),s32_t1(9)),
 (bits(24),s32_t1(10)),
 (bits(25),s32_t1(11)),
 (bits(26),s32_t1(12)),
 (bits(27),s32_t1(13)),
 (bits(28),s32_t1(14)),
 (bits(29),s32_t1(15)),
 (bits(30),s32_t1(16)),
 (bits(31),b0),
 (bits(32),s32_t1(17)),
 (bits(33),s32_t1(18)),
 (bits(34),s32_t1(19)),
 (bits(35),s32_t1(20)),
 (bits(36),s32_t1(21)),
 (bits(37),s32_t1(22)),
 (bits(38),s32_t1(23)),
 (bits(39),s32_t1(24)),
 (bits(40),s32_t1(25)),
 (bits(41),s32_t1(26)),
 (bits(42),s32_t1(27)),
 (bits(43),s32_t1(28)),
 (bits(44),s32_t1(29)),
 (bits(45),s32_t1(30)),
 (bits(46),s32_t1(31)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an immediate to an R register""";
attrs = (LMREG,V2);
# 1550 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVE_L__s32_Rq_family(OPCD(OPCD), imms(s32_t1), R_Res(Rn));
  syntax = ( "move.l #%f,%f",s32_t1,Rn);
}
define (instr=MOVE_L__s32_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_L__s32_Rn_ipu.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),s32_t1(0)),
 (bits(6),s32_t1(1)),
 (bits(7),s32_t1(2)),
 (bits(8),s32_t1(3)),
 (bits(9),s32_t1(4)),
 (bits(10),s32_t1(5)),
 (bits(11),s32_t1(6)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),s32_t1(7)),
 (bits(22),s32_t1(8)),
 (bits(23),s32_t1(9)),
 (bits(24),s32_t1(10)),
 (bits(25),s32_t1(11)),
 (bits(26),s32_t1(12)),
 (bits(27),s32_t1(13)),
 (bits(28),s32_t1(14)),
 (bits(29),s32_t1(15)),
 (bits(30),s32_t1(16)),
 (bits(31),b0),
 (bits(32),s32_t1(17)),
 (bits(33),s32_t1(18)),
 (bits(34),s32_t1(19)),
 (bits(35),s32_t1(20)),
 (bits(36),s32_t1(21)),
 (bits(37),s32_t1(22)),
 (bits(38),s32_t1(23)),
 (bits(39),s32_t1(24)),
 (bits(40),s32_t1(25)),
 (bits(41),s32_t1(26)),
 (bits(42),s32_t1(27)),
 (bits(43),s32_t1(28)),
 (bits(44),s32_t1(29)),
 (bits(45),s32_t1(30)),
 (bits(46),s32_t1(31)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Move an immediate to an R register""";
attrs = (LMREG,V7);
# 1557 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = MOVE_L__s32_Rq_family(OPCD(OPCD), imms(s32_t1), R_Res(Rn));
  syntax = ( "move.l #%f,%f",s32_t1,Rn);
}


   action = {




      R(R_Res) = imms;
   };

}



define (instr=MOVE_W__s10_Dn_family)
{
  fields = (OPCD,imms,Res);
   blk = (lsu,ipu);

   define (instr=MOVE_W__s10_Dn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__s10_Dn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),s10_t1(0)),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(0)),
 (bits(17),Dn(1)),
 (bits(18),Dn(2)),
 (bits(19),Dn(3)),
 (bits(20),Dn(4)),
 (bits(21),Dn(5)),
 (bits(22),s10_t1(1)),
 (bits(23),s10_t1(2)),
 (bits(24),s10_t1(3)),
 (bits(25),s10_t1(4)),
 (bits(26),s10_t1(5)),
 (bits(27),s10_t1(6)),
 (bits(28),s10_t1(7)),
 (bits(29),s10_t1(8)),
 (bits(30),s10_t1(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a short immediate to D""";
attrs = (LMREG,V2);
# 1583 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MOVE_W__s10_Dn_family(OPCD(OPCD),imms(s10_t1),Res(Dn));
      syntax = ( "move.w #%f,%f",s10_t1,Dn);
   }
   define (instr=MOVE_W__s10_Dn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__s10_Dn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),Dn(0)),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dn(1)),
 (bits(17),Dn(2)),
 (bits(18),Dn(3)),
 (bits(19),Dn(4)),
 (bits(20),Dn(5)),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a short immediate to D""";
attrs = (LMREG,V7);
# 1590 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MOVE_W__s10_Dn_family(OPCD(OPCD),imms(s10),Res(Dn));
      syntax = ( "move.w #%f,%f",s10,Dn);
   }


action=
{
   D(Res) = signExtend(imms,40);

};

}

define (instr=MOVE_W__s10_Rn_family)
{
  fields = (OPCD,imms,R_Res);
   blk = (lsu,ipu);

   define (instr=MOVE_W__s10_Rn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__s10_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a short immediate to R""";
attrs = (LMREG,V2);
# 1612 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MOVE_W__s10_Rn_family(OPCD(OPCD),imms(s10),R_Res(Rn));
      syntax = ( "move.w #%f,%f",s10,Rn);
   }
   define (instr=MOVE_W__s10_Rn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__s10_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a short immediate to R""";
attrs = (LMREG,V7);
# 1619 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MOVE_W__s10_Rn_family(OPCD(OPCD),imms(s10),R_Res(Rn));
      syntax = ( "move.w #%f,%f",s10,Rn);
   }


action=
{
   R(R_Res) = signExtend(imms,32);
};

}

define (instr=MOVE_W__s10_Rn_H_family)
{
  fields = (OPCD,imms,R_Res);
   blk = (lsu,ipu);

   define (instr=MOVE_W__s10_Rn_H)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__s10_Rn_H.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a short immediate to the high portion of R""";
attrs = (LMREG,V7);
# 1640 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MOVE_W__s10_Rn_H_family(OPCD(OPCD),imms(s10),R_Res(Rn));
      syntax = ( "move.w #%f,%f.h",s10,Rn);
   }
   define (instr=MOVE_W__s10_Rn_H_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/MOVE_W__s10_Rn_H_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),s10(0)),
 (bits(22),s10(1)),
 (bits(23),s10(2)),
 (bits(24),s10(3)),
 (bits(25),s10(4)),
 (bits(26),s10(5)),
 (bits(27),s10(6)),
 (bits(28),s10(7)),
 (bits(29),s10(8)),
 (bits(30),s10(9)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Move a short immediate to the high portion of R""";
attrs = (LMREG,V7);
# 1647 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = MOVE_W__s10_Rn_H_family(OPCD(OPCD),imms(s10),R_Res(Rn));
      syntax = ( "move.w #%f,%f.h",s10,Rn);
   }


action=
{
   R(R_Res).H = imms(15,0);
};

}



define (instr=NEGA_Ra_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);
  blk = (lsu,ipu);


define (instr=NEGA_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NEGA_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Negate""";
attrs = (LLOG,V7);
# 1672 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = NEGA_Ra_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "nega %f,%f",Ra,Rn);
}
define (instr=NEGA_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/NEGA_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Negate""";
attrs = (LARIT,V7);
# 1679 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = NEGA_Ra_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "nega %f,%f",Ra,Rn);
}


action=
{
   bits <33> res = (sbits<33>)(0x0) - (sbits<33>)R(R_Src1);
   R(R_Res) = res(31,0);
};

}



define (instr=ora_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = (lsu,ipu);





define (instr=ORA_Rq_Rn)
{
  blk = lsu;

}
define (instr=ORA_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ORA_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise OR""";
attrs = (LLOG,V6);
# 1712 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ora_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "ora %f,%f,%f",Ra,Rb,Rn);
}
define (instr=ORA_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ORA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise OR""";
attrs = (LLOG,V7);
# 1719 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ora_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "ora %f,%f,%f",Ra,Rb,Rn);
}



define (instr=ORA_Rq_Rr_Rn)
{
  blk = lsu;

}

action=
{
   R(R_Res) = R(R_Src1) | R(R_Src2);
};

}


define (instr=eora_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = (lsu,ipu);





define (instr=EORA_Rq_Rn)
{

  blk = lsu;

}
define (instr=EORA_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EORA_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise exclusive OR""";
attrs = (LLOG,V6);
# 1758 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = eora_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "eora %f,%f,%f",Ra,Rb,Rn);
}
define (instr=EORA_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/EORA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwise exclusive OR""";
attrs = (LLOG,V7);
# 1765 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = eora_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "eora %f,%f,%f",Ra,Rb,Rn);
}


define (instr=EORA_Rq_Rr_Rn)
{
  blk = lsu;

}

action=
{
   R(R_Res) = R(R_Src1) ^ R(R_Src2);
};

}



define (instr=anda_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = (lsu,ipu);





define (instr=ANDA_Rq_Rr_Rn)
{
  blk = lsu;

}

define (instr=ANDA_Rq_Rn)
{
  blk = lsu;

}
define (instr=ANDA_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ANDA_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwiaw AND""";
attrs = (LLOG,V6);
# 1809 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = anda_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "anda %f,%f,%f",Ra,Rb,Rn);
}
define (instr=ANDA_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ANDA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Bitwiaw AND""";
attrs = (LLOG,V7);
# 1816 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = anda_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "anda %f,%f,%f",Ra,Rb,Rn);
}

action=
{
   R(R_Res) = R(R_Src1) & R(R_Src2);
};

}



define (instr=PANDA_Pa_Pb_Pm_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res,P_Res2);
   blk = (lsu,ipu);


   define (instr=PANDA_Pa_Pb_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PANDA_Pa_Pb_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate AND, complementary""";
attrs = (ICMP,V7);
# 1839 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PANDA_Pa_Pb_Pm_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "panda %f,%f,%f",Pa,Pb,Pmn);
   }
   define (instr=PANDA_Pa_Pb_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PANDA_Pa_Pb_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate AND, complementary""";
attrs = (ICMP,V7);
# 1846 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PANDA_Pa_Pb_Pm_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "panda %f,%f,%f",Pa,Pb,Pmn);
   }

action=
{
   bits<1> res = get_SR_PR(P_Src1)&get_SR_PR(P_Src2);
   SetByVal_SR_PR(P_Res2,~res);
   SetByVal_SR_PR(P_Res,res);
};

}

define (instr=PANDA_Pa_Pb_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res);
   blk = (lsu,ipu);


   define (instr=PANDA_Pa_Pb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PANDA_Pa_Pb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate AND""";
attrs = (LCMP,V7);
# 1869 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PANDA_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "panda %f,%f,%f",Pa,Pb,Pn);
   }
   define (instr=PANDA_Pa_Pb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PANDA_Pa_Pb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate AND""";
attrs = (LCMP,V7);
# 1876 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PANDA_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "panda %f,%f,%f",Pa,Pb,Pn);
   }


action=
{
   bits<1> res = get_SR_PR(P_Src1)&get_SR_PR(P_Src2);
   SetByVal_SR_PR(P_Res,res);

};

}

define (instr=PEORA_Pa_Pb_Pm_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res,P_Res2);
   blk = (lsu,ipu);


   define (instr=PEORA_Pa_Pb_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PEORA_Pa_Pb_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate EOR, complementary""";
attrs = (ICMP,V7);
# 1900 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PEORA_Pa_Pb_Pm_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "peora %f,%f,%f",Pa,Pb,Pmn);
   }
   define (instr=PEORA_Pa_Pb_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PEORA_Pa_Pb_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate EOR, complementary""";
attrs = (ICMP,V7);
# 1907 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PEORA_Pa_Pb_Pm_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "peora %f,%f,%f",Pa,Pb,Pmn);
   }


action=
{
   bits<1> res = get_SR_PR(P_Src1)^get_SR_PR(P_Src2);
   SetByVal_SR_PR(P_Res2,~res);
   SetByVal_SR_PR(P_Res,res);

};

}

define (instr=PEORA_Pa_Pb_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res);
   blk = (lsu,ipu);


   define (instr=PEORA_Pa_Pb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PEORA_Pa_Pb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate EOR""";
attrs = (LCMP,V7);
# 1932 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PEORA_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "peora %f,%f,%f",Pa,Pb,Pn);
   }
   define (instr=PEORA_Pa_Pb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PEORA_Pa_Pb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate EOR""";
attrs = (LCMP,V7);
# 1939 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PEORA_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "peora %f,%f,%f",Pa,Pb,Pn);
   }


action=
{
   bits<1> res = get_SR_PR(P_Src1)^get_SR_PR(P_Src2);
   SetByVal_SR_PR(P_Res,res);

};

}

define (instr=PNOTA_Pa_Pn_family)
{
  fields = (OPCD,P_Src1,P_Res);
   blk = (lsu,ipu);


   define (instr=PNOTA_Pa_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PNOTA_Pa_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate NOT""";
attrs = (LCMP,V7);
# 1963 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PNOTA_Pa_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Res(Pn));
      syntax = ( "pnota %f,%f",Pa,Pn);
   }
   define (instr=PNOTA_Pa_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PNOTA_Pa_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate NOT""";
attrs = (LCMP,V7);
# 1970 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PNOTA_Pa_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Res(Pn));
      syntax = ( "pnota %f,%f",Pa,Pn);
   }


action=
{
   SetByVal_SR_PR(P_Res,(~get_SR_PR(P_Src1)));
};

}

define (instr=PORA_Pa_Pb_Pm_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res,P_Res2);
   blk = (lsu,ipu);


   define (instr=PORA_Pa_Pb_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PORA_Pa_Pb_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate OR, complementary""";
attrs = (ICMP,V7);
# 1992 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PORA_Pa_Pb_Pm_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "pora %f,%f,%f",Pa,Pb,Pmn);
   }
   define (instr=PORA_Pa_Pb_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PORA_Pa_Pb_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate OR, complementary""";
attrs = (ICMP,V7);
# 1999 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PORA_Pa_Pb_Pm_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "pora %f,%f,%f",Pa,Pb,Pmn);
   }

action=
{
   bits<1> res = get_SR_PR(P_Src1)|get_SR_PR(P_Src2);
   SetByVal_SR_PR(P_Res2,~res);
   SetByVal_SR_PR(P_Res,res);

};

}

define (instr=PORA_Pa_Pb_Pn_family)
{
  fields = (OPCD,P_Src1,P_Src2,P_Res);
   blk = (lsu,ipu);


   define (instr=PORA_Pa_Pb_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PORA_Pa_Pb_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate OR""";
attrs = (LCMP,V7);
# 2023 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PORA_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "pora %f,%f,%f",Pa,Pb,Pn);
   }
   define (instr=PORA_Pa_Pb_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PORA_Pa_Pb_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),Pb(0)),
 (bits(22),Pb(1)),
 (bits(23),Pb(2)),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Pa(0)),
 (bits(27),Pa(1)),
 (bits(28),Pa(2)),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Predicate OR""";
attrs = (LCMP,V7);
# 2030 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = PORA_Pa_Pb_Pn_family(OPCD(OPCD),P_Src1(Pa),P_Src2(Pb),P_Res(Pn));
      syntax = ( "pora %f,%f,%f",Pa,Pb,Pn);
   }


action=
{
    bits<1> res = get_SR_PR(P_Src1)|get_SR_PR(P_Src2);
   SetByVal_SR_PR(P_Res,res);

};

}


define (instr=suba_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res);
   blk = (lsu,ipu);





define (instr=SUBA_Rq_Rn)
{
  blk = lsu;

}
define (instr=SUBA_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUBA_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive subtract""";
attrs = (LARIT,V2);
# 2063 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = suba_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "suba %f,%f,%f",Ra,Rb,Rn);
}
define (instr=SUBA_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUBA_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive subtract""";
attrs = (LARIT,V7);
# 2070 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = suba_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn));
  syntax = ( "suba %f,%f,%f",Ra,Rb,Rn);
}


define (instr=SUBA_Rq_Rr_Rn)
{
  blk = lsu;

}

action=
{
   R(R_Res) = Address_by_MCTL(R_Src2,R(R_Src1),1,1,1,R(R_Src1));

};

}

define (instr=SUBA__s16_Ra_Rn_family)
{
  fields = (OPCD,imms,R_Src1,R_Res);
   blk = (lsu,ipu);


   define (instr=SUBA__s16_Ra_Rn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUBA__s16_Ra_Rn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Modulo sensitive subtract""";
attrs = (LARIT,V7);
# 2099 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = SUBA__s16_Ra_Rn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),R_Res(Rn));
      syntax = ( "suba #%f,%f,%f",s16,Ra,Rn);
   }
   define (instr=SUBA__s16_Ra_Rn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SUBA__s16_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),s16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),s16(1)),
 (bits(33),s16(2)),
 (bits(34),s16(3)),
 (bits(35),s16(4)),
 (bits(36),s16(5)),
 (bits(37),s16(6)),
 (bits(38),s16(7)),
 (bits(39),s16(8)),
 (bits(40),s16(9)),
 (bits(41),s16(10)),
 (bits(42),s16(11)),
 (bits(43),s16(12)),
 (bits(44),s16(13)),
 (bits(45),s16(14)),
 (bits(46),s16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Modulo sensitive subtract""";
attrs = (LARIT,V7);
# 2106 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = SUBA__s16_Ra_Rn_family(OPCD(OPCD),imms(s16),R_Src1(Ra),R_Res(Rn));
      syntax = ( "suba #%f,%f,%f",s16,Ra,Rn);
   }


action=
{
   R(R_Res) = Address_by_MCTL(R_Src1,imms,1,1,1,imms);
};

}



define (instr=SXTA_B_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);



  blk = (lsu,ipu);



define (instr=SXTA_B_Rq_Rn)
{
  blk = lsu;

  alias = SXTA_B_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Res(RRR));
}
define (instr=SXTA_B_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SXTA_B_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Sign extend byte""";
attrs = (LARIT,V2);
# 2141 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = SXTA_B_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "sxta.b %f,%f",Ra,Rn);
}
define (instr=SXTA_B_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SXTA_B_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Sign extend byte""";
attrs = (LARIT,V7);
# 2148 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = SXTA_B_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "sxta.b %f,%f",Ra,Rn);
}



action=
{
   R(R_Res) = signExtend( R(R_Src1)(7,0), 32);
};

}


define (instr=sxta_w_family)
{
   fields = (OPCD,R_Src1,R_Res);
   blk = (lsu,ipu);




define (instr=SXTA_W_Rn)
{
  blk = lsu;

}
define (instr=SXTA_W_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SXTA_W_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Sign extend word""";
attrs = (LARIT,V2);
# 2179 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = sxta_w_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "sxta.w %f,%f",Ra,Rn);
}
define (instr=SXTA_W_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/SXTA_W_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Sign extend word""";
attrs = (LARIT,V7);
# 2186 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = sxta_w_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "sxta.w %f,%f",Ra,Rn);
}


define (instr=SXTA_W_Rq_Rn)
{
  blk = lsu;

}

action=
{




   R(R_Res) = signExtend( R(R_Src1)(15,0), 32);
};

}


define (instr=TFRA_Rq_Rn_family)
{

   fields = (OPCD, R_Src1, R_Res);



   blk = (lsu,ipu);


   define (instr=TFRA_Rq_Rn)
   {
  blk = lsu;

      alias = TFRA_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Res(RRR));
}
define (instr=TFRA_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer register""";
attrs = (LARIT,V2);
# 2229 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = TFRA_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "tfra %f,%f",Ra,Rn);
}
define (instr=TFRA_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer register""";
attrs = (LARIT,V7);
# 2236 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = TFRA_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "tfra %f,%f",Ra,Rn);
}


   action =
   {
      R(R_Res) = R(R_Src1);
   };

}


define (instr=TFRA_SP_Rn_family)
{
  fields = (OPCD,R_Res);
   blk = (lsu,ipu);

   define (instr=TFRA_SP_Rn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_SP_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfter from SP""";
attrs = (IARIT,V2);
# 2258 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = TFRA_SP_Rn_family(OPCD(OPCD),R_Res(Rn));
      syntax = ( "tfra sp,%f",Rn);
   }
   define (instr=TFRA_SP_Rn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_SP_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfter from SP""";
attrs = (IARIT,V7);
# 2265 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = TFRA_SP_Rn_family(OPCD(OPCD),R_Res(Rn));
      syntax = ( "tfra sp,%f",Rn);
   }

action=
{
   if ( SR.PE==1 )
   {
      EMR_LOW = true;
      EMR.ILPR=1;
      raiseException(Privelege);
   }
   else
   {
      if (SR.EXP == 1) { R(R_Res) = NSP; }
      else { R(R_Res) = ESP; }
   }

};

}

define (instr=TFRA_Ra_SP_family)
{
  fields = (OPCD,R_Src1);
   blk = (lsu,ipu);

   define (instr=TFRA_Ra_SP)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_Ra_SP.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer to SP""";
attrs = (IARIT,V2);
# 2296 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = TFRA_Ra_SP_family(OPCD(OPCD),R_Src1(Ra));
      syntax = ( "tfra %f,SP",Ra);
   }
   define (instr=TFRA_Ra_SP_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/TFRA_Ra_SP_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),b1),
 (bits(17),b1),
 (bits(18),b1),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Transfer to SP""";
attrs = (IARIT,V7);
# 2303 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = TFRA_Ra_SP_family(OPCD(OPCD),R_Src1(Ra));
      syntax = ( "tfra %f,SP",Ra);
   }


action=
{
   if ( SR.PE==1 )
   {
      EMR_LOW = true;
      EMR.ILPR=1;
      raiseException(Privelege);
   }
   else
   {
      if (SR.EXP == 1) {
  update_arith_nsp( (R(R_Src1).uint32()&0xFFFFFFF8) - NSP.uint32());
      } else {
  update_arith_esp( (R(R_Src1).uint32()&0xFFFFFFF8) - ESP.uint32());
      }
   }

};

}


define (instr=ZXTA_B_Rq_Rn_family)
{

  fields = (OPCD, R_Src1, R_Res);



  blk = (lsu,ipu);



define (instr=ZXTA_B_Rq_Rn)
{
  blk = lsu;

  alias = ZXTA_B_Rq_Rn_family(OPCD(OPCD), R_Src1(qqq), R_Res(RRR));
}
define (instr=ZXTA_B_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ZXTA_B_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Zero extend byte""";
attrs = (LARIT,V2);
# 2351 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = ZXTA_B_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "zxta.b %f,%f",Ra,Rn);
}
define (instr=ZXTA_B_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ZXTA_B_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Zero extend byte""";
attrs = (LARIT,V7);
# 2358 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
  alias = ZXTA_B_Rq_Rn_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "zxta.b %f,%f",Ra,Rn);
}



action=
{
   R(R_Res) = zeroExtend( R(R_Src1)(7,0), 32);
};

}


define (instr=zxta_w_family)
{
   fields = (OPCD,R_Src1,R_Res);
   blk = (lsu,ipu);





define (instr=ZXTA_W_Rn)
{
  blk = lsu;

}
define (instr=ZXTA_W_Ra_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ZXTA_W_Ra_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Zero extend word""";
attrs = (LARIT,V2);
# 2390 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = zxta_w_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "zxta.w %f,%f",Ra,Rn);
}
define (instr=ZXTA_W_Ra_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ZXTA_W_Ra_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Zero extend word""";
attrs = (LARIT,V7);
# 2397 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = zxta_w_family(OPCD(OPCD), R_Src1(Ra), R_Res(Rn));
  syntax = ( "zxta.w %f,%f",Ra,Rn);
}



define (instr=ZXTA_W_Rq_Rn)
{
  blk = lsu;

}

action=
{
   R(R_Res) = zeroExtend( R(R_Src1)(15,0), 32);
};

}


define (instr=ADDLxA_family)
{
   fields = (OPCD,R_Src1,R_Src2,R_Res,ShiftSize);
   blk = (lsu,ipu);
   doc_title = "addlxa Ra,Rb,Rn";






define (instr=ADDL1A_Rq_Rn)
{
  blk = lsu;

}
define (instr=ADDL1A_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDL1A_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive shift left by n bit and add. Addition is affected by MCTL 
configuration.""";
attrs = (LARIT,V2);
# 2437 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ADDLxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(1));
  syntax = ( "addl1a %f,%f,%f",Ra,Rb,Rn);
}
define (instr=ADDL1A_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDL1A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Modulo sensitive shift left by n bit and add. Addition is affected by MCTL 
configuration.""";
attrs = (LARIT,V7);
# 2444 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ADDLxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(1));
  syntax = ( "addl1a %f,%f,%f",Ra,Rb,Rn);
}


define (instr=ADDL2A_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDL2A_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (LARIT,V2);
# 2453 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ADDLxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(2));
  syntax = ( "addl2a %f,%f,%f",Ra,Rb,Rn);
}

define (instr=ADDL2A_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDL2A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (LARIT,V7);
# 2461 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ADDLxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(2));
  syntax = ( "addl2a %f,%f,%f",Ra,Rb,Rn);
}


define (instr=ADDL3A_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDL3A_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (LARIT,V7);
# 2470 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ADDLxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(3));
  syntax = ( "addl3a %f,%f,%f",Ra,Rb,Rn);
}

define (instr=ADDL3A_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDL3A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (LARIT,V7);
# 2478 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ADDLxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(3));
  syntax = ( "addl3a %f,%f,%f",Ra,Rb,Rn);
}


define (instr=ADDL4A_Ra_Rb_Rn)
{
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDL4A_Ra_Rb_Rn.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (LARIT,V7);
# 2487 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ADDLxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(4));
  syntax = ( "addl4a %f,%f,%f",Ra,Rb,Rn);
}

define (instr=ADDL4A_Ra_Rb_Rn_ipu)
{
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/ADDL4A_Ra_Rb_Rn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b1),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rn(0)),
 (bits(17),Rn(1)),
 (bits(18),Rn(2)),
 (bits(19),Rn(3)),
 (bits(20),Rn(4)),
 (bits(21),Rb(0)),
 (bits(22),Rb(1)),
 (bits(23),Rb(2)),
 (bits(24),Rb(3)),
 (bits(25),Rb(4)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);

attrs = (LARIT,V7);
# 2495 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
alias = ADDLxA_family(OPCD(OPCD), R_Src1(Ra), R_Src2(Rb), R_Res(Rn), ShiftSize(4));
  syntax = ( "addl4a %f,%f,%f",Ra,Rb,Rn);
}

define (instr=ADDL1A_Rq_Rr_Rn)
{
  blk = lsu;

}

action=
{




   R(R_Res) = Address_by_MCTL(R_Src2,(R(R_Src1)<<ShiftSize),1,0,ShiftSize<<1,R(R_Src1));
};

}


define (instr=BMTSTCA__u16_Ra_H_Pm_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res,P_Res2);
   blk = (lsu,ipu);


   define (instr=BMTSTCA__u16_Ra_H_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Ra_H_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear - complementary""";
attrs = (ICMP,V7);
# 2527 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTCA__u16_Ra_H_Pm_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstca #%f,%f.h,%f",u16,Ra,Pmn);
   }
   define (instr=BMTSTCA__u16_Ra_H_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Ra_H_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear - complementary""";
attrs = (ICMP,V7);
# 2534 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTCA__u16_Ra_H_Pm_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstca #%f,%f.h,%f",u16,Ra,Pmn);
   }


action=
{
    if ( (R(R_Src1)(31,16) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
    else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}

define (instr=BMTSTCA__u16_Ra_H_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = (lsu,ipu);

   define (instr=BMTSTCA__u16_Ra_H_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Ra_H_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear""";
attrs = (LCMP,V2);
# 2557 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTCA__u16_Ra_H_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "bmtstca #%f,%f.h,%f",u16,Ra,Pn);
   }
   define (instr=BMTSTCA__u16_Ra_H_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Ra_H_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear""";
attrs = (LCMP,V7);
# 2564 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTCA__u16_Ra_H_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "bmtstca #%f,%f.h,%f",u16,Ra,Pn);
   }


action=
{
   if ( (R(R_Src1)(31,16) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}


define (instr=BMTSTCA__u16_Ra_L_Pm_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res,P_Res2);
  blk = (lsu,ipu);

   define (instr=BMTSTCA__u16_Ra_L_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Ra_L_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear - complementary""";
attrs = (ICMP,V7);
# 2588 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTCA__u16_Ra_L_Pm_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstca #%f,%f.l,%f",u16,Ra,Pmn);
   }
   define (instr=BMTSTCA__u16_Ra_L_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Ra_L_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear - complementary""";
attrs = (ICMP,V7);
# 2595 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTCA__u16_Ra_L_Pm_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstca #%f,%f.l,%f",u16,Ra,Pmn);
   }


action=
{
   if ( (R(R_Src1)(15,0) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2);}
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}


define (instr=BMTSTCA__u16_Ra_L_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = (lsu,ipu);


   define (instr=BMTSTCA__u16_Ra_L_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Ra_L_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear""";
attrs = (LCMP,V2);
# 2620 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTCA__u16_Ra_L_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "bmtstca #%f,%f.l,%f",u16,Ra,Pn);
   }
   define (instr=BMTSTCA__u16_Ra_L_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTCA__u16_Ra_L_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for clear""";
attrs = (LCMP,V7);
# 2627 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTCA__u16_Ra_L_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "bmtstca #%f,%f.l,%f",u16,Ra,Pn);
   }


action=
{
   if ( (R(R_Src1)(15,0) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }

};

}



define (instr=BMTSTSA__u16_Ra_H_Pm_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res,P_Res2);
   blk = (lsu,ipu);

   define (instr=BMTSTSA__u16_Ra_H_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Ra_H_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set - complementary""";
attrs = (ICMP,V7);
# 2652 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTSA__u16_Ra_H_Pm_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstsa #%f,%f.h,%f",u16,Ra,Pmn);
   }
   define (instr=BMTSTSA__u16_Ra_H_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Ra_H_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set - complementary""";
attrs = (ICMP,V7);
# 2659 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTSA__u16_Ra_H_Pm_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstsa #%f,%f.h,%f",u16,Ra,Pmn);
   }


action=
{
   if ( ((~(R(R_Src1)(31,16))) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}

define (instr=BMTSTSA__u16_Ra_H_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = (lsu,ipu);

   define (instr=BMTSTSA__u16_Ra_H_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Ra_H_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set""";
attrs = (LCMP,V2);
# 2682 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTSA__u16_Ra_H_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "bmtstsa #%f,%f.h,%f",u16,Ra,Pn);
   }
   define (instr=BMTSTSA__u16_Ra_H_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Ra_H_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set""";
attrs = (LCMP,V7);
# 2689 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTSA__u16_Ra_H_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "bmtstsa #%f,%f.h,%f",u16,Ra,Pn);
   }

action=
{
   if ( ((~(R(R_Src1)(31,16))) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }
};

}

define (instr=BMTSTSA__u16_Ra_L_Pm_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res,P_Res2);
   blk = (lsu,ipu);

   define (instr=BMTSTSA__u16_Ra_L_Pm_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Ra_L_Pm_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b1),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pmn(0)),
 (bits(17),Pmn(1)),
 (bits(18),Pmn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set - complementary""";
attrs = (ICMP,V7);
# 2710 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTSA__u16_Ra_L_Pm_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstsa #%f,%f.l,%f",u16,Ra,Pmn);
   }
   define (instr=BMTSTSA__u16_Ra_L_Pm_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Ra_L_Pm_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),Pmn(0)),
 (bits(22),Pmn(1)),
 (bits(23),Pmn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set - complementary""";
attrs = (ICMP,V7);
# 2717 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTSA__u16_Ra_L_Pm_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pmn.Pm),P_Res2(Pmn.Pn));
      syntax = ( "bmtstsa #%f,%f.l,%f",u16,Ra,Pmn);
   }


action=
{
   if ( ((~(R(R_Src1)(15,0))) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); clear_SR_PR(P_Res2); }
   else { clear_SR_PR(P_Res); set_SR_PR(P_Res2); }

};

}

define (instr=BMTSTSA__u16_Ra_L_Pn_family)
{
  fields = (OPCD,immu,R_Src1,P_Res);
   blk = (lsu,ipu);

   define (instr=BMTSTSA__u16_Ra_L_Pn)
   {
  blk = lsu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Ra_L_Pn.info" 1
fields=(
 (bits(0),b1),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b1),
 (bits(4),b0),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Pn(0)),
 (bits(17),Pn(1)),
 (bits(18),Pn(2)),
 (bits(19),b1),
 (bits(20),b1),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),Ra(0)),
 (bits(27),Ra(1)),
 (bits(28),Ra(2)),
 (bits(29),Ra(3)),
 (bits(30),Ra(4)),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set""";
attrs = (LCMP,V2);
# 2740 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTSA__u16_Ra_L_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "bmtstsa #%f,%f.l,%f",u16,Ra,Pn);
   }
   define (instr=BMTSTSA__u16_Ra_L_Pn_ipu)
   {
  blk = ipu;
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/BMTSTSA__u16_Ra_L_Pn_ipu.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b1),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),Pn(0)),
 (bits(22),Pn(1)),
 (bits(23),Pn(2)),
 (bits(24),b1),
 (bits(25),u16(0)),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),u16(1)),
 (bits(33),u16(2)),
 (bits(34),u16(3)),
 (bits(35),u16(4)),
 (bits(36),u16(5)),
 (bits(37),u16(6)),
 (bits(38),u16(7)),
 (bits(39),u16(8)),
 (bits(40),u16(9)),
 (bits(41),u16(10)),
 (bits(42),u16(11)),
 (bits(43),u16(12)),
 (bits(44),u16(13)),
 (bits(45),u16(14)),
 (bits(46),u16(15)),
 (bits(47),b0),
 (bits(48),PR(2)),
 (bits(49),reserved),
 (bits(50),reserved),
 (bits(51),reserved));

type = ThreeWords;
attrs = (serial_three_word);
"""Bit mask test for set""";
attrs = (LCMP,V7);
# 2747 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_lsu_ipu_instructions.adl" 2
      alias = BMTSTSA__u16_Ra_L_Pn_family(OPCD(OPCD),immu(u16),R_Src1(Ra),P_Res(Pn));
      syntax = ( "bmtstsa #%f,%f.l,%f",u16,Ra,Pn);
   }


action=
{
   if ( ((~(R(R_Src1)(15,0))) & immu(15,0))==0x0000 ) { set_SR_PR(P_Res); }
   else { clear_SR_PR(P_Res); }
};

}
# 64 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/aliases.adl" 1

define (instr=CLR_2X_Dm_Dn) {
  alias = SUB_2X_Da_Db_Dc_Dd_Dm_Dn(Dab(0),Dcd(0),Dmn(Dmn));
  syntax = ("clr.2x %f",Dmn);
}


define (instr=DOEN0_Da) {
  alias = DOENn_Da(n(0),Da(Da));
  syntax = ("doen0 %f",Da);
}

define (instr=DOENSQ0_Da) {
  alias = DOENSQn_Da(n(0),Da(Da));
  syntax = ("doensq0 %f",Da);
}


define (instr=DOEN0_Ra) {
  alias = DOENn_Ra(n(0),Ra(Ra));
  syntax = ("doen0 %f",Ra);
}

define (instr=DOENSQ0_Ra) {
  alias = DOENSQn_Ra(n(0),Ra(Ra));
  syntax = ("doensq0 %f",Ra);
}

define (instr=DOEN1_Da) {
  alias = DOENn_Da(n(1),Da(Da));
  syntax = ("doen1 %f",Da);
}

define (instr=DOENSQ1_Da) {
  alias = DOENSQn_Da(n(1),Da(Da));
  syntax = ("doensq1 %f",Da);
}

define (instr=DOEN1_Ra) {
  alias = DOENn_Ra(n(1),Ra(Ra));
  syntax = ("doen1 %f",Ra);
}

define (instr=DOENSQ1_Ra) {
  alias = DOENSQn_Ra(n(1),Ra(Ra));
  syntax = ("doensq1 %f",Ra);
}

define (instr=DOEN2_Da) {
  alias = DOENn_Da(n(2),Da(Da));
  syntax = ("doen2 %f",Da);
}

define (instr=DOENSQ2_Da) {
  alias = DOENSQn_Da(n(2),Da(Da));
  syntax = ("doensq2 %f",Da);
}

define (instr=DOEN2_Ra) {
  alias = DOENn_Ra(n(2),Ra(Ra));
  syntax = ("doen2 %f",Ra);
}

define (instr=DOENSQ2_Ra) {
  alias = DOENSQn_Ra(n(2),Ra(Ra));
  syntax = ("doensq2 %f",Ra);
}

define (instr=DOEN3_Da) {
  alias = DOENn_Da(n(3),Da(Da));
  syntax = ("doen3 %f",Da);
}

define (instr=DOENSQ3_Da) {
  alias = DOENSQn_Da(n(3),Da(Da));
  syntax = ("doensq3 %f",Da);
}

define (instr=DOEN3_Ra) {
  alias = DOENn_Ra(n(3),Ra(Ra));
  syntax = ("doen3 %f",Ra);
}

define (instr=DOENSQ3_Ra) {
  alias = DOENSQn_Ra(n(3),Ra(Ra));
  syntax = ("doensq3 %f",Ra);
}

define (instr=DOEN0__imm) {
  attrs = (instr_tbl_ALC_IMM_RF);
  alias = DOENn__u16(n(0),u16_t3(u16_t3));
  syntax = ("doen0 #%f",u16_t3);
}

define (instr=DOEN1__imm) {
  attrs = (instr_tbl_ALC_IMM_RF);
  alias = DOENn__u16(n(1),u16_t3(u16_t3));
  syntax = ("doen1 #%f",u16_t3);
}

define (instr=DOEN2__imm) {
  attrs = (instr_tbl_ALC_IMM_RF);
  alias = DOENn__u16(n(2),u16_t3(u16_t3));
  syntax = ("doen2 #%f",u16_t3);
}

define (instr=DOEN3__imm) {
  attrs = (instr_tbl_ALC_IMM_RF);
  alias = DOENn__u16(n(3),u16_t3(u16_t3));
  syntax = ("doen3 #%f",u16_t3);
}


define (instr=DOENSQ0__imm) {
  attrs = (instr_tbl_ALC_IMM_RF);
  alias = DOENSQn__u16(n(0),u16_t3(u16));
  syntax = ("doensq0 #%f",u16);
}

define (instr=DOENSQ1__imm) {
  attrs = (instr_tbl_ALC_IMM_RF);
  alias = DOENSQn__u16(n(1),u16_t3(u16));
  syntax = ("doensq1 #%f",u16);
}

define (instr=DOENSQ2__imm) {
  attrs = (instr_tbl_ALC_IMM_RF);
  alias = DOENSQn__u16(n(2),u16_t3(u16));
  syntax = ("doensq2 #%f",u16);
}

define (instr=DOENSQ3__imm) {
  attrs = (instr_tbl_ALC_IMM_RF);
  alias = DOENSQn__u16(n(3),u16_t3(u16));
  syntax = ("doensq3 #%f",u16);
}


define (instr=LPST0_RelAdd20) {
  alias = LPSTn_RelAdd20(n(0),RelAdd20(RelAdd20));
  syntax = ("lpst0 %f",RelAdd20);
}
define (instr=LPST1_RelAdd20) {
  alias = LPSTn_RelAdd20(n(1),RelAdd20(RelAdd20));
  syntax = ("lpst1 %f",RelAdd20);
}
define (instr=LPST2_RelAdd20) {
  alias = LPSTn_RelAdd20(n(2),RelAdd20(RelAdd20));
  syntax = ("lpst2 %f",RelAdd20);
}
define (instr=LPST3_RelAdd20) {
  alias = LPSTn_RelAdd20(n(3),RelAdd20(RelAdd20));
  syntax = ("lpst3 %f",RelAdd20);
}

define (instr=LPSTSQ0_RelAdd20) {
  alias = LPSTSQn_RelAdd20(n(0),RelAdd20(RelAdd20));
  syntax = ("lpstsq0 %f",RelAdd20);
}
define (instr=LPSTSQ1_RelAdd20) {
  alias = LPSTSQn_RelAdd20(n(1),RelAdd20(RelAdd20));
  syntax = ("lpstsq1 %f",RelAdd20);
}
define (instr=LPSTSQ2_RelAdd20) {
  alias = LPSTSQn_RelAdd20(n(2),RelAdd20(RelAdd20));
  syntax = ("lpstsq2 %f",RelAdd20);
}
define (instr=LPSTSQ3_RelAdd20) {
  alias = LPSTSQn_RelAdd20(n(3),RelAdd20(RelAdd20));
  syntax = ("lpstsq3 %f",RelAdd20);
}


define (instr=LPEND0_RelAdd20) {
  alias = LPENDn_RelAdd20(n(0),RelAdd20(RelAdd20));
  syntax = ("lpend0 %f",RelAdd20);
}
define (instr=LPEND1_RelAdd20) {
  alias = LPENDn_RelAdd20(n(1),RelAdd20(RelAdd20));
  syntax = ("lpend1 %f",RelAdd20);
}
define (instr=LPEND2_RelAdd20) {
  alias = LPENDn_RelAdd20(n(2),RelAdd20(RelAdd20));
  syntax = ("lpend2 %f",RelAdd20);
}
define (instr=LPEND3_RelAdd20) {
  alias = LPENDn_RelAdd20(n(3),RelAdd20(RelAdd20));
  syntax = ("lpend3 %f",RelAdd20);
}

define (instr=LPENDSQ0_RelAdd20) {
  alias = LPENDSQn_RelAdd20(n(0),RelAdd20(RelAdd20));
  syntax = ("lpendsq0 %f",RelAdd20);
}
define (instr=LPENDSQ1_RelAdd20) {
  alias = LPENDSQn_RelAdd20(n(1),RelAdd20(RelAdd20));
  syntax = ("lpendsq1 %f",RelAdd20);
}
define (instr=LPENDSQ2_RelAdd20) {
  alias = LPENDSQn_RelAdd20(n(2),RelAdd20(RelAdd20));
  syntax = ("lpendsq2 %f",RelAdd20);
}
define (instr=LPENDSQ3_RelAdd20) {
  alias = LPENDSQn_RelAdd20(n(3),RelAdd20(RelAdd20));
  syntax = ("lpendsq3 %f",RelAdd20);
}




define (instr=SKIP0_RelAdd16) {
  alias = SKIPn_RelAdd16(n(0),RelAdd16(RelAdd16));
  syntax = ("skip0 %f",RelAdd16);
}
define (instr=SKIP1_RelAdd16) {
  alias = SKIPn_RelAdd16(n(1),RelAdd16(RelAdd16));
  syntax = ("skip1 %f",RelAdd16);
}
define (instr=SKIP2_RelAdd16) {
  alias = SKIPn_RelAdd16(n(2),RelAdd16(RelAdd16));
  syntax = ("skip2 %f",RelAdd16);
}
define (instr=SKIP3_RelAdd16) {
  alias = SKIPn_RelAdd16(n(3),RelAdd16(RelAdd16));
  syntax = ("skip3 %f",RelAdd16);
}


define (instr=BREAK0_RelAdd16) {
  alias = BREAKn_RelAdd16(n(0),RelAdd16(RelAdd16));
  syntax = ("break0 %f",RelAdd16);
}

define (instr=BREAK1_RelAdd16) {
  alias = BREAKn_RelAdd16(n(1),RelAdd16(RelAdd16));
  syntax = ("break1 %f",RelAdd16);
}

define (instr=BREAK2_RelAdd16) {
  alias = BREAKn_RelAdd16(n(2),RelAdd16(RelAdd16));
  syntax = ("break2 %f",RelAdd16);
}

define (instr=BREAK3_RelAdd16) {
  alias = BREAKn_RelAdd16(n(3),RelAdd16(RelAdd16));
  syntax = ("break3 %f",RelAdd16);
}

define (instr=CONT0_Ra_RelAdd16) {
  alias = CONTn_Ra_RelAdd16(n(0),Ra(Ra),RelAdd16_t1(RelAdd16_t1));
  syntax = ("cont0 %f,%f",RelAdd16_t1,Ra);
}

define (instr=CONT1_Ra_RelAdd16) {
  alias = CONTn_Ra_RelAdd16(n(1),Ra(Ra),RelAdd16_t1(RelAdd16_t1));
  syntax = ("cont1 %f,%f",RelAdd16_t1,Ra);
}

define (instr=CONT2_Ra_RelAdd16) {
  alias = CONTn_Ra_RelAdd16(n(2),Ra(Ra),RelAdd16_t1(RelAdd16_t1));
  syntax = ("cont2 %f,%f",RelAdd16_t1,Ra);
}

define (instr=CONT3_Ra_RelAdd16) {
  alias = CONTn_Ra_RelAdd16(n(3),Ra(Ra),RelAdd16_t1(RelAdd16_t1));
  syntax = ("cont3 %f,%f",RelAdd16_t1,Ra);
}


define (instr=LPSKIP0_RelAdd20_RRelAdd4) {
  alias = LPSKIPn_RelAdd20_RRelAdd4(n(0),RelAdd20_t1(RelAdd20),RRelAdd4(RRelAdd4));
  syntax = ("lpskip0 %f,%f",RelAdd20,RRelAdd4);
}

define (instr=LPSKIP1_RelAdd20_RRelAdd4) {
  alias = LPSKIPn_RelAdd20_RRelAdd4(n(1),RelAdd20_t1(RelAdd20),RRelAdd4(RRelAdd4));
  syntax = ("lpskip1 %f,%f",RelAdd20,RRelAdd4);
}

define (instr=LPSKIP2_RelAdd20_RRelAdd4) {
  alias = LPSKIPn_RelAdd20_RRelAdd4(n(2),RelAdd20_t1(RelAdd20),RRelAdd4(RRelAdd4));
  syntax = ("lpskip2 %f,%f",RelAdd20,RRelAdd4);
}

define (instr=LPSKIP3_RelAdd20_RRelAdd4) {
  alias = LPSKIPn_RelAdd20_RRelAdd4(n(3),RelAdd20_t1(RelAdd20),RRelAdd4(RRelAdd4));
  syntax = ("lpskip3 %f,%f",RelAdd20,RRelAdd4);
}

define (instr=LPSKIPSQ0_RelAdd20_RRelAdd4) {
  alias = LPSKIPSQn_RelAdd20_RRelAdd4(n(0),RelAdd20_t1(RelAdd20),RRelAdd4(RRelAdd4));
  syntax = ("lpskipsq0 %f,%f",RelAdd20,RRelAdd4);
}

define (instr=LPSKIPSQ1_RelAdd20_RRelAdd4) {
  alias = LPSKIPSQn_RelAdd20_RRelAdd4(n(1),RelAdd20_t1(RelAdd20),RRelAdd4(RRelAdd4));
  syntax = ("lpskipsq1 %f,%f",RelAdd20,RRelAdd4);
}

define (instr=LPSKIPSQ2_RelAdd20_RRelAdd4) {
  alias = LPSKIPSQn_RelAdd20_RRelAdd4(n(2),RelAdd20_t1(RelAdd20),RRelAdd4(RRelAdd4));
  syntax = ("lpskipsq2 %f,%f",RelAdd20,RRelAdd4);
}

define (instr=LPSKIPSQ3_RelAdd20_RRelAdd4) {
  alias = LPSKIPSQn_RelAdd20_RRelAdd4(n(3),RelAdd20_t1(RelAdd20),RRelAdd4(RRelAdd4));
  syntax = ("lpskipsq3 %f,%f",RelAdd20,RRelAdd4);
}



define (instr=MAC_pDa_Da_Dn2) {
   alias = mac_family1( OPCD(OPCD), Src1(jj.Da1), Src2(jj.Da2), Res(FFF) );
   syntax = ( "mac +%f,%f",jj,FFF);
}
# 65 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 1

define (instr=PUSH_Dn_family)
{

  fields = (OPCD, Src1);



  blk = lsu;


define (instr=PUSH_Dn)
{

  alias = PUSH_Dn_family(OPCD(OPCD), Src1(FFF));
}
define (instr=PUSH_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push a data register (32 bits) to the stack""";
attrs = (LSTK,V2);
# 20 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSH_Dn_family(OPCD(OPCD), Src1(Da));
  syntax = ( "push %f",Da);
}


action=
{



     update_arith_sp(4);
     if (Src1%2 == 0) {
 mem_write_push_even(D(Src1));
     } else {
 mem_write_push_odd(D(Src1));
     }

};

}


define (instr=PUSH_Dn_E_family)
{

  fields = (OPCD, Src1, Src2, Src3);



  blk = lsu;

define (instr=PUSH_Dn_E)
{

  alias = PUSH_Dn_E_family(OPCD(OPCD), Src1(FFF), Src2(FFF+1), Src3(FFF-1));
}
define (instr=PUSH_Da_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_Da_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push a data register extension to the stack""";
attrs = (LSTK,V2);
# 59 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSH_Dn_E_family(OPCD(OPCD), Src1(Da), Src2(Da+1), Src3(Da-1));
  syntax = ( "push %f.e",Da);
}


action=
{





     update_arith_sp(4);
     bits <32> val;
     if (Src1%2==0) {
 val = concat(zero(7),L(Src2),D(Src2).E, zero(7),L(Src1),D(Src1).E);
 mem_write_push_even(val);
     }else {
 val = concat(zero(7),L(Src1),D(Src1).E, zero(7),L(Src3),D(Src3).E);
 mem_write_push_odd(val);
     }

};

}


define (instr=PUSH_Da_E_Db_E_family)
{

  fields = (OPCD, Src1, Src2);



  blk = lsu;


define (instr=PUSH_Da_E_Db_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_Da_E_Db_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push a pair data register extensions to the stack""";
attrs = (LSTK,V2);
# 99 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = PUSH_Da_E_Db_E_family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db));
  syntax = ( "push %f",Dab_e);

   }


action=
{




    update_arith_sp(4);
    bits <32> val = concat(zero(7),L(Src2),D(Src2).E, zero(7),L(Src1),D(Src1).E);

    mem_write_push_even(val);
};

}


define (instr=PUSH_Rn_family)
{

   fields = (OPCD, R_Src1);



   blk = lsu;

   define (instr=PUSH_Rn)
   {

      alias = PUSH_Rn_family(OPCD(OPCD), R_Src1(RRR));
}
define (instr=PUSH_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push an address register to the stack""";
attrs = (LSTK,V2);
# 141 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
      alias = PUSH_Rn_family(OPCD(OPCD), R_Src1(Ra));
  syntax = ( "push %f",Ra);
}


   action=
   {




      update_arith_sp(4);
      if (R_Src1%2==0)
  mem_write_push_even(R(R_Src1));
     else {mem_write_push_odd(R(R_Src1));}
   };

}


define (instr=PUSH_C6_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;

define (instr=PUSH_C6)
{

  alias = PUSH_C6_family(OPCD(OPCD), G_Src1(TTTT));
}

action=
{



  if (check_legal_C6Table(G_Src1)) {
     update_arith_sp(4);
     if (G_Src1%2 == 0)
        mem_write_push_even(C6Table2(G_Src1));
    else {mem_write_push_odd(C6Table1(G_Src1));}
  }
};

}


define (instr=PUSH_C3_family)
{

   fields = (OPCD, G_Src1);



   blk = lsu;


   define (instr=PUSH_C3)
   {

      alias = PUSH_C3_family(OPCD(OPCD), G_Src1(DDDD));
   }



   action=
   {




      update_arith_sp(4);
      if (G_Src1%2==0)
  mem_write_push_even(C3Table(G_Src1));
     else {mem_write_push_odd(C3Table(G_Src1));}

   };

}


define (instr=PUSH_CTRL_family)
{

   fields = (OPCD, CTRL);
   blk = lsu;

define (instr=PUSH_CTRL)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_CTRL.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push a control register to the stack""";
attrs = (LSTK,V2);
# 235 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
      alias = PUSH_CTRL_family(OPCD(OPCD), CTRL(CTRL));
  syntax = ( "push %f",CTRL);
}


   action=
   {

      update_arith_sp(4);
      if (CTRL%2==0) {
  mem_write_push_even(CtrlTable(CTRL));
      } else {
  mem_write_push_odd(CtrlTable(CTRL));
      }

   };

}


define (instr=POP_Dn_family)
{

  fields = (OPCD, Res);



  blk = lsu;


define (instr=POP_Dn)
{

  alias = POP_Dn_family(OPCD(OPCD), Res(FFF));
}
define (instr=POP_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 32-bits to a data register from the stack """;
attrs = (LSTK,V2);
# 273 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POP_Dn_family(OPCD(OPCD), Res(Da));
  syntax = ( "pop %f",Da);
}


action=
{




    bits <32> val;
    update_arith_sp(-4);
    val = mem_write_pop(Res%2);
    D(Res)=signExtend(val, 40);




};

}


define (instr=POP_Dn_E_family)
{

   fields = (OPCD, Res);



   blk = lsu;


   define (instr=POP_Dn_E)
   {

      alias = POP_Dn_E_family(OPCD(OPCD), Res(FFF));
}
define (instr=POP_Da_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_Da_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop a data register extension from the stack""";
attrs = (LSTK,V2);
# 315 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
      alias = POP_Dn_E_family(OPCD(OPCD), Res(Da));
  syntax = ( "pop %f.e",Da);
}


   action=
   {




      bits <32> val;
      update_arith_sp(-4);
      val = mem_write_pop(Res%2);
      if ((Res%2)==1) {
  D(Res).E = val(23,16);



      } else {
  D(Res).E = val(7,0);



      }

   };

}


define (instr=POP_Da_E_Db_E_family)
{

  fields = (OPCD, Src1, Res, Res2);



  blk = lsu;


define (instr=POP_Da_E_Db_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_Da_E_Db_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop a data register extension pair from the stack""";
attrs = (LSTK,V2);
# 359 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = POP_Da_E_Db_E_family(OPCD(OPCD), Src1(Dab.Da), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "pop %f",Dab_e);

   }


action=
{




      bits <32> val;
      update_arith_sp(-4);
      val = mem_write_pop(Src1%2);
      D(Res).E = val(7,0);



      D(Res2).E = val(23,16);




};

}


define (instr=POP_Rn_family)
{

  fields = (OPCD, R_Res);



  blk = lsu;


define (instr=POP_Rn)
{

  alias = POP_Rn_family(OPCD(OPCD), R_Res(RRR));
}
define (instr=POP_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop an address register from the stack""";
attrs = (LSTK,V2);
# 410 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POP_Rn_family(OPCD(OPCD), R_Res(Ra));
  syntax = ( "pop %f",Ra);
}


action=
{





      bits <32> val;
      update_arith_sp(-4);
      val=mem_write_pop(R_Res%2);
      R(R_Res) = val;
};

}


define (instr=POP_C6_family)
{

  fields = (OPCD, G_Res);



  blk = lsu;


define (instr=POP_C6)
{

  alias = POP_C6_family(OPCD(OPCD), G_Res(TTTT));
}


action=
{






      bits <32> val ;
      if (check_legal_C6Table(G_Res)) {
          update_arith_sp(-4);
          val = mem_write_pop(G_Res%2);
       if (G_Res(0)==1) { C6Table1(G_Res)=val; }
       else { C6Table2(G_Res)=val; }
   }
};

}


define (instr=POP_C3_family)
{

  fields = (OPCD, G_Res);



  blk = lsu;


define (instr=POP_C3)
{

  alias = POP_C3_family(OPCD(OPCD), G_Res(DDDD));
}

action=
{




      bits <32> val ;
      update_arith_sp(-4);
      val = mem_write_pop(G_Res%2);
      C3Table(G_Res)=val;
};

}


define (instr=POP_CTRL_family)
{

  fields = (OPCD, CTRL);
  blk = lsu;


define (instr=POP_CTRL)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_CTRL.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop a control register from the stack""";
attrs = (LSTK,V2);
# 509 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POP_CTRL_family(OPCD(OPCD), CTRL(CTRL));
  syntax = ( "pop %f",CTRL);
}


action=
{

      bits <32> val ;
      update_arith_sp(-4);
      val = mem_write_pop(CTRL%2);
      CtrlTable(CTRL)=val;
};

}


define (instr=PUSHN_Dn_family)
{

  fields = (OPCD, Src1);



  blk = lsu;


define (instr=PUSHN_Dn)
{

  alias = PUSHN_Dn_family(OPCD(OPCD), Src1(FFF));
}
define (instr=PUSHN_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push a data register (32 bits) to the normal stack""";
attrs = (LSTK,V2);
# 544 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSHN_Dn_family(OPCD(OPCD), Src1(Da));
  syntax = ( "pushn %f",Da);
}


action=
{




      update_arith_nsp(4);
      if (Src1%2==0) {
  mem_write_pushn_even(D(Src1));
      }
      else {
  mem_write_pushn_odd(D(Src1));
      }
};

}


define (instr=PUSHN_Dn_E_family)
{

  fields = (OPCD, Src1, Src2, Src3);



  blk = lsu;


define (instr=PUSHN_Dn_E)
{

  alias = PUSHN_Dn_E_family(OPCD(OPCD), Src1(FFF), Src2(FFF+1), Src3(FFF-1));
}
define (instr=PUSHN_Da_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_Da_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push a data register extension to the normal stack""";
attrs = (LSTK,V2);
# 585 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSHN_Dn_E_family(OPCD(OPCD), Src1(Da), Src2(Da+1), Src3(Da-1));
  syntax = ( "pushn %f.e",Da);
}


action=
{






      update_arith_nsp(4);
   bits <32> val;

   if (Src1%2==0) {
   val = concat(zero(7),L(Src2),D(Src2).E, zero(7),L(Src1),D(Src1).E);
         mem_write_pushn_even(val);
   } else {
   val = concat(zero(7),L(Src1),D(Src1).E, zero(7),L(Src3),D(Src3).E);
         mem_write_pushn_odd(val);
   }

};

}


define (instr=PUSHN_Da_E_Db_E_family)
{

  fields = (OPCD, Src1, Src2);



  blk = lsu;


define (instr=PUSHN_Da_E_Db_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_Da_E_Db_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push a pair data register extensions to the normal stack""";
attrs = (LSTK,V2);
# 627 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = PUSHN_Da_E_Db_E_family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db));
  syntax = ( "pushn %f",Dab_e);

   }


action=
{




      update_arith_nsp(4);
      bits <32> val = concat(zero(7),L(Src2),D(Src2).E, zero(7),L(Src1),D(Src1).E);
      mem_write_pushn_even(val);

};

}


define (instr=PUSHN_Rn_family)
{

   fields = (OPCD, R_Src1);



   blk = lsu;

   define (instr=PUSHN_Rn)
   {

      alias = PUSHN_Rn_family(OPCD(OPCD), R_Src1(RRR));
}
define (instr=PUSHN_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push an address register to the normal stack""";
attrs = (LSTK,V2);
# 669 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
      alias = PUSHN_Rn_family(OPCD(OPCD), R_Src1(Ra));
  syntax = ( "pushn %f",Ra);
}


   action=
   {




      update_arith_nsp(4);
      if (R_Src1%2==0)
  mem_write_pushn_even(R(R_Src1));
     else {mem_write_pushn_odd(R(R_Src1));}
   };

}


define (instr=PUSHN_C6_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;


define (instr=PUSHN_C6)
{

  alias = PUSHN_C6_family(OPCD(OPCD), G_Src1(TTTT));
}


action=
{



      if (check_legal_C6Table(G_Src1)) {
         update_arith_nsp(4);
  if (G_Src1%2==0) {
     mem_write_pushn_even(C6Table2(G_Src1));
  }
  else {
     mem_write_pushn_odd(C6Table1(G_Src1));
  }
      }

};

}


define (instr=PUSHN_C3_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;

define (instr=PUSHN_C3)
{

  alias = PUSHN_C3_family(OPCD(OPCD), G_Src1(DDDD));
}

action=
{




   update_arith_nsp(4);
   if (G_Src1%2==0)
      mem_write_pushn_even(C3Table(G_Src1));
  else {mem_write_pushn_odd(C3Table(G_Src1));}

};

}


define (instr=PUSHN_CTRL_family)
{

  fields = (OPCD, CTRL);



  blk = lsu;

define (instr=PUSHN_CTRL)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_CTRL.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push a control register to the normal stack""";
attrs = (LSTK,V2);
# 769 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSHN_CTRL_family(OPCD(OPCD), CTRL(CTRL));
  syntax = ( "pushn %f",CTRL);
}

action=
{




   update_arith_nsp(4);
   if (CTRL%2==0) {
      mem_write_pushn_even(CtrlTable(CTRL));
   }
   else {
      mem_write_pushn_odd(CtrlTable(CTRL));
   }

};

}


define (instr=POPN_Dn_family)
{

  fields = (OPCD, Res);



  blk = lsu;


define (instr=POPN_Dn)
{

  alias = POPN_Dn_family(OPCD(OPCD), Res(FFF));
}
define (instr=POPN_Da)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_Da.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 32-bits to a data register from the normal stack""";
attrs = (LSTK,V2);
# 810 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POPN_Dn_family(OPCD(OPCD), Res(Da));
  syntax = ( "popn %f",Da);
}


action=
{




      bits <32> val;
      update_arith_nsp(-4);
      val = mem_write_popn(Res%2);
      D(Res)=signExtend(val, 40);



};

}


define (instr=POPN_Dn_E_family)
{

  fields = (OPCD, Res);



  blk = lsu;


define (instr=POPN_Dn_E)
{

  alias = POPN_Dn_E_family(OPCD(OPCD), Res(FFF));
}
define (instr=POPN_Da_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_Da_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Da(0)),
 (bits(17),Da(1)),
 (bits(18),Da(2)),
 (bits(19),Da(3)),
 (bits(20),Da(4)),
 (bits(21),Da(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop a data register extension from the normal stack""";
attrs = (LSTK,V2);
# 851 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POPN_Dn_E_family(OPCD(OPCD), Res(Da));
  syntax = ( "popn %f.e",Da);
}


action=
{





   bits <32> val;
   update_arith_nsp(-4);
   val = mem_write_popn(Res%2);
   if ((Res%2)==1) {
      D(Res).E = val(23,16);



   } else {
      D(Res).E = val(7,0);



   }
};

}


define (instr=POPN_Da_E_Db_E_family)
{

  fields = (OPCD, Src1, Res, Res2);



  blk = lsu;


define (instr=POPN_Da_E_Db_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_Da_E_Db_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop a data register extension pair from the normal stack""";
attrs = (LSTK,V2);
# 895 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = POPN_Da_E_Db_E_family(OPCD(OPCD), Src1(Dab.Da), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "popn %f",Dab_e);

   }


action=
{




      bits <32> val;
      update_arith_nsp(-4);
      val = mem_write_popn(Src1%2);
      D(Res).E = val(7,0);



      D(Res2).E = val(23,16);




};

}


define (instr=POPN_Rn_family)
{

  fields = (OPCD, R_Res);



  blk = lsu;


define (instr=POPN_Rn)
{

  alias = POPN_Rn_family(OPCD(OPCD), R_Res(RRR));
}
define (instr=POPN_Ra)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_Ra.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Ra(0)),
 (bits(17),Ra(1)),
 (bits(18),Ra(2)),
 (bits(19),Ra(3)),
 (bits(20),Ra(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop an address register from the normal stack""";
attrs = (LSTK,V2);
# 946 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POPN_Rn_family(OPCD(OPCD), R_Res(Ra));
  syntax = ( "popn %f",Ra);
}


action=
{




   bits <32> val;
   update_arith_nsp(-4);
   val=mem_write_popn(R_Res%2);
   R(R_Res) = val;

};

}


define (instr=POPN_C6_family)
{

  fields = (OPCD, G_Res);



  blk = lsu;


define (instr=POPN_C6)
{

  alias = POPN_C6_family(OPCD(OPCD), G_Res(TTTT));
}


action=
{




    bits <32> val;
    if (check_legal_C6Table(G_Res)) {
       update_arith_nsp(-4);
       val = mem_write_popn(G_Res%2);
       if (G_Res(0)==1) { C6Table1(G_Res)=val; }
       else { C6Table2(G_Res)=val; }
    }
};

}

define (instr=POPN_C3_family)
{

  fields = (OPCD, G_Res);



  blk = lsu;


define (instr=POPN_C3)
{

  alias = POPN_C3_family(OPCD(OPCD), G_Res(DDDD));
}


action=
{




   bits <32> val;
   update_arith_nsp(-4);
   val = mem_write_popn(G_Res%2);
   C3Table(G_Res) = val;
};

}


define (instr=POPN_CTRL_family)
{

  fields = (OPCD, CTRL);
  blk = lsu;

define (instr=POPN_CTRL)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_CTRL.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRL(0)),
 (bits(17),CTRL(1)),
 (bits(18),CTRL(2)),
 (bits(19),CTRL(3)),
 (bits(20),CTRL(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop a control register from the normal stack""";
attrs = (LSTK,V2);
# 1042 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POPN_CTRL_family(OPCD(OPCD), CTRL(CTRL));
  syntax = ( "popn %f",CTRL);
}


action=
{
   bits <32> val;
   update_arith_nsp(-4);
   val = mem_write_popn(CTRL%2);
   CtrlTable(CTRL) = val;
};

}


define (instr=POP_2L_Da_Db_family)
{

  fields = (OPCD, Res, Res2);



  blk = lsu;


define (instr=POP_2L_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_2L_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 2 full data registes from the stack (128-bit access)""";
attrs = (LSTK,V5);
# 1071 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = POP_2L_Da_Db_family(OPCD(OPCD), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "pop.2l %f",Dab);

   }


action=
{




    bits <64> val;
    update_arith_sp(-8);
    val = mem_write_pop2l();
    D(Res2) = signExtend(val(31,0),40);



    D(Res) = signExtend(val(63,32),40);



};


}


define (instr=POP_2L_Ra_Rb_family)
{

  fields = (OPCD, R_Res, R_Res2);



  blk = lsu;


define (instr=POP_2L_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_2L_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 2 address regisetrs from the stack""";
attrs = (LSTK,V5);
# 1117 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = POP_2L_Ra_Rb_family(OPCD(OPCD), R_Res(Rab.Ra), R_Res2(Rab.Rb));
  syntax = ( "pop.2l %f",Rab);

   }


action=
{




      bits <64> val;
      update_arith_sp(-8);
      val = mem_write_pop2l();
      R(R_Res2) = val(31,0);
      R(R_Res) = val(63,32);

};

}


define (instr=POP_2L_Da_Db_Dc_Dd_family)
{

  fields = (OPCD, Res, Res2, Res3, Res4);



  blk = lsu;


define (instr=POP_2L_Da_Db_Dc_Dd)
{

  alias = POP_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=POP_2L_Da_E_Db_E_Dc_E_Dd_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_2L_Da_E_Db_E_Dc_E_Dd_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 4 extension registers from the stack (64-bit access)""";
attrs = (LSTK,V5);
# 1162 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POP_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "pop.2l %f",Dabcd_e);
}


action=
{




      bits <64> val;
      update_arith_sp(-8);
      val = mem_write_pop2l();
      D(Res3).E = val(7,0);



      D(Res4).E = val(23,16);



      D(Res).E = val(39,32);



      D(Res2).E = val(55,48);





};

}


define (instr=POP_2L_C51_family)
{

  fields = (OPCD, G_Res);



  blk = lsu;


define (instr=POP_2L_C51)
{

  alias = POP_2L_C51_family(OPCD(OPCD), G_Res(EEE));
}


action=
{



    bits <64> val;
    update_arith_sp(-8);
    val = mem_write_pop2l();
    C51Table(G_Res) = val;
};

}


define (instr=POP_2L_C52_family)
{

  fields = (OPCD, G_Res);



  blk = lsu;


define (instr=POP_2L_C52)
{

  alias = POP_2L_C52_family(OPCD(OPCD), G_Res(eee));
}


action=
{




    bits <64> val;
    if (check_legal_C5Table(G_Res)) {
       update_arith_sp(-8);
       val = mem_write_pop2l();
       C52Table(G_Res) = val;
    }
};

}


define (instr=POP_2L_CTRLa_CTRLb_family)
{

  fields = (OPCD, CTRLab);
  blk = lsu;


define (instr=POP_2L_CTRLa_CTRLb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POP_2L_CTRLa_CTRLb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRLab(0)),
 (bits(17),CTRLab(1)),
 (bits(18),CTRLab(2)),
 (bits(19),CTRLab(3)),
 (bits(20),CTRLab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 2 control regisetrs from the stack""";
attrs = (LSTK,V5);
# 1274 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POP_2L_CTRLa_CTRLb_family(OPCD(OPCD), CTRLab(CTRLab));
  syntax = ( "pop.2l %f",CTRLab);
}


action=
{

    bits <64> val;
    update_arith_sp(-8);
    val = mem_write_pop2l();
    CTRLabTable(CTRLab) = val;
};

}


define (instr=POP_2L_BTR0_BTR1_family)
{

  fields = (OPCD);



  blk = lsu;


define (instr=POP_2L_BTR0_BTR1)
{

  alias = POP_2L_BTR0_BTR1_family(OPCD(OPCD));
}


action=
{




    bits <64> val;
    update_arith_sp(-8);
    val = mem_write_pop2l();
    BTR1 = val(31,0);
    BTR0 = val(63,32);

};

}


define (instr=POPN_2L_Da_Db_family)
{

  fields = (OPCD, Res, Res2);



  blk = lsu;

define (instr=POPN_2L_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_2L_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 2x32 bits to two data registers from the normal stack""";
attrs = (LSTK,V5);
# 1337 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = POPN_2L_Da_Db_family(OPCD(OPCD), Res(Dab.Da), Res2(Dab.Db));
  syntax = ( "popn.2l %f",Dab);

   }


action=
{




   bits <64> val;
   update_arith_nsp(-8);
   val = mem_write_popn2l();
   D(Res2) = signExtend(val(31,0),40);



   D(Res) = signExtend(val(63,32),40);




};


};


define (instr=POPN_2L_Ra_Rb_family)
{

  fields = (OPCD, R_Res, R_Res2);



  blk = lsu;


define (instr=POPN_2L_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_2L_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 2 address regisetrs from the normal stack""";
attrs = (LSTK,V5);
# 1384 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = POPN_2L_Ra_Rb_family(OPCD(OPCD), R_Res(Rab.Ra), R_Res2(Rab.Rb));
  syntax = ( "popn.2l %f",Rab);

   }


action=
{




   bits <64> val;
   update_arith_nsp(-8);
   val= mem_write_popn2l();
   R(R_Res2) = val(31,0);
   R(R_Res) = val(63,32);
};

};


define (instr=POPN_2L_Da_Db_Dc_Dd_family)
{

  fields = (OPCD, Res, Res2, Res3, Res4);



  blk = lsu;


define (instr=POPN_2L_Da_Db_Dc_Dd)
{

  alias = POPN_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Res(k.Da), Res2(k.Db), Res3(k.Dc), Res4(k.Dd));
}
define (instr=POPN_2L_Da_E_Db_E_Dc_E_Dd_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_2L_Da_E_Db_E_Dc_E_Dd_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 4 extension regisetrs from the normal stack""";
attrs = (LSTK,V5);
# 1428 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POPN_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Res(Dabcd.Da), Res2(Dabcd.Db), Res3(Dabcd.Dc), Res4(Dabcd.Dd));
  syntax = ( "popn.2l %f",Dabcd_e);
}


action=
{




      bits <64> val;
      update_arith_nsp(-8);
      val=mem_write_popn2l();
      D(Res3).E = val(7,0);



      D(Res4).E = val(23,16);



      D(Res).E = val(39,32);



      D(Res2).E = val(55,48);




};


};


define (instr=POPN_2L_C51_family)
{

  fields = (OPCD, G_Res);



  blk = lsu;


define (instr=POPN_2L_C51)
{

  alias = POPN_2L_C51_family(OPCD(OPCD), G_Res(EEE));
}


action=
{



   bits <64> val;
   update_arith_nsp(-8);
   val=mem_write_popn2l();
   C51Table(G_Res) = val;
};


};


define (instr=POPN_2L_C52_family)
{

  fields = (OPCD, G_Res);



  blk = lsu;


define (instr=POPN_2L_C52)
{

  alias = POPN_2L_C52_family(OPCD(OPCD), G_Res(eee));
}


action=
{



   bits <64> val;
   if (check_legal_C5Table(G_Res)) {
      update_arith_nsp(-8);
      val=mem_write_popn2l();
      C52Table(G_Res) = val;
   }
};


};


define (instr=POPN_2L_CTRLa_CTRLb_family)
{

  fields = (OPCD, CTRLab);
  blk = lsu;

define (instr=POPN_2L_CTRLa_CTRLb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/POPN_2L_CTRLa_CTRLb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b0),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRLab(0)),
 (bits(17),CTRLab(1)),
 (bits(18),CTRLab(2)),
 (bits(19),CTRLab(3)),
 (bits(20),CTRLab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Pop 2 control regisetrs from the normal stack""";
attrs = (LSTK,V5);
# 1540 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = POPN_2L_CTRLa_CTRLb_family(OPCD(OPCD), CTRLab(CTRLab));
  syntax = ( "popn.2l %f",CTRLab);
}


action=
{
   bits <64> val;
   update_arith_nsp(-8);
   val=mem_write_popn2l();
   CTRLabTable(CTRLab) = val;
};


};




define (instr=POPN_2L_BTR0_BTR1_family)
{

  fields = (OPCD);



  blk = lsu;

define (instr=POPN_2L_BTR0_BTR1)
{

  alias = POPN_2L_BTR0_BTR1_family(OPCD(OPCD));
}

action=
{



   bits <64> val;
   update_arith_nsp(-8);
   val=mem_write_popn2l();
   BTR1 = val(31,0);
   BTR0 = val(63,32);
};


};


define (instr=PUSH_2L_Da_Db_family)
{

  fields = (OPCD, Src1, Src2);



  blk = lsu;


define (instr=PUSH_2L_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_2L_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push 2 data regisetrs (2x32 bits) to the stack""";
attrs = (LSTK,V5);
# 1603 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = PUSH_2L_Da_Db_family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db));
  syntax = ( "push.2l %f",Dab);

   }


action=
{




   update_arith_sp(8);
   bits <64> val;
   val = concat( D(Src1)(31,0), D(Src2)(31,0));
   mem_write_push2l (val);
};
};


define (instr=PUSH_2L_Ra_Rb_family)
{

  fields = (OPCD, R_Src1, R_Src2);



  blk = lsu;


define (instr=PUSH_2L_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_2L_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push 2 address registers to the stack""";
attrs = (LSTK,V5);
# 1640 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = PUSH_2L_Ra_Rb_family(OPCD(OPCD), R_Src1(Rab.Ra), R_Src2(Rab.Rb));
  syntax = ( "push.2l %f",Rab);

   }


action=
{




   update_arith_sp(8);
   bits <64> val = concat (R(R_Src1),R(R_Src2));
   mem_write_push2l(val);
};


};


define (instr=PUSH_2L_Da_Db_Dc_Dd_family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4);



  blk = lsu;


define (instr=PUSH_2L_Da_Db_Dc_Dd)
{

  alias = PUSH_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd));
}
define (instr=PUSH_2L_Da_E_Db_E_Dc_E_Dd_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_2L_Da_E_Db_E_Dc_E_Dd_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push 4 data register extension is to the stack""";
attrs = (LSTK,V5);
# 1683 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSH_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd));
  syntax = ( "push.2l %f",Dabcd_e);
}


action=
{




      update_arith_sp(8);
      bits <16> val_a = concat( zero(7),L(Src1),D(Src1).E);
      bits <16> val_b = concat( zero(7),L(Src2),D(Src2).E);
      bits <16> val_c = concat( zero(7),L(Src3),D(Src3).E);
      bits <16> val_d = concat( zero(7),L(Src4),D(Src4).E);
      bits <64> val = concat(val_b,val_a,val_d,val_c );
      mem_write_push2l(val);
};


};


define (instr=PUSH_2L_C51_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;


define (instr=PUSH_2L_C51)
{

  alias = PUSH_2L_C51_family(OPCD(OPCD), G_Src1(EEE));
}


action=
{



      update_arith_sp(8);
      mem_write_push2l(C51Table(G_Src1));
};


};


define (instr=PUSH_2L_C52_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;


define (instr=PUSH_2L_C52)
{

  alias = PUSH_2L_C52_family(OPCD(OPCD), G_Src1(eee));
}

action=
{



   if (check_legal_C52Table(G_Src1)) {
      update_arith_sp(8);
      mem_write_push2l(C52Table(G_Src1));
   }
};


};


define (instr=PUSH_2L_CTRLa_CTRLb_family)
{

  fields = (OPCD, CTRLab);
  blk = lsu;

define (instr=PUSH_2L_CTRLa_CTRLb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSH_2L_CTRLa_CTRLb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b0),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRLab(0)),
 (bits(17),CTRLab(1)),
 (bits(18),CTRLab(2)),
 (bits(19),CTRLab(3)),
 (bits(20),CTRLab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push 2 control registers to the stack""";
attrs = (LSTK,V5);
# 1777 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSH_2L_CTRLa_CTRLb_family(OPCD(OPCD), CTRLab(CTRLab));
  syntax = ( "push.2l %f",CTRLab);
}


action=
{
   update_arith_sp(8);
   mem_write_push2l(CTRLabTable(CTRLab));
};


};



define (instr=PUSH_2L_BTR0_BTR1_family)
{

  fields = (OPCD);



  blk = lsu;


define (instr=PUSH_2L_BTR0_BTR1)
{

  alias = PUSH_2L_BTR0_BTR1_family(OPCD(OPCD));
}


action=
{



      update_arith_sp(8);
      mem_write_push2l(concat(S_BTR0,S_BTR1));
};


};




define (instr=PUSHN_2L_Da_Db_family)
{

  fields = (OPCD, Src1, Src2);



  blk = lsu;


define (instr=PUSHN_2L_Da_Db)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_2L_Da_Db.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b0),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dab(0)),
 (bits(17),Dab(1)),
 (bits(18),Dab(2)),
 (bits(19),Dab(3)),
 (bits(20),Dab(4)),
 (bits(21),Dab(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push 2 data regisetrs (2x32 bits) to the normal stack""";
attrs = (LSTK,V5);
# 1838 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = PUSHN_2L_Da_Db_family(OPCD(OPCD), Src1(Dab.Da), Src2(Dab.Db));
  syntax = ( "pushn.2l %f",Dab);

   }


action=
{




      update_arith_nsp(8);
      bits <64> val;
      val = concat( D(Src1)(31,0), D(Src2)(31,0));
      mem_write_pushn2l(val);
};


};


define (instr=PUSHN_2L_Ra_Rb_family)
{

  fields = (OPCD, R_Src1, R_Src2);



  blk = lsu;


define (instr=PUSHN_2L_Ra_Rb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_2L_Ra_Rb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b0),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Rab(0)),
 (bits(17),Rab(1)),
 (bits(18),Rab(2)),
 (bits(19),Rab(3)),
 (bits(20),Rab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push 2 address registers to the normal stack""";
attrs = (LSTK,V5);
# 1877 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2




  alias = PUSHN_2L_Ra_Rb_family(OPCD(OPCD), R_Src1(Rab.Ra), R_Src2(Rab.Rb));
  syntax = ( "pushn.2l %f",Rab);

   }


action=
{





      update_arith_nsp(8);
      bits <64> val = concat (R(R_Src1),R(R_Src2));
      mem_write_pushn2l(val);
};


};


define (instr=PUSHN_2L_Da_Db_Dc_Dd_family)
{

  fields = (OPCD, Src1, Src2, Src3, Src4);



  blk = lsu;


define (instr=PUSHN_2L_Da_Db_Dc_Dd)
{

  alias = PUSHN_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Src1(k.Da), Src2(k.Db), Src3(k.Dc), Src4(k.Dd));
}
define (instr=PUSHN_2L_Da_E_Db_E_Dc_E_Dd_E)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_2L_Da_E_Db_E_Dc_E_Dd_E.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b1),
 (bits(6),b0),
 (bits(7),b1),
 (bits(8),b1),
 (bits(9),b0),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),Dabcd(0)),
 (bits(17),Dabcd(1)),
 (bits(18),Dabcd(2)),
 (bits(19),Dabcd(3)),
 (bits(20),Dabcd(4)),
 (bits(21),Dabcd(5)),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push 4 data register extension is to the normal stack""";
attrs = (LSTK,V5);
# 1921 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSHN_2L_Da_Db_Dc_Dd_family(OPCD(OPCD), Src1(Dabcd.Da), Src2(Dabcd.Db), Src3(Dabcd.Dc), Src4(Dabcd.Dd));
  syntax = ( "pushn.2l %f",Dabcd_e);
}


action=
{




      update_arith_nsp(8);
      bits <16> val_a = concat( zero(7),L(Src1),D(Src1).E);
      bits <16> val_b = concat( zero(7),L(Src2),D(Src2).E);
      bits <16> val_c = concat( zero(7),L(Src3),D(Src3).E);
      bits <16> val_d = concat( zero(7),L(Src4),D(Src4).E);
      bits <64> val = concat(val_b,val_a,val_d,val_c );

      mem_write_pushn2l(val);
};


};


define (instr=PUSHN_2L_C51_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;


define (instr=PUSHN_2L_C51)
{

  alias = PUSHN_2L_C51_family(OPCD(OPCD), G_Src1(EEE));
}


action=
{




      update_arith_nsp(8);
      mem_write_pushn2l(C51Table(G_Src1));
};


};


define (instr=PUSHN_2L_C52_family)
{

  fields = (OPCD, G_Src1);



  blk = lsu;


define (instr=PUSHN_2L_C52)
{

  alias = PUSHN_2L_C52_family(OPCD(OPCD), G_Src1(eee));
}


action=
{




   if (check_legal_C52Table(G_Src1)) {
      update_arith_nsp(8);
      mem_write_pushn2l(C52Table(G_Src1));
   }
};


};


define (instr=PUSHN_2L_CTRLa_CTRLb_family)
{

  fields = (OPCD, CTRLab);
  blk = lsu;

define (instr=PUSHN_2L_CTRLa_CTRLb)
{
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/instrs_encoding/PUSHN_2L_CTRLa_CTRLb.info" 1
fields=(
 (bits(0),b0),
 (bits(1),b0),
 (bits(2),b0),
 (bits(3),b0),
 (bits(4),b1),
 (bits(5),b0),
 (bits(6),b1),
 (bits(7),b0),
 (bits(8),b1),
 (bits(9),b1),
 (bits(10),b1),
 (bits(11),b1),
 (bits(12),PR(0)),
 (bits(13),PR(1)),
 (bits(14),SG),
 (bits(15),b1),
 (bits(16),CTRLab(0)),
 (bits(17),CTRLab(1)),
 (bits(18),CTRLab(2)),
 (bits(19),CTRLab(3)),
 (bits(20),CTRLab(4)),
 (bits(21),b1),
 (bits(22),b1),
 (bits(23),b1),
 (bits(24),b1),
 (bits(25),b1),
 (bits(26),b1),
 (bits(27),b1),
 (bits(28),b1),
 (bits(29),b1),
 (bits(30),b1),
 (bits(31),b0),
 (bits(32),PR(2)),
 (bits(33),reserved),
 (bits(34),reserved),
 (bits(35),reserved));

type = TwoWords;
attrs = (serial_two_word);
"""Push 2 control registers to the normal stack""";
attrs = (LSTK,V5);
# 2019 "/vobs/vb_dp_arch/ADLsim/sc3900/agu_stack.adl" 2
  alias = PUSHN_2L_CTRLa_CTRLb_family(OPCD(OPCD), CTRLab(CTRLab));
  syntax = ( "pushn.2l %f",CTRLab);
}


action=
{
   update_arith_nsp(8);
   mem_write_pushn2l(CTRLabTable(CTRLab));
};


};



define (instr=PUSHN_2L_BTR0_BTR1_family)
{

  fields = (OPCD);



  blk = lsu;


  define (instr=PUSHN_2L_BTR0_BTR1)
  {

     alias = PUSHN_2L_BTR0_BTR1_family(OPCD(OPCD));
  }


  action=
  {




     update_arith_nsp(8);
     mem_write_pushn2l(concat(S_BTR0,S_BTR1));
  };

};
# 66 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/attrs_sc3900.adl" 1
defmod (instr=
 (
 ANDA_Ra_Rb_Rn,
 ANDA_Ra_Rb_Rn_ipu,
 ASL2A_Ra_Rn,
 ASLA_Ra_Rn,
 ASRA_Ra_Rn,
 EORA_Ra_Rb_Rn,
 EORA_Ra_Rb_Rn_ipu,
 LSRA_Ra_Rn,
 ORA_Ra_Rb_Rn,
 ORA_Ra_Rb_Rn_ipu,
 SXTA_B_Ra_Rn,
 SXTA_B_Ra_Rn_ipu,
 SXTA_W_Ra_Rn,
 SXTA_W_Ra_Rn_ipu,
 TFRA_Ra_Rn,
 TFRA_Ra_Rn_ipu,
 ZXTA_B_Ra_Rn,
 ZXTA_B_Ra_Rn_ipu,
 ZXTA_W_Ra_Rn,
 ZXTA_W_Ra_Rn_ipu
 )) {
 attrs = (instr_tbl_AAU);
 }

defmod (instr=
 (
 ADDA_Ra_Rb_Rn,
 ADDA_Ra_Rb_Rn_ipu,
 ADDA__s16_Ra_Rn,
 ADDA__s16_Ra_Rn_ipu,
 ADDA__u5_Ra_Rn,
 ADDL1A_Ra_Rb_Rn,
 ADDL1A_Ra_Rb_Rn_ipu,
 ADDL2A_Ra_Rb_Rn,
 ADDL2A_Ra_Rb_Rn_ipu,
 ADDL3A_Ra_Rb_Rn,
 ADDL3A_Ra_Rb_Rn_ipu,
 ADDL4A_Ra_Rb_Rn,
 ADDL4A_Ra_Rb_Rn_ipu,
 SUBA_Ra_Rb_Rn,
 SUBA_Ra_Rb_Rn_ipu,
 SUBA__u5_Ra_Rn
 )) {
 attrs = (instr_tbl_AAU_MMA);
 }

defmod (instr=
 (
 DFETCHW__Rn_,
 DFETCHW__Rn_pRk,
 DFETCH__Rn_,
 DFETCH__Rn_pRk,
 DFL2C0__Rn_,
 DFL2C0__Rn_pRk,
 DFL2C1__Rn_,
 DFL2C1__Rn_pRk,
 DFL2C2__Rn_,
 DFL2C2__Rn_pRk,
 DFL2C3__Rn_,
 DFL2C3__Rn_pRk,
 DFLUSH__Rn_,
 DFLUSH__Rn_pRk,
 DMALLOC__Rn_,
 DMALLOC__Rn_pRk,
 DQUERY__Rn_,
 DQUERY__Rn_pRk,
 DSYNC__Rn_,
 DSYNC__Rn_pRk,
 PF06_RelAdd15_4,
 PF06_Rn,
 PFETCH_RelAdd15_4,
 PFETCH_Rn,
 PFL2C0_RelAdd15_4,
 PFL2C0_Rn,
 PFL2C1_RelAdd15_4,
 PFL2C1_Rn,
 PFL2C2_RelAdd15_4,
 PFL2C2_Rn,
 PFL2C3_RelAdd15_4,
 PFL2C3_Rn,
 PQUERY_RelAdd15_4,
 PQUERY_Rn
 )) {
 attrs = (instr_tbl_ACH);
 }

defmod (instr=
 (
 DOENSQn_Ra,
 DOENn_Ra
 )) {
 attrs = (instr_tbl_ALC_ARS);
 }

defmod (instr=
 (
 DOENSQn_Da,
 DOENn_Da
 )) {
 attrs = (instr_tbl_ALC_DRS);
 }

defmod (instr=
 (
 DOENSQn__u16,
 DOENn__u16
 )) {
 attrs = (instr_tbl_ALC_IMM_RF);
 }

defmod (instr=
 (
 DEBUG,
 DEBUGEV,
 STOP,
 WAIT
 )) {
 attrs = (instr_tbl_APC);
 }

defmod (instr=
 (
 BMCHGA__u16_Dn_H,
 BMCHGA__u16_Dn_L,
 BMCHGA__u16_Rn_H,
 BMCHGA__u16_Rn_L,
 BMCLRA__u16_Dn_H,
 BMCLRA__u16_Dn_L,
 BMCLRA__u16_Rn_H,
 BMCLRA__u16_Rn_L,
 BMSETA__u16_Dn_H,
 BMSETA__u16_Dn_L,
 BMSETA__u16_Rn_H,
 BMSETA__u16_Rn_L
 )) {
 attrs = (instr_tbl_BMU);
 }

defmod (instr=
 (
 BRA_RelAdd20,
 BSR_RelAdd20,
 JMP_AbsAdd31,
 JMP_Rn,
 JSR_AbsAdd31,
 JSR_Rn,
 RTE,
 RTEKRI,
 RTERI
 )) {
 attrs = (instr_tbl_COF);
 }

defmod (instr=
 (
 RTS,
 RTSTK
 )) {
 attrs = (instr_tbl_COF_RTS);
 }

defmod (instr=
 (
 ABS2_Da_Dn,
 ABS_Da_Dn,
 ADC_Da_Db_Dn,
 ADD_Da_Db_Dn,
 ADD_W_Da_H_Dn_H,
 ADD_W_Da_H_Dn_L,
 ADD_W_Da_L_Dn_H,
 ADD_W_Da_L_Dn_L,
 ADD__u5_Da_Dn,
 AVGU4_Da_Db_Dn,
 DIVP0_Da_Dn,
 DIVP1_Da_Dn,
 DIVP2_Da_Dn,
 DIVP3_Da_Dn,
 DIV_Da_Dn,
 IADD_Da_Db_Dn,
 IADD__u5_Da_Dn,
 INCF_Da_Dn,
 ISUB_Da_Db_Dn,
 ISUB__u5_Da_Dn,
 MAX2_Da_Db_Dn,
 MAXM_Da_Db_Dn,
 MAX_Da_Db_Dn,
 MIN2_Da_Db_Dn,
 MIN_Da_Db_Dn,
 NEG2_Da_Dn,
 NEG_Da_Dn,
 PACKW_2F_Da_Db_Dn,
 PACK_4B_Da_Db_Dn,
 RND_Da_Dn,
 SAT2_W_Da_Dn,
 SATU20_B_Da_Dn,
 SAT_F_Da_Dn,
 SAT_L_Da_Dn,
 SBC_Da_Db_Dn,
 SOD2AAII_Da_Db_Dn,
 SOD2AAXX_Da_Db_Dn,
 SOD2ASII_Da_Db_Dn,
 SOD2ASXX_Da_Db_Dn,
 SOD2SAII_Da_Db_Dn,
 SOD2SAXX_Da_Db_Dn,
 SOD2SSII_Da_Db_Dn,
 SOD2SSXX_Da_Db_Dn,
 SUBL_Da_Db_Dn,
 SUB_Da_Db_Dn,
 SUB_W_Da_H_Dn_H,
 SUB_W_Da_H_Dn_L,
 SUB_W_Da_L_Dn_H,
 SUB_W_Da_L_Dn_L,
 SUB__u5_Da_Dn,
 TFR_Da_Dn,
 TFR__s32_Dn,
 VTRACE__0__2_Da_Dn,
 VTRACE__0__3_Da_Dn,
 VTRACE__0__4_Da_Dn,
 VTRACE__1__4_Da_Dn,
 VTRACE__2__4_Da_Dn,
 VTRACE__3__4_Da_Dn,
 VTRACE__4__4_Da_Dn,
 VTRACE__5__4_Da_Dn
 )) {
 attrs = (instr_tbl_DAU);
 }

defmod (instr=
 (
 SAD4_Da_Db_Dn
 )) {
 attrs = (instr_tbl_DAU_SAD4);
 }

defmod (instr=
 (
 CMPEQD_Da_Db_Dn,
 CMPEQD__s32_Da_Dn,
 CMPGED_Da_Db_Dn,
 CMPGED__s32_Da_Dn,
 CMPGTD_Da_Db_Dn,
 CMPGTD__s32_Da_Dn,
 CMPLED__s32_Da_Dn,
 CMPLTD__s32_Da_Dn,
 CMPNED_Da_Db_Dn,
 CMPNED__s32_Da_Dn
 )) {
 attrs = (instr_tbl_DAU_Tbit);
 }

defmod (instr=
 (
 CAST_F_Da_H_Dn,
 CAST_F_Da_L_Dn,
 CLIP2__u5_Da_Dn,
 CLIP__u5_Da_Dn
 )) {
 attrs = (instr_tbl_DBS);
 }

defmod (instr=
 (
 ASLL2_Da_Db_Dn,
 ASLL2__u5_Da_Dn,
 ASLLS_Da_Db_Dn,
 ASLLS__u5_Da_Dn,
 ASLL_Da_Db_Dn,
 ASLL__u5_Da_Dn,
 ASRR2_Da_Db_Dn,
 ASRR2__u5_Da_Dn,
 ASRRS_Da_Db_Dn,
 ASRRS__u5_Da_Dn,
 ASRR_Da_Db_Dn,
 ASRR__u5_Da_Dn,
 LSLL2_Da_Db_Dn,
 LSLL_Da_Db_Dn,
 LSRR2_Da_Db_Dn,
 LSRR2__u5_Da_Dn,
 LSRR_Da_Db_Dn,
 LSRR_L_Da_Db_Dn,
 LSRR_L__u5_Da_Dn,
 LSRR__u5_Da_Dn
 )) {
 attrs = (instr_tbl_DBS_DSH);
 }

defmod (instr=
 (
 AND_Da_Db_Dn,
 AND__s32_Da_Dn,
 BDEINTRLV_Da_Dn,
 BDINTRLV3B_Da_Dn,
 BINTRLV3B_Da_Dn,
 BINTRLV_Da_Dn,
 BREV4_Da_Dn,
 BREV_Da_Dn,
 CLB_Da_Dn,
 CLIP20__u5_Da_Dn,
 COB_Da_Dn,
 DOALIGN_Da_Db_Dn,
 EOR_Da_Db_Dn,
 EXTRACTU__width6__offset6_Da_Dn,
 NAND_Da_Db_Dn,
 NEOR_Da_Db_Dn,
 NOR_Da_Db_Dn,
 NOT_Da_Db_Dn,
 OR_Da_Db_Dn,
 ROL_Da_Dn,
 ROR_Da_Dn,
 SWAPB2_Da_Dn,
 SWAPB_Da_Dn,
 SXT_B_Da_Dn,
 SXT_L_Da_Dn,
 SXT_W_Da_Dn,
 ZXT_B_Da_Dn,
 ZXT_L_Da_Dn,
 ZXT_W_Da_Dn
 )) {
 attrs = (instr_tbl_DLU);
 }

defmod (instr=
 (
 EXTRACTU_Da_Db_Dn,
 EXTRACT_Da_Db_Dn,
 EXTRACT__width6__offset6_Da_Dn,
 INSERT_Da_Db_Dn,
 INSERT__width6__offset6_Da_Dn
 )) {
 attrs = (instr_tbl_DLU_excep);
 }

defmod (instr=
 (
 DMACSS_Da_Db_Dn,
 DMACSU_Da_Db_Dn,
 IMACLHUU_Da_Db_Dn,
 IMACSU2_Da_Db_Dn,
 IMACUS_Da_Db_Dn,
 IMACUU_Da_Db_Dn,
 IMAC_mDa_Db_Dn,
 IMAC_pDa_Db_Dn,
 MAC2R_mDa_Db_Dn,
 MAC2R_pDa_Db_Dn,
 MAC2_mDa_Db_Dn,
 MAC2_pDa_Db_Dn,
 MACCIM_Da_Db_Dn,
 MACD_mDa_Db_Dn,
 MACD_pDa_Db_Dn,
 MACIM_Da_Db_Dn,
 MACM_mDa_H_Db_Dn,
 MACM_pDa_H_Db_Dn,
 MACRE_Da_Db_Dn,
 MACSU_Da_Db_Dn,
 MACUS_Da_Db_Dn,
 MACUU_Da_Db_Dn,
 MACX_mDa_Db_Dn,
 MACX_pDa_Db_Dn,
 MAC__s16_Da_Dn,
 MAC__s16_Da_L_Dn,
 MAC_mDa_Db_Dn,
 MAC_mDa_H_Db_L_Dn,
 MAC_mDa_L_Db_L_Dn,
 MAC_pDa_Db_Dn,
 MAC_pDa_H_Db_L_Dn,
 MAC_pDa_L_Db_L_Dn
 )) {
 attrs = (instr_tbl_MAC);
 }

defmod (instr=
 (
 MOVEU_B__SPps15__Da,
 MOVEU_B__SPps15__Ra,
 MOVEU_W__SPps15__Da,
 MOVEU_W__SPps15__Ra,
 MOVE_2L_Da_Db_Dm_Dn,
 MOVE_B__SPps15__Da,
 MOVE_B__SPps15__Ra,
 MOVE_F__SPps15__Da,
 MOVE_L_Da_Dn,
 MOVE_L_Da_Dn_ipu,
 MOVE_L_Da_Rn,
 MOVE_L_Da_Rn_ipu,
 MOVE_L_Ra_Dn,
 MOVE_L_Ra_Dn_ipu,
 MOVE_L__SPmu6__Da,
 MOVE_L__SPmu6__Ra,
 MOVE_L__SPps15__Da,
 MOVE_L__SPps15__Ra,
 MOVE_W__SPmu6__Da,
 MOVE_W__SPmu6__Ra,
 MOVE_W__SPps15__Da,
 MOVE_W__SPps15__Ra,
 SETALIGN_Ra_GCR,
 UNPACK_2W_Da_Dm_Dn
 )) {
 attrs = (instr_tbl_MOVE);
 }

defmod (instr=
 (
 MOVEF_Ra_Rn,
 MOVET_Ra_Rn
 )) {
 attrs = (instr_tbl_MOVEC);
 }

defmod (instr=
 (
 MOVE_L_CTRL_Dn
 )) {
 attrs = (instr_tbl_MOVEL_DRD);
 }

defmod (instr=
 (
 MOVE_L_Da_CTRL
 )) {
 attrs = (instr_tbl_MOVEL_DRS);
 }

defmod (instr=
 (
 MOVE_B__Rnps15__Da,
 MOVE_B__Rnps15__Ra,
 MOVE_L__Rnps15__Da_E
 )) {
 attrs = (instr_tbl_MOVEP);
 }

defmod (instr=
 (
 MOVE_L_Da_E_Db_E__Rnps15_
 )) {
 attrs = (instr_tbl_MOVEP_MEM);
 }

defmod (instr=
 (
 MOVE2_2BF__Rn_PM_Da,
 MOVE2_2BF__Rn__Da,
 MOVE2_2BF__Rn_pRk_Da,
 MOVE2_2BF__RnpRk__Da,
 MOVE2_2B__Rn_PM_Da,
 MOVE2_2B__Rn__Da,
 MOVE2_2B__Rn_pRk_Da,
 MOVE2_2B__RnpRk__Da,
 MOVE2_2F__Rn_PM_Da,
 MOVE2_2F__Rn__Da,
 MOVE2_2F__Rn_pRk_Da,
 MOVE2_2F__RnpRk__Da,
 MOVE2_4BF__Rn_PM_Da_Db,
 MOVE2_4BF__Rn__Da_Db,
 MOVE2_4BF__Rn_pRk_Da_Db,
 MOVE2_4BF__RnpRk__Da_Db,
 MOVE2_4B__Rn_PM_Da_Db,
 MOVE2_4B__Rn__Da_Db,
 MOVE2_4B__Rn_pRk_Da_Db,
 MOVE2_4B__RnpRk__Da_Db,
 MOVE2_4F__Rn_PM_Da_Db,
 MOVE2_4F__Rn__Da_Db,
 MOVE2_4F__Rn_pRk_Da_Db,
 MOVE2_4F__RnpRk__Da_Db,
 MOVE2_8BF__Rn_PM_Da_Db_Dc_Dd,
 MOVE2_8BF__Rn__Da_Db_Dc_Dd,
 MOVE2_8BF__Rn_pRk_Da_Db_Dc_Dd,
 MOVE2_8BF__RnpRk__Da_Db_Dc_Dd,
 MOVE2_8B__Rn_PM_Da_Db_Dc_Dd,
 MOVE2_8B__Rn__Da_Db_Dc_Dd,
 MOVE2_8B__Rn_pRk_Da_Db_Dc_Dd,
 MOVE2_8B__RnpRk__Da_Db_Dc_Dd,
 MOVEU2_2B__Rn_PM_Da,
 MOVEU2_2B__Rn__Da,
 MOVEU2_2B__Rn_pRk_Da,
 MOVEU2_2B__RnpRk__Da,
 MOVEU2_4B__Rn_PM_Da_Db,
 MOVEU2_4B__Rn__Da_Db,
 MOVEU2_4B__Rn_pRk_Da_Db,
 MOVEU2_4B__RnpRk__Da_Db,
 MOVEU2_8B__Rn_PM_Da_Db_Dc_Dd,
 MOVEU2_8B__Rn__Da_Db_Dc_Dd,
 MOVEU2_8B__Rn_pRk_Da_Db_Dc_Dd,
 MOVEU2_8B__RnpRk__Da_Db_Dc_Dd,
 MOVEU_4B__Rn_PM_Da_Db_Dc_Dd,
 MOVEU_4B__Rn__Da_Db_Dc_Dd,
 MOVEU_4B__Rn_pRk_Da_Db_Dc_Dd,
 MOVEU_4B__RnpRk__Da_Db_Dc_Dd,
 MOVEU_B__Rn_PM_Da,
 MOVEU_B__Rn_PM_Ra,
 MOVEU_B__Rn__Da,
 MOVEU_B__Rn__Ra,
 MOVEU_B__Rn_pRk_Da,
 MOVEU_B__Rn_pRk_Ra,
 MOVEU_B__RnpRk__Da,
 MOVEU_B__RnpRk__Ra,
 MOVEU_B__Rnps15__Da,
 MOVEU_B__Rnps15__Ra,
 MOVEU_W__Rn_PM_Da,
 MOVEU_W__Rn_PM_Da_H,
 MOVEU_W__Rn_PM_Da_L,
 MOVEU_W__Rn_PM_Ra,
 MOVEU_W__Rn__Da,
 MOVEU_W__Rn__Da_H,
 MOVEU_W__Rn__Da_L,
 MOVEU_W__Rn__Ra,
 MOVEU_W__Rn_pRk_Da,
 MOVEU_W__Rn_pRk_Da_H,
 MOVEU_W__Rn_pRk_Da_L,
 MOVEU_W__Rn_pRk_Ra,
 MOVEU_W__RnpRk__Da,
 MOVEU_W__RnpRk__Da_H,
 MOVEU_W__RnpRk__Da_L,
 MOVEU_W__RnpRk__Ra,
 MOVEU_W__Rnps15__Da,
 MOVEU_W__Rnps15__Ra,
 MOVE_2F__Rn_PM_Da_Db,
 MOVE_2F__Rn__Da_Db,
 MOVE_2F__Rn_pRk_Da_Db,
 MOVE_2F__RnpRk__Da_Db,
 MOVE_2L__Rn_PM_Da_Db,
 MOVE_2L__Rn_PM_Da_Dc,
 MOVE_2L__Rn__Da_Db,
 MOVE_2L__Rn__Da_Dc,
 MOVE_2L__Rn_pRk_Da_Db,
 MOVE_2L__Rn_pRk_Da_Dc,
 MOVE_2L__RnpRk__Da_Db,
 MOVE_2L__RnpRk__Da_Dc,
 MOVE_2W__Rn_PM_Da_Db,
 MOVE_2W__Rn__Da_Db,
 MOVE_2W__Rn_pRk_Da_Db,
 MOVE_2W__RnpRk__Da_Db,
 MOVE_4B__Rn_PM_Da_Db_Dc_Dd,
 MOVE_4B__Rn__Da_Db_Dc_Dd,
 MOVE_4B__Rn_pRk_Da_Db_Dc_Dd,
 MOVE_4B__RnpRk__Da_Db_Dc_Dd,
 MOVE_4F__Rn_PM_Da_Db_Dc_Dd,
 MOVE_4F__Rn__Da_Db_Dc_Dd,
 MOVE_4F__Rn_pRk_Da_Db_Dc_Dd,
 MOVE_4F__RnpRk__Da_Db_Dc_Dd,
 MOVE_4W__Rn_PM_Da_Db_Dc_Dd,
 MOVE_4W__Rn__Da_Db_Dc_Dd,
 MOVE_4W__Rn_pRk_Da_Db_Dc_Dd,
 MOVE_4W__RnpRk__Da_Db_Dc_Dd,
 MOVE_B__Rn_PM_Da,
 MOVE_B__Rn_PM_Ra,
 MOVE_B__Rn__Da,
 MOVE_B__Rn__Ra,
 MOVE_B__Rn_pRk_Da,
 MOVE_B__Rn_pRk_Ra,
 MOVE_B__RnpRk__Da,
 MOVE_B__RnpRk__Ra,
 MOVE_F__Rn_PM_Da,
 MOVE_F__Rn__Da,
 MOVE_F__Rn_pRk_Da,
 MOVE_F__RnpRk__Da,
 MOVE_F__Rnps15__Da,
 MOVE_L__Rn_PM_Da,
 MOVE_L__Rn_PM_Ra,
 MOVE_L__Rn__Da,
 MOVE_L__Rn__Ra,
 MOVE_L__Rn_pRk_Da,
 MOVE_L__Rn_pRk_Ra,
 MOVE_L__RnpRk__Da,
 MOVE_L__RnpRk__Ra,
 MOVE_L__Rnps15__Da,
 MOVE_L__Rnps15__Ra,
 MOVE_L__Rnpu3__Da,
 MOVE_L__Rnpu3__Ra,
 MOVE_W__Rn_PM_Da,
 MOVE_W__Rn_PM_Ra,
 MOVE_W__Rn__Da,
 MOVE_W__Rn__Ra,
 MOVE_W__Rn_pRk_Da,
 MOVE_W__Rn_pRk_Ra,
 MOVE_W__RnpRk__Da,
 MOVE_W__RnpRk__Ra,
 MOVE_W__Rnps15__Da,
 MOVE_W__Rnps15__Ra,
 MOVE_W__Rnpu3__Da,
 MOVE_W__Rnpu3__Ra,
 SDMOVE2_2F__Rn_PM_Da_Db,
 SDMOVE2_2F__Rn__Da_Db,
 SDMOVE2_2F__Rn_pRk_Da_Db,
 SDMOVE2_2F__RnpRk__Da_Db,
 SUMOVE2_2F__Rn_PM_Da_Db,
 SUMOVE2_2F__Rn__Da_Db,
 SUMOVE2_2F__Rn_pRk_Da_Db,
 SUMOVE2_2F__RnpRk__Da_Db
 )) {
 attrs = (instr_tbl_MOVE_AAM);
 }

defmod (instr=
 (
 MOVE2_2B_Da__Rn_,
 MOVE2_2B_Da__Rn_PM,
 MOVE2_2B_Da__Rn_pRk,
 MOVE2_2B_Da__RnpRk_,
 MOVE2_4B_Da_Db__Rn_,
 MOVE2_4B_Da_Db__Rn_PM,
 MOVE2_4B_Da_Db__Rn_pRk,
 MOVE2_4B_Da_Db__RnpRk_,
 MOVE2_8B_Da_Db_Dc_Dd__Rn_,
 MOVE2_8B_Da_Db_Dc_Dd__Rn_PM,
 MOVE2_8B_Da_Db_Dc_Dd__Rn_pRk,
 MOVE2_8B_Da_Db_Dc_Dd__RnpRk_,
 MOVER2_2BF_Da__Rn_,
 MOVER2_2BF_Da__Rn_PM,
 MOVER2_2BF_Da__Rn_pRk,
 MOVER2_2BF_Da__RnpRk_,
 MOVER2_2F_Da__Rn_,
 MOVER2_2F_Da__Rn_PM,
 MOVER2_2F_Da__Rn_pRk,
 MOVER2_2F_Da__RnpRk_,
 MOVER2_4BF_Da_Db__Rn_,
 MOVER2_4BF_Da_Db__Rn_PM,
 MOVER2_4BF_Da_Db__Rn_pRk,
 MOVER2_4BF_Da_Db__RnpRk_,
 MOVER2_4F_Da_Db__Rn_,
 MOVER2_4F_Da_Db__Rn_PM,
 MOVER2_4F_Da_Db__Rn_pRk,
 MOVER2_4F_Da_Db__RnpRk_,
 MOVER2_8BF_Da_Db_Dc_Dd__Rn_,
 MOVER2_8BF_Da_Db_Dc_Dd__Rn_PM,
 MOVER2_8BF_Da_Db_Dc_Dd__Rn_pRk,
 MOVER2_8BF_Da_Db_Dc_Dd__RnpRk_,
 MOVERH_4F_Dp_Dq_Dr_Ds__Rn_,
 MOVERH_4F_Dp_Dq_Dr_Ds__Rn_PM,
 MOVERH_4F_Dp_Dq_Dr_Ds__Rn_pRk,
 MOVERH_4F_Dp_Dq_Dr_Ds__RnpRk_,
 MOVERL_4F_Dp_Dq_Dr_Ds__Rn_,
 MOVERL_4F_Dp_Dq_Dr_Ds__Rn_PM,
 MOVERL_4F_Dp_Dq_Dr_Ds__Rn_pRk,
 MOVERL_4F_Dp_Dq_Dr_Ds__RnpRk_,
 MOVER_2BF_Da_Db__Rn_,
 MOVER_2BF_Da_Db__Rn_PM,
 MOVER_2BF_Da_Db__Rn_pRk,
 MOVER_2BF_Da_Db__RnpRk_,
 MOVER_2F_Da_Db__Rn_,
 MOVER_2F_Da_Db__Rn_PM,
 MOVER_2F_Da_Db__Rn_pRk,
 MOVER_2F_Da_Db__RnpRk_,
 MOVER_2L_Da_Db__Rn_,
 MOVER_2L_Da_Db__Rn_PM,
 MOVER_2L_Da_Db__Rn_pRk,
 MOVER_2L_Da_Db__RnpRk_,
 MOVER_4BF_Da_Db_Dc_Dd__Rn_,
 MOVER_4BF_Da_Db_Dc_Dd__Rn_PM,
 MOVER_4BF_Da_Db_Dc_Dd__Rn_pRk,
 MOVER_4BF_Da_Db_Dc_Dd__RnpRk_,
 MOVER_4F_Da_Db_Dc_Dd__Rn_,
 MOVER_4F_Da_Db_Dc_Dd__Rn_PM,
 MOVER_4F_Da_Db_Dc_Dd__Rn_pRk,
 MOVER_4F_Da_Db_Dc_Dd__RnpRk_,
 MOVER_BF_Da__Rn_,
 MOVER_BF_Da__Rn_PM,
 MOVER_BF_Da__Rn_pRk,
 MOVER_BF_Da__RnpRk_,
 MOVER_F_Da__Rn_,
 MOVER_F_Da__Rn_PM,
 MOVER_F_Da__Rn_pRk,
 MOVER_F_Da__RnpRk_,
 MOVER_F_Da__Rnps15_,
 MOVER_L_Da__Rn_,
 MOVER_L_Da__Rn_PM,
 MOVER_L_Da__Rn_pRk,
 MOVER_L_Da__RnpRk_,
 MOVE_2L_BTR0_BTR1__Rn_,
 MOVE_2L_BTR0_BTR1__Rn_PM,
 MOVE_2L_Da_Db__Rn_,
 MOVE_2L_Da_Db__Rn_PM,
 MOVE_2L_Da_Db__Rn_pRk,
 MOVE_2L_Da_Db__RnpRk_,
 MOVE_2L_Da_Dc__Rn_,
 MOVE_2L_Da_Dc__Rn_PM,
 MOVE_2L_Da_Dc__Rn_pRk,
 MOVE_2L_Da_Dc__RnpRk_,
 MOVE_2W_Da_Db__Rn_,
 MOVE_2W_Da_Db__Rn_PM,
 MOVE_2W_Da_Db__Rn_pRk,
 MOVE_2W_Da_Db__RnpRk_,
 MOVE_4B_Da_Db_Dc_Dd__Rn_,
 MOVE_4B_Da_Db_Dc_Dd__Rn_PM,
 MOVE_4B_Da_Db_Dc_Dd__Rn_pRk,
 MOVE_4B_Da_Db_Dc_Dd__RnpRk_,
 MOVE_4W_Da_Db_Dc_Dd__Rn_,
 MOVE_4W_Da_Db_Dc_Dd__Rn_PM,
 MOVE_4W_Da_Db_Dc_Dd__Rn_pRk,
 MOVE_4W_Da_Db_Dc_Dd__RnpRk_,
 MOVE_B_BTR1_HH__Rn_,
 MOVE_B_BTR1_HH__Rn_PM,
 MOVE_B_Da__Rn_,
 MOVE_B_Da__Rn_PM,
 MOVE_B_Da__Rn_pRk,
 MOVE_B_Da__RnpRk_,
 MOVE_B_Da__Rnps15_,
 MOVE_B_Ra__Rn_,
 MOVE_B_Ra__Rn_PM,
 MOVE_B_Ra__Rn_pRk,
 MOVE_B_Ra__RnpRk_,
 MOVE_B_Ra__Rnps15_,
 MOVE_F_Da__Rn_,
 MOVE_F_Da__Rn_PM,
 MOVE_F_Da__Rn_pRk,
 MOVE_F_Da__RnpRk_,
 MOVE_L_BTR1__Rn_,
 MOVE_L_BTR1__Rn_PM,
 MOVE_L_Da__Rnps15_,
 MOVE_L_Da__Rnpu3_,
 MOVE_L_Ra__Rnps15_,
 MOVE_L_Ra__Rnpu3_,
 MOVE_W_BTR1_H__Rn_,
 MOVE_W_BTR1_H__Rn_PM,
 MOVE_W_Da__Rn_,
 MOVE_W_Da__Rn_PM,
 MOVE_W_Da__Rn_pRk,
 MOVE_W_Da__RnpRk_,
 MOVE_W_Da__Rnps15_,
 MOVE_W_Da__Rnpu3_,
 MOVE_W_Ra__Rn_,
 MOVE_W_Ra__Rn_PM,
 MOVE_W_Ra__Rn_pRk,
 MOVE_W_Ra__RnpRk_,
 MOVE_W_Ra__Rnps15_,
 MOVE_W_Ra__Rnpu3_
 )) {
 attrs = (instr_tbl_MOVE_AAM_MEM);
 }

defmod (instr=
 (
 MOVEU_L__u32_Dn,
 MOVEU_W__u16_Dn_H,
 MOVEU_W__u16_Dn_H_ipu,
 MOVEU_W__u16_Dn_L,
 MOVEU_W__u16_Dn_L_ipu,
 MOVE_L__s32_Dn,
 MOVE_L__s32_Dn_ipu,
 MOVE_L__s32_Rn,
 MOVE_L__s32_Rn_ipu
 )) {
 attrs = (instr_tbl_MOVE_ISV);
 }

defmod (instr=
 (
 MOVER_F_Da__SPps15_,
 MOVE_B_Da__SPps15_,
 MOVE_B_Ra__SPps15_,
 MOVE_L_Da__SPmu6_,
 MOVE_L_Da__SPps15_,
 MOVE_L_Ra__SPmu6_,
 MOVE_L_Ra__SPps15_,
 MOVE_W_Da__SPmu6_,
 MOVE_W_Da__SPps15_,
 MOVE_W_Ra__SPmu6_,
 MOVE_W_Ra__SPps15_,
 MOVE_W__S16__SPps16_
 )) {
 attrs = (instr_tbl_MOVE_MEM);
 }

defmod (instr=
 (
 IDMPYS_Da_Db_Dn,
 IDMPYU_Da_Db_Dn,
 IMPYHLUU_Da_Db_Dn,
 IMPYSU2_Da_Db_Dn,
 IMPYSU_Da_Db_Dn,
 IMPYUU_Da_Db_Dn,
 IMPY_Da_Db_Dn,
 IMPY__s16_Da_Dn,
 MPY2R_Da_Db_Dn,
 MPY2_Da_Db_Dn,
 MPYCIM_Da_Db_Dn,
 MPYD_mDa_Db_Dn,
 MPYD_pDa_Db_Dn,
 MPYIM_Da_Db_Dn,
 MPYRE_Da_Db_Dn,
 MPYSU_Da_Db_Dn,
 MPYUS_Da_Db_Dn,
 MPYUU_Da_Db_Dn,
 MPYX_Da_Db_Dn,
 MPY_Da_Db_Dn,
 MPY_Da_H_Db_L_Dn,
 MPY_Da_L_Db_L_Dn
 )) {
 attrs = (instr_tbl_MPY);
 }

defmod (instr=
 (
 POPN_2L_Da_Db,
 POPN_2L_Ra_Rb,
 POPN_Da,
 POPN_Ra,
 POP_2L_Da_Db,
 POP_2L_Ra_Rb,
 POP_Da,
 POP_Ra,
 PUSHN_2L_Da_Db,
 PUSHN_2L_Ra_Rb,
 PUSHN_Da,
 PUSHN_Ra,
 PUSH_2L_Da_Db,
 PUSH_2L_Ra_Rb,
 PUSH_Da,
 PUSH_Ra
 )) {
 attrs = (instr_tbl_STK);
 }

defmod (instr=
 (
 POPN_2L_Da_E_Db_E_Dc_E_Dd_E,
 POPN_Da_E,
 POPN_Da_E_Db_E,
 POP_2L_Da_E_Db_E_Dc_E_Dd_E,
 POP_Da_E,
 POP_Da_E_Db_E,
 PUSHN_2L_Da_E_Db_E_Dc_E_Dd_E,
 PUSHN_Da_E,
 PUSHN_Da_E_Db_E,
 PUSH_2L_Da_E_Db_E_Dc_E_Dd_E,
 PUSH_Da_E,
 PUSH_Da_E_Db_E
 )) {
 attrs = (instr_tbl_STK_ext);
 }
# 67 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 1 "/vobs/vb_dp_arch/ADLsim/sc3900/new_attrs_sc3900.adl" 1
defmod (instr=
 (
ABS_2X_Da_Db_Dm_Dn,
ABS_L_Da_Dn,
ADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn,
ADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn,
ADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn,
ADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn,
ADD_2X_Da_Db_Dc_Dd_Dm_Dn,
CMPEQ_2W_Da_Db_Dn,
CMPGE_2W_Da_Db_Dn,
CMPNE_2W_Da_Db_Dn,
NEG_2X_Da_Db_Dm_Dn,
NEG_L_Da_Dn,
PACK20_Da_WH_Db_WH_Dn,
PACK20_Da_WH_Db_WL_Dn,
PACK20_Da_WL_Db_WH_Dn,
PACK20_Da_WL_Db_WL_Dn,
PACK_2W_Da_H_Db_H_Dn,
PACK_2W_Da_H_Db_L_Dn,
PACK_2W_Da_L_Db_H_Dn,
PACK_2W_Da_L_Db_L_Dn,
PACK_4E_Da_Db_Dc_Dd_Dn,
SABS_2W_Da_Dn,
SABS_4W_Da_Db_Dm_Dn,
SABS_Da_Dn,
SADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn,
SADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn,
SADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn,
SADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn,
SADD_4W_Da_Db_Dc_Dd_Dm_Dn,
SADD_Da_Db_Dn,
SASLL_2W_Da_Db_Dn,
SASLL_2W__u5_Da_Dn,
SASLL_4W_Da_Dc_Dd_Dm_Dn,
SASLL_4W__u4_Da_Db_Dm_Dn,
SAT_2L_Da_Db_Dm_Dn,
SIGN_4W_Da_Db_Dm_Dn,
SNEG_2W_Da_Dn,
SNEG_Da_Dn,
SRND_Da_Dn,
SSODAAII_2W_Da_Db_Dn,
SSODAAXX_2W_Da_Db_Dn,
SSODASII_2W_Da_Db_Dn,
SSODASXX_2W_Da_Db_Dn,
SSODSAII_2W_Da_Db_Dn,
SSODSAXX_2W_Da_Db_Dn,
SSODSSII_2W_Da_Db_Dn,
SSODSSXX_2W_Da_Db_Dn,
SSUB_4W_Da_Db_Dc_Dd_Dm_Dn,
SSUB_Da_Db_Dn,
SUB_2X_Da_Db_Dc_Dd_Dm_Dn,
TFR_2X_Da_Db_Dm_Dn
 )) {
 attrs = (instr_tbl_DAU);
 }

defmod (instr=
 (
ACS2HL_Da_X_mDa_X_Da_Y_mDa_Y_Dm_Dn,
ACS2HL_Da_X_mDa_X_mDa_Y_Da_Y_Dm_Dn,
ACS2HL_mDa_X_Da_X_Da_Y_mDa_Y_Dm_Dn,
ACS2HL_mDa_X_Da_X_mDa_Y_Da_Y_Dm_Dn
 )) {
   attrs = (instr_tbl_DAU_ACS2H);
 }

defmod (instr=
 (
MAXMSEARCH4_Da_Db_Dm_Dn,
MAXSEARCH4_Da_Db_Dm_Dn,
MINSEARCH4_Da_Db_Dm_Dn
)) {
 attrs = (instr_tbl_DAU_SEARCH);
 }

defmod (instr=
 (
CMPEQ_2W_Da_Db_Pm_Pn,
CMPEQ_Da_Db_Pn,
CMPEQ_L_Da_Db_Pn,
CMPEQ_L__s32_Da_Pn,
CMPEQ_L__u5_Da_Pn,
CMPEQ__s32_Da_Pn,
CMPEQ__u5_Da_Pn,
CMPGE_2W_Da_Db_Pm_Pn,
CMPGE_Da_Db_Pn,
CMPGE_L_Da_Db_Pn,
CMPGT_2W_Da_Db_Dn,
CMPGT_2W_Da_Db_Pm_Pn,
CMPGT_Da_Db_Pn,
CMPGT_L_Da_Db_Pn,
CMPGT_L__s32_Da_Pn,
CMPGT_L__u5_Da_Pn,
CMPGT__s32_Da_Pn,
CMPGT__u5_Da_Pn,
CMPHI_Da_Db_Pn,
CMPLE_L__s32_Da_Pn,
CMPLE_L__u5_Da_Pn,
CMPLE__s32_Da_Pn,
CMPLE__u5_Da_Pn,
CMPNE_2W_Da_Db_Pm_Pn,
CMPNE_Da_Db_Pn,
CMPNE_L_Da_Db_Pn,
CMPNE_L__s32_Da_Pn,
CMPNE_L__u5_Da_Pn,
CMPNE__s32_Da_Pn,
CMPNE__u5_Da_Pn,
DECEQ_Dn_Pn,
DECGE_Dn_Pn,
PAND_Pa_Pb_Pn,
PEOR_Pa_Pb_Pn,
PNOT_Pa_Pn,
POR_Pa_Pb_Pn
 )) {
 attrs = (instr_tbl_DAU_Pbit);
 }

defmod (instr=
 (
ASLL_2L_Da_Dc_Dd_Dm_Dn,
ASLL_2L__u5_Da_Db_Dm_Dn,
ASLL_L_Da_Db_Dn,
ASLL_L__u5_Da_Dn,
ASRR_2L_Da_Dc_Dd_Dm_Dn,
ASRR_2L__u5_Da_Db_Dm_Dn,
ASRR_L_Da_Db_Dn,
ASRR_L__u5_Da_Dn,
LSLL_L_Da_Db_Dn
 )) {
 attrs = (instr_tbl_DBS_DSH);
 }

defmod (instr=
 (
SASLL_Da_Db_Dn,
SASLL__u5_Da_Dn,
SASRR_2W_Da_Db_Dn,
SASRR_4W_Da_Dc_Dd_Dm_Dn,
SASRR_4W__u4_Da_Db_Dm_Dn,
SASRR_Da_Db_Dn,
SASRR__u5_Da_Dn
)) {
 attrs = (instr_tbl_DBS_DSH_SAT);
 }

defmod (instr=
 (
AND_2X_Da_Db_Dc_Dd_Dm_Dn,
CLBF_Da_Dn,
EOR_2X_Da_Db_Dc_Dd_Dm_Dn,
NEOR_2X_Da_Db_Dc_Dd_Dm_Dn,
NOR_2X_Da_Db_Dc_Dd_Dm_Dn,
NOT_2X_Da_Db_Dm_Dn,
OR_2X_Da_Db_Dc_Dd_Dm_Dn
  )) {
 attrs = (instr_tbl_DLU);
 }


defmod (instr=
 (
IMAC32H_Da_Db_Dn,
IMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
IMACCXCR_Da_Db_Dn,
IMACCXC_Da_Db_Dm_Dn,
IMACCXR_Da_Db_Dn,
IMACCX_Da_Db_Dm_Dn,
IMACDH_2X_Da_Db_Dc_Dm_Dn,
IMACDL_2X_Da_Db_Dc_Dm_Dn,
IMACDR_2W_Da_Db_Dc_Dd_Dn,
IMACDR_2W_mDa_Db_Dc_Dd_Dn,
IMACD_2X_Da_Db_Dc_Dd_Dm_Dn,
IMACIM_2X_Da_Db_Dc_Dd_Dm_Dn,
IMACM_2X_Da_Dc_Dd_Dm_Dn,
IMACQ_Da_Db_Dc_Dd_Dn,
IMACRE_2X_Da_Db_Dc_Dd_Dm_Dn,
MAC32H_Da_Db_Dn,
MACCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
MACCXCR_Da_Db_Dn,
MACCXC_Da_Db_Dm_Dn,
MACCXJR_Da_Db_Dn,
MACCXJ_Da_Db_Dm_Dn,
MACCXR_Da_Db_Dn,
MACCX_Da_Db_Dm_Dn,
MACDH_2X_Da_Db_Dc_Dm_Dn,
MACDL_2X_Da_Db_Dc_Dm_Dn,
MACDR_2W_Da_Db_Dc_Dd_Dn,
MACDR_2W_mDa_Db_Dc_Dd_Dn,
MACD_2X_Da_Db_Dc_Dd_Dm_Dn,
MACIM_2X_Da_Db_Dc_Dd_Dm_Dn,
MACM_2X_Da_Dc_Dd_Dm_Dn,
MACQX_Da_Db_Dc_Dd_Dn,
MACQ_Da_Db_Dc_Dd_Dn,
MACRE_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACD_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACRE_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACR_2W_Da_Db_Dn,
SMACR_2W_mDa_Db_Dn,
SMAC_2W_Da_Db_Dn,
SMAC_2W_mDa_Db_Dn,
ISMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMACD_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMACIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMACRE_2X_Da_Db_Dc_Dd_Dm_Dn
 )) {
 attrs = (instr_tbl_MAC);
 }

defmod (instr=
 (
IMPY32H_Da_Db_Dn,
IMPY32L_Da_Db_Dn,
IMPY32SU_Da_Db_Dm_Dn,
IMPY32UU_Da_Db_Dm_Dn,
IMPY32_Da_Db_Dm_Dn,
IMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYCXCR_Da_Db_Dn,
IMPYCXC_Da_Db_Dm_Dn,
IMPYCXR_Da_Db_Dn,
IMPYCX_Da_Db_Dm_Dn,
IMPYDH_2X_Da_Db_Dc_Dm_Dn,
IMPYDL_2X_Da_Db_Dc_Dm_Dn,
IMPYDR_2W_Da_Db_Dc_Dd_Dn,
IMPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYHH_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYLL_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYM_2X_Da_Dc_Dd_Dm_Dn,
IMPYQ_Da_Db_Dc_Dd_Dn,
IMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPY_2X_Da_Db_Dm_Dn,
ISMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMPYCXC_Da_Db_Dm_Dn,
ISMPYCX_Da_Db_Dm_Dn,
ISMPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn,
MPY32H_Da_Db_Dn,
MPY32_Da_Db_Dm_Dn,
MPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
MPYCXCR_Da_Db_Dn,
MPYCXC_Da_Db_Dm_Dn,
MPYCXJR_Da_Db_Dn,
MPYCXJ_Da_Db_Dm_Dn,
MPYCXR_Da_Db_Dn,
MPYCX_Da_Db_Dm_Dn,
MPYDH_2X_Da_Db_Dc_Dm_Dn,
MPYDL_2X_Da_Db_Dc_Dm_Dn,
MPYDR_2W_Da_Db_Dc_Dd_Dn,
MPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
MPYHH_2X_Da_Db_Dc_Dd_Dm_Dn,
MPYIM_2X_Da_Db_Dc_Dd_Dm_Dn,
MPYLL_2X_Da_Db_Dc_Dd_Dm_Dn,
MPYM_2X_Da_Dc_Dd_Dm_Dn,
MPYM_Da_H_Db_Dn,
MPYM_Da_L_Db_Dn,
MPYQ_Da_Db_Dc_Dd_Dn,
MPYRE_2X_Da_Db_Dc_Dd_Dm_Dn,
MPY_2X_Da_Db_Dm_Dn,
SMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SMPYCIM_Da_Db_Dn,
SMPYCXC_Da_Db_Dm_Dn,
SMPYCXJ_Da_Db_Dm_Dn,
SMPYCX_Da_Db_Dm_Dn,
SMPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
SMPYD_Da_Db_Dn,
SMPYD_mDa_Db_Dn,
SMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SMPYIM_Da_Db_Dn,
SMPYM_Da_Db_Dn,
SMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn,
SMPYRE_Da_Db_Dn,
SMPYR_2W_Da_Db_Dn,
SMPY_2W_Da_Db_Dn,
SMPY_2X_Da_Db_Dm_Dn,
SMPY_Da_H_Db_H_Dn,
SMPY_Da_H_Db_L_Dn,
SMPY_Da_L_Db_H_Dn,
SMPY_Da_L_Db_L_Dn
 )) {
 attrs = (instr_tbl_MPY);
 }
# 68 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl" 2
# 81 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl"
define (group = all) {
    items = "*";
    type = instr;
  }

  define (group = sc3900_instr) {

items = (
# 97 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl"
EXTRACT__width6__offset6_Da_Dn,
EXTRACTU__width6__offset6_Da_Dn,
INSERT__width6__offset6_Da_Dn,
PREFIX0,
PREFIX_64D_REG,
OneWord,
TwoWords,
ThreeWords,
FourWords,
# 114 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch.adl"
IFP0,
IFP1,
IFP2,
IFP3,
IFP4,
IFP5,

SUB_Da_Db_Dn,
ADD_Da_Db_Dn,
NEG_Da_Dn,
SAT_L_Da_Dn,
ABS_Da_Dn,
INCF_Da_Dn,
MIN2_Da_Db_Dn,
ADC_Da_Db_Dn,
SBC_Da_Db_Dn,
MAX_Da_Db_Dn,
MIN_Da_Db_Dn,
MAXM_Da_Db_Dn,
MAX2_Da_Db_Dn,
AVGU4_Da_Db_Dn,
DIV_Da_Dn,
SUBL_Da_Db_Dn,
RND_Da_Dn,
TFR_Da_Dn,
SAT_F_Da_Dn,
ADD__u5_Da_Dn,
SUB__u5_Da_Dn,
DIVP0_Da_Dn,
DIVP1_Da_Dn,
DIVP2_Da_Dn,
DIVP3_Da_Dn,
IADD_Da_Db_Dn,
ISUB_Da_Db_Dn,
SAD4_Da_Db_Dn,
SATU20_B_Da_Dn,
IADD__u5_Da_Dn,
ISUB__u5_Da_Dn,
ADD_W_Da_L_Dn_L,
ADD_W_Da_L_Dn_H,
ADD_W_Da_H_Dn_L,
ADD_W_Da_H_Dn_H,
SUB_W_Da_L_Dn_L,
SUB_W_Da_L_Dn_H,
SUB_W_Da_H_Dn_L,
SUB_W_Da_H_Dn_H,
VTRACE__0__2_Da_Dn,
VTRACE__0__3_Da_Dn,
VTRACE__0__4_Da_Dn,
VTRACE__1__4_Da_Dn,
VTRACE__2__4_Da_Dn,
VTRACE__3__4_Da_Dn,
VTRACE__4__4_Da_Dn,
VTRACE__5__4_Da_Dn,
ABS2_Da_Dn,
NEG2_Da_Dn,
SAT2_W_Da_Dn,
SOD2AAII_Da_Db_Dn,
SOD2AAXX_Da_Db_Dn,
SOD2ASII_Da_Db_Dn,
SOD2ASXX_Da_Db_Dn,
SOD2SAII_Da_Db_Dn,
SOD2SAXX_Da_Db_Dn,
SOD2SSII_Da_Db_Dn,
SOD2SSXX_Da_Db_Dn,
PACK_4B_Da_Db_Dn,
PACK_4E_Da_Db_Dc_Dd_Dn,
PACKW_2F_Da_Db_Dn,
CMPEQD_Da_Db_Dn,
CMPNED_Da_Db_Dn,
CMPGTD_Da_Db_Dn,
CMPGED_Da_Db_Dn,
TFR__s32_Dn,
CMPEQD__s32_Da_Dn,
CMPNED__s32_Da_Dn,
CMPGTD__s32_Da_Dn,
CMPGED__s32_Da_Dn,
CMPLED__s32_Da_Dn,
CMPLTD__s32_Da_Dn,
CMPEQ_Da_Db_Pn,
CMPEQ_Da_Db_Pm_Pn,
CMPEQ_L_Da_Db_Pn,
CMPEQ__s32_Da_Pn,
CMPEQ__u5_Da_Pn,
CMPGT_Da_Db_Pn,
CMPGT__s32_Da_Pn,
CMPGT__u5_Da_Pn,
CMPHI_Da_Db_Pn,
DECEQ_Dn_Pn,
DECGE_Dn_Pn,
ACS2HL_Da_X_mDa_X_Da_Y_mDa_Y_Dm_Dn,
ACS2HL_Da_X_mDa_X_mDa_Y_Da_Y_Dm_Dn,
ACS2HL_mDa_X_Da_X_Da_Y_mDa_Y_Dm_Dn,
ACS2HL_mDa_X_Da_X_mDa_Y_Da_Y_Dm_Dn,


ASLL__u5_Da_Dn,
ASRR__u5_Da_Dn,
ASLLS_Da_Db_Dn,
ASRRS_Da_Db_Dn,
LSLL_Da_Db_Dn,
LSRR_Da_Db_Dn,
ASLL_Da_Db_Dn,
ASRR_Da_Db_Dn,
LSRR_L__u5_Da_Dn,
LSRR__u5_Da_Dn,
LSRR_L_Da_Db_Dn,
CLIP__u5_Da_Dn,
CLIP2__u5_Da_Dn,
ASRRS__u5_Da_Dn,
ASLLS__u5_Da_Dn,
CAST_F_Da_H_Dn,
CAST_F_Da_L_Dn,
ASLL2__u5_Da_Dn,
ASRR2__u5_Da_Dn,
LSRR2__u5_Da_Dn,
LSLL2_Da_Db_Dn,
LSRR2_Da_Db_Dn,
ASLL2_Da_Db_Dn,
ASRR2_Da_Db_Dn,




SWAPB_Da_Dn,
SWAPB2_Da_Dn,
BREV_Da_Dn,
EOR_Da_Db_Dn,
NOT_Da_Db_Dn,
OR_Da_Db_Dn,
ROL_Da_Dn,
ROR_Da_Dn,
AND__s32_Da_Dn,
AND_Da_Db_Dn,
BDEINTRLV_Da_Dn,
BINTRLV_Da_Dn,
CLB_Da_Dn,

EXTRACT_Da_Db_Dn,

EXTRACTU_Da_Db_Dn,

INSERT_Da_Db_Dn,
SXT_B_Da_Dn,
SXT_W_Da_Dn,
SXT_L_Da_Dn,
ZXT_B_Da_Dn,
ZXT_W_Da_Dn,
ZXT_L_Da_Dn,
DOALIGN_Da_Db_Dn,
COB_Da_Dn,
NAND_Da_Db_Dn,
NEOR_Da_Db_Dn,
NOR_Da_Db_Dn,
CLIP20__u5_Da_Dn,
BINTRLV3B_Da_Dn,
BDINTRLV3B_Da_Dn,
BREV4_Da_Dn,


MAC__s16_Da_Dn,
MAC__s16_Da_L_Dn,
MAC_pDa_Db_Dn,
MAC_mDa_Db_Dn,
MAC_pDa_H_Db_L_Dn,
MAC_mDa_H_Db_L_Dn,
MAC_pDa_L_Db_L_Dn,
MAC_mDa_L_Db_L_Dn,
IMACLHUU_Da_Db_Dn,
IMACUS_Da_Db_Dn,
IMACSU2_Da_Db_Dn,
IMAC_pDa_Db_Dn,
IMAC_mDa_Db_Dn,
MACSU_Da_Db_Dn,
MACUS_Da_Db_Dn,
MACUU_Da_Db_Dn,
DMACSU_Da_Db_Dn,
DMACSS_Da_Db_Dn,
IMACUU_Da_Db_Dn,
MACM_pDa_H_Db_Dn,
MACM_mDa_H_Db_Dn,
MAC2_pDa_Db_Dn,
MAC2_mDa_Db_Dn,
MAC2R_pDa_Db_Dn,
MAC2R_mDa_Db_Dn,
MACX_pDa_Db_Dn,
MACX_mDa_Db_Dn,
MACD_pDa_Db_Dn,
MACD_mDa_Db_Dn,
MACRE_Da_Db_Dn,
MACIM_Da_Db_Dn,
MACCIM_Da_Db_Dn,



MPY_Da_Db_Dn,
MPY_Da_H_Db_L_Dn,
MPY_Da_L_Db_L_Dn,
IMPY_Da_Db_Dn,
IMPY__s16_Da_Dn,
IMPYHLUU_Da_Db_Dn,
IMPYSU_Da_Db_Dn,
IMPYSU2_Da_Db_Dn,
IMPYUU_Da_Db_Dn,
MPYUS_Da_Db_Dn,
MPYSU_Da_Db_Dn,
MPYUU_Da_Db_Dn,
IDMPYU_Da_Db_Dn,
IDMPYS_Da_Db_Dn,

MPY2_Da_Db_Dn,
MPY2R_Da_Db_Dn,
MPYX_Da_Db_Dn,
MPYD_pDa_Db_Dn,
MPYD_mDa_Db_Dn,
MPYRE_Da_Db_Dn,
MPYIM_Da_Db_Dn,
MPYCIM_Da_Db_Dn,


ADDA__u5_Ra_Rn,
SUBA__u5_Ra_Rn,
ASL2A_Ra_Rn,
ASLA_Ra_Rn,
ASRA_Ra_Rn,
LSRA_Ra_Rn,
TFRA_PC_Rn,
TFRA_xSP_Rn,
TFRA_Ra_xSP,


BMCLRA__u16_Rn_H,
BMCLRA__u16_Rn_L,


BMCHGA__u16_Rn_L,
BMCHGA__u16_Rn_H,


BMSETA__u16_Rn_H,
BMSETA__u16_Rn_L,


BMTSETA__u16_Rn_H_Pn,
BMTSETA__u16_Rn_L_Pn,
BMTSTCA__u16_Ra_L_Pn,
BMTSTCA__u16_Ra_H_Pn,
BMTSTSA__u16_Ra_L_Pn,
BMTSTSA__u16_Ra_H_Pn,




MOVE_2L_Da_Db__Rn_,
MOVE_2L_Da_Db__Rn_pRk,
MOVE_2L_Da_Db__Rn_PM,
MOVE_2L_Da_Db__RnpRk_,
MOVE_2L__Rn__Da_Db,
MOVE_2L__Rn_pRk_Da_Db,
MOVE_2L__Rn_PM_Da_Db,
MOVE_2L__RnpRk__Da_Db,
MOVE_2L_Da_Dc__Rn_,
MOVE_2L_Da_Dc__Rn_pRk,
MOVE_2L_Da_Dc__Rn_PM,
MOVE_2L_Da_Dc__RnpRk_,
MOVE_2L__Rn__Da_Dc,
MOVE_2L__Rn_pRk_Da_Dc,
MOVE_2L__Rn_PM_Da_Dc,
MOVE_2L__RnpRk__Da_Dc,
MOVE_2L_Da_Db_Dm_Dn,
MOVE_2F__Rn__Da_Db,
MOVE_2F__Rn_pRk_Da_Db,
MOVE_2F__Rn_PM_Da_Db,
MOVE_2F__RnpRk__Da_Db,
MOVE_2W_Da_Db__Rn_,
MOVE_2W_Da_Db__Rn_pRk,
MOVE_2W_Da_Db__Rn_PM,
MOVE_2W_Da_Db__RnpRk_,
MOVE_2W__Rn__Da_Db,
MOVE_2W__Rn_pRk_Da_Db,
MOVE_2W__Rn_PM_Da_Db,
MOVE_2W__RnpRk__Da_Db,
MOVE_4B__Rn__Da_Db_Dc_Dd,
MOVE_4B__Rn_pRk_Da_Db_Dc_Dd,
MOVE_4B__Rn_PM_Da_Db_Dc_Dd,
MOVE_4B__RnpRk__Da_Db_Dc_Dd,
MOVE_4B_Da_Db_Dc_Dd__Rn_,
MOVE_4B_Da_Db_Dc_Dd__Rn_pRk,
MOVE_4B_Da_Db_Dc_Dd__Rn_PM,
MOVE_4B_Da_Db_Dc_Dd__RnpRk_,
MOVE_4F__Rn__Da_Db_Dc_Dd,
MOVE_4F__Rn_pRk_Da_Db_Dc_Dd,
MOVE_4F__Rn_PM_Da_Db_Dc_Dd,
MOVE_4F__RnpRk__Da_Db_Dc_Dd,
MOVE_4W_Da_Db_Dc_Dd__Rn_,
MOVE_4W_Da_Db_Dc_Dd__Rn_pRk,
MOVE_4W_Da_Db_Dc_Dd__Rn_PM,
MOVE_4W_Da_Db_Dc_Dd__RnpRk_,
MOVE_4W__Rn__Da_Db_Dc_Dd,
MOVE_4W__Rn_pRk_Da_Db_Dc_Dd,
MOVE_4W__Rn_PM_Da_Db_Dc_Dd,
MOVE_4W__RnpRk__Da_Db_Dc_Dd,




MOVE_B_Da__Rnps15_,
MOVE_B_Ra__Rnps15_,
MOVE_B__Rn__Da,
MOVE_B__Rn_pRk_Da,
MOVE_B__Rn_PM_Da,
MOVE_B__RnpRk__Da,
MOVE_B__Rn__Ra,
MOVE_B__Rn_pRk_Ra,
MOVE_B__Rn_PM_Ra,
MOVE_B__RnpRk__Ra,
MOVE_B_Da__Rn_,
MOVE_B_Da__Rn_pRk,
MOVE_B_Da__Rn_PM,
MOVE_B_Da__RnpRk_,
MOVE_B_Ra__Rn_,
MOVE_B_Ra__Rn_pRk,
MOVE_B_Ra__Rn_PM,
MOVE_B_Ra__RnpRk_,
MOVE_B__SPps15__Da,
MOVE_B__SPps15__Ra,
MOVE_B_Da__SPps15_,
MOVE_B_Ra__SPps15_,

MOVE_F__Rn__Da,
MOVE_F__Rn_pRk_Da,
MOVE_F__Rn_PM_Da,
MOVE_F__RnpRk__Da,
MOVE_F__Rnps15__Da,
MOVE_F__SPps15__Da,
MOVE_F_Da__Rn_,
MOVE_F_Da__Rn_pRk,
MOVE_F_Da__Rn_PM,
MOVE_F_Da__RnpRk_,
MOVE_W_Da__Rn_,
MOVE_W_Da__Rn_pRk,
MOVE_W_Da__Rn_PM,
MOVE_W_Da__RnpRk_,
MOVE_L_Da__Rn_,
MOVE_L_Da__Rn_pRk,
MOVE_L_Da__Rn_PM,
MOVE_L_Da__RnpRk_,
MOVE_W_Ra__Rn_,
MOVE_W_Ra__Rn_pRk,
MOVE_W_Ra__Rn_PM,
MOVE_W_Ra__RnpRk_,
MOVE_W__Rn__Da,
MOVE_W__Rn_pRk_Da,
MOVE_W__Rn_PM_Da,
MOVE_W__RnpRk__Da,
MOVE_W__Rn__Ra,
MOVE_W__Rn_pRk_Ra,
MOVE_W__Rn_PM_Ra,
MOVE_W__RnpRk__Ra,
MOVE_L__Rn__Da,
MOVE_L__Rn_pRk_Da,
MOVE_L__Rn_PM_Da,
MOVE_L__RnpRk__Da,
MOVE_L__Rn__Ra,
MOVE_L__Rn_pRk_Ra,
MOVE_L__Rn_PM_Ra,
MOVE_L__RnpRk__Ra,
MOVE_L_CTRL_Dn,
MOVE_L_Da_CTRL,




MOVE_L__Rnpu3__Da,
MOVE_L__Rnpu3__Ra,
MOVE_L_Da__Rnpu3_,
MOVE_L_Ra__Rnpu3_,
MOVE_L__Rnps15__Da_E,
MOVE_L__Rnps15__Da,
MOVE_L__Rnps15__Ra,
MOVE_L_Da__Rnps15_,
MOVE_L_Ra__Rnps15_,
MOVE_L__SPmu6__Da,
MOVE_L__SPmu6__Ra,
MOVE_L_Da__SPmu6_,
MOVE_L_Ra__SPmu6_,
MOVE_L__SPps15__Da,
MOVE_L__SPps15__Ra,
MOVE_L_Da__SPps15_,
MOVE_L_Ra__SPps15_,
MOVE_L_Ra__Rn_,
MOVE_L_Ra__Rn_pRk,
MOVE_L_Ra__Rn_PM,
MOVE_L_Ra__RnpRk_,
MOVE_W__s10_Rn,
MOVE_W__S16__SPps16_,




MOVE_W__Rnpu3__Da,
MOVE_W__Rnpu3__Ra,
MOVE_W_Da__Rnpu3_,
MOVE_W_Ra__Rnpu3_,
MOVE_W__Rnps15__Da,
MOVE_W__Rnps15__Ra,
MOVE_W_Da__Rnps15_,
MOVE_W_Ra__Rnps15_,
MOVE_W__SPmu6__Da,
MOVE_W__SPmu6__Ra,
MOVE_W_Da__SPmu6_,
MOVE_W_Ra__SPmu6_,
MOVE_W__SPps15__Da,
MOVE_W__SPps15__Ra,
MOVE_W_Da__SPps15_,
MOVE_W_Ra__SPps15_,
MOVE_2L_BTR0_BTR1__Rn_,
MOVE_2L_BTR0_BTR1__Rn_PM,
MOVE_L_BTR1__Rn_,
MOVE_L_BTR1__Rn_PM,
MOVE_W_BTR1_H__Rn_,
MOVE_W_BTR1_H__Rn_PM,
MOVE_B_BTR1_HH__Rn_,
MOVE_B_BTR1_HH__Rn_PM,
MOVET_Ra_Rn,
MOVEF_Ra_Rn,
MOVEU_4B__Rn__Da_Db_Dc_Dd,
MOVEU_4B__Rn_pRk_Da_Db_Dc_Dd,
MOVEU_4B__Rn_PM_Da_Db_Dc_Dd,
MOVEU_4B__RnpRk__Da_Db_Dc_Dd,


MOVEU_B__Rnps15__Da,
MOVEU_B__Rnps15__Ra,
MOVEU_B__Rn__Da,
MOVEU_B__Rn_pRk_Da,
MOVEU_B__Rn_PM_Da,
MOVEU_B__RnpRk__Da,
MOVEU_B__Rn__Ra,
MOVEU_B__Rn_pRk_Ra,
MOVEU_B__Rn_PM_Ra,
MOVEU_B__RnpRk__Ra,
MOVEU_B__SPps15__Da,
MOVEU_B__SPps15__Ra,
MOVEU_L__u32_Dn,


MOVEU_W__Rnps15__Da,
MOVEU_W__Rnps15__Ra,
MOVEU_W__Rn__Da,
MOVEU_W__Rn_pRk_Da,
MOVEU_W__Rn_PM_Da,
MOVEU_W__RnpRk__Da,
MOVEU_W__Rn__Ra,
MOVEU_W__Rn_pRk_Ra,
MOVEU_W__Rn_PM_Ra,
MOVEU_W__RnpRk__Ra,
MOVEU_W__SPps15__Da,
MOVEU_W__SPps15__Ra,
MOVEU_W__Rn__Da_L,
MOVEU_W__Rn_pRk_Da_L,
MOVEU_W__Rn_PM_Da_L,
MOVEU_W__RnpRk__Da_L,
MOVEU_W__Rn__Da_H,
MOVEU_W__Rn_pRk_Da_H,
MOVEU_W__Rn_PM_Da_H,
MOVEU_W__RnpRk__Da_H,
MOVEU2_2B__Rn__Da,
MOVEU2_2B__Rn_pRk_Da,
MOVEU2_2B__Rn_PM_Da,
MOVEU2_2B__RnpRk__Da,
MOVEU2_4B__Rn__Da_Db,
MOVEU2_4B__Rn_pRk_Da_Db,
MOVEU2_4B__Rn_PM_Da_Db,
MOVEU2_4B__RnpRk__Da_Db,
MOVEU2_8B__Rn__Da_Db_Dc_Dd,
MOVEU2_8B__Rn_pRk_Da_Db_Dc_Dd,
MOVEU2_8B__Rn_PM_Da_Db_Dc_Dd,
MOVEU2_8B__RnpRk__Da_Db_Dc_Dd,
MOVE2_2B_Da__Rn_,
MOVE2_2B_Da__Rn_pRk,
MOVE2_2B_Da__Rn_PM,
MOVE2_2B_Da__RnpRk_,
MOVE2_2B__Rn__Da,
MOVE2_2B__Rn_pRk_Da,
MOVE2_2B__Rn_PM_Da,
MOVE2_2B__RnpRk__Da,
MOVE2_4B__Rn__Da_Db,
MOVE2_4B__Rn_pRk_Da_Db,
MOVE2_4B__Rn_PM_Da_Db,
MOVE2_4B__RnpRk__Da_Db,
MOVE2_4B_Da_Db__Rn_,
MOVE2_4B_Da_Db__Rn_pRk,
MOVE2_4B_Da_Db__Rn_PM,
MOVE2_4B_Da_Db__RnpRk_,
MOVE2_8B_Da_Db_Dc_Dd__Rn_,
MOVE2_8B_Da_Db_Dc_Dd__Rn_pRk,
MOVE2_8B_Da_Db_Dc_Dd__Rn_PM,
MOVE2_8B_Da_Db_Dc_Dd__RnpRk_,
MOVE2_8B__Rn__Da_Db_Dc_Dd,
MOVE2_8B__Rn_pRk_Da_Db_Dc_Dd,
MOVE2_8B__Rn_PM_Da_Db_Dc_Dd,
MOVE2_8B__RnpRk__Da_Db_Dc_Dd,
UNPACK_2W_Da_Dm_Dn,
SETALIGN_Ra_GCR,
MOVE_L_Da_E_Db_E__Rnps15_,
MOVE_B__Rnps15__Da,
MOVE_B__Rnps15__Ra,
MOVER_L_Da__Rn_,
MOVER_L_Da__Rn_pRk,
MOVER_L_Da__Rn_PM,
MOVER_L_Da__RnpRk_,
MOVER_F_Da__Rn_,
MOVER_F_Da__Rn_pRk,
MOVER_F_Da__Rn_PM,
MOVER_F_Da__RnpRk_,
MOVER_2L_Da_Db__Rn_,
MOVER_2L_Da_Db__Rn_pRk,
MOVER_2L_Da_Db__Rn_PM,
MOVER_2L_Da_Db__RnpRk_,
MOVE2_4F__Rn__Da_Db,
MOVE2_4F__Rn_pRk_Da_Db,
MOVE2_4F__Rn_PM_Da_Db,
MOVE2_4F__RnpRk__Da_Db,
MOVER_4F_Da_Db_Dc_Dd__Rn_,
MOVER_4F_Da_Db_Dc_Dd__Rn_pRk,
MOVER_4F_Da_Db_Dc_Dd__Rn_PM,
MOVER_4F_Da_Db_Dc_Dd__RnpRk_,
MOVE2_2F__Rn__Da,
MOVE2_2F__Rn_pRk_Da,
MOVE2_2F__Rn_PM_Da,
MOVE2_2F__RnpRk__Da,
MOVER_2F_Da_Db__Rn_,
MOVER_2F_Da_Db__Rn_pRk,
MOVER_2F_Da_Db__Rn_PM,
MOVER_2F_Da_Db__RnpRk_,
MOVER2_2F_Da__Rn_,
MOVER2_2F_Da__Rn_pRk,
MOVER2_2F_Da__Rn_PM,
MOVER2_2F_Da__RnpRk_,
MOVER2_2BF_Da__Rn_,
MOVER2_2BF_Da__Rn_pRk,
MOVER2_2BF_Da__Rn_PM,
MOVER2_2BF_Da__RnpRk_,
MOVE2_2BF__Rn__Da,
MOVE2_2BF__Rn_pRk_Da,
MOVE2_2BF__Rn_PM_Da,
MOVE2_2BF__RnpRk__Da,
MOVER_BF_Da__Rn_,
MOVER_BF_Da__Rn_pRk,
MOVER_BF_Da__Rn_PM,
MOVER_BF_Da__RnpRk_,
MOVER2_4F_Da_Db__Rn_,
MOVER2_4F_Da_Db__Rn_pRk,
MOVER2_4F_Da_Db__Rn_PM,
MOVER2_4F_Da_Db__RnpRk_,
MOVER2_4BF_Da_Db__Rn_,
MOVER2_4BF_Da_Db__Rn_pRk,
MOVER2_4BF_Da_Db__Rn_PM,
MOVER2_4BF_Da_Db__RnpRk_,
MOVE2_4BF__Rn__Da_Db,
MOVE2_4BF__Rn_pRk_Da_Db,
MOVE2_4BF__Rn_PM_Da_Db,
MOVE2_4BF__RnpRk__Da_Db,
MOVER_2BF_Da_Db__Rn_,
MOVER_2BF_Da_Db__Rn_pRk,
MOVER_2BF_Da_Db__Rn_PM,
MOVER_2BF_Da_Db__RnpRk_,
SUMOVE2_2F__Rn__Da_Db,
SUMOVE2_2F__Rn_pRk_Da_Db,
SUMOVE2_2F__Rn_PM_Da_Db,
SUMOVE2_2F__RnpRk__Da_Db,
SDMOVE2_2F__Rn__Da_Db,
SDMOVE2_2F__Rn_pRk_Da_Db,
SDMOVE2_2F__Rn_PM_Da_Db,
SDMOVE2_2F__RnpRk__Da_Db,
MOVER2_8BF_Da_Db_Dc_Dd__Rn_,
MOVER2_8BF_Da_Db_Dc_Dd__Rn_pRk,
MOVER2_8BF_Da_Db_Dc_Dd__Rn_PM,
MOVER2_8BF_Da_Db_Dc_Dd__RnpRk_,
MOVE2_8BF__Rn__Da_Db_Dc_Dd,
MOVE2_8BF__Rn_pRk_Da_Db_Dc_Dd,
MOVE2_8BF__Rn_PM_Da_Db_Dc_Dd,
MOVE2_8BF__RnpRk__Da_Db_Dc_Dd,
MOVER_4BF_Da_Db_Dc_Dd__Rn_,
MOVER_4BF_Da_Db_Dc_Dd__Rn_pRk,
MOVER_4BF_Da_Db_Dc_Dd__Rn_PM,
MOVER_4BF_Da_Db_Dc_Dd__RnpRk_,
MOVER_F_Da__SPps15_,
MOVER_F_Da__Rnps15_,

MOVERL_4F_Dp_Dq_Dr_Ds__Rn_,
MOVERL_4F_Dp_Dq_Dr_Ds__Rn_pRk,
MOVERL_4F_Dp_Dq_Dr_Ds__Rn_PM,
MOVERL_4F_Dp_Dq_Dr_Ds__RnpRk_,
MOVERH_4F_Dp_Dq_Dr_Ds__Rn_,
MOVERH_4F_Dp_Dq_Dr_Ds__Rn_pRk,
MOVERH_4F_Dp_Dq_Dr_Ds__Rn_PM,
MOVERH_4F_Dp_Dq_Dr_Ds__RnpRk_,


DFL2C0__Rn_,
DFL2C0__Rn_pRk,
DFL2C1__Rn_,
DFL2C1__Rn_pRk,
DFL2C2__Rn_,
DFL2C2__Rn_pRk,
DFL2C3__Rn_,
DFL2C3__Rn_pRk,
DFETCH__Rn_,
DFETCH__Rn_pRk,
DQUERY__Rn_,
DQUERY__Rn_pRk,
DFLUSH__Rn_,
DFLUSH__Rn_pRk,
DSYNC__Rn_,
DSYNC__Rn_pRk,
DMALLOC__Rn_,
DMALLOC__Rn_pRk,
DFETCHW__Rn_,
DFETCHW__Rn_pRk,
PFL2C0_Rn,
PFL2C1_Rn,
PFL2C2_Rn,
PFL2C3_Rn,
PFETCH_Rn,

PF06_Rn,
PF07_Rn,
PQUERY_Rn,
PFL2C0_RelAdd15_4,
PFL2C1_RelAdd15_4,
PFL2C2_RelAdd15_4,
PFL2C3_RelAdd15_4,
PFETCH_RelAdd15_4,

PF06_RelAdd15_4,
PF07_RelAdd15_4,
PQUERY_RelAdd15_4,
TFRAS_RelAdd7,
TFETCH_Ra_RelAdd7,
TFETCH_RelAdd20_RelAdd7,




DOENn__u16,
DOENn_Da,
DOENn_Ra,
DOENSQn__u16,
DOENSQn_Da,
DOENSQn_Ra,
BREAKn_RelAdd16,
CONTn_Ra_RelAdd16,

LPENDSQn_RelAdd20,

LPENDn_RelAdd20,
LPSKIPSQn_RelAdd20_RRelAdd4,
LPSKIPn_RelAdd20_RRelAdd4,

LPSTSQn_RelAdd20,

LPSTn_RelAdd20,
SKIPn_RelAdd16,


PUSH_Da,
PUSH_Da_E,
PUSH_Da_E_Db_E,
PUSH_Ra,
PUSH_CTRL,
POP_Da,
POP_Da_E,
POP_Da_E_Db_E,
POP_Ra,
POP_CTRL,
PUSHN_Da,
PUSHN_Da_E,
PUSHN_Da_E_Db_E,
PUSHN_Ra,
PUSHN_CTRL,
POPN_Da,
POPN_Da_E,
POPN_Da_E_Db_E,
POPN_Ra,
POPN_CTRL,
POP_2L_Da_Db,
POP_2L_Ra_Rb,
POP_2L_Da_E_Db_E_Dc_E_Dd_E,
POP_2L_CTRLa_CTRLb,
POPN_2L_Da_Db,
POPN_2L_Ra_Rb,
POPN_2L_Da_E_Db_E_Dc_E_Dd_E,
POPN_2L_CTRLa_CTRLb,
PUSH_2L_Da_Db,
PUSH_2L_Ra_Rb,
PUSH_2L_Da_E_Db_E_Dc_E_Dd_E,
PUSH_2L_CTRLa_CTRLb,
PUSHN_2L_Da_Db,
PUSHN_2L_Ra_Rb,
PUSHN_2L_Da_E_Db_E_Dc_E_Dd_E,
PUSHN_2L_CTRLa_CTRLb,


SUBIA_Ra_Rb_Rn_ipu,
SUBIA__s16_Ra_Rn_ipu,
MPYA_Ra_Rb_Rn_ipu,

ASLLA_Ra_Rb_Rn_ipu,
ASRRA_Ra_Rb_Rn_ipu,
LSLLA_Ra_Rb_Rn_ipu,
ADDIA_Ra_Rb_Rn_ipu,
ADDIA__s16_Ra_Rn_ipu,
ADDLI1A_Ra_Rb_Rn_ipu,
ADDLI2A_Ra_Rb_Rn_ipu,
ADDLI3A_Ra_Rb_Rn_ipu,
ADDLI4A_Ra_Rb_Rn_ipu,
BMSET__u16_CTRL_L_ipu,
BMCLR__u16_CTRL_L_ipu,
BMCHG__u16_CTRL_L_ipu,
BMSET__u16_CTRL_H_ipu,
BMCLR__u16_CTRL_H_ipu,
BMCHG__u16_CTRL_H_ipu,
BMTSTC__u16_CTRL_H_Pm_Pn_ipu,
BMTSTC__u16_CTRL_H_Pn_ipu,
BMTSTC__u16_CTRL_L_Pm_Pn_ipu,
BMTSTC__u16_CTRL_L_Pn_ipu,
BMTSTS__u16_CTRL_H_Pm_Pn_ipu,
BMTSTS__u16_CTRL_H_Pn_ipu,
BMTSTS__u16_CTRL_L_Pm_Pn_ipu,
BMTSTS__u16_CTRL_L_Pn_ipu,
EXTRACTA_Ra_Rb_Rn_ipu,
EXTRACTA__U5__u5_Ra_Rn_ipu,
EXTRACTUA_Ra_Rb_Rn_ipu,
EXTRACTUA__U5__u5_Ra_Rn_ipu,
INSERTA__U5__u5_Ra_Rn_ipu,
LSRRA_Ra_Rb_Rn_ipu,
MACUA__u16_Ra_Rn_ipu,
MOVE_2L_Da_Db_Rm_Rn_ipu,
MOVE_2L_Ra_Rb_Dm_Dn_ipu,

MOVE_L__u32_CTRL_ipu,
MPY32A_Ra_Rb_Rn_ipu,
MPY32A__u16_Ra_Rn_ipu,
MPYA__s16_Ra_Rn_ipu,
MPYUA_Ra_Rb_Rn_ipu,
MPYUA__u16_Ra_Rn_ipu,
DI_ipu,
EI_ipu,


JMP_Rn,
JMP_AbsAdd31,
BRA_RelAdd20,
BSR_RelAdd20,
JSR_AbsAdd31,
JSR_Rn,
RTEKRI,
RTERI,
RTE,
RTSTK,
RTS,
RTSPS,


NOP,
DEBUGEV,
DEBUG,


MARK__u3,
STOP,
WAIT,
DEBUG__u7,
CLRIC__u5,
INT__u8_Ra__u5,



MOVE_L_Ra_CTRL,
MOVE_L_CTRL_Rn,
MOVE2_2BF_Da__Rn_,
MOVE2_2BF_Da__Rnps15_,
MOVE2_2BF__Rnps15__Da,
MOVE2_2B_Da__Rnps15_,
MOVE2_2B__Rnps15__Da,
MOVE2_2F__Rnps15__Da,
MOVE2_4BF_Da_Db__Rn_,
MOVE2_4BF_Da_Db__Rnps15_,
MOVE2_4B_Da_Db__Rnps15_,
MOVE2_8BF_Da_Db_Dc_Dd__Rn_,
MOVE2_8BF_Da_Db_Dc_Dd__Rnps15_,
MOVE2_8BF__Rnps15__Da_Db_Dc_Dd,
MOVE2_8B_Da_Db_Dc_Dd__Rnps15_,
MOVE2_8B__Rnps15__Da_Db_Dc_Dd,
MOVE2_8F__Rn__Da_Db_Dc_Dd,
MOVE2_8F__Rnps15__Da_Db_Dc_Dd,
MOVER2_4BF_Da_Db__Rnps15_,
MOVER2_4F_Da_Db__Rnps15_,
MOVER2_8BF_Da_Db_Dc_Dd__Rnps15_,
MOVER_2BF_Da_Db__Rnps15_,
MOVER2_2BF_Da__Rnps15_,
MOVER_2F_Da_Db__Rnps15_,
MOVER2_2F_Da__Rnps15_,
MOVER_2L_Da_Db__Rnps15_,
MOVER_4BF_Da_Db_Dc_Dd__Rnps15_,
MOVER_4F_Da_Db_Dc_Dd__Rnps15_,
MOVER_4L_Da_Db_Dc_Dd__Rn_,
MOVER_4L_Da_Db_Dc_Dd__Rnps15_,
MOVER_BF_Da__Rnps15_,
MOVER_L_Da__Rnps15_,
MOVEU2_2B__Rnps15__Da,
MOVEU2_4B__Rnps15__Da_Db,
MOVEU2_8B__Rnps15__Da_Db_Dc_Dd,
MOVEU_2B__Rn__Da_Db,
MOVEU_2B__Rn__Ra_Rb,
MOVEU_2B__Rnps15__Da_Db,
MOVEU_2B__Rnps15__Ra_Rb,
MOVEU_2L__Rn__Da_Db,
MOVEU_2L__Rnps15__Da_Db,
MOVEU_2W__Rn__Da_Db,
MOVEU_2W__Rn__Ra_Rb,
MOVEU_2W__Rnps15__Da_Db,
MOVEU_2W__Rnps15__Ra_Rb,
MOVEU_4B__Rnps15__Da_Db_Dc_Dd,
MOVEU_4W__Rn__Da_Db_Dc_Dd,
MOVEU_4W__Rn__Ra_Rb_Rc_Rd,
MOVEU_4W__Rnps15__Da_Db_Dc_Dd,
MOVEU_4W__Rnps15__Ra_Rb_Rc_Rd,
MOVEU_B__SPmu6__Da,
MOVEU_B__SPmu6__Ra,
MOVEU_L__Rn__Da,
MOVEU_L__Rnps15__Da,
MOVEU_L__SPmu6__Da,
MOVEU_L__SPps15__Da,

MOVEU_W__SPmu6__Da,
MOVEU_W__SPmu6__Ra,
MOVE_2BF_Da_Db__Rn_,
MOVE_2BF_Da_Db__Rnps15_,
MOVE_2BF__Rn__Da_Db,
MOVE_2BF__Rnps15__Da_Db,
MOVE_2B_Da_Db__Rn_,
MOVE_2B_Da_Db__Rnps15_,
MOVE_2B_Ra_Rb__Rn_,
MOVE_2B_Ra_Rb__Rnps15_,
MOVE_2B__Rn__Da_Db,
MOVE_2B__Rn__Ra_Rb,
MOVE_2B__Rnps15__Da_Db,
MOVE_2B__Rnps15__Ra_Rb,
MOVE_2F_Da_Db__Rn_,
MOVE_2F_Da_Db__Rnps15_,
MOVE_2F__Rnps15__Da_Db,
MOVE_2L_Da_Db__Rnps15_,
MOVE_2L_Ra_Rb__Rn_,
MOVE_2L_Ra_Rb__Rnps15_,
MOVE_2L__Rn__Ra_Rb,
MOVE_2L__Rnps15__Da_Db,
MOVE_2L__Rnps15__Da_Dc,
MOVE_2L__Rnps15__Ra_Rb,
MOVE_2W_Da_Db__Rnps15_,
MOVE_2W_Ra_Rb__Rn_,
MOVE_2W_Ra_Rb__Rnps15_,
MOVE_2W__Rn__Ra_Rb,
MOVE_2W__Rnps15__Da_Db,
MOVE_2W__Rnps15__Ra_Rb,
MOVE_2X_Da_Db__Rn_,
MOVE_2X_Da_Db__Rnps15_,
MOVE_2X__Rn__Da_Db,
MOVE_2X__Rnps15__Da_Db,
MOVE_4BF_Da_Db_Dc_Dd__Rn_,
MOVE_4BF_Da_Db_Dc_Dd__Rnps15_,
MOVE_4BF__Rn__Da_Db_Dc_Dd,
MOVE_4BF__Rnps15__Da_Db_Dc_Dd,
MOVE_4B_Da_Db_Dc_Dd__Rnps15_,
MOVE_4B__Rnps15__Da_Db_Dc_Dd,
MOVE_4F_Da_Db_Dc_Dd__Rn_,
MOVE_4F_Da_Db_Dc_Dd__Rnps15_,
MOVE_4F__Rnps15__Da_Db_Dc_Dd,
MOVE_4L_Da_Db_Dc_Dd__Rn_,
MOVE_4L_Da_Db_Dc_Dd__Rnps15_,
MOVE_4L_Ra_Rb_Rc_Rd__Rn_,
MOVE_4L_Ra_Rb_Rc_Rd__Rnps15_,
MOVE_4L__Rn__Da_Db_Dc_Dd,
MOVE_4L__Rn__Ra_Rb_Rc_Rd,
MOVE_4L__Rnps15__Da_Db_Dc_Dd,
MOVE_4L__Rnps15__Ra_Rb_Rc_Rd,
MOVE_4W_Da_Db_Dc_Dd__Rnps15_,
MOVE_4W_Ra_Rb_Rc_Rd__Rn_,
MOVE_4W_Ra_Rb_Rc_Rd__Rnps15_,
MOVE_4W__Rn__Ra_Rb_Rc_Rd,
MOVE_4W__Rnps15__Da_Db_Dc_Dd,
MOVE_4W__Rnps15__Ra_Rb_Rc_Rd,
MOVE_BF_Da__Rn_,
MOVE_BF_Da__Rnps15_,
MOVE_BF_Da__SPmu6_,
MOVE_BF_Da__SPps15_,
MOVE_BF__Rn__Da,
MOVE_BF__Rnps15__Da,
MOVE_BF__SPmu6__Da,
MOVE_BF__SPps15__Da,
MOVE_B_Da__SPmu6_,
MOVE_B_Ra__SPmu6_,
MOVE_B__SPmu6__Da,
MOVE_B__SPmu6__Ra,
MOVE_F_Da__Rnps15_,
MOVE_F_Da__SPmu6_,
MOVE_F_Da__SPps15_,

MOVE_F__SPmu6__Da,
MOVE_W__S15__Rnps15_,
MOVE_X_Da__Rn_,
MOVE_X_Da__Rnps15_,
MOVE_X_Da__SPmu6_,
MOVE_X_Da__SPps15_,

MOVE_X__Rn__Da,
MOVE_X__Rnps15__Da,
MOVE_X__SPmu6__Da,
MOVE_X__SPps15__Da,

MOVE2_2BF_Da__Rn_PM,
MOVE2_2BF_Da__RnpRk_,
MOVE2_2BF_Da__Rn_pRk,
MOVE2_4BF_Da_Db__Rn_PM,
MOVE2_4BF_Da_Db__RnpRk_,
MOVE2_4BF_Da_Db__Rn_pRk,
MOVE2_8BF_Da_Db_Dc_Dd__Rn_PM,
MOVE2_8BF_Da_Db_Dc_Dd__RnpRk_,
MOVE2_8BF_Da_Db_Dc_Dd__Rn_pRk,
MOVE2_8F__Rn_PM_Da_Db_Dc_Dd,
MOVE2_8F__RnpRk__Da_Db_Dc_Dd,
MOVE2_8F__Rn_pRk_Da_Db_Dc_Dd,
MOVER_4L_Da_Db_Dc_Dd__Rn_PM,
MOVER_4L_Da_Db_Dc_Dd__RnpRk_,
MOVER_4L_Da_Db_Dc_Dd__Rn_pRk,
MOVEU_2B__Rn_PM_Da_Db,
MOVEU_2B__RnpRk__Da_Db,
MOVEU_2B__Rn_pRk_Da_Db,
MOVEU_2B__Rn_PM_Ra_Rb,
MOVEU_2B__RnpRk__Ra_Rb,
MOVEU_2B__Rn_pRk_Ra_Rb,
MOVEU_2L__Rn_PM_Da_Db,
MOVEU_2L__RnpRk__Da_Db,
MOVEU_2L__Rn_pRk_Da_Db,
MOVEU_2W__Rn_PM_Da_Db,
MOVEU_2W__RnpRk__Da_Db,
MOVEU_2W__Rn_pRk_Da_Db,
MOVEU_2W__Rn_PM_Ra_Rb,
MOVEU_2W__RnpRk__Ra_Rb,
MOVEU_2W__Rn_pRk_Ra_Rb,
MOVEU_4W__Rn_PM_Da_Db_Dc_Dd,
MOVEU_4W__RnpRk__Da_Db_Dc_Dd,
MOVEU_4W__Rn_pRk_Da_Db_Dc_Dd,
MOVEU_4W__Rn_PM_Ra_Rb_Rc_Rd,
MOVEU_4W__RnpRk__Ra_Rb_Rc_Rd,
MOVEU_4W__Rn_pRk_Ra_Rb_Rc_Rd,
MOVEU_L__Rn_PM_Da,
MOVEU_L__RnpRk__Da,
MOVEU_L__Rn_pRk_Da,
MOVE_2BF_Da_Db__Rn_PM,
MOVE_2BF_Da_Db__RnpRk_,
MOVE_2BF_Da_Db__Rn_pRk,
MOVE_2BF__Rn_PM_Da_Db,
MOVE_2BF__RnpRk__Da_Db,
MOVE_2BF__Rn_pRk_Da_Db,
MOVE_2B_Da_Db__Rn_PM,
MOVE_2B_Da_Db__RnpRk_,
MOVE_2B_Da_Db__Rn_pRk,
MOVE_2B_Ra_Rb__Rn_PM,
MOVE_2B_Ra_Rb__RnpRk_,
MOVE_2B_Ra_Rb__Rn_pRk,
MOVE_2B__Rn_PM_Da_Db,
MOVE_2B__RnpRk__Da_Db,
MOVE_2B__Rn_pRk_Da_Db,
MOVE_2B__Rn_PM_Ra_Rb,
MOVE_2B__RnpRk__Ra_Rb,
MOVE_2B__Rn_pRk_Ra_Rb,
MOVE_2F_Da_Db__Rn_PM,
MOVE_2F_Da_Db__RnpRk_,
MOVE_2F_Da_Db__Rn_pRk,
MOVE_2L_Ra_Rb__Rn_PM,
MOVE_2L_Ra_Rb__RnpRk_,
MOVE_2L_Ra_Rb__Rn_pRk,
MOVE_2L__Rn_PM_Ra_Rb,
MOVE_2L__RnpRk__Ra_Rb,
MOVE_2L__Rn_pRk_Ra_Rb,
MOVE_2W_Ra_Rb__Rn_PM,
MOVE_2W_Ra_Rb__RnpRk_,
MOVE_2W_Ra_Rb__Rn_pRk,
MOVE_2W__Rn_PM_Ra_Rb,
MOVE_2W__RnpRk__Ra_Rb,
MOVE_2W__Rn_pRk_Ra_Rb,
MOVE_2X_Da_Db__Rn_PM,
MOVE_2X_Da_Db__RnpRk_,
MOVE_2X_Da_Db__Rn_pRk,
MOVE_2X__Rn_PM_Da_Db,
MOVE_2X__RnpRk__Da_Db,
MOVE_2X__Rn_pRk_Da_Db,
MOVE_4BF_Da_Db_Dc_Dd__Rn_PM,
MOVE_4BF_Da_Db_Dc_Dd__RnpRk_,
MOVE_4BF_Da_Db_Dc_Dd__Rn_pRk,
MOVE_4BF__Rn_PM_Da_Db_Dc_Dd,
MOVE_4BF__RnpRk__Da_Db_Dc_Dd,
MOVE_4BF__Rn_pRk_Da_Db_Dc_Dd,
MOVE_4F_Da_Db_Dc_Dd__Rn_PM,
MOVE_4F_Da_Db_Dc_Dd__RnpRk_,
MOVE_4F_Da_Db_Dc_Dd__Rn_pRk,
MOVE_4L_Da_Db_Dc_Dd__Rn_PM,
MOVE_4L_Da_Db_Dc_Dd__RnpRk_,
MOVE_4L_Da_Db_Dc_Dd__Rn_pRk,
MOVE_4L_Ra_Rb_Rc_Rd__Rn_PM,
MOVE_4L_Ra_Rb_Rc_Rd__RnpRk_,
MOVE_4L_Ra_Rb_Rc_Rd__Rn_pRk,
MOVE_4L__Rn_PM_Da_Db_Dc_Dd,
MOVE_4L__RnpRk__Da_Db_Dc_Dd,
MOVE_4L__Rn_pRk_Da_Db_Dc_Dd,
MOVE_4L__Rn_PM_Ra_Rb_Rc_Rd,
MOVE_4L__RnpRk__Ra_Rb_Rc_Rd,
MOVE_4L__Rn_pRk_Ra_Rb_Rc_Rd,
MOVE_4W_Ra_Rb_Rc_Rd__Rn_PM,
MOVE_4W_Ra_Rb_Rc_Rd__RnpRk_,
MOVE_4W_Ra_Rb_Rc_Rd__Rn_pRk,
MOVE_4W__Rn_PM_Ra_Rb_Rc_Rd,
MOVE_4W__RnpRk__Ra_Rb_Rc_Rd,
MOVE_4W__Rn_pRk_Ra_Rb_Rc_Rd,
MOVE_BF_Da__Rn_PM,
MOVE_BF_Da__RnpRk_,
MOVE_BF_Da__Rn_pRk,
MOVE_BF__Rn_PM_Da,
MOVE_BF__RnpRk__Da,
MOVE_BF__Rn_pRk_Da,
MOVE_X_Da__Rn_PM,
MOVE_X_Da__RnpRk_,
MOVE_X_Da__Rn_pRk,
MOVE_X__Rn_PM_Da,
MOVE_X__RnpRk__Da,
MOVE_X__Rn_pRk_Da,



TSTGTA_Ra_Pn,
TSTGEA_Ra_Pn,
TSTEQA_W_Ra_Pn,
TSTEQA_Ra_Pn,
BMCHGA__u16_Dn_H,
BMCHGA__u16_Dn_L,
BMCLRA__u16_Dn_H,
BMCLRA__u16_Dn_L,
BMSETA__u16_Dn_H,
BMSETA__u16_Dn_L,
BMTSETA__u16_Dn_H_Pn,
BMTSETA__u16_Dn_L_Pn,
BMTSTCA__u16_Da_H_Pn,
BMTSTCA__u16_Da_L_Pn,
BMTSTSA__u16_Da_H_Pn,
BMTSTSA__u16_Da_L_Pn,
TSTEQA_Ra_Pm_Pn,
TSTGTA_Ra_Pm_Pn,
TSTLEA_Ra_Pn,
TSTLTA_Ra_Pn,
TSTNEA_Ra_Pn,
TSTNEA_W_Ra_Pn,


ABSA_Ra_Rn,
ABSA_Ra_Rn_ipu,
NOTA_Ra_Rn,
NOTA_Ra_Rn_ipu,
ADDSPA_Ra_SP,
ADDSPA_Ra_SP_ipu,
ADDSPA__s10_Rn,
ADDSPA__s10_Rn_ipu,
ADDSPA__s10_SP,
ADDSPA__s10_SP_ipu,
ASLLA__u5_Ra_Rn,
ASLLA__u5_Ra_Rn_ipu,
ASRRA__u5_Ra_Rn,
ASRRA__u5_Ra_Rn_ipu,
CLBA_Ra_Rn,
CLBA_Ra_Rn_ipu,
CMPEQA_Ra_Rb_Pm_Pn,
CMPEQA_Ra_Rb_Pm_Pn_ipu,
CMPEQA_Ra_Rb_Pn,
CMPEQA_Ra_Rb_Pn_ipu,
CMPEQA__s16_Ra_Pm_Pn,
CMPEQA__s16_Ra_Pm_Pn_ipu,
CMPEQA__s16_Ra_Pn,
CMPEQA__s16_Ra_Pn_ipu,
CMPEQA__u5_Ra_Pn,
CMPEQA__u5_Ra_Pn_ipu,
CMPGEA_Ra_Rb_Pn,
CMPGEA_Ra_Rb_Pn_ipu,
CMPGEA__s16_Ra_Pn,
CMPGEA__s16_Ra_Pn_ipu,
CMPGTA_Ra_Rb_Pm_Pn,
CMPGTA_Ra_Rb_Pm_Pn_ipu,
CMPGTA_Ra_Rb_Pn,
CMPGTA_Ra_Rb_Pn_ipu,
CMPGTA__s16_Ra_Pm_Pn,
CMPGTA__s16_Ra_Pm_Pn_ipu,
CMPGTA__s16_Ra_Pn,
CMPGTA__s16_Ra_Pn_ipu,
CMPGTA__u5_Ra_Pn,
CMPGTA__u5_Ra_Pn_ipu,
CMPHEA_Ra_Rb_Pn,
CMPHEA_Ra_Rb_Pn_ipu,
CMPHIA_Ra_Rb_Pm_Pn,
CMPHIA_Ra_Rb_Pm_Pn_ipu,
CMPHIA_Ra_Rb_Pn,
CMPHIA_Ra_Rb_Pn_ipu,
CMPLEA__s16_Ra_Pn,
CMPLEA__s16_Ra_Pn_ipu,
CMPLTA__s16_Ra_Pn,
CMPLTA__s16_Ra_Pn_ipu,
CMPNEA_Ra_Rb_Pn,
CMPNEA_Ra_Rb_Pn_ipu,
CMPNEA__s16_Ra_Pn,
CMPNEA__s16_Ra_Pn_ipu,
DECEQA_Rn_Pm_Pn,
DECEQA_Rn_Pm_Pn_ipu,
DECEQA_Rn_Pn,
DECEQA_Rn_Pn_ipu,
DECGEA_Rn_Pm_Pn,
DECGEA_Rn_Pm_Pn_ipu,
DECGEA_Rn_Pn,
DECGEA_Rn_Pn_ipu,
DECNEA_Rn_Pn,
DECNEA_Rn_Pn_ipu,
LSRRA__u5_Ra_Rn,
LSRRA__u5_Ra_Rn_ipu,
MAXA_Ra_Rb_Rn,
MAXA_Ra_Rb_Rn_ipu,
MINA_Ra_Rb_Rn,
MINA_Ra_Rb_Rn_ipu,
MOVE_L_Da_Dn,
MOVE_L_Da_Dn_ipu,
MOVE_L_Da_Rn,
MOVE_L_Da_Rn_ipu,
MOVE_L_Ra_Dn,
MOVE_L_Ra_Dn_ipu,
MOVE_W__s10_Dn,
MOVE_W__s10_Dn_ipu,
MOVE_W__s10_Rn,
MOVE_W__s10_Rn_ipu,
MOVE_W__s10_Rn_H,
MOVE_W__s10_Rn_H_ipu,
MOVEU_W__u16_Dn_L,
MOVEU_W__u16_Dn_L_ipu,
MOVEU_W__u16_Dn_H,
MOVEU_W__u16_Dn_H_ipu,
MOVE_L__s32_Dn,
MOVE_L__s32_Dn_ipu,
MOVE_L__s32_Rn,
MOVE_L__s32_Rn_ipu,
NEGA_Ra_Rn,
NEGA_Ra_Rn_ipu,
ANDA_Ra_Rb_Rn,
ANDA_Ra_Rb_Rn_ipu,
ORA_Ra_Rb_Rn,
ORA_Ra_Rb_Rn_ipu,
EORA_Ra_Rb_Rn,
EORA_Ra_Rb_Rn_ipu,
PANDA_Pa_Pb_Pm_Pn,
PANDA_Pa_Pb_Pm_Pn_ipu,
PANDA_Pa_Pb_Pn,
PANDA_Pa_Pb_Pn_ipu,
PEORA_Pa_Pb_Pm_Pn,
PEORA_Pa_Pb_Pm_Pn_ipu,
PEORA_Pa_Pb_Pn,
PEORA_Pa_Pb_Pn_ipu,
PNOTA_Pa_Pn,
PNOTA_Pa_Pn_ipu,
PORA_Pa_Pb_Pm_Pn,
PORA_Pa_Pb_Pm_Pn_ipu,
PORA_Pa_Pb_Pn,
PORA_Pa_Pb_Pn_ipu,
SUBA_Ra_Rb_Rn,
SUBA_Ra_Rb_Rn_ipu,
SXTA_B_Ra_Rn,
SXTA_B_Ra_Rn_ipu,
SXTA_W_Ra_Rn,
SXTA_W_Ra_Rn_ipu,
SUBA__s16_Ra_Rn,
SUBA__s16_Ra_Rn_ipu,
ZXTA_B_Ra_Rn,
ZXTA_B_Ra_Rn_ipu,
ZXTA_W_Ra_Rn,
ZXTA_W_Ra_Rn_ipu,
ADDA__s16_Ra_Rn,
ADDA__s16_Ra_Rn_ipu,
ADDA_Ra_Rb_Rn,
ADDA_Ra_Rb_Rn_ipu,
ADDL1A_Ra_Rb_Rn,
ADDL1A_Ra_Rb_Rn_ipu,
ADDL2A_Ra_Rb_Rn,
ADDL2A_Ra_Rb_Rn_ipu,
ADDL3A_Ra_Rb_Rn,
ADDL3A_Ra_Rb_Rn_ipu,
ADDL4A_Ra_Rb_Rn,
ADDL4A_Ra_Rb_Rn_ipu,
TFRA_Ra_Rn,
TFRA_Ra_Rn_ipu,
TFRA_SP_Rn,
TFRA_SP_Rn_ipu,
TFRA_Ra_SP,
TFRA_Ra_SP_ipu,
BMTSTCA__u16_Ra_H_Pm_Pn,
BMTSTCA__u16_Ra_H_Pm_Pn_ipu,
BMTSTCA__u16_Ra_H_Pn,
BMTSTCA__u16_Ra_H_Pn_ipu,
BMTSTCA__u16_Ra_L_Pm_Pn,
BMTSTCA__u16_Ra_L_Pm_Pn_ipu,
BMTSTCA__u16_Ra_L_Pn,
BMTSTCA__u16_Ra_L_Pn_ipu,
BMTSTSA__u16_Ra_H_Pm_Pn,
BMTSTSA__u16_Ra_H_Pm_Pn_ipu,
BMTSTSA__u16_Ra_H_Pn,
BMTSTSA__u16_Ra_H_Pn_ipu,
BMTSTSA__u16_Ra_L_Pm_Pn,
BMTSTSA__u16_Ra_L_Pm_Pn_ipu,
BMTSTSA__u16_Ra_L_Pn,
BMTSTSA__u16_Ra_L_Pn_ipu,




MACQ_Da_Db_Dc_Dd_Dn,
IMACQ_Da_Db_Dc_Dd_Dn,
MACQX_Da_Db_Dc_Dd_Dn,
MPYCX_Da_Db_Dm_Dn,
MPYCXC_Da_Db_Dm_Dn,
MACCX_Da_Db_Dm_Dn,
MACCXC_Da_Db_Dm_Dn,
MPYCXR_Da_Db_Dn,
MPYCXCR_Da_Db_Dn,
MACCXR_Da_Db_Dn,
MACCXCR_Da_Db_Dn,
MPYCXJ_Da_Db_Dm_Dn,
MPYCXJR_Da_Db_Dn,
MACCXJ_Da_Db_Dm_Dn,
MACCXJR_Da_Db_Dn,
SMPYDR_2W_Da_Db_Dc_Dd_Dn,
MACDR_2W_Da_Db_Dc_Dd_Dn,
MACDR_2W_mDa_Db_Dc_Dd_Dn,
SMPYCXJ_Da_Db_Dm_Dn,
SMPYCX_Da_Db_Dm_Dn,
SMPYCXC_Da_Db_Dm_Dn,
ISMPYCX_Da_Db_Dm_Dn,
ISMPYCXC_Da_Db_Dm_Dn,
IMPYCX_Da_Db_Dm_Dn,
IMPYCXC_Da_Db_Dm_Dn,
IMACCX_Da_Db_Dm_Dn,
IMACCXC_Da_Db_Dm_Dn,
IMPYCXR_Da_Db_Dn,
IMPYCXCR_Da_Db_Dn,
IMACCXR_Da_Db_Dn,
IMACCXCR_Da_Db_Dn,
ISMPYDR_2W_Da_Db_Dc_Dd_Dn,
IMACDR_2W_Da_Db_Dc_Dd_Dn,
IMACDR_2W_mDa_Db_Dc_Dd_Dn,
ABS_L_Da_Dn,
NEG_L_Da_Dn,
CMPNE_Da_Db_Pn,
CMPGE_Da_Db_Pn,
CMPNE__s32_Da_Pn,
CMPNE__u5_Da_Pn,
CMPLE__s32_Da_Pn,
CMPLE__u5_Da_Pn,
CMPNE_L_Da_Db_Pn,
CMPGT_L_Da_Db_Pn,
CMPGE_L_Da_Db_Pn,
CMPEQ_L__s32_Da_Pn,
CMPEQ_L__u5_Da_Pn,
CMPNE_L__s32_Da_Pn,
CMPNE_L__u5_Da_Pn,
CMPGT_L__s32_Da_Pn,
CMPGT_L__u5_Da_Pn,
CMPLE_L__s32_Da_Pn,
CMPLE_L__u5_Da_Pn,
ASLL_L_Da_Db_Dn,
ASLL_L__u5_Da_Dn,
ASRR_L_Da_Db_Dn,
ASRR_L__u5_Da_Dn,
LSLL_L_Da_Db_Dn,
MAXMSEARCH4_Da_Db_Dm_Dn,
MPYM_2X_Da_Dc_Dd_Dm_Dn,
MACM_2X_Da_Dc_Dd_Dm_Dn,
IMPYM_2X_Da_Dc_Dd_Dm_Dn,
IMACM_2X_Da_Dc_Dd_Dm_Dn,
SMPY_Da_H_Db_H_Dn,
SMPY_Da_H_Db_L_Dn,
SMPY_Da_L_Db_H_Dn,
SMPY_Da_L_Db_L_Dn,
SMPYCIM_Da_Db_Dn,
SMPYD_Da_Db_Dn,
SMPYD_mDa_Db_Dn,
SMPYIM_Da_Db_Dn,
SMPYRE_Da_Db_Dn,
SMPYM_Da_Db_Dn,
SASLL_2W_Da_Db_Dn,
SASLL_2W__u5_Da_Dn,
SASRR_2W_Da_Db_Dn,
SSODAAII_2W_Da_Db_Dn,
SSODAAXX_2W_Da_Db_Dn,
SSODASII_2W_Da_Db_Dn,
SSODASXX_2W_Da_Db_Dn,
SSODSAII_2W_Da_Db_Dn,
SSODSAXX_2W_Da_Db_Dn,
SSODSSII_2W_Da_Db_Dn,
SSODSSXX_2W_Da_Db_Dn,
SABS_2W_Da_Dn,
SNEG_2W_Da_Dn,
SMAC_2W_Da_Db_Dn,
SMAC_2W_mDa_Db_Dn,
SMACR_2W_Da_Db_Dn,
SMACR_2W_mDa_Db_Dn,
SMPY_2W_Da_Db_Dn,
SMPYR_2W_Da_Db_Dn,
SABS_Da_Dn,
SNEG_Da_Dn,
SADD_Da_Db_Dn,
SSUB_Da_Db_Dn,
SRND_Da_Dn,
SASLL_Da_Db_Dn,
SASRR_Da_Db_Dn,
SASLL__u5_Da_Dn,
SASRR__u5_Da_Dn,
IMPY32_Da_Db_Dm_Dn,
IMPY32H_Da_Db_Dn,
IMPY32L_Da_Db_Dn,
IMAC32H_Da_Db_Dn,
MPY32_Da_Db_Dm_Dn,
MPY32H_Da_Db_Dn,

MAC32H_Da_Db_Dn,
PNOT_Pa_Pn,
PAND_Pa_Pb_Pn,
POR_Pa_Pb_Pn,
PEOR_Pa_Pb_Pn,
IMPY_2X_Da_Db_Dm_Dn,
SMPY_2X_Da_Db_Dm_Dn,
IMPY32SU_Da_Db_Dm_Dn,
IMPY32UU_Da_Db_Dm_Dn,
MAXSEARCH4_Da_Db_Dm_Dn,
MINSEARCH4_Da_Db_Dm_Dn,
MPYM_Da_L_Db_Dn,
MPYM_Da_H_Db_Dn,


CLBF_Da_Dn,
MPYQ_Da_Db_Dc_Dd_Dn,
IMPYQ_Da_Db_Dc_Dd_Dn,
TFR_2X_Da_Db_Dm_Dn,
CMPEQ_2W_Da_Db_Pm_Pn,
CMPNE_2W_Da_Db_Pm_Pn,
CMPGE_2W_Da_Db_Pm_Pn,
CMPGT_2W_Da_Db_Pm_Pn,
CMPEQ_2W_Da_Db_Dn,
CMPNE_2W_Da_Db_Dn,
CMPGE_2W_Da_Db_Dn,
CMPGT_2W_Da_Db_Dn,
ADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn,
ADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn,
ADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn,
ADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn,

MPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
MPY_2X_Da_Db_Dm_Dn,
MACD_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACD_2X_Da_Db_Dc_Dd_Dm_Dn,
IMACD_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMACD_2X_Da_Db_Dc_Dd_Dm_Dn,


MPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
SMPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMPYD_2X_Da_Db_Dc_Dd_Dm_Dn,
MPYRE_2X_Da_Db_Dc_Dd_Dm_Dn,
MPYIM_2X_Da_Db_Dc_Dd_Dm_Dn,
MACRE_2X_Da_Db_Dc_Dd_Dm_Dn,
MACIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn,
SMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACRE_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACIM_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn,
IMACRE_2X_Da_Db_Dc_Dd_Dm_Dn,
IMACIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMPYRE_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMPYIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMACRE_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMACIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ADD_2X_Da_Db_Dc_Dd_Dm_Dn,
SUB_2X_Da_Db_Dc_Dd_Dm_Dn,

NEG_2X_Da_Db_Dm_Dn,
ABS_2X_Da_Db_Dm_Dn,
AND_2X_Da_Db_Dc_Dd_Dm_Dn,
OR_2X_Da_Db_Dc_Dd_Dm_Dn,
EOR_2X_Da_Db_Dc_Dd_Dm_Dn,
NEOR_2X_Da_Db_Dc_Dd_Dm_Dn,
NOR_2X_Da_Db_Dc_Dd_Dm_Dn,
NOT_2X_Da_Db_Dm_Dn,
SAT_2L_Da_Db_Dm_Dn,
MPYHH_2X_Da_Db_Dc_Dd_Dm_Dn,
MPYLL_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYHH_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYLL_2X_Da_Db_Dc_Dd_Dm_Dn,
IMACDH_2X_Da_Db_Dc_Dm_Dn,
IMACDL_2X_Da_Db_Dc_Dm_Dn,
IMPYDH_2X_Da_Db_Dc_Dm_Dn,
IMPYDL_2X_Da_Db_Dc_Dm_Dn,
MACDH_2X_Da_Db_Dc_Dm_Dn,
MACDL_2X_Da_Db_Dc_Dm_Dn,
MPYDH_2X_Da_Db_Dc_Dm_Dn,
MPYDL_2X_Da_Db_Dc_Dm_Dn,
SIGN_4W_Da_Db_Dm_Dn,
SABS_4W_Da_Db_Dm_Dn,
SADD_4W_Da_Db_Dc_Dd_Dm_Dn,
SSUB_4W_Da_Db_Dc_Dd_Dm_Dn,
PACK_2W_Da_H_Db_H_Dn,
PACK_2W_Da_H_Db_L_Dn,
PACK_2W_Da_L_Db_H_Dn,
PACK_2W_Da_L_Db_L_Dn,
PACK20_Da_WH_Db_WH_Dn,
PACK20_Da_WH_Db_WL_Dn,
PACK20_Da_WL_Db_WH_Dn,
PACK20_Da_WL_Db_WL_Dn,
MPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
IMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMPYCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
MACCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
IMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
ISMACCIM_2X_Da_Db_Dc_Dd_Dm_Dn,
SADDSUB_2X_Da_Db_Dc_Dd_Dm_Dn,
SADDSUBX_2X_Da_Db_Dc_Dd_Dm_Dn,
SADDSUB_4W_Da_Db_Dc_Dd_Dm_Dn,
SADDSUBX_4W_Da_Db_Dc_Dd_Dm_Dn,
ASLL_2L_Da_Dc_Dd_Dm_Dn,
ASLL_2L__u5_Da_Db_Dm_Dn,
ASRR_2L_Da_Dc_Dd_Dm_Dn,
ASRR_2L__u5_Da_Db_Dm_Dn,
SASLL_4W_Da_Dc_Dd_Dm_Dn,
SASLL_4W__u4_Da_Db_Dm_Dn,
SASRR_4W_Da_Dc_Dd_Dm_Dn,
SASRR_4W__u4_Da_Db_Dm_Dn,



DOEN0_Da,
DOENSQ0_Da,
DOEN1_Da,
DOENSQ1_Da,
DOEN2_Da,
DOENSQ2_Da,
DOEN3_Da,
DOENSQ3_Da,
DOEN0_Ra,
DOENSQ0_Ra,
DOEN1_Ra,
DOENSQ1_Ra,
DOEN2_Ra,
DOENSQ2_Ra,
DOEN3_Ra,
DOENSQ3_Ra,
DOEN0__imm,
DOEN1__imm,
DOEN2__imm,
DOEN3__imm,
DOENSQ0__imm,
DOENSQ1__imm,
DOENSQ2__imm,
DOENSQ3__imm,
LPST0_RelAdd20,
LPST1_RelAdd20,
LPST2_RelAdd20,
LPST3_RelAdd20,
LPSTSQ0_RelAdd20,
LPSTSQ1_RelAdd20,
LPSTSQ2_RelAdd20,
LPSTSQ3_RelAdd20,
LPEND0_RelAdd20,
LPEND1_RelAdd20,
LPEND2_RelAdd20,
LPEND3_RelAdd20,
LPENDSQ0_RelAdd20,
LPENDSQ1_RelAdd20,
LPENDSQ2_RelAdd20,
LPENDSQ3_RelAdd20,
SKIP0_RelAdd16,
SKIP1_RelAdd16,
SKIP2_RelAdd16,
SKIP3_RelAdd16,
BREAK0_RelAdd16,
BREAK1_RelAdd16,
BREAK2_RelAdd16,
BREAK3_RelAdd16,
CONT0_Ra_RelAdd16,
CONT1_Ra_RelAdd16,
CONT2_Ra_RelAdd16,
CONT3_Ra_RelAdd16,
LPSKIP0_RelAdd20_RRelAdd4,
LPSKIP1_RelAdd20_RRelAdd4,
LPSKIP2_RelAdd20_RRelAdd4,
LPSKIP3_RelAdd20_RRelAdd4,
LPSKIPSQ0_RelAdd20_RRelAdd4,
LPSKIPSQ1_RelAdd20_RRelAdd4,
LPSKIPSQ2_RelAdd20_RRelAdd4,
LPSKIPSQ3_RelAdd20_RRelAdd4

   );
    type = instr;
  }







  define (group = to_remove) {
    items = (*all - *sc3900_instr);
    type = instr;
  }

  defmod (instr = (*to_remove)) {
    remove = 1;
  }

  define (aspect=PredicatePre) {
      instr_pre_exec = true;
      if_defined = (PR);
      action = {
  if ((PR!=0) && (get_SR_PR(PR-1)==0)) {
     set_ignore_mode(true);
     return;


  }
      };
   }
   define (aspect=PredicatePost) {
      instr_post_exec = true;
      if_defined = (PR);
      action = {
  if ((PR!=0) && (get_SR_PR(PR-1)==0)) {
     set_ignore_mode(false);

  }
      };
   }




}

define (core = StarCore)
{

    instrtables = (prefix,serial_one_word,serial_two_word,serial_three_word,serial_four_word);

   archs = (sc3900);



}
# 7 "/vobs/vb_dp_arch/ADLsim/sc3900/sc3900_arch_runsim.adl" 2
