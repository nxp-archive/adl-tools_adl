//
// Test new fields syntax and post packet handler
//

 define (arch=minippc) {
 
 parallel_execution = 2;

 packet_pos_incr = 16;

 post_packet = func() { if (getCurrentInstrTable() == other) {} };

 post_packet_commit = func() { int i = 10; };

 // decode-retry handler   access currentInstrTable and retries decode

 decode_retry = func(addr_t ea, unsigned) {
     if (getCurrentInstrTable() == other) {
       return false;
     } else 
     setCurrentInstrTable(other);
     return true;
 };

	

 define (reg = REG1) {
   attrs = (cia,nia);
 }

 define (regfile=D) {
   size = 32;
 }

 define(instrfield=OPCD){
   pseudo = true;
   width = variable;
 }
 
 define(instrfield=F1){
   bits = 6;
 }


  define(instrfield=F2){
   bits = 8;
  }
  define(instrfield=F3){
   bits = (9,11);
  }
 
  define (instrfield=ESG) 
  {
	width = 1;  
	pseudo = true;

  }

  define(instrfield=D1) {
    pseudo = true;
    width = 5;
  } 
  define(instrfield=D2) {
    pseudo = true;
    width = 3;
  } 

  define (instrfield=HighReg) 
  {
    prefix = true;    
    pseudo = true;
  	indexed = 3; 
    index_endianness = little;
  }

  define (instrfield=Enc1) 
  {
	width = 16;  
	pseudo = true;
  }


 define(instr=Foo2) {
   fields = (OPCD,F1, F2);
   width = 32;
   define(instr=Foo3) {
    fields = ((bits(0,1),b10),(bits(2),F1));
    alias = Foo2(OPCD(OPCD),F1(F1),F2(01));
   }
   action = {
	
   };
 }

  define(instr=Foo10) {
   fields = (OPCD,F3, F2);
   width = 32;
   define(instr=Foo11) {
    fields = ((bits(0,1),b11),(bits(2,3),F3(1,2)),(bits(4),F3(0)));
    alias = Foo10(OPCD(OPCD),F3(F3),F2(0x4));
   }
   action = {};
 }

 define(instr=Bar1) {
   fields = ((bits(0,12),0xff),
             (bits(13,15),D2),
	     (bits(16),1),
	     (bits(17,18),D1(0,1)),
	     (bits(19,22),11),
	     (bits(23,25),D1(2,4)),
	     (bits(26,31),63));

    action = {
	D(D1) = D(D2) *3;
    };
    define(instr=Bar2) {
       alias = Bar1(D1(7),D2(-D2));
    }
  }

  define(instr=HighReg) {
    prefix = true;
    fields = ((bits(0,5),0x1a),
	      (bits(6,8),HighReg(0,2)),
	      (bits(9,11),2),
	      (bits(12,14),HighReg(3,5)));
  }
}
 

define (core=P) {
  instrtables = (prefix,other);
  archs=minippc;
}
