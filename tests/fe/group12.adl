//
// Test the use of attributes with groups.
//
define (arch = MiniPPC) {

  // Various helper routines.

  attrs = (title,doc_group_1,doc_group_2);

  define (group=doc_group_1) {
    """
A description for the first document group.
    """;
    type = instr;
    attrs = title("Document Group 1");
    has_attrs = doc_group_1;
  }

  define (group=doc_group_2) {
    """
A description for the second document group.
    """;
    type = instr;
    attrs = title("Document Group 2");
    has_attrs = doc_group_2;
  }

  defmod(group=doc_group_2) {
    attrs = title("The Real Document Group 2");
  }

  //
  // Registers.
  //

  define (reg=CIA) {
    """
      Current instruction address.
      """;
    attrs = cia;

  }

  define (reg=NIA) {
    """
      Next instruction address.
      """;
    attrs = nia;
  }

  define (regfile=GPR) {
    """
      General purpose registers.
      """;
    size = 32;
    prefix = r;
  }

  //
  // Instruction fields.
  //

  define (instrfield=OPCD) {
    """
Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO) {
    """
Extended opcode.
    """;
    bits = (21,30);
  }

  define (instrfield=RA) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RB) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RT) {
    """
Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RS) {
    """
Field used to specify a General Purpose Register as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=SI) {
    """
Signed immediate field for arithmetic operations.
    """;
    bits = (16,31);
    display = dec;
    is_signed = true;
  }


  //
  // Instructions.
  //

  define (instr=add) {
    """
The sum GPR(RA) + GPR(RB) is placed into RD.

The add instruction is preferred for additions because it sets few status bits.
    """;
    fields=(OPCD(31),RT,RA,RB,XO(266));
    action = {
      GPR(RT) = GPR(RA) + GPR(RB);
    };
    attrs = doc_group_1;
  }

  define (instr=addi) {
    fields=(OPCD(14),RT,RA,SI);
    action = {
       if (RA == 0) {
        GPR(RT) = SI;
      } else
         // Note: Braces have been left off specifically to test code generation
         // for this situation.
        GPR(RT) = GPR(RA) + SI;
    };
    attrs = doc_group_2;
  }


}

define (core = P) {
  archs = MiniPPC;
}
