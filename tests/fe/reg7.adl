//
// Check for proper overwriting behavior of register entries
// in a sparse register file.
//

define (arch = Base) {
  define (regfile = sprs) {
    size = 1024;
  }
  define (regfile = gprs) {
    size = 32;
  }
  define (reg = pc) {
    attrs = (cia,nia);
  }
}

define (arch = minippc) {

  define (reg = a) { }

  define (reg = b) { }

  defmod (regfile=sprs) {
    define (entry=20) { reg = a; }
    define (entry=21) { reg = gprs(2); }
    define (entry=22) { reg = gprs(3); }
    define (entry=23) {
      define (read) {
        action = func() {
          a = a - 1;
          return a;
        };
      }
      define (write) {
        action = func (bits<32>) {
          b = b + 1;
        };
      }
    }
    invalid_entry_read = func(unsigned index) {
      int i = 20;
      raiseException(Program);
    };
    invalid_entry_write = func(unsigned index,bits<32> value) {
      int i = 10;
      raiseException(Program);
    };
  }

  invalid_entry_read = func(unsigned id,unsigned index) {
    int i = 20;
    raiseException(Program);
  };
  invalid_entry_write = func(unsigned id,unsigned index,bits<32> value) {
    int i = 10;
    raiseException(Program);
  };

  define (exception=Program) {
    action = {
      pc=0x1000;
    };
  }

}

define (core = P) {
  archs = (Base,minippc);

  defmod (regfile=sprs) {
    define (entry=20) { reg = b; }
  }
}

