//
// This propagates constants and tests a rather complicated switch statement.
//

#define regSize 32

define (arch=minippc) {

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO_X) {
    """
    Extended opcode for X Instruction Format.
    """;
    bits = (21,30);
  }   

  define (instrfield=RA) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }
  
  define (instrfield=RB) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RT) {
    """
    Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }
 
  define (instr=a) {
    fields=(OPCD(1),RT,RA,RB,XO_X(10));
    action = {
      evmgrp1(RT, RA, RB, 1, 0, 1, 1, 0);
    };
  }

  define (instr=b) {
    fields=(OPCD(2),RT,RA,RB,XO_X(10));
    action = {
      evmgrp1(RT, RA, RB, 1, 0, 1, 1, 3);
    };
  }

  define (instr=c) {
    fields=(OPCD(3),RT,RA,RB,XO_X(10));
    action = {
      evmgrp1(RT, RA, RB, 0, 0, 1, 1, 3);
    };
  }

  void evmgrp1 ( uint32_t d, uint32_t a, uint32_t b, uint8_t M, uint8_t O,
    uint8_t F, uint8_t S, uint8_t A ) // two 16*16->two 32.
  {
    uint8_t lsb = 0, movh = 0, movl = 0, msb = 0, ovh = 0, ovl = 0;
    uint32_t ah = 0, al = 0, bh = 0, bl = 0, satnum = 0;
    uint64_t prodh = 0, prodl = 0, temp1 = 0, temp2 = 0, temp3 = 0, 
           temp4 = 0, temp5 = 0, temp6 = 0;


    switch (A) {
    case 0: // Don't care.
    case 1: // Update accumulator.
      GPR(d)(0,31) = fldru64(temp3,32,63);
      GPR(d)(32,63) = fldru64(temp4,32,63);
      if ( A==1 ) {
        ACC = GPR(d);
      }
      break;
    case 2: // Add to accumulator.
    case 3: // Add negated to accumulator.
      {
        if ( A==2 ) {
          if ( S==0 ) { // Unsigned.
            temp5 = (ACC(0,31)).uint64() + fldru64(temp3,32,63);
            temp6 = (ACC(32,63)).uint64() + fldru64(temp4,32,63);
          }
          else
            if ( (S==1) || (S==2) ) { // ra, rb Signed or ra Signed, rb Unsigned.
              temp5 = (ACC(0,31)).int64() + fldrs64(temp3,32,63);
              temp6 = (ACC(32,63)).int64() + fldrs64(temp4,32,63);
            }
          satnum = 0xFFFFFFFF;
        }
        else if ( A==3 ) {
          if ( S==0 ) { // Unsigned.
            temp5 = (ACC(0,31)).uint64() + ~fldru64(temp3,32,63) + 1;
            temp6 = (ACC(32,63)).uint64() + ~fldru64(temp4,32,63) + 1;
          }
          else
            if ( (S==1) || (S==2) ) { // ra, rb Signed or ra Signed, rb Unsigned.
              temp5 = (ACC(0,31)).int64() + ~fldrs64(temp3,32,63) + 1;
              temp6 = (ACC(32,63)).int64() + ~fldrs64(temp4,32,63) + 1;
            }
          satnum = 0x00000000;
        }
        if ( M==0 ) { // Saturate.
          if ( S==0 ) { // Unsigned.
            ovh = fldru64(temp5, 31, 31);
            ovl = fldru64(temp6, 31, 31);
            GPR(d)(0,31) = saturate1lim(ovh,satnum,fldru64(temp5,32,63));
            GPR(d)(32,63) = saturate1lim(ovl,satnum,fldru64(temp6,32,63));
          }
          else
            if ( (S==1) || (S==2) ) { // ra, rb Signed or ra Signed, rb Unsigned.
              ovh = (fldru64(temp5,31,31)) ^ (fldru64(temp5,32,32));
              ovl = (fldru64(temp6,31,31)) ^ (fldru64(temp6,32,32));
              GPR(d)(0,31) = saturate2lim(ovh,fldru64(temp5,31,31),0x80000000,
                                          0x7FFFFFFF,fldru64(temp5,32,63));
              GPR(d)(32,63) = saturate2lim(ovl,fldru64(temp6,31,31),0x80000000,
                                           0x7FFFFFFF,fldru64(temp6,32,63));
            }
        } else if ( M==1 ) { // Modulo.
          GPR(d)(0,31) = fldru64(temp5,32,63);
          GPR(d)(32,63) = fldru64(temp6,32,63);
        }
        ACC = GPR(d);
      } break;
    }
    if ( M==0 ) { // Update SPEFSCR register.
      if ( F==1 ) {
        SPEFSCR.OVH = movh;
        SPEFSCR.OV = movl;
        SPEFSCR.SOVH = SPEFSCR.SOVH | movh;
        SPEFSCR.SOV = SPEFSCR.SOV | movl;
        if ( (A==2) || (A==3) ) {
          SPEFSCR.OVH = movh | ovh;
          SPEFSCR.OV = movl | ovl;
          SPEFSCR.SOVH = SPEFSCR.SOVH | movh | ovh;
          SPEFSCR.SOV = SPEFSCR.SOV | movl | ovl;
        }
      }
      else
      if ( (F==0) && ((A==2) || (A==3)) ) {
        SPEFSCR.OVH = ovh;
        SPEFSCR.OV = ovl;
        SPEFSCR.SOVH = SPEFSCR.SOVH | ovh;
        SPEFSCR.SOV = SPEFSCR.SOV | ovl;
      }
    }
  }

  uint32_t saturate1lim ( uint8_t ov, uint32_t num, uint64_t sum )
  {
  }

  uint32_t saturate2lim ( uint8_t ov, uint8_t car0, uint32_t negnum,
                          uint32_t posnum, uint64_t sum )
  {
  }

  int32_t fldrs ( uint32_t data, int msb, int lsb )
  {
  }

  int64_t fldrs64 ( uint64_t data, int msb, int lsb )
  {
  }

  uint32_t fldru ( uint32_t data, int msb, int lsb )
  {
  }

  uint64_t fldru64 ( uint64_t data, int msb, int lsb )
  {
  }

  uint32_t mults (uint32_t a, uint32_t b )
  {
  }

  uint32_t multsu (uint32_t a, uint32_t b )
  {
  }

  define (regfile=GPR) {
    size = 32;
    width=64;
  }

  define (reg = pc) {
    attrs = (cia,nia);
  }

 define (reg=SPEFSCR) {
   """
    The SPE status and control register.
    """;
   width = 32;
   define (field=SOVH) { bits = 0; }
   define (field=OVH) { bits = 1; }
   define (field=FGH) { bits = 2; }
   define (field=FXH) { bits = 3; }
   define (field=FINVH) { bits = 4; }
   define (field=FDBZH) { bits = 5; }
   define (field=FUNFH) { bits = 6; }
   define (field=FOVFH) { bits = 7; }
   define (field=FINXS) { bits = 10; }
   define (field=FINVS) { bits = 11; }
   define (field=FDBZS) { bits = 12; }
   define (field=FUNFS) { bits = 13; }
   define (field=FOVFS) { bits = 14; }
   define (field=MODE) { bits = 15; }
   define (field=SOV) { bits = 16; }
   define (field=OV) { bits = 17; }
   define (field=FG) { bits = 18; }
   define (field=FX) { bits = 19; }
   define (field=FINV) { bits = 20; }
   define (field=FDBZ) { bits = 21; }
   define (field=FUNF) { bits = 22; }
   define (field=FOVF) { bits = 23; }
   define (field=FINXE) { bits = 25; }
   define (field=FINVE) { bits = 26; }
   define (field=FDBZE) { bits = 27; }
   define (field=FUNFE) { bits = 28; }
   define (field=FOVFE) { bits = 29; }
   define (field=FRMC) { bits = (30,31); }
 }

 define (reg=ACC) {
   width = 64;
 };

}

define (core=P) {
  archs=minippc;
}
