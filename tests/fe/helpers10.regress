======
Cores:
======
Name:  "P"
Register Files:
  Name:  "GPR"
  Size:  32
  Prefix:  r
  Usage:  read, written
  Width:  32
  Documention:

General purpose registers.
    
  -------------------------------
Registers:
  Name:  "CIA"
  Usage:  read, written
  Width:  32
  Attributes:  cia
  Documention:

Current instruction address.
    
  -------------------------------
  Name:  "NIA"
  Usage:  read, written
  Width:  32
  Attributes:  nia
  Documention:

Next instruction address.
    
  -------------------------------
Current-instruction-address register:  CIA
Next-instruction-address register:  NIA
Real-address Mask:
  Initial mask:  0xffffffff (constant)
Effective-address Mask:
  Initial mask:  0xffffffff (constant)
Instruction Fields:
  OPCD: [0,5] 
    Primary opcode.
    
  RA: [11,15] [regfile:  GPR]
    Field used to specify a General Purpose Register to be used as a source.
    
  RB: [16,20] [regfile:  GPR]
    Field used to specify a General Purpose Register to be used as a source.
    
  RT: [6,10] [regfile:  GPR]
    Field used to specify a General Purpose Register to be used as a target.
    
  XO: [21,30] 
    Extended opcode.
    
Instructions:
  Name:  add (rank: 100)
  Width:  32
  Fields:  OPCD(31) RT RA RB XO(266)
  Action:  {
    GPR ( RT ) = GPR ( RA ) + GPR ( RB ) ;
     FP x ( GPR ( RA ) ) ;
     FP y ( GPR ( RB ) ) ;
     FP z = x + y ;
}
  Source Registers:  GPR(RA) GPR(RB) 
  Target Registers:  GPR(RT) 
  Documention:

The sum GPR(RA) + GPR(RB) is placed into RD.

The add instruction is preferred for additions because it sets few status bits.
    
  -------------------------------

Instruction Tables:
other:
    Mask:  0xfc0007fe
    1040187658(7c000214):  add

User Type Declarations:
   struct FP  {
     bool _sign ;
     bits < 10 > _exp ;
     bits < 52 > _mant ;
      FP ( const bits < 64 > & x ) : _sign ( x . get ( 0 ) ) , _exp ( x . get ( 1 , 11 ) ) , _mant ( x . get ( 12 , 63 ) ) {
    }
      ;
     FP & operator + ( const FP & x ) {
        _mant = _mant + x . _mant ;
        return * this ;
    }
} ;
-------------------------------

