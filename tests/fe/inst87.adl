//
// This tests that we track sources/targets properly for switch statements.  We must
// treat each case block as a conditional block, just like an if/else.  Actually, that's
// not totally true, since 'break' determines the actual order, but this way we'll be
// a bit more conservative, which should be OK.
//

#define regSize 32

define (arch=minippc) {

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO_X) {
    """
    Extended opcode for X Instruction Format.
    """;
    bits = (21,30);
  }   

  define (instrfield=RA) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }
  
  define (instrfield=RB) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RT) {
    """
    Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }
 
  define (instr=a) {
    fields=(OPCD(1),RT,RA,RB,XO_X(10));
    action = {
      foo(RT.uint32(), RA.uint32(), RB.uint32(), RB /* Must be a variable, since we propagate constants. */);
    };
  }

  // ACC is both a source and a target, even though it appears first as a
  // target.
  void foo(int d,int a,int b,int x)
  {
    // Test a corner case, where it's easy to get confused about
    // var. declarations vs. parameter decls.
	bits<32> yy = ( (zeroExtend(x,32))*(zeroExtend(x,32)) );
    // Now test the switch, making sure that we treat it as a conditional.
    switch (x) {
    case 0:
      ACC = GPR(a);
      break;
    case 1:
      GPR(d) = ACC;
      break;
    }
  }

  define (regfile=GPR) {
    size = 32;
  }

  define (reg = pc) {
    attrs = (cia,nia);
  }

  define (reg=ACC) {}

  define (reg=SPEFSCR) {}

}

define (core=P) {
  archs=minippc;
}
