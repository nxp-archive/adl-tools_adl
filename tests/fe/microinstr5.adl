// Test mask generations under different instruction widths


define (core = rubber) {
  archs = rubber; 
  instrtables = (instrs_31_33, instrs_31, instrs_33);
}

define (arch = rubber) {

//##############################################################################
// Parameters
//##############################################################################

  bit_endianness = little;
  instr_endianness = little;
  data_endianness = little;
     
//==============================================================================


//##############################################################################
// Attributes
//##############################################################################
   
    attrs = (instrs_31_33, instrs_31, instrs_33);

//==============================================================================


//##############################################################################
// Registers
//##############################################################################

  define (reg=CIA) {
    """
    Current instruction address
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address
    """;
    attrs = nia;
  }

//============================================================================== 


//##############################################################################
// Instructions
//##############################################################################

 
  define (instr = instr33){ 
    width = 33;
    fields = (
             (bits(30,28),b111), (bits(27,8),0),
             (bits(7,0),b00110001));
    syntax = ("instr33");
    attrs = (instrs_31_33);
    action={ };
  }  

  define (instr = instr31){ 
    width = 31;
    fields = (
             (bits(30,28),b110), (bits(27,8),0),
             (bits(7,0),b00110001));
    syntax = ("instr31");
    attrs = (instrs_31_33);    
    action={ };
  }   

  define (instr = instrs331){ 
    width = 33;
    fields = (
             (bits(30,28),b111), (bits(27,8),0),
             (bits(7,0),b00110001));
    syntax = ("instrs331");
    attrs = (instrs_33);
    action={ };
  }  
  
  define (instr = instrs332){ 
    width = 33;
    fields = (
             (bits(30,28),b110), (bits(27,8),0),
             (bits(7,0),b00110001));
    syntax = ("instrs332");
    attrs = (instrs_33);
    action={ };
  }  

  define (instr = instrs311){ 
    width = 31;
    fields = (
             (bits(30,28),b111), (bits(27,8),0),
             (bits(7,0),b00110001));
    syntax = ("instrs311");
    attrs = (instrs_31);    
    action={ };
  } 

  define (instr = instrs312){ 
    width = 31;
    fields = (
             (bits(30,28),b110), (bits(27,8),0),
             (bits(7,0),b00110001));
    syntax = ("instrs312");
    attrs = (instrs_31);    
    action={ };
  }   
  
//============================================================================== 

//##############################################################################
// Assembler
//##############################################################################
  
  define (assembler) {
    comments = ("//", "#");
    line_comments = (".", "//", "#");
    line_separators = (";");
  }

//============================================================================== 


}



