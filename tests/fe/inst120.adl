//
// Make sure that we can parse a catch-block, where we
// use the declared variable.
//

define (arch = minippc) {

  //
  // Registers.
  //

  define (reg=CIA) {
    """
    Current instruction address.
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address.
    """;
    attrs = nia;
  }

  define (regfile=GPR) {
    """
    General purpose registers.
    """;
    size = 32;
  }

  //
  // Instruction fields.
  //

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO) {
    """
    Extended opcode.
    """;
    bits = (21,30);
    doc_title = "OPCD";
  }
  define (instrfield=RA) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
  }
  define (instrfield=RB) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
  }
  define (instrfield=RT) {
    """
    Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
  }

  //
  // Instructions.
  //

  define (instr=add) {
    fields=(OPCD(31),RT,RA,RB,XO(266));
    action = {
      try {
        GPR(RT) = GPR(RA) + GPR(RB);
      }
      catch (Exception e) {
        if (e) { 1; };
      };
    };
  }


}

define (arch=P) {

}

define (core=foo) {
  archs=(minippc,P);
}
