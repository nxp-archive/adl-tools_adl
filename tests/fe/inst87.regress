======
Cores:
======
Name:  "P"
Register Files:
  Name:  "GPR"
  Size:  32
  Usage:  read, written
  Width:  32
  -------------------------------
Registers:
  Name:  "ACC"
  Usage:  read, written
  Width:  32
  -------------------------------
  Name:  "SPEFSCR"
  Width:  32
  -------------------------------
  Name:  "pc"
  Usage:  read, written
  Width:  32
  Attributes:  cia nia
  -------------------------------
Current-instruction-address register:  pc
Next-instruction-address register:  pc
Real-address Mask:
  Initial mask:  0xffffffff (constant)
Effective-address Mask:
  Initial mask:  0xffffffff (constant)
Instruction Fields:
  OPCD: [0,5] 
        Primary opcode.
    
  RA: [11,15] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a source.
    
  RB: [16,20] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a source.
    
  RT: [6,10] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a target.
    
  XO_X: [21,30] 
        Extended opcode for X Instruction Format.
    
Instructions:
  Name:  a (rank: 100)
  Width:  32
  Fields:  OPCD(1) RT RA RB XO_X(10)
  Action:  {
    foo ( RT . uint32 (  ) , RA . uint32 (  ) , RB . uint32 (  ) , RB ) ;
}
  Source Registers:  ACC? GPR(RA . uint32 (  ))? 
  Target Registers:  ACC? GPR(RT . uint32 (  ))? 
  Helper Functions:  foo 
  -------------------------------

Instruction Tables:
other:
    Mask:  0xfc0007fe
    33554442(4000014):  a

Helper Functions:
  foo:
 void foo ( int d , int a , int b , int x ) {
     bits < 32 > yy = ( ( zeroExtend ( x , 32 ) ) * ( zeroExtend ( x , 32 ) ) ) ;
    switch ( x ) {
        case 0 : ACC = GPR ( a ) ;
        break ;
        case 1 : GPR ( d ) = ACC ;
        break ;
    }
}
    Source Registers:  ACC? GPR(a [parm #1])? 
    Target Registers:  ACC? GPR(d [parm #0])? 
-------------------------------

