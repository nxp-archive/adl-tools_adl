//
// Test of syntax
//

 define (arch=minippc) {
  attrs = (up,down,ff); 

 define (reg = REG1) {
   attrs = (cia,nia);
 }
 
 define (regfile = GPR){
   prefix=r;
   size = 1024; 
 }
 
 define(instrfield=IMM){
   width = 16;
   pseudo = true;
 }
 
 define(instrfield=IMM2){
   width = 16;
   pseudo = true;
 } 
 
 define(instrfield=OPCD){
   bits =(0,5);
 }
 
 define(instrfield=F1){
   bits = 6;
   enumerated = (".up",".down");
 }
 
 define(instrfield=F2){
   bits = 7;
   enumerated = (".left",".right");
 }
 
 define(instrfield=R1){
   bits = (8,11);
 }
 
 define(instrfield=R2){
   bits = (12,15);
 }
 
 define(instrfield=R3){
   bits = (16,19);
 }
 
 define(instrfield=R4){
   bits = (20,23);
 }
 
 define(instrfield=B){
   bits = (24,29);
 }
 

 
 define(instr=pushsch){
   fields = (OPCD(1),F1,F2,R1,R2,R3,R4);
   syntax  = ("%i%p%p%p%p %f",F1,F2,R1,R2,R3,R4(R3!=R3));
   action = {};
 }
 
 define(instr=mtspr){
   fields = (OPCD(2),F1,F2,R1,R2,R3);
   syntax  = ("%i%f%f %f,%f,%f", F1,F2,R1,R2,R3,R3(R3>>1));
   action = {};
 } 
 
 define(instr=mfspr){
   fields = (OPCD(3),F1,R1,R2,R3);
   syntax = ("%i%p %f,%f",F1, R1, R2, R3((!R1) && ((R2&1) == 1)),R2(R2>>1));
   action = {};
 }  
  
 define(instr=and){
   fields = (OPCD(4),F1,F2,B,R1,R2,R3);
   syntax = ("%i%p%p %f,%f", F1,F2,R1,IMM,
		   R3( ((IMM & 0xFFFF0000) == 0) ||
			((IMM & 0xFFFF0000) == 0xFFFF0000) ?
			1 : 0),
		  B( ((IMM & 0xFFFF0000) == 0xFFFF0000) ||
			((IMM & 0xFFFF) == 0xFFFF) ? 1 : 0),
		  R2( ((IMM & 0xFFFF0000) == 0) ? IMM :
			 ((IMM & 0xFFFF) == 0) ? IMM >> 16 :
			 ((IMM & 0xFFFF0000) == 0xFFFF0000) ? ~IMM  :
						          ~(IMM >> 16))); 
   action = {};
  
  
  
  }

 define(instr=add){
   fields = (OPCD(5),F1,F2,B,R1,R3);
   syntax = ("%i%p%p %f,%f", F1, F2, R1, IMM, 
		                        B( IMM > 0xFFFF ? 0 : 1),
		                        R3( IMM > 0xFFFF ? IMM >> 16 : IMM));
   action = {};
 }


 define(instr=andis){
   fields = (OPCD(6),F1,F2,B,R1,R2,R3,R4);
   syntax = ("%i%p%p %f,%f,%f",F1,F2,R1,R2,IMM,
	        R3( ((IMM & 0xFFFFFF00)) == 0 ||		        
		               ((IMM & 0xFFFF00FF)) == 0 ||		
		               ((IMM & 0xFF00FFFF)) == 0 ||
			       ((IMM & 0x00FFFFFF)) == 0 ? 0 : 1),
		B( ((IMM & 0xFFFFFF00) == 0) ||((IMM & 0xFFFFFF00) == 0xFFFFFF00) ? 3 :
		    ((IMM & 0xFFFF00FF) == 0) ||((IMM & 0xFFFF00FF) == 0xFFFF00FF) ? 2 :
		    ((IMM & 0xFF00FFFF) == 0) ||((IMM & 0xFF00FFFF) == 0xFF00FFFF) ? 1 : 0 ),
		R4(((IMM & 0xFFFFFF00) == 0) ? IMM :
		     ((IMM & 0xFFFF00FF) == 0) ? IMM >>  8 :
		     ((IMM & 0xFF00FFFF) == 0) ? IMM >> 16 :
		     ((IMM & 0x00FFFFFF) == 0) ? IMM >> 24 :
		     ((IMM & 0xFFFFFF00) == 0xFFFFFF00) ? ~ IMM : 
		     ((IMM & 0xFFFF00FF) == 0xFFFF00FF) ? ~(IMM >>  8) : 
		     ((IMM & 0xFF00FFFF) == 0xFF00FFFF) ? ~(IMM >> 16) : ~(IMM >> 24)));  
   action = {};
 }

 define(instr=andis){
   fields = (OPCD(6),F1,F2,R1,R2,R3,R4);
  syntax = ("%i%p%p %f%f[%f],%f",F1,F2,R1,R2,R3,R4,R3(31-R3));
   action = {};
 }


 define(instr=ldschi){
  fields= (OPCD(0x07), R1, R2, R3 );
  syntax = ("ldschi %f,%f,%f",R1,R2,R3,R3( (R3 >= cia()) ? (R3 - cia()) : (~(cia()-R3) + 1) )); 
  action = {};
 }
 
 
 
}
define (core=P) {
  archs=minippc;
}




















