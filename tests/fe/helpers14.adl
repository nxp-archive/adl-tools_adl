//
// More tests of fixed-source/target propagation through helpers.  We don't
// handle arbitrary variable expressions, but we should handle expressions
// involving instruction fields.
//

#define regSize 32

define (arch=minippc) {

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO_X) {
    """
    Extended opcode for X Instruction Format.
    """;
    bits = (21,30);
  }   

  define (instrfield=RA) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }
  
  define (instrfield=RB) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RT) {
    """
    Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }
 
  define (instr=a) {
    fields=(OPCD(1),RT,RA,RB,XO_X(10));
    action = {
      // Element will remain fixed.
      x(RT+1);
    };
  }

  define (instr=b) {
    fields=(OPCD(2),RT,RA,RB,XO_X(10));
    action = {
      // Element will remain fixed.
      int a = RT;
      x(a);
    };
  }

  define (instr=c) {
    fields=(OPCD(3),RT,RA,RB,XO_X(10));
    action = {
      // Element will not be fixed.
      int a = RT + 1;
      x(a);
    };
  }

  define (instr=d) {
    fields=(OPCD(4),RT,RA,RB,XO_X(10));
    action = {
      // Element will remain fixed.
      x((RT+1).uint32());
    };
  }


  // GPR(x) is fixed to a parm.
  void x(int x)
  {
    GPR(x) = 20;
  }

  define (regfile=GPR) {
    size = 32;
  }

  define (reg = pc) {
    attrs = (cia,nia);
  }

}

define (core=P) {
  archs=minippc;
}
