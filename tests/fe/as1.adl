//
// Testing of aspect error detection.
//

define (arch=minippc) {

  define (reg = pc) {
    attrs = (cia,nia);
  }

  define (regfile=GPR) {
    """
      General purpose registers.
      """;
    size = 32;
    prefix = r;
  }

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO) {
    """
    Extended opcode.
    """;
    bits = (21,30);
  }

  define (instrfield=RA) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
  }
  define (instrfield=RB) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
  }
  define (instrfield=RT) {
    """
    Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
  }

  define (instrfield=SI) {
    """
Signed immediate field for arithmetic operations.
    """;
    bits = (16,31);
    display = dec;
    is_signed = true;
  }

  define (instr=add1) {
    fields=(OPCD(12),RT,RA,SI);

    action = {
      var carry = Carry(GPR(RA),SI,0);
      Update:
      GPR(RT) = GPR(RA) + SI;
    };
  }

  // Will fail b/c of unknown reference when expanded.
  defmod (instr=add1) {
    define (aspect=A) {
      labels = Update;
      action = { GPR(RB) = 0; };
    }
  }

  // Unknown reference.
  define (aspect=B) {
    labels = Update;
    action = { STUFF = 0; };
  }

  // Never expanded, so not an error.
  define (aspect=C) {
    labels = Foo;
    action = { BAR = 0; };
  }

}

define (core=foo) {
  archs=minippc;
}
