//
// Checks defmod behavior on cores and architectures.
//
define (arch=foo) {

  define (reg=CIA) {
    """
    Current instruction address.
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address.
    """;
    attrs = nia;
  }

  define (reg=MSR) {
    define (field=PR) {
      bits = 10;
    }
  }

  define (reg=HDBCR0) {
    define (field=MMU_ENABLE) {
      bits = 0;
    }
  }

  define (reg=HDBCR1) {
    define (read) {
      action = { return 1; };
    }
  }

  define (reg=L1CFG1) {
    define (read) {
      action = { return 0; };
    }
  }

  define (reg=SRR0) { }

  define (reg=SRR1) { }

  define (reg=IVPR) {
    """
    Interrupt-vector prefix register.
    """;
  }

  define (reg=IVOR6) {
    """
    Interrupt-vector offset register 6.
    """;
  }

  define (reg=IVOR7) {
    """
    Interrupt-vector offset register 7.
    """;
  }

  define (reg=DEAR) { }

  define (reg=PID0) { }

  define (reg=PID1) { }

  define (exception=ITlbMiss) {
    action = func() { };
  }

  define (exception=DTlbMiss) {
    action = func() { };
  }

  define (exception=ProtectionFault) {
    action = func() { };
  }

  attrs = (translation_attr,minippc_mmu);

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=RT) {
    """
Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RA) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RB) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=XO) {
    """
Extended opcode.
    """;
    bits = (21,30);
  }

  define (regfile=GPR) {
    """
      General purpose registers.
      """;
    size = 32;
    prefix = r;
  }

  define (instr=add1) {
    fields=(OPCD(31),RT,RA,RB,XO(266));
    action = {
      foo(1);
      foo(2);
    };
  }

  define (instr=add2) {
    fields=(OPCD(31),RT,RA,RB,XO(267));
    action = {
      foo(2);
      foo(3);
    };
  }

  define (instr=add3) {
    fields=(OPCD(31),RT,RA,RB,XO(268));
    action = {
      foo(3);
      foo(4);
    };
  }

  int foo(int x)
  {
    GPR(x) = 20;
    return GPR(x);
  }

  //
  // Program interrupt.
  // 
  define (exception=Program) {
    action = {
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR.get<16>(0,15),IVOR6.get<16>(16,31));
    };
  }

  defmod (exception=ProtectionFault) {
    action = {
      SRR0 = CIA;
      SRR1 = MSR;
      MSR = 0;
      NIA = concat(IVPR.get<16>(0,15),IVOR7.get<16>(16,31));
    };
  }

  define (mmu) {

    both_enable = { return (HDBCR0.REALMODE() == 0); };

    define (lookup=TlbOrig) {
      interface = true;
      define (wayfield=TID) {
        bits = 6;
      }
      define (wayfield=SIZE) {
        bits = 6;
      }
      define (wayfield=V) {
        bits = 1;
      }
      define (wayfield=TS) {
        bits = 1;
      }
      define (wayfield=RPN) {
        bits = 24;
      }
      define (wayfield=EPN) {
        """
        Example documentation string for an MMU field.
        """;
        bits = 24;
      }
      define (wayfield=SX) {
        bits=1;
      }
      define (wayfield=SW) {
        bits=1;
      }
      define (wayfield=SR) {
        bits=1;
      }
      define (wayfield=UX) {
        bits=1;
      }
      define (wayfield=UW) {
        bits=1;
      }
      define (wayfield=UR) {
        bits=1;
      }
      define (wayfield=WIMG) {
        bits = 4;
        attrs = translation_attr;
      }
    }

    define(lookup=TlbBase) {

      inherit = TlbOrig;
      interface = true;

     
      test = Compare(V,1);
      test = Compare(TS, ((Instr) ? MSR.IR : MSR.DR) );
      test = Compare(TID,0,PID0,PID1);      
      test = AddrComp(EPN);

      sizescale = 2;
      sizeshift = 10;

      pageshift = 2;

      realpage = RPN;

      exec_perm = func(TlbBase_t t,addr_t ea,unsigned seq) {
      };

    }

    define (lookup=TlbCam) {
      
      inherit = TlbBase;

      priority = 0;

      define (array) {
        entries = 16;
      }

      sizescale = 1;

      sizetype  = BitSize;
      size      = SIZE;
    }

    define (lookup=Tlb4k) {
      inherit = TlbBase;

      priority = 1;

      define (array) {
        entries = 512;
        set_assoc = 2;
      }

      define (setfield=NV) {
        bits = 1;
      }

      size = 4096;

    }

    // Here, we're using a defmod to add a field only to the CAM and then to add
    // a test for it.  We want to make sure that a deep-copy is performed on the
    // tests inherited from TlbBase, so that Tlb4k doesn't have this test.
    defmod (lookup=TlbCam) {
      define (wayfield=IND) {
        bits = 1;
      }
      test = Compare(IND,0);
    }

  }

}

// Make sure that we can defmod an architecture.
defmod (arch=foo) {
  defmod (reg=MSR) {
    define (field=CM) {
      bits = 11;
    }
  }

  int stuff() { return 20; };

  defmod (reg=HDBCR1) {
    define (read) {
      action = { return foo(3); };
    }
  }

}

define (core=P) {
  archs=foo;
}

defmod (core=P) {

  // Make sure that we can change a register within a core defmod.
  defmod (reg=L1CFG1) {
    define (read) {
      action = {
        return (HDBCR0 == 1) ? foo(2) : stuff();
      };
    }
  }

  // Make sure that the core defmod will see symbols (foo) in one of the
  // original core's architectures.
  void bar(int x)
  {
    foo(2);
    GPR(x) = 20;
  }

}
