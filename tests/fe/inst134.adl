//
// An example of using the bit-wise encoding syntax, but setting a value for a
// field, in order to use it as an opcode, rather than using implicitly created
// opcode fields.
//
// This is a more complex example, with multiple named fields, which are
// actually used by the alias target.
//
define (arch = MiniStarCore) {

  bit_endianness = little;
  parallel_execution = 3;
  blk = (ipu, dalu, lsu);
  attrs = (type1,type2,prefix,first,second);  

  // ----- REGISTERS ---------
  // CIA,NIA
  define (reg = PC) { attrs = (cia,nia);  serial = true; };  
  // GPR
  define (regfile = GPR) {  width = 32;  size  = 32;  prefix = r; };
  // SR (T,...);
  define (reg = SR) { 
    define (field = T1) { bits = 0; """ SR.T1 field"""; }; define (field = T6) { bits = 1;}; width = 32; 
  };
  define (reg =LC) {width =32;};

  define (reg=SP)
    {
      """
	Stack Pointer
	""";
      attrs = (doc_hidden);
      define (read) {
        action =
          {
            if (SR.T1==0) { return GPR(0); }
            else if (SR.T1==1) { return GPR(1); }
          };
      }
    }


  // -------- INSTRFIELDS ----------
 
  define (instrfield = FIDD11) {
    width = 4;
    pseudo = true;
    assembler = true;
    value = 11;
  }

  define (instrfield=Src1)
    {
      width = 3;
      pseudo = true;
    }

  define (instrfield=Src2)
    {
      width = 3;
      pseudo = true;
    }

  define (instrfield=Res1)
    {
      width = 5;
      pseudo = true;
    }

  define (instrfield=OP1)
    {
      width = 2;
      pseudo = true;
      // ref = GPR;
    }

  define (instrfield=OP2)
    {
      width = 2;
      pseudo = true;
      // ref = GPR;
    }

  define (instrfield=Rk)
    {
      width = 4;
      ref = GPR;
      pseudo = true;
      enumerated = ("r0::r7","r1::r8","r2::r10","r3::r11","r4::r12","r5::r13","r6::r14","r7::r15");
    }



  define (instrfield = RA)  { width = 3; pseudo = true; ref=GPR;}	
  define (instrfield = RB)  { width = 3; pseudo = true; ref=GPR;}
  define (instrfield = RT)  { width = 2; pseudo = true; ref=GPR;}
  define (instrfield = SG)  { width = 1; pseudo = true; assembler = true; value = 0; reserved = true; } // Serial Grouping
  define (instrfield = CE)  { width = 4; pseudo = true; assembler = true; value = 0; } // conditional execution
  define (instrfield = CE1) { width = 2; pseudo = true; assembler = true; value = 0;} // conditional execution
  define (instrfield = IMM) { width = 3; pseudo = true; is_signed=true;}
  define (instrfield=OPCD)  { width  = variable; 	pseudo = true; }
  define (instrfield = Enc1)   { width = 16;  pseudo = true; }
  define (instrfield = Enc2)   { width = 32;  pseudo = true; }

  //define (instrfield = Conditional) { pseudo = true; assembler = true; width = variable; }
  define (instrfield = CondExec) { pseudo = true; prefix = true; indexed = 2; value = 0; }
  define (instrfield = CondEx)   { pseudo = true; prefix = true; indexed = 2; value = 0; type=CondExec;}

  define (instrfield = VlesSize)  { width = 3; prefix = true; pseudo = true; value  = 0; };
  define (instrfield = IFT)       { indexed = 2; prefix = true; pseudo = true; value  = 0; type=CondExec; };

  define (instr = LPREFIX) {
    fields = (
              (bits(0),1),
              (bits(1),1),
              (bits(2),0),
              (bits(3),0),
              (bits(4),0),
              (bits(5),0),
              (bits(6),IFT(0)),
              (bits(7),IFT(1)),
              (bits(8),IFT(2)),
              (bits(9),IFT(3)),
              (bits(10),IFT(4)),
              (bits(11),IFT(5)),
              (bits(12),0),
              (bits(13),0),
              (bits(14),0),
              (bits(15),0));
    prefix = true;
    syntax = ("LPREFIX,  IFT => %f",IFT);  
    attrs = prefix;
    width  = 16;
  }

  define(instr = OneWord) 
    {
      fields = ((bits(15,0), Enc1),
                (bits(17,16),CondExec));
      pseudo = true;
    }
  define(instr = TwoWord) 
    {
      fields = ((bits(31,0), Enc2),
                (bits(33,32),CondExec));
      pseudo = true;
    }

  define (instr=move_family)
    {
      fields = (OPCD,RA,OP1,OP2,CE);
      blk = dalu;

      define(instr=move) {
        attrs = (type1,first);
        type = OneWord;
        fields = (
                  (bits(0),1),
                  (bits(1),1),
                  (bits(2),1),
                  (bits(3),1),
                  (bits(4),CE(0)),
                  (bits(5),CE(1)),
                  (bits(6),OP1(0),1),		
                  (bits(7),OP1(1),0),		
                  (bits(8),OP2(0),1),		
                  (bits(9),RA(0)),
                  (bits(10),RA(1)),
                  (bits(11),RA(2)),
                  (bits(12),1),
                  (bits(13),OP2(1),0),
                  (bits(14),1),
                  (bits(15),SG),
                  (bits(16),CE(2)),
                  (bits(17),CE(3))
                  );
        syntax = ("move %f,%f",RA,RT);
        alias = move_family(OPCD(OPCD),RA(RA),OP1(OP1),OP2(OP2),CE(CE));
      }

      action = {
        info (1,"CE= " << CE, ", RA= "<<RA, ", OP1= "<<OP1, ", OP2= "<<OP2 );
        GPR(RA+OP1) = 1;
        GPR(RA+OP2) = 2;
      };
    
    }


  // -------- ASSEMBLER CONFIG -----------  
  define (assembler) {
    packet_grouping = (("[","]"),"\n");
    comments = ";";
    line_comments = ";";
    line_separators = "\n";
    asm_instrtables = (prefix,type2,type1);
    disasm_instrtables = (prefix,type2,type1); 
    explicit_regs = true;
  };
}


define (core = P) {
  archs = MiniStarCore;
  instrtables = (prefix,type1,type2);
}
