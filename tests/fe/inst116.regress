======
Cores:
======
Name:  "P"
Architectural Parameters:
  Name:  Mode
  Options:  Mode32 Mode64 
  Value:  Mode32
  Const:  0
  Boolean:  0
  -------------------------------
Register Files:
  Name:  "GPR"
  Size:  32
  Prefix:  r
  Usage:  read, written
  Width:  32
  Documention:

      General purpose registers.
      
  -------------------------------
Registers:
  Name:  "XER"
  Usage:  field-read, field-written
  Width:  32
  Offset:  32
    CA[34]   
      Usage:  field-written
    OV[33]   
      Usage:  field-read, field-written
    SO[32]   
      Usage:  field-read, field-written
  Documention:

    The overflow and carry register.
    
  -------------------------------
  Name:  "pc"
  Usage:  read, written
  Width:  32
  Attributes:  cia nia
  -------------------------------
Current-instruction-address register:  pc
Next-instruction-address register:  pc
Real-address Mask:
  Initial mask:  0xffffffff (constant)
Effective-address Mask:
  Initial mask:  0xffffffff (constant)
Instruction Fields:
  OPCD: [0,5] 
        Primary opcode.
    
  RA: [11,15] 
        Field used to specify a General Purpose Register to be used as a source.
    
  RB: [16,20] [not used] 
        Field used to specify a General Purpose Register to be used as a source.
    
  RS: [6,10] [not used] 
        Field used to specify a General Purpose Register as a target.
    
  RT: [6,10] 
        Field used to specify a General Purpose Register to be used as a target.
    
  SI: [16,31] 
    Display:  dec
    Signed:  1
    Signed immediate field for arithmetic operations.
    
  XO: [21,30] [not used] 
        Extended opcode.
    
Instructions:
  Name:  addic (rank: 100)
  Width:  32
  Fields:  OPCD(12) RT RA SI
  Action:  {
     var carry = Carry ( GPR ( RA ) , SI , 0 ) ;
    GPR ( RT ) = GPR ( RA ) + SI ;
    setXerField ( false , false , true , carry ) ;
}
  Source Registers:  GPR(RA) 
  Target Registers:  GPR(RT) XER[mask 0x20000000]/p 
  Helper Functions:  setXerField 
  -------------------------------

Instruction Tables:
other:
    Mask:  0xfc000000
    12(30000000):  addic

Helper Functions:
  setXerField:
 void setXerField ( bool ov , bool so , bool ca , const bits < 32 > & carry ) {
    if ( ov ) {
        XER . OV = carry ( 0 ) ^ carry ( 1 ) ;
    }
    if ( so ) {
        XER . SO = XER . SO | XER . OV ;
    }
    if ( ca ) {
        XER . CA = carry ( 0 ) ;
    }
}
    Source Registers:  XER[mask 0xc0000000]/p? 
    Target Registers:  XER[mask 0xe0000000]/p? 
-------------------------------

