//
// Make sure that we can add and overwrite attributes from outer modifications
// to nested instructions.  The key, though, is that type differences in
// attributes shouldn't affect later attribute overwrites, e.g.  an attribute
// that's not overwritten due to a type difference won't affect anything else.
//
define (core=P) {

  attrs = (classA, classB, classC, classS, doc_hidden);	

  define (reg=PC) {
    attrs = (nia,cia);
  }

  define (regfile=GPR) {
    size = 32;
  }

  //
  // Instruction fields.
  //

  define (instrfield=OPCD) {
    """
Primary opcode.
    """;
    attrs = doc_hidden;
    bits = (0,5);
  }

  define (instrfield=XO) {
    """
Extended opcode.
    """;
    bits = (21,30);
  }

  define (instrfield=RX) { width = 5; pseudo = true; }
  define (instrfield=RY) { width = 5; pseudo = true; }
  define (instrfield=RZ) { width = 5; pseudo = true; }

  define (instrfield=RA) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RB) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RT) {
    """
Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=UI) {
    """
Unsigned immediate field for arithmetic operations.
    """;
    bits = (16,31);
  }

  define (instr=add_family) {

    fields=(RX,RY,RZ);

    define (instr=add1) {
      width = 32;
      fields=(OPCD(31),RT,RA,RB,XO(266));
      attrs = (classA("1"),classB);
      alias = add_family(RX(RT),RY(RA),RZ(RB));
    }
    
    define (instr=and2) {
      width = 32;
      fields=(OPCD(28),RT,RA,RB);
      attrs = (classA,classB);
      alias = add_family(RX(RT),RY(RA),RZ(RB));
    }  

    action = {
      GPR(RX) = GPR(RY) + GPR(RZ);
    };
    
  }

  defmod(instr=add1) {
    attrs = (classB(4),classB(20),classC(30));
  }
}
