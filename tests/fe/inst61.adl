//
// N-bit encodings
//

define (arch=minippc) {

  
  define (regfile = GPR) {
    size = 32;
  }

  define (reg = pc) {
    attrs = (cia,nia);
  }
  
  // 
  // 16-bit stuff
  //
  define (instrfield = OPCD_1) { bits = ( 0, 3); };
  define (instrfield = RA_1)   { bits = ( 4, 6); };
  define (instrfield = RB_1)   { bits = ( 8,11); };
  define (instrfield = RC_1)   { bits = (12,14); };
  define (instrfield = IMM8_1) { bits = ( 7,14); };
  define (instrfield = XOPCD_2){ bits = (15); };
  define (instr = add16) {
    fields = (OPCD_1(1),RA_1,RB_1,RC_1,XOPCD_2(0));
    width = 16;
    action = {};
  }
  define (instr = sub16) {
    fields = (OPCD_1(2),RA_1,RB_1,RC_1,XOPCD_2(0));
    width = 16;
    action = {};
  }  
  
  define (instr = mult16) {
    fields = (OPCD_1(3),RA_1,RB_1,RC_1,XOPCD_2(0));
    width = 16;
    action = {};
  } 
  
  define (instr = addi16) {
    fields = (OPCD_1(4),RA_1,IMM8_1,XOPCD_2(0));
    width = 16;
    action = {};
  }
  define (instr = subi16) {
    fields = (OPCD_1(5),RA_1,IMM8_1,XOPCD_2(0));
    width = 16;
    action = {};
  }  
  
  define (instr = multi16) {
    fields = (OPCD_1(6),RA_1,IMM8_1,XOPCD_2(0));
    width = 16;
    action = {};
  }  
  
  define (instr = ld16) {
    fields = (OPCD_1(7),RA_1,RB_1,RC_1,XOPCD_2(0));
    width = 16;
    action = {};
  }
  define (instr = st16) {
    fields = (OPCD_1(8),RA_1,RB_1,RC_1,XOPCD_2(0));
    width = 16;
    action = {};
  } 
   
  // 
  // 32-bit stuff
  //
  define (instrfield = OPCD_2) { bits = ( 0, 3); };
  define (instrfield = RA_2)   { bits = ( 4, 12); };
  define (instrfield = RB_2)   { bits = (( 13,14),(16,18)); };
  define (instrfield = RC_2)   { bits = (19,31); };
  define (instrfield = IMM16_2) { bits = (16,31); };
  
  define (instr = add32) {
    fields = (OPCD_2(1),RA_2,RB_2,RC_2,XOPCD_2(1));
    width = 32;
    action = {};
  }
  define (instr = sub32) {
    fields = (OPCD_2(2),RA_2,RB_2,RC_2,XOPCD_2(1));
    width = 32;
    action = {};
  }  
  
  define (instr = mult32) {
    fields = (OPCD_2(3),RA_2,RB_2,RC_2,XOPCD_2(1));
    width = 32;
    action = {};
  } 
  
  define (instr = addi32) {
    fields = (OPCD_2(4),RA_2,IMM16_2,XOPCD_2(1));
    width = 32;
    action = {};
  }
  define (instr = subi32) {
    fields = (OPCD_2(5),RA_2,IMM16_2,XOPCD_2(1));
    width = 32;
    action = {};
  }  
  
  define (instr = multi32) {
    fields = (OPCD_2(6),RA_2,IMM16_2,XOPCD_2(1));
    width = 32;
    action = {};
  }  
  
  define (instr = ld32) {
    fields = (OPCD_2(7),RA_2,RB_2,RC_2,XOPCD_2(1));
    width = 32;
    action = {};
  }
  define (instr = st32) {
    fields = (OPCD_2(8),RA_2,RB_2,RC_2,XOPCD_2(1));
    width = 32;
    action = {};
  }  
  
  // 48bit,64bit and 96bit stuff
  //
  define (instrfield = OPCD_3)  { bits = ( 0, 3); };
  define (instrfield = RA_3)    { bits = ( 4, 8); };
  define (instrfield = RB_3)    { bits = ( 9,14); };
  define (instrfield = RC_3)    { bits = (16,19); };
  define (instrfield = IMM32_3) { bits = ((16,32),(34,47)); };
  define (instrfield = ADDR_3)  { bits = ((17,31),(48,95));};
  define (instrfield = IMM64_3) { bits = (34,95); };
  define (instrfield = XOPCD_3)   { bits = (33); };
  
  
  define (instr = addi48) {
    fields = (OPCD_2(9),RA_3,IMM32_3);
    width = 48;
    action = {};
  } 
  
  define (instr = addi96) {
    fields = (OPCD_2(10),XOPCD_3(0),RA_3,IMM64_3);
    width = 96;
    action = {};
  }  
  define (instr = subi96) {
    fields = (OPCD_2(10),XOPCD_3(1),RA_3,IMM64_3);
    width = 96;
    action = {};
  }  
  define (instr = ld96) {
    fields = (OPCD_2(11),RA_3,RB_3,ADDR_3);
    width = 96;
    action = {};  
  }
  
  define (instr = st96) {
    fields = (OPCD_2(12),RA_3,RB_3,ADDR_3);
    width = 96;
    action = {};  
  }  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    
}

define (core=P) {
  archs=minippc;
}
