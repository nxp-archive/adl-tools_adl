======
Cores:
======
Name:  "P"
Register Files:
  Name:  "GPR"
  Size:  32
  Usage:  read, slice-written
  Width:  32
  -------------------------------
Registers:
  Name:  "CR"
  Usage:  read, slice-written
  Width:  32
  Offset:  32
  Documention:

    The condition register.
    
  -------------------------------
  Name:  "pc"
  Usage:  read, written
  Width:  32
  Attributes:  cia nia
  -------------------------------
Current-instruction-address register:  pc
Next-instruction-address register:  pc
Real-address Mask:
  Initial mask:  0xffffffff (constant)
Effective-address Mask:
  Initial mask:  0xffffffff (constant)
Instruction Fields:
  OPCD: [0,5] 
        Primary opcode.
    
  RA: [11,15] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a source.
    
  RB: [16,20] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a source.
    
  RC: [31,31] 
        Extended RC opcode.
    
  RT: [6,10] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a target.
    
  XO_X: [21,30] 
        Extended opcode for X Instruction Format.
    
Instructions:
  Name:  a (rank: 100)
  Width:  32
  Fields:  OPCD(1) RT RA RB XO_X(10) RC(1)
  Action:  {
     var m = 32 ;
     var carry = Carry ( GPR ( RA ) , GPR ( RB ) , 0 ) ;
    GPR ( RT ) ( m , 32 - 1 ) = GPR ( RA ) + GPR ( RB ) ;
    setCrField ( m , 0 , GPR ( RT ) , 0 ) ;
}
  Source Registers:  GPR(RA) GPR(RB) 
  Target Registers:  CR/p GPR(RT) 
  Helper Functions:  setCrField 
  -------------------------------
  Name:  b (rank: 100)
  Width:  32
  Fields:  OPCD(2) RT RA RB XO_X(10) RC(1)
  Action:  {
     var m = 32 ;
     var carry = Carry ( GPR ( RA ) , GPR ( RB ) , 0 ) ;
    GPR ( RT ) ( m , 32 - 1 ) = GPR ( RA ) + GPR ( RB ) ;
    setCrField ( m , 0 , GPR ( RT ) , 0 ) ;
}
  Source Registers:  GPR(RA) GPR(RB) 
  Target Registers:  CR/p GPR(RT) 
  Helper Functions:  setCrField 
  -------------------------------
  Name:  c (rank: 100)
  Width:  32
  Fields:  OPCD(3) RT RA RB XO_X(10) RC(1)
  Action:  {
     var m = 32 ;
     var carry = Carry ( GPR ( RA ) , GPR ( RB ) , 0 ) ;
    GPR ( RT ) ( m , 32 - 1 ) = GPR ( RA ) + GPR ( RB ) ;
    setCrField ( m , 0 , GPR ( RT ) , 0 ) ;
}
  Source Registers:  GPR(RA) GPR(RB) 
  Target Registers:  CR/p GPR(RT) 
  Helper Functions:  setCrField 
  -------------------------------
  Name:  d (rank: 100)
  Width:  32
  Fields:  OPCD(4) RT RA RB XO_X(10) RC(1)
  Action:  {
     var m = 32 ;
     var carry = Carry ( GPR ( RA ) , GPR ( RB ) , 0 ) ;
    GPR ( RT ) ( m , 32 - 1 ) = GPR ( RA ) + GPR ( RB ) ;
    foo ( 1 , 0 , GPR ( RT ) , 0 ) ;
}
  Source Registers:  GPR(RA) GPR(RB) 
  Target Registers:  GPR(RT) 
  Helper Functions:  foo 
  -------------------------------

Instruction Tables:
other:
    Mask:  0xfc0007ff
    67108885(4000015):  a
    134217749(8000015):  b
    201326613(c000015):  c
    268435477(10000015):  d

Helper Functions:
  foo:
 void foo ( unsigned m , const bits < 32 > & field , bits < 32 > x , bits < 32 > y ) {
    if ( m ) {
        x . signExtend ( 32 - m ) ;
        y . signExtend ( 32 - m ) ;
         bits < 4 > tmp = ( ( x . signedLT ( y ) ) ? 0x8 : 0 ) | ( ( x . signedGT ( y ) ) ? 0x4 : 0 ) | ( ( x == y ) ? 0x2 : 0 ) | 0 ;
         uint32_t cr = CR ;
         unsigned i = 4 * field . uint32 (  ) ;
        CR ( i , i + 3 ) = tmp ;
    }
}
    Source Registers:  CR? 
    Target Registers:  CR/p? 

  setCrField:
 void setCrField ( unsigned m , const bits < 32 > & field , bits < 32 > x , bits < 32 > y ) {
    if ( m ) {
        x . signExtend ( 32 - m ) ;
        y . signExtend ( 32 - m ) ;
    }
     bits < 4 > tmp = ( ( x . signedLT ( y ) ) ? 0x8 : 0 ) | ( ( x . signedGT ( y ) ) ? 0x4 : 0 ) | ( ( x == y ) ? 0x2 : 0 ) | 0 ;
     unsigned i = 4 * field . uint32 (  ) ;
    CR ( i , i + 3 ) = tmp ;
}
    Target Registers:  CR/p 
-------------------------------

