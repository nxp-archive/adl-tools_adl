======
Cores:
======
Name:  "P"
Register Files:
  Name:  "GPR"
  Size:  32
  Usage:  read, slice-written
  Width:  64
  -------------------------------
Registers:
  Name:  "ACC"
  Usage:  written, slice-read
  Width:  64
  -------------------------------
  Name:  "SPEFSCR"
  Usage:  field-read, field-written
  Width:  32
    FDBZ[21]   
    FDBZE[27]   
    FDBZH[5]   
    FDBZS[12]   
    FG[18]   
    FGH[2]   
    FINV[20]   
    FINVE[26]   
    FINVH[4]   
    FINVS[11]   
    FINXE[25]   
    FINXS[10]   
    FOVF[23]   
    FOVFE[29]   
    FOVFH[7]   
    FOVFS[14]   
    FRMC[30,31]   
    FUNF[22]   
    FUNFE[28]   
    FUNFH[6]   
    FUNFS[13]   
    FX[19]   
    FXH[3]   
    MODE[15]   
    OV[17]   
      Usage:  field-written
    OVH[1]   
      Usage:  field-written
    SOV[16]   
      Usage:  field-read, field-written
    SOVH[0]   
      Usage:  field-read, field-written
  Documention:

    The SPE status and control register.
    
  -------------------------------
  Name:  "pc"
  Usage:  read, written
  Width:  32
  Attributes:  cia nia
  -------------------------------
Current-instruction-address register:  pc
Next-instruction-address register:  pc
Real-address Mask:
  Initial mask:  0xffffffff (constant)
Effective-address Mask:
  Initial mask:  0xffffffff (constant)
Instruction Fields:
  OPCD: [0,5] 
        Primary opcode.
    
  RA: [11,15] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a source.
    
  RB: [16,20] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a source.
    
  RT: [6,10] [regfile:  GPR]
        Field used to specify a General Purpose Register to be used as a target.
    
  XO_X: [21,30] 
        Extended opcode for X Instruction Format.
    
Instructions:
  Name:  a (rank: 100)
  Width:  32
  Fields:  OPCD(1) RT RA RB XO_X(10)
  Action:  {
    evmgrp1 ( RT , RA , RB , 1 , 0 , 1 , 1 , 0 ) ;
}
  Target Registers:  GPR(RT) 
  Helper Functions:  evmgrp1 fldru64 
  -------------------------------
  Name:  b (rank: 100)
  Width:  32
  Fields:  OPCD(2) RT RA RB XO_X(10)
  Action:  {
    evmgrp1 ( RT , RA , RB , 1 , 0 , 1 , 1 , 3 ) ;
}
  Source Registers:  ACC 
  Target Registers:  ACC GPR(RT) 
  Helper Functions:  evmgrp1 fldrs64 fldru64 
  -------------------------------
  Name:  c (rank: 100)
  Width:  32
  Fields:  OPCD(3) RT RA RB XO_X(10)
  Action:  {
    evmgrp1 ( RT , RA , RB , 0 , 0 , 1 , 1 , 3 ) ;
}
  Source Registers:  ACC SPEFSCR[mask 0x80008000]/p 
  Target Registers:  ACC GPR(RT) SPEFSCR[mask 0xc000c000] 
  Helper Functions:  evmgrp1 fldrs64 fldru64 saturate2lim 
  -------------------------------

Instruction Tables:
other:
    Mask:  0xfc0007fe
    33554442(4000014):  a
    67108874(8000014):  b
    100663306(c000014):  c

Helper Functions:
  evmgrp1:
 void evmgrp1 ( uint32_t d , uint32_t a , uint32_t b , uint8_t M , uint8_t O , uint8_t F , uint8_t S , uint8_t A ) {
     uint8_t lsb = 0 , movh = 0 , movl = 0 , msb = 0 , ovh = 0 , ovl = 0 ;
     uint32_t ah = 0 , al = 0 , bh = 0 , bl = 0 , satnum = 0 ;
     uint64_t prodh = 0 , prodl = 0 , temp1 = 0 , temp2 = 0 , temp3 = 0 , temp4 = 0 , temp5 = 0 , temp6 = 0 ;
    switch ( A ) {
        case 0 : case 1 : GPR ( d ) ( 0 , 31 ) = fldru64 ( temp3 , 32 , 63 ) ;
        GPR ( d ) ( 32 , 63 ) = fldru64 ( temp4 , 32 , 63 ) ;
        if ( A == 1 ) {
            ACC = GPR ( d ) ;
        }
        break ;
        case 2 : case 3 : {
            if ( A == 2 ) {
                if ( S == 0 ) {
                    temp5 = ( ACC ( 0 , 31 ) ) . uint64 (  ) + fldru64 ( temp3 , 32 , 63 ) ;
                    temp6 = ( ACC ( 32 , 63 ) ) . uint64 (  ) + fldru64 ( temp4 , 32 , 63 ) ;
                } else if ( ( S == 1 ) || ( S == 2 ) ) {
                    temp5 = ( ACC ( 0 , 31 ) ) . int64 (  ) + fldrs64 ( temp3 , 32 , 63 ) ;
                    temp6 = ( ACC ( 32 , 63 ) ) . int64 (  ) + fldrs64 ( temp4 , 32 , 63 ) ;
                }
                satnum = 0xFFFFFFFF ;
            } else if ( A == 3 ) {
                if ( S == 0 ) {
                    temp5 = ( ACC ( 0 , 31 ) ) . uint64 (  ) + ~ fldru64 ( temp3 , 32 , 63 ) + 1 ;
                    temp6 = ( ACC ( 32 , 63 ) ) . uint64 (  ) + ~ fldru64 ( temp4 , 32 , 63 ) + 1 ;
                } else if ( ( S == 1 ) || ( S == 2 ) ) {
                    temp5 = ( ACC ( 0 , 31 ) ) . int64 (  ) + ~ fldrs64 ( temp3 , 32 , 63 ) + 1 ;
                    temp6 = ( ACC ( 32 , 63 ) ) . int64 (  ) + ~ fldrs64 ( temp4 , 32 , 63 ) + 1 ;
                }
                satnum = 0x00000000 ;
            }
            if ( M == 0 ) {
                if ( S == 0 ) {
                    ovh = fldru64 ( temp5 , 31 , 31 ) ;
                    ovl = fldru64 ( temp6 , 31 , 31 ) ;
                    GPR ( d ) ( 0 , 31 ) = saturate1lim ( ovh , satnum , fldru64 ( temp5 , 32 , 63 ) ) ;
                    GPR ( d ) ( 32 , 63 ) = saturate1lim ( ovl , satnum , fldru64 ( temp6 , 32 , 63 ) ) ;
                } else if ( ( S == 1 ) || ( S == 2 ) ) {
                    ovh = ( fldru64 ( temp5 , 31 , 31 ) ) ^ ( fldru64 ( temp5 , 32 , 32 ) ) ;
                    ovl = ( fldru64 ( temp6 , 31 , 31 ) ) ^ ( fldru64 ( temp6 , 32 , 32 ) ) ;
                    GPR ( d ) ( 0 , 31 ) = saturate2lim ( ovh , fldru64 ( temp5 , 31 , 31 ) , 0x80000000 , 0x7FFFFFFF , fldru64 ( temp5 , 32 , 63 ) ) ;
                    GPR ( d ) ( 32 , 63 ) = saturate2lim ( ovl , fldru64 ( temp6 , 31 , 31 ) , 0x80000000 , 0x7FFFFFFF , fldru64 ( temp6 , 32 , 63 ) ) ;
                }
            } else if ( M == 1 ) {
                GPR ( d ) ( 0 , 31 ) = fldru64 ( temp5 , 32 , 63 ) ;
                GPR ( d ) ( 32 , 63 ) = fldru64 ( temp6 , 32 , 63 ) ;
            }
            ACC = GPR ( d ) ;
        }
        break ;
    }
    if ( M == 0 ) {
        if ( F == 1 ) {
            SPEFSCR . OVH = movh ;
            SPEFSCR . OV = movl ;
            SPEFSCR . SOVH = SPEFSCR . SOVH | movh ;
            SPEFSCR . SOV = SPEFSCR . SOV | movl ;
            if ( ( A == 2 ) || ( A == 3 ) ) {
                SPEFSCR . OVH = movh | ovh ;
                SPEFSCR . OV = movl | ovl ;
                SPEFSCR . SOVH = SPEFSCR . SOVH | movh | ovh ;
                SPEFSCR . SOV = SPEFSCR . SOV | movl | ovl ;
            }
        } else if ( ( F == 0 ) && ( ( A == 2 ) || ( A == 3 ) ) ) {
            SPEFSCR . OVH = ovh ;
            SPEFSCR . OV = ovl ;
            SPEFSCR . SOVH = SPEFSCR . SOVH | ovh ;
            SPEFSCR . SOV = SPEFSCR . SOV | ovl ;
        }
    }
}
    Source Registers:  ACC? SPEFSCR[mask 0x80008000]/p? 
    Target Registers:  ACC? GPR(d [parm #0])? SPEFSCR[mask 0xc000c000]? 
    Helper Functions:  fldrs64 fldru64 saturate1lim saturate2lim 

  fldrs:
 int32_t fldrs ( uint32_t data , int msb , int lsb ) {
}

  fldrs64:
 int64_t fldrs64 ( uint64_t data , int msb , int lsb ) {
}

  fldru:
 uint32_t fldru ( uint32_t data , int msb , int lsb ) {
}

  fldru64:
 uint64_t fldru64 ( uint64_t data , int msb , int lsb ) {
}

  mults:
 uint32_t mults ( uint32_t a , uint32_t b ) {
}

  multsu:
 uint32_t multsu ( uint32_t a , uint32_t b ) {
}

  saturate1lim:
 uint32_t saturate1lim ( uint8_t ov , uint32_t num , uint64_t sum ) {
}

  saturate2lim:
 uint32_t saturate2lim ( uint8_t ov , uint8_t car0 , uint32_t negnum , uint32_t posnum , uint64_t sum ) {
}
-------------------------------

