//
// Simple test to make sure that we can parse a helper data structure.
//

define (arch = minippc) {

  struct FP {

    bool     _sign;
    bits<10> _exp;
    bits<52> _mant;

    FP(const bits<64> &x) :
      _sign(x.get(0)),
      _exp(x.get(1,11)),
      _mant(x.get(12,63))
    {};

    FP &operator+(const FP &x) {
      // do stuff here.
      _mant = _mant + x._mant;
      return *this;
    }

  };

  //
  // Registers.
  //

  define (reg=CIA) {
    """
Current instruction address.
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
Next instruction address.
    """;
    attrs = nia;
  }

  define (regfile=GPR) {
    """
General purpose registers.
    """;
    size = 32;
    prefix = r;
  }

  //
  // Instruction fields.
  //

  define (instrfield=OPCD) {
    """
Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO) {
    """
Extended opcode.
    """;
    bits = (21,30);
  }

  define (instrfield=RA) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RB) {
    """
Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RT) {
    """
Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }

  //
  // Instructions.
  //

  define (instr=add) {
    """
The sum GPR(RA) + GPR(RB) is placed into RD.

The add instruction is preferred for additions because it sets few status bits.
    """;
    fields=(OPCD(31),RT,RA,RB,XO(266));
    action = {
      GPR(RT) = GPR(RA) + GPR(RB);

      FP x(GPR(RA));
      FP y(GPR(RB));

      FP z = x + y;
    };
  }

}

define (core = P) {
  archs = minippc;
}
