//
// This tests various types of loops in order to make sure that we'll catch
// various situations which refer to a range of registers being used.
//

define (arch = minippc) {

  //
  // Registers.
  //

  define (reg=CIA) {
    """
    Current instruction address.
    """;
    attrs = cia;
  }

  define (reg=NIA) {
    """
    Next instruction address.
    """;
    attrs = nia;
  }

  define (reg=CR) {
    """
    The condition register.
    """;
  }

  define (regfile=GPR) {
    """
    General purpose registers.
    """;
    size = 32;
  }

  //
  // Instruction fields.
  //

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=RA) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
  }

  define (instrfield=RT) {
    """
    Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
  }

  define (instrfield=SI) {
    """
    Signed immediate field for arithmetic operations.
    """;
    bits = (16,31);
  }

  define (instrfield=D) {
    """
    Signed immediate field for addressing.
    """;
    bits = (16,31);\
    display = dec;
    is_signed = true;
  }

  //
  // Instructions.
  //
  
  // Example of referencing a register file w/o a simple instruction field as an index.
  define (instr="a") {
    fields=(OPCD(46),RT,RA,D);
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);
      var EA = b + D;      
      int r = RT.uint32();
      do {
        GPR(r) = Mem(EA,4);
        r = r + 1;
        EA = EA + 4;
      } while (r <= 31);
    };
  }

  define (instr="b") {
    fields=(OPCD(47),RT,RA,D);
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);
      var EA = b + D;      
      int r = 31;
      do {
        GPR(r) = Mem(EA,4);
        --r;
        EA = EA + 4;
      } while (r >= RT);
    };
  }

  define (instr="c") {
    fields=(OPCD(48),RT,RA,D);
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);
      var EA = b + D;      
      int r = RT.uint32();
      while (r <= 31) {
        GPR(r++) = Mem(EA,4);
        EA = EA + 4;
      }
    };
  }

  define (instr="d") {
    fields=(OPCD(49),RT,RA,D);
    action = {
      var b = (RA == 0) ? 0 : GPR(RA);
      var EA = b + D;      
      for (int r = RT.uint32(); r != 32; r += 1) {
        GPR(r) = Mem(EA,4);
        EA = EA + 4;
      }
    };
  }

}

define (core = P) {
  archs = (minippc);
}
