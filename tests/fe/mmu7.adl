//
// Makes sure that we catch the situation where the user tries to share
// an MMU lookup that doesn't exist or tries to share a lookup that's
// not identical.
//
define (arch=foo) {

  define (reg = pc) {
    attrs = (cia,nia);
  }

  define (reg=MSR) {
    define (field=PR) {
      bits = 10;
    }
  }

  define (reg=HDBCR0) {
    define (field=MMU_ENABLE) {
      bits = 0;
    }
  }

  define (reg=DEAR) { }

  define (reg=PID0) { }

  define (reg=PID1) { }

  define (exception=ITlbMiss) {
    action = func() { };
  }

  define (exception=DTlbMiss) {
    action = func() { };
  }

  define (exception=ProtectionFault) {
    action = func() { };
  }

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  // Make sure that we catch the case where we reference an
  // unknown lookup.
  define (instr=tlbwe) {
    fields=(OPCD(10));
    action = {
      Mmu(TlbFoo,0,0) = TlbCam();
    };
  }


  define (mmu) {

    define(lookup=TlbCam) {
      define (wayfield=x) {
        bits = 2;
        reset = 2;
      }
      define (wayfield=y) {
        bits = 3;
        reset = 1;
      }
      define (wayfield=TID) {
        bits = 6;
      }
      define (wayfield=SIZE) {
        bits = 6;
      }
      define (wayfield=RPN) {
        bits = 24;
      }
      define (wayfield=EPN) {
        """
        Example documentation string for an MMU field.
        """;
        bits = 24;
      }

      define (array) {
        entries = 16;
      }
      
      test = Compare(TID,PID0,PID1);
      test = AddrComp(EPN);
      size = SIZE;
      realpage = RPN;
      
    }

  }

}

define(arch=foo2) {
  defmod(mmu) {
    defmod(lookup=TlbCam) {
      define (wayfield=a) {
        bits = 5;
      }
      define (wayfield=y) {
        bits = 5;
      }
    }
  }
}

define (sys=P) {
  define (core=Thread0) {
    archs=foo;
  }
  define (core=Thread1) {
    archs=(foo,foo2);
  }

  Thread0 t0;
  Thread1 t1;
  
  define (shared) {
    regs = (PID0,PID1);
    mmulookups = (TlbCam,TlbFoo);
  }
}
