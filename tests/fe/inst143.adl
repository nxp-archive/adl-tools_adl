//
// This makes sure that we handle the special case where a field's syntax string
// results in enumerations being created.  If the syntax string specifies table
// references, then we convert it to a list of enumerations.
//
// In this case, we're checking for various error conditions.
//
define (arch = miniSC){

  bit_endianness = little;

  attrs = (one_word);

  define (regfile=D) {
    size   = 16;
    width  = 40;
    prefix = d;
  }
  
  define (reg=PC) {
    attrs = (nia,cia);	
    serial = true;
  }

  define (instrfield = DaDb1) { 
    width = 5; 	// Number of  input  bits 
    size = 5;   // Necessary so that the default width isn't taken from the
                // nested fields.
    ref = D; 
    pseudo = true;

    table = ((0,1,2),
             (0,7,15)
             ); 

    // We don't allow mixing of table references and nested fields.
    syntax = ("%f:%f:%f",DaDb1(0),DaDb1(1),Db);
	
    define(instrfield=Da) {
      width = 4;
      fields = (DaDb1(0));
    }	
    define(instrfield=Db) {
      width = 4;
      fields = (DaDb1(1));
    }	
    define(instrfield=Dc) {
      width = 4;
      // Unknown field.
      fields = (DaDb(2));
    }	
  }

  define (instrfield = DaDb2) { 
    width = 5; 	// Number of  input  bits 
    size = 5;   // Necessary so that the default width isn't taken from the
                // nested fields.
    ref = D; 
    pseudo = true;

    table = ((0,1,2),
             (0,7,15)
             ); 

    // Table indices are too high.
    syntax = ("%f:%f:%f",DaDb2(0),DaDb2(1),DaDb2(3));
	
    define(instrfield=Da) {
      width = 4;
      fields = (DaDb2(0));
    }	
    define(instrfield=Db) {
      width = 4;
      fields = (DaDb2(1));
    }	
    define(instrfield=Dc) {
      width = 4;
      fields = (DaDb2(5));
    }	
  }
  
  define (instrfield=FFF) {
    width = 4;	
    ref = D;
    pseudo = true;
  }

  define (instrfield=OPCD) {
    width  = variable; 
    pseudo = true;
  }


  define(instr=add) { 
    fields =((bits(4,0),DaDb(4,0)),  
             (bits(6,5),0x2),  
             (bits(9,7),FFF(2,0)),
             (bits(13,10),0xB),
             (bits(14),reserved),
             (bits(15),b0),
             (bits(16),FFF(3)),
             (bits(18,17),reserved),
             (bits(31,19),0x0));
	  
    attrs = one_word;
    syntax = ("add %f,%f",DaDb,FFF);
    width = variable;
    action = {
      D(DaDb.Da) = DaDb.Da;
      D(DaDb.Db) = DaDb.Db;	
      D(DaDb.Dc) = DaDb.Dc;	
      D(FFF) = DaDb.Da + DaDb.Db + DaDb.Dc;
    };
  }

  define (instr = stop) {
    attrs = one_word;
    fields = ((bits(31,0),0x12f));
    syntax = ("stop");
    action = {
      halt();
    };
  }

}; 

define (core = SC)
{
  instrtables = (one_word);
  archs = miniSC;
}

