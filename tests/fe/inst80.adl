//
// This makes sure that a register-file slice write, where the target index
// isn't specific, is still seen as a partial write.
//

#define regSize 32

define (arch=minippc) {

  define (instrfield=OPCD) {
    """
    Primary opcode.
    """;
    bits = (0,5);
  }

  define (instrfield=XO_X) {
    """
    Extended opcode for X Instruction Format.
    """;
    bits = (21,30);
  }   

  define (instrfield=RC) {
    """
    Extended RC opcode.
    """;
    bits = (31,31);
  }

  define (instrfield=RA) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (11,15);
    ref = GPR;
    type = regfile;
  }
  
  define (instrfield=RB) {
    """
    Field used to specify a General Purpose Register to be used as a source.
    """;
    bits = (16,20);
    ref = GPR;
    type = regfile;
  }

  define (instrfield=RT) {
    """
    Field used to specify a General Purpose Register to be used as a target.
    """;
    bits = (6,10);
    ref = GPR;
    type = regfile;
  }

  define (reg=CR) {
    // TODO - define all SPR register fields
    """
    The condition register.
    """;
    width = 32;
    offset = 32;
  }
 
  define (instr=a) {
    fields=(OPCD(1),RT,RA,RB,XO_X(10),RC(1));
    action = {
      int i = RT.uint32()+1;
      GPR(i)(32,63) = GPR(RA) + GPR(RB);
    };
  }

  define (regfile=GPR) {
    size = 32;
  }

  define (reg = pc) {
    attrs = (cia,nia);
  }

}

define (core=P) {
  archs=minippc;
}
